<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Go各时间字符串的解析</title>
    <link href="/2022/09/04/Go%E5%90%84%E6%97%B6%E9%97%B4%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%A7%A3%E6%9E%90/"/>
    <url>/2022/09/04/Go%E5%90%84%E6%97%B6%E9%97%B4%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h3 id="Go-中时间格式化的模板"><a href="#Go-中时间格式化的模板" class="headerlink" title="Go 中时间格式化的模板"></a><code>Go</code> 中时间格式化的模板</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> (<br>    <span class="hljs-variable constant_">ANSIC</span>       = <span class="hljs-string">&quot;Mon Jan _2 15:04:05 2006&quot;</span><br>    <span class="hljs-title class_">UnixDate</span>    = <span class="hljs-string">&quot;Mon Jan _2 15:04:05 MST 2006&quot;</span><br>    <span class="hljs-title class_">RubyDate</span>    = <span class="hljs-string">&quot;Mon Jan 02 15:04:05 -0700 2006&quot;</span><br>    <span class="hljs-title class_">RFC822</span>      = <span class="hljs-string">&quot;02 Jan 06 15:04 MST&quot;</span><br>    <span class="hljs-title class_">RFC822Z</span>     = <span class="hljs-string">&quot;02 Jan 06 15:04 -0700&quot;</span> <span class="hljs-comment">// RFC822 with numeric zone</span><br>    <span class="hljs-title class_">RFC850</span>      = <span class="hljs-string">&quot;Monday, 02-Jan-06 15:04:05 MST&quot;</span><br>    <span class="hljs-title class_">RFC1123</span>     = <span class="hljs-string">&quot;Mon, 02 Jan 2006 15:04:05 MST&quot;</span><br>    <span class="hljs-title class_">RFC1123Z</span>    = <span class="hljs-string">&quot;Mon, 02 Jan 2006 15:04:05 -0700&quot;</span> <span class="hljs-comment">// RFC1123 with numeric zone</span><br>    <span class="hljs-title class_">RFC3339</span>     = <span class="hljs-string">&quot;2006-01-02T15:04:05Z07:00&quot;</span><br>    <span class="hljs-title class_">RFC3339Nano</span> = <span class="hljs-string">&quot;2006-01-02T15:04:05.999999999Z07:00&quot;</span><br>    <span class="hljs-title class_">Kitchen</span>     = <span class="hljs-string">&quot;3:04PM&quot;</span><br>    <span class="hljs-comment">// Handy time stamps.</span><br>    <span class="hljs-title class_">Stamp</span>      = <span class="hljs-string">&quot;Jan _2 15:04:05&quot;</span><br>    <span class="hljs-title class_">StampMilli</span> = <span class="hljs-string">&quot;Jan _2 15:04:05.000&quot;</span><br>    <span class="hljs-title class_">StampMicro</span> = <span class="hljs-string">&quot;Jan _2 15:04:05.000000&quot;</span><br>    <span class="hljs-title class_">StampNano</span>  = <span class="hljs-string">&quot;Jan _2 15:04:05.000000000&quot;</span><br>)<br></code></pre></td></tr></table></figure><p>上面这些是官方定义的<code>layout</code>常量，我们自己也可以定义，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span> <br><span class="hljs-string">&quot;2006-01-02&quot;</span><br><span class="hljs-string">&quot;2006-01-02 15:04&quot;</span><br><span class="hljs-string">&quot;2006-01-02T15:04&quot;</span> <span class="hljs-comment">//js和html中多用这种形式</span><br><span class="hljs-string">&quot;2006-01-02 15:03:04 -0700 MST&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Format-格式化为字符串"><a href="#Format-格式化为字符串" class="headerlink" title="Format 格式化为字符串"></a><code>Format</code> 格式化为字符串</h3><p><code>format</code> 的使用对象是一个 <code>time.Time</code> 对象，可以使用官方或者自己定义的布局进行格式化的输出，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">now := time.<span class="hljs-title class_">Now</span>()<br>now.<span class="hljs-title class_">Format</span>(<span class="hljs-string">&quot;2006-01-02 15:04:05&quot;</span>) <span class="hljs-comment">//输出 2020-07-21 10:12:13</span><br></code></pre></td></tr></table></figure><h3 id="Parse-字符串解析为时间戳或int64"><a href="#Parse-字符串解析为时间戳或int64" class="headerlink" title="Parse 字符串解析为时间戳或int64"></a><code>Parse</code> 字符串解析为时间戳或<code>int64</code></h3><h4 id="Parse-方法"><a href="#Parse-方法" class="headerlink" title="Parse 方法"></a><code>Parse</code> 方法</h4><p>需要两个参数，第一个是布局，第二个是字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Parse解析格式化的字符串并返回它表示的时间值。</span><br><span class="hljs-comment">//布局通过显示参考时间（定义为2006年1月2日星期一1:04:05 -0700</span><br><span class="hljs-comment">//如果它是值，则将被解释；它作为一个例子</span><br><span class="hljs-comment">//输入格式。然后将对输入字符串。预定义的布局ANSIC，UnixDate，RFC3339等描述了参考时间的标准和便捷表示形式。有关格式和参考时间的定义的更多信息，请参见ANSIC文档以及此程序包定义的其他常量。</span><br><span class="hljs-comment">//解析时间偏移为-0700的时间时，如果偏移量对应于当前位置（本地）使用的时区，则Parse在返回的时间中使用该位置和时区。否则，它将时间记录为处于伪造位置，时间固定在给定的区域偏移量。</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//另外，Time.Format的可执行示例详细说明了布局字符串的工作原理，是一个很好的参考。</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//值中省略的元素假定为零，或者</span><br><span class="hljs-comment">//零不可能为1，因此解析“ 3:04 pm”将返回时间</span><br><span class="hljs-comment">//对应于1月1日，0，15:04:00 UTC（请注意，因为年份是</span><br><span class="hljs-comment">//0，此时间早于零时间）。</span><br><span class="hljs-comment">//年份必须在0000..9999的范围内。将检查星期几的语法，否则将忽略该语法。</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//解析带有MST等区域缩写的时间时，如果该区域缩写在当前位置具有已定义的偏移量，则使用该偏移量。</span><br><span class="hljs-comment">//区域缩写“ UTC”被识别为UTC，与位置无关。</span><br><span class="hljs-comment">//如果未知区域缩写，则Parse将时间记录为位于指定位置的伪造位置，并具有零偏移量。</span><br><span class="hljs-comment">//此选择意味着可以使用相同的布局无损地解析和重新格式化这样的时间，但是表示中使用的确切瞬间将因实际区域偏移而有所不同。为避免此类问题，请首选使用数字区域偏移量的时间布局或使用ParseInLocation。</span><br><br>func <span class="hljs-title class_">Parse</span>(layout, value string) (<span class="hljs-title class_">Time</span>, error) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">parse</span>(layout, value, <span class="hljs-variable constant_">UTC</span>, <span class="hljs-title class_">Local</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>使用例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">eg, err := time.<span class="hljs-title class_">Parse</span>(<span class="hljs-string">&quot;2006-01-02 15:04:05 -0700 MST&quot;</span>, <span class="hljs-string">&quot;2019-08-29 16:48:21 +0800 CST&quot;</span>)<br><span class="hljs-comment">//输出结果为time.Time格式 使用 format格式化后为 2019-08-29 16:48:21</span><br></code></pre></td></tr></table></figure><h4 id="ParseInLocation"><a href="#ParseInLocation" class="headerlink" title="ParseInLocation"></a><code>ParseInLocation</code></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//ParseInLocation类似于Parse，但在两个重要方面有所不同。</span><br><span class="hljs-comment">//首先，在没有时区信息的情况下，Parse将时间解释为UTC；</span><br><span class="hljs-comment">//ParseInLocation将时间解释为给定位置。</span><br><span class="hljs-comment">//第二，当给定区域偏移量或缩写时，Parse尝试将其与本地位置进行匹配； ParseInLocation使用给定的位置</span><br><br>func <span class="hljs-title class_">ParseInLocation</span>(layout, value string, loc *<span class="hljs-title class_">Location</span>) (<span class="hljs-title class_">Time</span>, error) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">parse</span>(layout, value, loc, loc)<br>&#125;<br></code></pre></td></tr></table></figure><p>参数： 1. 布局 2. 字符串 3. 时区</p><p>获取本地时区可以使用 <code>time.Local</code></p><p>使用例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">onlineAt, err := time.<span class="hljs-title class_">ParseInLocation</span>(<span class="hljs-string">&quot;2006-01-02T15:04&quot;</span>, <span class="hljs-string">&quot;2020-01-02T15:04&quot;</span>), time.<span class="hljs-property">Local</span>)<br></code></pre></td></tr></table></figure><h4 id="解析为int64"><a href="#解析为int64" class="headerlink" title="解析为int64"></a>解析为<code>int64</code></h4><p>对于 <code>time.Time</code> 对象，可以使用<code>.Unix()</code> 方法转为 <code>int64</code>，如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js">eg.<span class="hljs-title class_">Unix</span>() <span class="hljs-comment">//默认使用 UTC时区 </span><br>eg.<span class="hljs-title class_">Local</span>().<span class="hljs-title class_">Unix</span>() <span class="hljs-comment">//返回本地时区的时间戳 int64</span><br></code></pre></td></tr></table></figure><p>参考文章： <a href="https://www.jianshu.com/p/f809b06144f7">golang的时区和神奇的time.Parse</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>版本号命名规范</title>
    <link href="/2022/08/21/%E7%89%88%E6%9C%AC%E5%8F%B7%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/"/>
    <url>/2022/08/21/%E7%89%88%E6%9C%AC%E5%8F%B7%E5%91%BD%E5%90%8D%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p>版本号的格式为 X.Y.Z(又称 Major.Minor.Patch)，递增的规则为：</p><ul><li>X 表示主版本号，当 API 的兼容性变化时，X 需递增。</li><li>Y 表示次版本号，当增加功能时(不影响 API 的兼容性)，Y 需递增。</li><li>Z 表示修订号，当做 Bug 修复时(不影响 API 的兼容性)，Z 需递增。</li></ul><p>详细的规则如下：</p><ul><li>X, Y, Z 必须为非负整数，且不得包含前导零，必须按数值递增，如 1.9.0 -&gt; 1.10.0 -&gt; 1.11.0</li><li>0.Y.Z 的版本号表明软件处于初始开发阶段，意味着 API 可能不稳定；1.0.0 表明版本已有稳定的 API。</li><li>当 API 的兼容性变化时，X 必须递增，Y 和 Z 同时设置为 0；当新增功能(不影响 API 的兼容性)或者 API 被标记为 Deprecated 时，Y 必须递增，同时 Z 设置为 0；当进行 bug fix 时，Z 必须递增。</li><li>先行版本号(Pre-release)意味该版本不稳定，可能存在兼容性问题，其格式为：X.Y.Z.[a-c][正整数]，如 1.0.0.a1，1.0.0.b99，1.0.0.c1000。</li><li>开发版本号常用于 CI-CD，格式为 X.Y.Z.dev[正整数]，如 1.0.1.dev4。</li><li>版本号的排序规则为依次比较主版本号、次版本号和修订号的数值，如 1.0.0 &lt; 1.0.1 &lt; 1.1.1 &lt; 2.0.0；对于先行版本号和开发版本号，有：1.0.0.a100 &lt; 1.0.0，2.1.0.dev3 &lt; 2.1.0；当存在字母时，以 ASCII 的排序来比较，如 1.0.0.a1 &lt; 1.0.0.b1。</li><li>注意：版本一经发布，不得修改其内容，任何修改必须在新版本发布！</li></ul><p>一些修饰的词</p><ul><li><code>alpha</code>：内部版本</li><li><code>beta</code>：测试版</li><li><code>demo</code>：演示版</li><li><code>enhance</code>：增强版</li><li><code>free</code>：自由版</li><li><code>full version</code>：完整版，即正式版</li><li><code>lts</code>：长期维护版本</li><li><code>release</code>：发行版</li><li><code>rc</code>：即将作为正式版发布</li><li><code>standard</code>：标准版</li><li><code>ultimate</code>：旗舰版</li><li><code>upgrade</code>：升级版</li></ul><p>原文地址： <a href="https://www.jianshu.com/p/c675121a8bfd">https://www.jianshu.com/p/c675121a8bfd</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown基本语法</title>
    <link href="/2022/08/19/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <url>/2022/08/19/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><p>相比WYSIWYG编辑器</p><p><strong>优点：</strong><br>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可</p><p><strong>缺点：</strong><br>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。</p><p>还好，简书是支持Markdown编辑模式的。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">开启方式：设置-&gt;默认编辑器-&gt;Markdown编辑器<br></code></pre></td></tr></table></figure><h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p><p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p>示例：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 这是一级标题<br>## 这是二级标题<br>### 这是三级标题<br>#### 这是四级标题<br>##### 这是五级标题<br>###### 这是六级标题<br></code></pre></td></tr></table></figure><p>效果如下：</p><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr><h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul><li><h5 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h5></li></ul><p>要加粗的文字左右分别用两个*号包起来</p><ul><li><h5 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h5></li></ul><p>要倾斜的文字左右分别用一个*号包起来</p><ul><li><h5 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h5></li></ul><p>要倾斜和加粗的文字左右分别用三个*号包起来</p><ul><li><h5 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h5></li></ul><p>要加删除线的文字左右分别用两个~~号包起来</p><p>示例：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-strong">**这是加粗的文字**</span><br><span class="hljs-emphasis">*这是倾斜的文字*</span>`<br><span class="hljs-strong">**<span class="hljs-emphasis">*这是斜体加粗的文字*</span>**</span><br>~~这是加删除线的文字~~<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em><br><em><strong>这是斜体加粗的文字</strong></em><br><del>这是加删除线的文字</del></p><hr><h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">这是引用的内容</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;这是引用的内容</span><br><span class="hljs-meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p>三个或者三个以上的 - 或者 * 都可以。</p><p>示例：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">---</span><br><span class="hljs-section">----</span><br><span class="hljs-bullet">***</span><br><span class="hljs-bullet"></span><span class="hljs-strong">*****</span><br></code></pre></td></tr></table></figure><p>效果如下：<br>可以看到，显示效果是一样的。</p><hr><hr><hr><hr><h1 id="五、图片"><a href="#五、图片" class="headerlink" title="五、图片"></a>五、图片</h1><p>语法：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">![图片alt](图片地址 <span class="hljs-string">&#x27;&#x27;</span>图片titl<span class="hljs-string">e&#x27;&#x27;</span>)<br><br>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。<br>图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">![blockchain](https:<span class="hljs-regexp">//</span>ss0.bdstatic.com<span class="hljs-regexp">/70cFvHSh_Q1YnxGkpoWK1HF6hhy/i</span>t/<br>u=<span class="hljs-number">702257389</span>,<span class="hljs-number">1274025419</span>&amp;fm=<span class="hljs-number">27</span>&amp;gp=<span class="hljs-number">0</span>.jpg <span class="hljs-string">&quot;区块链&quot;</span>)<br></code></pre></td></tr></table></figure><p>效果如下：</p><p>blockchain</p><p><strong>上传本地图片直接点击导航栏的图片标志，选择图片即可</strong></p><p>markdown格式追求的是简单、多平台统一。那么图片的存储就是一个问题，需要用图床，提供统一的外链，这样就不用在不同的平台去处理图片的问题了。才能做到书写一次，各处使用。<br>关于图床的选择我写了一篇文章，对网上存在的各种方法做了总结，需要的朋友可以看看。<a href="https://www.jianshu.com/p/ea1eb11db63f">markdown图床</a></p><h1 id="六、超链接"><a href="#六、超链接" class="headerlink" title="六、超链接"></a>六、超链接</h1><p>语法：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos">[超链接名](超链接地址 &quot;超链接<span class="hljs-built_in">title</span>&quot;)<br><span class="hljs-built_in">title</span>可加可不加<br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-attr">[简书]</span>(<span class="hljs-attribute">http</span>:<span class="hljs-comment">//jianshu.com)</span><br>[百度](<span class="hljs-attribute">http</span>:<span class="hljs-comment">//baidu.com)</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><p><a href="https://www.jianshu.com/u/1f5ac0cf6a8b">简书</a><br><a href="https://links.jianshu.com/go?to=http://baidu.com">百度</a></p><p>注：Markdown本身语法不支持链接在新页面中打开，貌似简书做了处理，是可以的。别的平台可能就不行了，如果想要在新页面中打开的话可以用html语言的a标签代替。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;超链接地址&quot;</span> <span class="hljs-attribute">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;超链接名&lt;/a&gt;<br><br>示例<br>&lt;a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://www.jianshu.com/u/1f5ac0cf6a8b&quot;</span> <span class="hljs-attribute">target</span>=<span class="hljs-string">&quot;_blank&quot;</span>&gt;简书&lt;/a&gt;<br></code></pre></td></tr></table></figure><hr><h1 id="七、列表"><a href="#七、列表" class="headerlink" title="七、列表"></a>七、列表</h1><h5 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h5><p>语法：<br>无序列表用 - + * 任何一种都可以</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> 列表内容<br><span class="hljs-bullet">+</span> 列表内容<br><span class="hljs-bullet">*</span> 列表内容<br><br>注意：- + <span class="hljs-emphasis">* 跟内容之间都要有一个空格</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><ul><li>列表内容</li><li>列表内容</li><li>列表内容</li></ul><h5 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h5><p>语法：<br>数字加点</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 列表内容<br><span class="hljs-bullet">2.</span> 列表内容<br><span class="hljs-bullet">3.</span> 列表内容<br><br>注意：序号跟内容之间要有空格<br></code></pre></td></tr></table></figure><p>效果如下：</p><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><h5 id="列表嵌套"><a href="#列表嵌套" class="headerlink" title="列表嵌套"></a>列表嵌套</h5><p><strong>上一级和下一级之间敲三个空格即可</strong></p><ul><li><p>一级无序列表内容</p><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul></li><li><p>一级无序列表内容</p><ol><li>二级有序列表内容</li><li>二级有序列表内容</li><li>二级有序列表内容</li></ol></li></ul><ol><li>一级有序列表内容</li></ol><ul><li>二级无序列表内容</li><li>二级无序列表内容</li><li>二级无序列表内容</li></ul><ol start="2"><li><p>一级有序列表内容</p></li><li><p>二级有序列表内容</p></li><li><p>二级有序列表内容</p></li><li><p>二级有序列表内容</p></li></ol><hr><h1 id="八、表格"><a href="#八、表格" class="headerlink" title="八、表格"></a>八、表格</h1><p>语法：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">表头|<span class="hljs-string">表头</span>|<span class="hljs-string">表头</span><br><span class="hljs-string">---</span>|<span class="hljs-string">:--:</span>|<span class="hljs-string">---:</span><br><span class="hljs-string">内容</span>|<span class="hljs-string">内容</span>|<span class="hljs-string">内容</span><br><span class="hljs-string">内容</span>|<span class="hljs-string">内容</span>|<span class="hljs-string">内容</span><br><span class="hljs-string"></span><br><span class="hljs-string">第二行分割表头和内容。</span><br><span class="hljs-string">- 有一个就行，为了对齐，多加了几个</span><br><span class="hljs-string">文字默认居左</span><br><span class="hljs-string">-两边加：表示文字居中</span><br><span class="hljs-string">-右边加：表示文字居右</span><br><span class="hljs-string">注：原生的语法两边都要用 </span>|<span class="hljs-string"> 包起来。此处省略</span><br></code></pre></td></tr></table></figure><p>示例：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">姓名|<span class="hljs-string">技能</span>|<span class="hljs-string">排行</span><br><span class="hljs-string">--</span>|<span class="hljs-string">:--:</span>|<span class="hljs-string">--:</span><br><span class="hljs-string">刘备</span>|<span class="hljs-string">哭</span>|<span class="hljs-string">大哥</span><br><span class="hljs-string">关羽</span>|<span class="hljs-string">打</span>|<span class="hljs-string">二哥</span><br><span class="hljs-string">张飞</span>|<span class="hljs-string">骂</span>|<span class="hljs-string">三弟</span><br></code></pre></td></tr></table></figure><p>效果如下：</p><table><thead><tr><th>姓名</th><th>技能</th><th>排行</th></tr></thead><tbody><tr><td>刘备</td><td>哭</td><td>大哥</td></tr><tr><td>关羽</td><td>打</td><td>二哥</td></tr><tr><td>张飞</td><td>骂</td><td>三弟</td></tr></tbody></table><h1 id="九、代码"><a href="#九、代码" class="headerlink" title="九、代码"></a>九、代码</h1><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">`代码内容`</span><br></code></pre></td></tr></table></figure><p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">(```)  代码...  代码...  代码...(```)<br></code></pre></td></tr></table></figure><blockquote><p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p></blockquote><p>示例：</p><p>单行代码</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">`<span class="hljs-keyword">create</span> <span class="hljs-keyword">database</span> hero;`<br></code></pre></td></tr></table></figure><p>代码块</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">(```)<br>    function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>         echo <span class="hljs-string">&quot;这是一句非常牛逼的代码&quot;</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br>(```)<br></code></pre></td></tr></table></figure><p>效果如下：</p><p>单行代码</p><p><code>create database hero;</code></p><p>代码块</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">function <span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>&#123;<br>  echo <span class="hljs-string">&quot;这是一句非常牛逼的代码&quot;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h1 id="十、流程图"><a href="#十、流程图" class="headerlink" title="十、流程图"></a>十、流程图</h1><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sml">```flow<br>st=&gt;start: 开始<br><span class="hljs-keyword">op</span>=&gt;operation: <span class="hljs-type">My</span> <span class="hljs-type">Operation</span><br>cond=&gt;condition: <span class="hljs-type">Yes</span> or <span class="hljs-type">No</span>?<br>e=&gt;<span class="hljs-keyword">end</span><br>st-&gt;<span class="hljs-keyword">op</span>-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;<span class="hljs-keyword">op</span><br>&amp;```<br></code></pre></td></tr></table></figure><p>链接: <a href="https://www.jianshu.com/p/191d1e21f7ed/">https://www.jianshu.com/p/191d1e21f7ed/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>解决浏览器跨域限制方案之JSONP</title>
    <link href="/2022/08/10/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F%E9%99%90%E5%88%B6%E6%96%B9%E6%A1%88%E4%B9%8BJSONP/"/>
    <url>/2022/08/10/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E8%B7%A8%E5%9F%9F%E9%99%90%E5%88%B6%E6%96%B9%E6%A1%88%E4%B9%8BJSONP/</url>
    
    <content type="html"><![CDATA[<h2 id="一-什么是JSONP"><a href="#一-什么是JSONP" class="headerlink" title="一.什么是JSONP"></a>一.什么是JSONP</h2><p><img src="https://ask.qcloudimg.com/http-save/yehe-2832581/twqcwh2u5x.gif"></p><p>JSONP即：JSON with Padding，是一种解决因浏览器跨域限制不允许访问跨域资源的方法。<br> JSONP是一个非官方的协议，它允许在<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>端返回<a href="https://cloud.tencent.com/product/sms?from=10680">javascript</a>标签到浏览器，在浏览器端通过调用javascript函数的形式实现访问跨域资源或数据。</p><h2 id="二-JSONP和JSON的关系"><a href="#二-JSONP和JSON的关系" class="headerlink" title="二.JSONP和JSON的关系"></a>二.JSONP和JSON的关系</h2><p>JSONP是一种<u>解决因浏览器跨域限制不允许访问跨域资源的方法</u>；而JSON是一种<u>数据格式</u>，与xml类似。<br> 虽然二者在字面上都含有关键字“JSON”，但实际上他们之间没有任何关系。<br> 通过JSONP获取到的跨域数据是javascript对象，而非JSON对象，所以避免了数据解析这个过程。</p><h2 id="三-JSONP的原理"><a href="#三-JSONP的原理" class="headerlink" title="三.JSONP的原理"></a>三.JSONP的原理</h2><p>本质上来讲，JSONP解决访问跨域资源的方法，与直接使用<code>&lt;script&gt;</code>标签引用资源是一样的。<br> 原因在于：使用JSONP访问跨域数据时，就是需要在DOM中动态创建<code>&lt;script&gt;</code>标签，并设置src属性访问指定资源。<br> 差别在于：通过JSONP获取到的返回数据是一个函数调用，数据以参数的形式传递给函数；而<code>&lt;script&gt;</code>标签返回的是引用的资源内容。</p><h2 id="四-实战示例"><a href="#四-实战示例" class="headerlink" title="四.实战示例"></a>四.实战示例</h2><h3 id="1-前端代码"><a href="#1-前端代码" class="headerlink" title="1.前端代码"></a>1.前端代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;%@ page language=<span class="hljs-string">&quot;java&quot;</span> contentType=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="hljs-string">&quot;UTF-8&quot;</span>%&gt;<br>&lt;!<span class="hljs-variable constant_">DOCTYPE</span> html <span class="hljs-variable constant_">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>验证使用JSONP方式发送跨域请求<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;发送请求&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;ajaxJsonp()&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// 前端通过动态创建javascript标签的方式发送请求</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">ajaxJsonp</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> url = <span class="hljs-string">&quot;http://localhost:8081/jsonp?callback=jsonpcall&quot;</span>;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> script = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;script&#x27;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        script.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&quot;type&quot;</span>,<span class="hljs-string">&quot;text/javascript&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        script.<span class="hljs-property">src</span> = url;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(script);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-comment">// jsonp返回数据时调用的函数,数据以参数形式传递</span></span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">jsonpcall</span>(<span class="hljs-params">data</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;do response jsonp data&quot;</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="2-服务端代码"><a href="#2-服务端代码" class="headerlink" title="2.服务端代码"></a>2.服务端代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/** * 使用JSONP方式处理跨域GET请求 * <span class="hljs-doctag">@param</span> req * <span class="hljs-doctag">@param</span> resp * <span class="hljs-doctag">@param</span> callback 回调函数名称 * <span class="hljs-doctag">@return</span> */</span><br>@<span class="hljs-title class_">RequestMapping</span>(value = <span class="hljs-string">&quot;/jsonp&quot;</span>, method = <span class="hljs-title class_">RequestMethod</span>.<span class="hljs-property">GET</span>)<br>@<span class="hljs-title class_">ResponseBody</span><br>public <span class="hljs-title class_">Object</span> <span class="hljs-title function_">testAjaxJsonp</span>(<span class="hljs-params">HttpServletRequest req, HttpServletResponse resp,</span><br><span class="hljs-params">        @RequestParam(<span class="hljs-string">&quot;callback&quot;</span>) <span class="hljs-built_in">String</span> callback</span>) &#123;<br>    <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span> json = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JSON</span><span class="hljs-built_in">Object</span>();<br>    json.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;jsonp&quot;</span>);<br>    json.<span class="hljs-title function_">put</span>(<span class="hljs-string">&quot;pwd&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-comment">// 将数据作为函数的参数返回给浏览器,如: jsonpcall(&#123;&quot;name&quot;:&quot;jsonp&quot;,&quot;pwd&quot;:&quot;&quot;&#125;)</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>().<span class="hljs-title function_">append</span>(callback).<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;(&quot;</span>).<span class="hljs-title function_">append</span>(json).<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;)&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="jquery中使用getJson"><a href="#jquery中使用getJson" class="headerlink" title="jquery中使用getJson"></a>jquery中使用getJson</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#b1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">getJSON</span>(<span class="hljs-string">&quot;http://127.0.0.1:8989/jsonp/?callback=?&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>    &#125;)<br>&#125;);<br></code></pre></td></tr></table></figure><blockquote><p>要注意的是在url的后面必须要有一个callback参数，这样getJSON方法才会知道是用JSONP方式去访问服务，callback后面的那个？是jQuery内部自动生成的一个回调函数名。</p></blockquote><p>想要自己指定回调名,可以使用$.ajax实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#b1&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;http://127.0.0.1:8989/jsonp/&quot;</span>,<br>      <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;jsonp&quot;</span>,<br>      <span class="hljs-attr">jsonp</span>: <span class="hljs-string">&quot;callback&quot;</span>,<br>      <span class="hljs-attr">jsonpCallback</span>: <span class="hljs-string">&quot;rion2&quot;</span><br>    &#125;)<br>  &#125;);<br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">rion2</span>(<span class="hljs-params">res</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>  &#125;<br></code></pre></td></tr></table></figure><p>【参考】<br> <a href="http://www.nowamagic.net/librarys/veda/detail/224">http://www.nowamagic.net/librarys/veda/detail/224</a> JSONP跨域的原理解析<br> <a href="http://www.xiaoxiaozi.com/2011/11/25/2239/">http://www.xiaoxiaozi.com/2011/11/25/2239/</a> JSONP与POST方式请求<br> <a href="http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html">http://www.cnblogs.com/dowinning/archive/2012/04/19/json-jsonp-jquery.html</a> 说说JSON和JSONP<br> <a href="http://www.cnblogs.com/chopper/archive/2012/03/24/2403945.html">http://www.cnblogs.com/chopper/archive/2012/03/24/2403945.html</a> 深入浅出JSONP–解决ajax跨域问题</p><p><a href="https://cloud.tencent.com/developer/article/1504166">解决浏览器跨域限制方案之JSONP - 腾讯云开发者社区-腾讯云</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ElasticSearch 使用笔记</title>
    <link href="/2022/07/31/ElasticSearch%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/07/31/ElasticSearch%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-启动"><a href="#Docker-启动" class="headerlink" title="Docker 启动"></a>Docker 启动</h1><p>拉取镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull elasticsearch<br></code></pre></td></tr></table></figure><p>启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name elasticsearch --net somenetwork -p 9200:9200 -p 9300:9300 -e &quot;discovery.type=single-node&quot; elasticsearch:tag<br></code></pre></td></tr></table></figure><h1 id="Elasticsearch-8-0报错：received-plaintext-http-traffic-on-an-https-channel-closing-connection"><a href="#Elasticsearch-8-0报错：received-plaintext-http-traffic-on-an-https-channel-closing-connection" class="headerlink" title="Elasticsearch 8.0报错：received plaintext http traffic on an https channel, closing connection"></a>Elasticsearch 8.0报错：received plaintext http traffic on an https channel, closing connection</h1><p><strong>原因</strong>：是因为ES8默认开启了 ssl 认证。</p><p>修改elasticsearch.yml配置文件，改为flase</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">xpack.security.enabled: false<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Redis insight 最好的Redis GUI工具</title>
    <link href="/2022/07/24/Redis%20insight%20%E6%9C%80%E5%A5%BD%E7%9A%84Redis%20GUI%E5%B7%A5%E5%85%B7/"/>
    <url>/2022/07/24/Redis%20insight%20%E6%9C%80%E5%A5%BD%E7%9A%84Redis%20GUI%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="RedisInsight-The-best-Redis-GUI"><a href="#RedisInsight-The-best-Redis-GUI" class="headerlink" title="RedisInsight: The best Redis GUI"></a>RedisInsight: The best Redis GUI</h1><p>Welcome to a new level of productivity when developing with Redis using the completely redesigned and open source RedisInsight 2.0 which provides an updated UI, browser tool, advanced CLI, custom data visualization, and built-in guides to help with using Redis data models like JSON and time series.</p><p><a href="https://redis.com/wp-content/uploads/2021/11/redisinsight-workbench-1024x544.png?&auto=webp&quality=85,75&width=800"><img src="https://redis.com/wp-content/uploads/2021/11/redisinsight-workbench-1024x544.png?&auto=webp&quality=85,75&width=800"></a></p><h1 id="Streamline-your-Redis-application-development"><a href="#Streamline-your-Redis-application-development" class="headerlink" title="Streamline your Redis application development"></a>Streamline your Redis application development</h1><p>RedisInsight provides an intuitive Redis admin GUI and helps optimize your use of Redis in your applications. It supports Redis Open Source, Redis Stack, Redis Enterprise Software, Redis Enterprise Cloud, and Amazon ElastiCache. RedisInsight now incorporates a completely new tech stack based on the popular Electron framework. And it runs cross-platform, supported on Linux, Windows, and MacOS.</p><h2 id="RedisInsight"><a href="#RedisInsight" class="headerlink" title="RedisInsight"></a>RedisInsight</h2><p>RedisInsight is a desktop manager that provides an intuitive and efficient GUI for Redis, allowing you to interact with your databases, monitor, and manage your data.</p><p><a href="https://redis.com/wp-content/uploads/2021/07/redisinsight-interface-v1-1024x740.jpg?&auto=webp&quality=85,75&width=800"><img src="https://redis.com/wp-content/uploads/2021/07/redisinsight-interface-v1-1024x740.jpg?&auto=webp&quality=85,75&width=800"></a></p><h2 id="Visualize-and-Interact-with-Redis-databases"><a href="#Visualize-and-Interact-with-Redis-databases" class="headerlink" title="Visualize and Interact with Redis databases"></a>Visualize and Interact with Redis databases</h2><p>Scan existing keys, add new ones, and perform CRUD or bulk operations. Display objects in a pretty-print JSON objects format and support friendly keyboard navigation.</p><p><a href="https://redis.com/wp-content/uploads/2020/07/redis-insight-hero-screenshot3.png?&auto=webp&quality=85,75&width=800"><img src="https://redis.com/wp-content/uploads/2020/07/redis-insight-hero-screenshot3.png?&auto=webp&quality=85,75&width=800"></a></p><h2 id="Built-in-support-for-Redis-modules"><a href="#Built-in-support-for-Redis-modules" class="headerlink" title="Built-in support for Redis modules"></a>Built-in support for Redis modules</h2><p>Query, visualize, and interactively manipulate graphs, streams, and time-series data. Build queries, explore the results, optimize, and quickly iterate with a multi-line query editor. Support for JSON, Search, Graph, Streams, Time Series, and RedisGears.</p><p><a href="https://redis.com/wp-content/uploads/2019/10/redisinsights-redisgraph.png?&auto=webp&quality=85,75&width=800"><img src="https://redis.com/wp-content/uploads/2019/10/redisinsights-redisgraph.png?&auto=webp&quality=85,75&width=800"></a></p><h2 id="Memory-analysis-for-Redis"><a href="#Memory-analysis-for-Redis" class="headerlink" title="Memory analysis for Redis"></a>Memory analysis for Redis</h2><p>Analyze memory usage offline—without affecting Redis performance—by key patterns, expiring keys, and advanced search to identify memory issues. Leverage recommendations to reduce memory usage.</p><p><a href="https://redis.com/wp-content/uploads/2019/10/redisinsights-analyze-overview.png?&auto=webp&quality=85,75&width=800"><img src="https://redis.com/wp-content/uploads/2019/10/redisinsights-analyze-overview.png?&auto=webp&quality=85,75&width=800"></a></p><h2 id="Trace-Redis-commands"><a href="#Trace-Redis-commands" class="headerlink" title="Trace Redis commands"></a>Trace Redis commands</h2><p>Identify top keys, key patterns, and commands. Filter by client IP address, key, or command across all nodes of a cluster. Effectively debug Lua scripts.</p><p><a href="https://redis.com/wp-content/uploads/2019/10/keyspace_summary.png"><img src="https://redis.com/wp-content/uploads/2019/10/keyspace_summary.png?&auto=webp&quality=85,75&width=800"></a></p><h2 id="Intuitive-CLI"><a href="#Intuitive-CLI" class="headerlink" title="Intuitive CLI"></a>Intuitive CLI</h2><p>When a GUI is not enough, our command-line interface, leveraging the Redis CLI, provides syntax highlighting and auto-complete and employs integrated help to deliver intuitive, in-the-moment assistance.</p><p><a href="https://redis.com/wp-content/uploads/2019/10/redisinsights-CLI.png"><img src="https://redis.com/wp-content/uploads/2019/10/redisinsights-CLI.png?&auto=webp&quality=85,75&width=800"></a></p><h2 id="Administer-Redis"><a href="#Administer-Redis" class="headerlink" title="Administer Redis"></a>Administer Redis</h2><p>Gain insights into real-time performance metrics, inspect slow commands, and manage Redis configuration directly through the interface.</p><p><a href="https://redis.com/wp-content/uploads/2019/10/redisinsights-overview.png"><img src="https://redis.com/wp-content/uploads/2019/10/redisinsights-overview.png?&auto=webp&quality=85,75&width=800"></a></p><p>下载地址： <a href="https://redis.com/redis-enterprise/redis-insight/">https://redis.com/redis-enterprise/redis-insight/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js遍历数组</title>
    <link href="/2022/07/23/js%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/"/>
    <url>/2022/07/23/js%E9%81%8D%E5%8E%86%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<p>JS中遍历数组经常用到，这里总结了6种遍历方法，以及各种方法的优劣。</p><h2 id="1-for-遍历数组"><a href="#1-for-遍历数组" class="headerlink" title="1. for 遍历数组"></a>1. for 遍历数组</h2><h3 id="1-1-for-的普通遍历"><a href="#1-1-for-的普通遍历" class="headerlink" title="1.1 for 的普通遍历"></a><strong>1.1 for 的普通遍历</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = [<span class="hljs-string">&#x27;Peter&#x27;</span>,<span class="hljs-string">&#x27;Stark&#x27;</span>,<span class="hljs-string">&#x27;Jack&#x27;</span>];<br><span class="hljs-comment">// for 循环</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; name.<span class="hljs-property">length</span>; i++) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-2-for-优化版遍历"><a href="#1-2-for-优化版遍历" class="headerlink" title="1.2 for 优化版遍历"></a><strong>1.2 for 优化版遍历</strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> name = [<span class="hljs-string">&#x27;Peter&#x27;</span>,<span class="hljs-string">&#x27;Stark&#x27;</span>,<span class="hljs-string">&#x27;Jack&#x27;</span>];<br><span class="hljs-comment">// 先缓存 name.length</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, len = name.<span class="hljs-property">length</span>; i &lt; len; i++) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、while-遍历数组"><a href="#2、while-遍历数组" class="headerlink" title="2、while 遍历数组"></a>2、while 遍历数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// while 循环</span><br><span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; name.<span class="hljs-property">length</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name[i]);<br>  i++;<br>&#125;<br><span class="hljs-comment">//while 逆向遍历</span><br><span class="hljs-keyword">var</span> i = name.<span class="hljs-property">length</span>;<br><span class="hljs-keyword">while</span> (i--) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name[i]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-for…in-方法"><a href="#3-for…in-方法" class="headerlink" title="3. for…in 方法"></a>3. for…in 方法</h2><p>数组既可遍历对象，也可遍历数组。遍历数组时也会遍历非数字键名,所以不推荐 for..in 遍历数组</p><h3 id="3-1-遍历数组"><a href="#3-1-遍历数组" class="headerlink" title="3.1 遍历数组"></a>3.1 遍历数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> a) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a[key]);<br>&#125;<br><span class="hljs-comment">/* 1</span><br><span class="hljs-comment">   2</span><br><span class="hljs-comment">   3 */</span><br></code></pre></td></tr></table></figure><h3 id="3-2-遍历对象"><a href="#3-2-遍历对象" class="headerlink" title="3.2 遍历对象"></a>3.2 遍历对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> object = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;Peter&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">12</span>,<br>  <span class="hljs-attr">isHuman</span>: <span class="hljs-literal">true</span><br>&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> key <span class="hljs-keyword">in</span> object) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(key + <span class="hljs-string">&#x27;---&#x27;</span> + object[key]);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-for…of-方法-ES6"><a href="#4-for…of-方法-ES6" class="headerlink" title="4. for…of 方法 (ES6)"></a>4. for…of 方法 (ES6)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> arr) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-forEach-方法"><a href="#5-forEach-方法" class="headerlink" title="5. forEach() 方法"></a>5. forEach() 方法</h2><p>用来遍历数组中的每一项，不影响原数组，性能差</p><p>缺陷 你不能使用break语句中断循环，也不能使用return语句返回到外层函数。</p><h3 id="5-1-遍历普通数组"><a href="#5-1-遍历普通数组" class="headerlink" title="5.1 遍历普通数组"></a>5.1 遍历普通数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>arr.<span class="hljs-property">forEach</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="5-2-forEach-遍历对象类型数组"><a href="#5-2-forEach-遍历对象类型数组" class="headerlink" title="5.2 forEach() 遍历对象类型数组"></a>5.2 forEach() 遍历对象类型数组</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> info = [<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1000</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zhangsan&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1001</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;lisi&#x27;</span>&#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-number">1002</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;wangwu&#x27;</span>&#125;<br>]<br>arr.<span class="hljs-title function_">forEach</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item.<span class="hljs-property">id</span> + <span class="hljs-string">&#x27;---&#x27;</span> + item.<span class="hljs-property">name</span>);<br>&#125;)<br><span class="hljs-comment">/* 1---zhangsan</span><br><span class="hljs-comment">   2---lisi</span><br><span class="hljs-comment">   3---wangwu */</span><br></code></pre></td></tr></table></figure><h2 id="6-map-方法"><a href="#6-map-方法" class="headerlink" title="6. map() 方法"></a>6. map() 方法</h2><p>支持return，相当与原数组克隆了一份，把克隆的每项改变了，不影响原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br>arr.<span class="hljs-title function_">map</span>( <span class="hljs-keyword">function</span>(<span class="hljs-params">item</span>) &#123;<br>  <span class="hljs-keyword">return</span> item;<br>&#125;)<br></code></pre></td></tr></table></figure><p>当然有了 <code>箭头函数 =&gt;</code> 后更方便</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>];<br><span class="hljs-keyword">var</span> newArray = arr.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x);<br><span class="hljs-title function_">alert</span>(newArray); <span class="hljs-comment">// [&#x27;a&#x27;,&#x27;b&#x27;&#x27;c&#x27;]</span><br></code></pre></td></tr></table></figure><p><code>map()</code> 方法创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> newArray = arr.<span class="hljs-title function_">map</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">item</span>) &#123;<br>  <span class="hljs-keyword">return</span> [expression];<br>&#125;)<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>];<br><span class="hljs-keyword">var</span> newArray = arr.<span class="hljs-title function_">map</span>(<br>  <span class="hljs-function"><span class="hljs-params">x</span> =&gt;</span> x * x<br>)<br><span class="hljs-title function_">alert</span>(newArray); <span class="hljs-comment">// [1,4,9,16]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php数字表示法和 位运算 与 或 异或 取反</title>
    <link href="/2022/07/17/php%E6%95%B0%E5%AD%97%E8%A1%A8%E7%A4%BA%E6%B3%95%E5%92%8C%20%E4%BD%8D%E8%BF%90%E7%AE%97%20%E4%B8%8E%20%E6%88%96%20%E5%BC%82%E6%88%96%20%E5%8F%96%E5%8F%8D/"/>
    <url>/2022/07/17/php%E6%95%B0%E5%AD%97%E8%A1%A8%E7%A4%BA%E6%B3%95%E5%92%8C%20%E4%BD%8D%E8%BF%90%E7%AE%97%20%E4%B8%8E%20%E6%88%96%20%E5%BC%82%E6%88%96%20%E5%8F%96%E5%8F%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="数字表示法"><a href="#数字表示法" class="headerlink" title="数字表示法"></a>数字表示法</h1><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">$a = <span class="hljs-number">1</span>;  # 十进制  <br>$b = <span class="hljs-number">0b0101</span>; # 二进制<br>$c = <span class="hljs-number">01</span>; # 八进制  php8<span class="hljs-number">.1</span>可以使用 <span class="hljs-number">0o01</span><br>$d = <span class="hljs-number">0x12</span> # <span class="hljs-number">16</span>进制<br></code></pre></td></tr></table></figure><h1 id="进制转换函数"><a href="#进制转换函数" class="headerlink" title="进制转换函数"></a>进制转换函数</h1><p>bindec() — 二进制转换为十进制<br>decbin() — 十进制转换为二进制<br>dechex() — 十进制转换为十六进制<br>decoct() — 十进制转换为八进制<br>hexdec() — 十六进制转换为十进制<br>octdec() — 八进制转换为十进制<br>base_convert()– 在任意进制之间转换数字</p><h1 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h1><p>php中有4个位运算，分别是&amp;与 |或 ^异或 ~取反</p><ul><li>&amp; 两位全为1，结果为1</li><li>| 有一位为1，结果为1</li><li>^ 一个为0，一个为1，结果为1</li><li>~ 取反0-&gt;1，1-&gt;0</li></ul><p>注意：</p><ul><li>二进制的最高位是符号位，0表示正数，1表示负数。</li><li>正数的原码，反码，补码都一样。</li><li>负数的反码&#x3D;它的原码符号位不变，其它位取反(0-&gt;1,1-&gt;0)。</li><li>负数的补码&#x3D;它的反码+1。</li><li>0的反码，补码都是0.</li><li>php没有无符号数，换言之，php中的数都是有符号的。</li><li>在计算机运算的时候，都是以补码的方式来运算的。</li></ul><p>推理过程：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">13</span><span class="hljs-meta">&amp;7</span><br></code></pre></td></tr></table></figure><p>13的补码  00000000 00000000 00000000 00001101<br>7的补码   00000000 00000000 00000000 00000111<br>13&amp;7      00000000 00000000 00000000 00000101   &#x3D; 5</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">5</span><span class="hljs-string">|4</span><br></code></pre></td></tr></table></figure><p>5的补码 00000000 00000000 00000000 00000101<br>4的补码 00000000 00000000 00000000 00000100<br>5|4      00000000 00000000 00000000 000000101   &#x3D;5</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-3^3</span><br></code></pre></td></tr></table></figure><p>-3的补码<br>-3的原码 10000000 00000000 00000000 00000011<br>-3的反码 11111111 11111111 11111111 11111100<br>-3的补码 11111111 11111111 11111111 11111101</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Centos Linux 运维级基础教学</title>
    <link href="/2022/07/12/Centos%20Linux%20%E8%BF%90%E7%BB%B4%E7%BA%A7%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/"/>
    <url>/2022/07/12/Centos%20Linux%20%E8%BF%90%E7%BB%B4%E7%BA%A7%E5%9F%BA%E7%A1%80%E6%95%99%E5%AD%A6/</url>
    
    <content type="html"><![CDATA[<h4 id="命令终端字段含义介绍"><a href="#命令终端字段含义介绍" class="headerlink" title="命令终端字段含义介绍"></a>命令终端字段含义介绍</h4><ul><li><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]#</p></li><li><p>解释：当前用户名为root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">主机名为localhost</a> 当前所在目录为 ~ 家目录 # 当前用户身份是超级管理员，root超级管理员家目录：&#x2F;root</p></li><li><p>普通用户提示符为 $，普通用户的家目录：&#x2F;homt&#x2F;用户名同名，lisi用户的家目录：&#x2F;home&#x2F;lisi</p><p>[lisi<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]$</p></li></ul><h4 id="Linux系统基本概念"><a href="#Linux系统基本概念" class="headerlink" title="Linux系统基本概念"></a>Linux系统基本概念</h4><ul><li>Linux系统而言：<ul><li>多用户的系统：允许同时有很多个用户登录系统，使用系统里的资源</li><li>多任务的系统：允许同时执行多个任务</li><li>严格区分大小写：命令，选项，参数，文件名，目录名都严格区分大小写</li><li>一切皆文件：硬件设备（内存、CPU、网卡、显示器、硬盘等等）都是以文件的形式存在的</li><li>不管是文件还是目录都是以倒挂的树形结构，存在于系统的“&#x2F;”根目录下，根目录是Linux系统的起点</li><li>对于Linux系统而言，目录&#x2F;文件没有扩展名一说，扩展名如：.sh（脚本文件) .conf（配置文件） .log（日志文件） .rpm（软件包）.tar（压缩包）是易于用户方便识别</li><li>没有提示就是最好的提示（成功了）</li></ul></li></ul><h4 id="命令行编辑技巧"><a href="#命令行编辑技巧" class="headerlink" title="命令行编辑技巧"></a>命令行编辑技巧</h4><p>键盘上下键调出历史命令</p><p>Ctrl + c：取消当前执行的命令</p><p>Ctrl + l：清屏</p><p>tab建自动补齐：可补齐命令、选项、参数、文件路径、软件名、服务名</p><p>Ctrl + a：将当前光标移动至行首</p><p>Ctrl + e：将当前光标移动至行尾</p><p>Ctrl + u 清空至行首</p><p>Ctrl + w 删除一个单词</p><p>exit：退出系统</p><h4 id="命令行一般命令格式"><a href="#命令行一般命令格式" class="headerlink" title="命令行一般命令格式"></a>命令行一般命令格式</h4><ul><li>命令字 [-选项…] [参数…]<ul><li>命令字：命令本身（功能）</li><li>选项：调整命令功能的<ul><li>短选项：-l -a -d -h（单个字符），短选项可以合并使用：-lad -lh</li><li>长选项：–help（单词），长选项通常是不能合并使用的</li></ul></li><li>参数：命令的执行对象，文件&#x2F;目录&#x2F;程序等</li><li>[]：可选的</li><li>…：可以同时有多个选项或参数</li></ul></li></ul><h4 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h4><ul><li>遇到问题：前期不要求你们有排错的能力</li><li>思考自己能不能决绝：百度、Google、最后在问老师</li><li>主动学习的爱好，不要被动学习</li><li>不要死磕一个技术点，低头学习的时候不要忘了抬头看路</li></ul><h4 id="Linux系统辨别目录与文件的方法"><a href="#Linux系统辨别目录与文件的方法" class="headerlink" title="Linux系统辨别目录与文件的方法"></a>Linux系统辨别目录与文件的方法</h4><p>蓝色表示目录（windows系统里的文件夹）</p><p>白色表示文件</p><p>浅蓝色表示链接文件（类似于windows系统的快捷方式）</p><p>绿色表示可执行文件（如脚本，命令程序文件）</p><p>红色表示压缩文件</p><p>黄色表示设备文件（硬盘、键盘、鼠标、网卡、CPU硬件设备都是以文件的形式存在的）</p><p>红色闪动文件——&gt;表示链接文件不可用</p><h4 id="ls-查看目录-x2F-文件命令"><a href="#ls-查看目录-x2F-文件命令" class="headerlink" title="ls 查看目录&#x2F;文件命令"></a>ls 查看目录&#x2F;文件命令</h4><ul><li>ls命令（英文全拼：list）：用于查看目录下内容及目录和文件详细属性信息</li><li>命令格式：ls [-选项…] [参数…]</li><li>常用选项：<ul><li>-a 显示目录下所有内容，包含隐藏的内容</li><li>-l 以长格式显示目录下的内容及详细属性</li><li>-h 人性化显示目录下内容大小（kB、MB、GB）</li><li>-d 仅显示目录本身而不显示目录下的内容</li><li>-i 查看inode号（系统任何的文件或目录都有一个唯一的编号）</li><li>-R：递归查看目录下所有内容（从头到尾）</li></ul></li></ul><h4 id="Linux-系统文件类型"><a href="#Linux-系统文件类型" class="headerlink" title="Linux 系统文件类型"></a>Linux 系统文件类型</h4><p>- 文件：</p><p>d 目录：</p><p>l 链接文件</p><p>b 跨设备文件</p><p>c 字符设备文件</p><p>p 管道设备文件</p><p>s 套接字</p><h4 id="Linux-系统下的归属关系"><a href="#Linux-系统下的归属关系" class="headerlink" title="Linux 系统下的归属关系"></a>Linux 系统下的归属关系</h4><ul><li>在Linux系统下，文件给用户分成了三类<ul><li>u 所有者：文件或目录的拥有者，拥有者的权限通常是最大的</li><li>g 所属组：文件或目录属于哪一个组，所属组的权限略微比所有者小</li><li>o 其他人：既不是文件或目录的所有者，也不属于文件或目录组内的成员，其他人的权限通常最小的权限</li></ul></li><li>ls命令示例：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">显示当前所在目录下的所有内容</span><br>[root@localhost ~]# ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看根目录下所有内容</span><br>[root@localhost ~]# ls   /<br>bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看/etc目录下所有内容</span><br>[root@localhost ~]# ls /etc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看/bin目录下所有内容</span><br>[root@localhost ~]# ls /bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看/dev目录下所有内容</span><br>[root@localhost ~]# ls /dev<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看目录下所有目录和文件，包括隐藏的内容</span><br>[root@localhost ~]# ls -a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以长格式显示目录下所有内容，包括详细的属性信息</span><br>[root@localhost ~]# ls -l<br>-rw-r--r--. 1 root root 1831 3月  13 17:45 initial-setup-ks.cfg<br>drwxr-xr-x. 2 root root    6 3月  13 17:47 公共<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释</span><br>-：文件类型<br>1：代表文件的引用次数，只针对与做了硬连接的文件才有效<br>root：文件的所有者<br>root：文件的所属组<br>1831：文件的大小，默认以字节为单位显示大小<br>3月  13 17:45：文件最近一次的修改时间<br>initial-setup-ks.cfg：文件名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以长格式显示目录所有内容，以人性化的方式显示详细的属性信息</span><br>[root@localhost ~]# ls -l -h<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">短选项合并使用</span><br>[root@localhost ~]# ls -lh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以长格式显示目录所有内容，以人性化的方式显示详细的属性信息，包括隐藏的内容</span><br>[root@localhost ~]# ls -lha<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以长格式显示根目录下所有内容，包括详细的属性信息</span><br>[root@localhost ~]# ls -l /<br>lrwxrwxrwx.   1 root root    7 3月  13 17:15 bin -&gt; usr/bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建hello.txt文件</span><br>[root@localhost ~]# touch hello.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看文件的元数据信息</span><br>[root@localhost ~]# stat hello.txt<br>  文件：&quot;hello.txt&quot;<br>  大小：0         块：0          IO 块：4096   普通空文件<br>设备：fd00h/64768dInode：33575020    硬链接：1<br>权限：(0644/-rw-r--r--)  Uid：(    0/    root)   Gid：(    0/    root)<br>环境：unconfined_u:object_r:admin_home_t:s0<br>最近访问：2021-03-14 16:38:14.349861770 +0800<br>最近更改：2021-03-14 16:38:14.349861770 +0800<br>最近改动：2021-03-14 16:38:14.349861770 +0800<br>创建时间：-<br></code></pre></td></tr></table></figure><h4 id="Linux-基本权限的类别"><a href="#Linux-基本权限的类别" class="headerlink" title="Linux 基本权限的类别"></a>Linux 基本权限的类别</h4><ul><li>r 读取 w 写入 x 执行 - 没有权限</li><li>权限顺序：rwxrwxrwx</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ls -l<br>-rw-r--r--. 1 root root 1831 3月  13 17:45 initial-setup-ks.cfg<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释</span><br>-：文件类型<br>rw- r-- r--：所有者u、所属组g、其他人o的权限<br>u   g   o<br><br>1：代表文件的引用次数，只针对与做了硬连接的文件才有效<br>root：文件的所有者<br>root：文件的所属组<br>1831：文件的大小，默认以字节为单位显示大小<br>3月  13 17:45：文件最近一次的修改时间<br>initial-setup-ks.cfg：文件名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看/root目录本身详细属性信息</span><br>[root@localhost ~]# ls -ld /root<br>dr-xr-x---. 14 root root 4096 3月  14 16:38 /root<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前目录下所有内容的inode号</span><br>[root@localhost ~]# ls -i<br>33574979 anaconda-ks.cfg  33574984 initial-setup-ks.cfg  33575035 模板  33575036 图片  17470701 下载            17470702 音乐<br>33575020 hello.txt        51909391 公共                  51909392 视频   3204374 文档  33575017 新建文件夹.zip   3204373 桌面<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看hello.txt文件的inode号</span><br>[root@localhost ~]# ls -i hello.txt<br>33575020 hello.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看/etc/目录本身的inode号</span><br>[root@localhost ~]# ls -id /etc<br>16777281 /etc<br></code></pre></td></tr></table></figure><h4 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h4><p>1.命令行以$作为结尾代表什么含义？</p><p>普通用户</p><p>2.请写出Linux系统一般的命令格式？</p><p>命令字 [-选项…] [参数…]</p><p>3.在Linux系统下，如何辨别目录与文件及其他的文件？</p><p>白色：文件</p><p>蓝色：目录</p><p>浅蓝色：链接文件</p><p>绿色：可执行文件</p><p>红色：压缩文件</p><p>红色带闪动的文件：链接文件不可用</p><p>黄色：设备文件（硬盘，网卡，CPU，鼠标，键盘）</p><p>4.如何查看一个文件的详细属性？</p><p>ls -l 文件名</p><p>5.如何查看一个目录本身的详细属性？</p><p>ls -dl 目录名字</p><p>6.查看文件详细属性，并以KB、MB、GB的方式显示文件的大小？</p><p>ls -lh 文件名</p><p>7.如何查看一个文件的inode号？</p><p>ls -i 文件名</p><p>8.请写出Linux下文件和目录的三个归属关系？</p><p>u 所有者</p><p>g 所属组</p><p>o 其他人</p><p>9.请写出Linux下基本权限的表示方式？</p><p>r：读取，w写入，x执行</p><p>10.命令行以#作为结尾代表什么含义？</p><p>超级管理员</p><h4 id="mkdir-创建目录命令"><a href="#mkdir-创建目录命令" class="headerlink" title="mkdir 创建目录命令"></a>mkdir 创建目录命令</h4><ul><li>mkdir（英文全拼：make directory）用于创建新目录</li><li>命令格式：mkdir [-选项] 目录名</li><li>常用选项：<ul><li>-p 递归创建多个目录</li></ul></li><li>注意事项：<ul><li>目录还是文件的名字，除了以“&#x2F;”以外的任意名称，“&#x2F;”根目录，路径分隔符</li><li>文件或目录的名字长度不能超过255个字符</li></ul></li><li>mkdir命令示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在当前所在目录创建<span class="hljs-built_in">test</span>目录</span><br>[root@localhost ~]# mkdir test<br>[root@localhost ~]# ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在当前所在目录同时创建多个目录</span><br>[root@localhost ~]# mkdir test1 test2 test3<br>[root@localhost ~]# ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">指定在/tmp目录下创建abc目录</span><br>[root@localhost ~]# mkdir /tmp/abc<br>[root@localhost ~]# ls /tmp<br>abc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在指定目录下同时创建多个目录</span><br>[root@localhost ~]# mkdir /tmp/abc1 /tmp/abc2 /tmp/abc3<br>[root@localhost ~]# ls /tmp<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在/opt目录下创建student，在当前目录创建student1..3</span><br>[root@localhost ~]# mkdir /opt/student student1  student2 student3<br>[root@localhost ~]# ls /opt<br>rh  student<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">mkdir</span>默认无法在一个不存在的目录下创建目录，需要通过-p选项</span><br>[root@localhost ~]# mkdir /opt/xx/oo<br>mkdir: 无法创建目录&quot;/opt/xx/oo&quot;: 没有那个文件或目录<br><br>[root@localhost ~]# mkdir /opt/a/b/c/d<br>mkdir: 无法创建目录&quot;/opt/a/b/c/d&quot;: 没有那个文件或目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在/opt目录下递归创建目录</span><br>[root@localhost ~]# mkdir -p /opt/xx/oo<br>[root@localhost ~]# ls /opt<br>rh  student  xx<br><br>[root@localhost ~]# mkdir -p /opt/a/b/c/d<br>[root@localhost ~]# ls /opt<br>a  rh  student  xx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">ls</span> -R选项可以递归目录下所有内容</span><br>[root@localhost ~]# ls -R /opt/a<br>/opt/a:<br>b<br><br>/opt/a/b:<br>c<br><br>/opt/a/b/c:<br>d<br></code></pre></td></tr></table></figure><h4 id="cd-切换工作目录命令"><a href="#cd-切换工作目录命令" class="headerlink" title="cd 切换工作目录命令"></a>cd 切换工作目录命令</h4><ul><li>cd（英文全拼：change directory）切换目录</li></ul><p>命令格式：cd [-选项] [目录名]</p><ul><li>提示：目录名称可以是绝对路径或相对路径，如果不指定目录名称，则切换到当前用户的家目录~</li><li>常用快捷操作：<ul><li>~ 表示为家目录-</li><li>. 表示为当前目录</li><li>.. 表示上一级目录</li><li>-可在两路径之间来回切换</li></ul></li></ul><h4 id="pwd-打印当前所在目录命令"><a href="#pwd-打印当前所在目录命令" class="headerlink" title="pwd 打印当前所在目录命令"></a>pwd 打印当前所在目录命令</h4><ul><li>pwd（英文全拼：print work directory）打印当前所在的工作目录，执行pwd命令后，可显示当前所在的工作目录的绝对路径名称</li><li>命令格式：pwd [-选项]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cd /opt/a/b/c/d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">打印当前所在目录绝对路径</span><br>[root@localhost d]# pwd<br>/opt/a/b/c/d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换到用户家目录</span><br>[root@localhost d]# cd ~<br>[root@localhost ~]# pwd<br>/root<br>[root@localhost ~]# cd /opt/a/b/c/d<br>[root@localhost d]# pwd<br>/opt/a/b/c/d<br>[root@localhost d]# cd<br>[root@localhost ~]# pwd<br>/root<br><br>[root@localhost ~]# cd /bin<br>[root@localhost bin]# pwd<br>/bin<br><br>[root@localhost bin]# cd /boot<br>[root@localhost boot]# pwd<br>/boot<br>[root@localhost boot]# ls<br><br>[root@localhost boot]# cd /dev<br>[root@localhost dev]# pwd<br>/dev<br>[root@localhost dev]# ls<br><br>[root@localhost dev]# cd /etc<br>[root@localhost etc]# pwd<br>/etc<br>[root@localhost etc]# ls<br><br>[root@localhost etc]# ls /<br>bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">“.”表示当前所在目录，对于<span class="hljs-built_in">cd</span>命令而言作用不大</span><br>[root@localhost etc]# cd .<br><br>[root@localhost etc]# cd /opt/a/b/c/d<br>[root@localhost d]# pwd<br>/opt/a/b/c/d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">“..”切换到当前目录的上一级目录</span><br>[root@localhost d]# cd ..<br>[root@localhost c]# pwd<br>/opt/a/b/c<br><br>[root@localhost c]# cd ..<br>[root@localhost b]# pwd<br>/opt/a/b<br><br>[root@localhost b]# cd ..<br>[root@localhost a]# cd ..<br>[root@localhost opt]# pwd<br>/opt<br><br>[root@localhost opt]# cd ..<br>[root@localhost /]# cd ..<br>[root@localhost /]# cd<br>[root@localhost ~]# ls<br><br>[root@localhost ~]# cd /opt/a/b/c/d<br>[root@localhost d]# pwd<br>/opt/a/b/c/d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-string">&quot;-&quot;</span>可在两个路径之间来回切换</span><br>[root@localhost d]# cd /etc/yum<br>[root@localhost yum]# cd -<br>/opt/a/b/c/d<br><br>[root@localhost d]# pwd<br>/opt/a/b/c/d<br><br>[root@localhost d]# cd -<br>/etc/yum<br><br>[root@localhost yum]# cd -<br>/opt/a/b/c/d<br><br>[root@localhost d]# cd -<br>/etc/yum<br></code></pre></td></tr></table></figure><h4 id="绝对路径与相对路径"><a href="#绝对路径与相对路径" class="headerlink" title="绝对路径与相对路径"></a>绝对路径与相对路径</h4><ul><li>绝对路径：以&#x2F;（根）为起点，到达你想去的目标目录称为绝对路径</li><li>相对路径：以当前路径为起点，到达你想去的目标目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">绝对路径以“/”作为起点，到达目标路径</span><br>[root@localhost ~]# cd /opt/a/b/c/d<br>[root@localhost d]# pwd<br>/opt/a/b/c/d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换到上一级目录</span><br>[root@localhost c]# cd ..<br>[root@localhost b]# pwd<br>/opt/a/b<br>[root@localhost b]# ls<br>c<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">相对路径以当前路径作为起点到达目标路径</span><br>[root@localhost b]# cd c/<br>[root@localhost c]# pwd<br>/opt/a/b/c<br>[root@localhost c]# cd ..<br>[root@localhost b]# cd ..<br>[root@localhost a]# cd ..<br>[root@localhost opt]# pwd<br>/opt<br></code></pre></td></tr></table></figure><h4 id="rmdir-删除空目录命令"><a href="#rmdir-删除空目录命令" class="headerlink" title="rmdir 删除空目录命令"></a>rmdir 删除空目录命令</h4><ul><li>rmdir（英文全拼：remove directory）删除空目录</li><li>命令格式：rmdir [-选项] 目录名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">rmdir</span>只能删除空目录，如果目录下存在数据无法删除</span><br>[root@localhost ~]# rmdir /opt/a<br>rmdir: 删除 &quot;/opt/a&quot; 失败: 目录非空<br>[root@localhost ~]# ls -R /opt/a<br>/opt/a:<br>b<br><br>/opt/a/b:<br>c<br><br>/opt/a/b/c:<br>d<br><br>/opt/a/b/c/d:<br><br>[root@localhost ~]# rmdir /opt/a/b/c/d<br>[root@localhost ~]# ls -R /opt/a<br>/opt/a:<br>b<br><br>/opt/a/b:<br>c<br><br>/opt/a/b/c:<br><br>[root@localhost ~]# rmdir /opt/a/b/c<br>[root@localhost ~]# ls -R /opt/a/b<br>/opt/a/b:<br><br>[root@localhost ~]# rmdir /opt/a/b<br>[root@localhost ~]# ls -R /opt/a<br>/opt/a:<br><br>[root@localhost ~]# rmdir /opt/a<br>[root@localhost ~]# ls /opt<br>rh  student  xx<br><br>[root@localhost ~]# rmdir /opt/<br>rmdir: 删除 &quot;/opt/&quot; 失败: 目录非空<br></code></pre></td></tr></table></figure><h4 id="touch-创建文件命令"><a href="#touch-创建文件命令" class="headerlink" title="touch 创建文件命令"></a>touch 创建文件命令</h4><ul><li>touch 命令用于创建新的空白文件</li><li>命令格式：touch [-选项] 文件名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">在当前路径创建空文件</span><br>[root@localhost ~]# touch hello<br>[root@localhost ~]# ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在当前路径同时创建多个文件</span><br>[root@localhost ~]# touch t1 t2 t3 t4<br>[root@localhost ~]# ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在指定路径同时创建多个文件</span><br>[root@localhost ~]# touch /opt/test1 /opt/test2 /opt/test3<br>[root@localhost ~]# ls /opt<br>rh  student  test1  test2  test3  xx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果存在同名目录时，无法创建</span><br>[root@localhost ~]# mkdir test<br>mkdir: 无法创建目录&quot;test&quot;: 文件已存在<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">如果存在同名文件时，<span class="hljs-built_in">touch</span>命令没有提示，但原有文件不会被覆盖</span><br>[root@localhost ~]# touch t1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">对于目录而言，只有单个目录的时候，“/”可有可无</span><br>[root@localhost ~]# ls /opt/<br>rh  student  test1  test2  test3  xx<br>[root@localhost ~]# ls /opt<br>rh  student  test1  test2  test3  xx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">对于目录而言，查看目录下的内容时，必须要有“/”</span><br>[root@localhost ~]# ls /opt/xx<br>oo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">对于文件而言，后边绝对不能有“/”</span><br>[root@localhost ~]# ls /opt/test1<br>/opt/test1<br>[root@localhost ~]# ls /opt/test1/<br>ls: 无法访问/opt/test1/: 不是目录<br></code></pre></td></tr></table></figure><h4 id="cp-复制命令"><a href="#cp-复制命令" class="headerlink" title="cp 复制命令"></a>cp 复制命令</h4><ul><li>cp（英文全拼：copy file）用于复制文件或目录，cp命令在复制时也可修改目录或文件名字</li><li>命令格式：cp [-选项] 源文件或目录 目标目录</li><li>常用选项：<ul><li>-p 保留源文件属性不变（如：修改时间、归属关系、权限）</li><li>-r 复制目录（包含该目录下所有的子目录和文件）</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">复制当前目录文件到/opt目录（相对路径方式复制）</span><br>[root@localhost ~]# cp t1 /opt/<br>[root@localhost ~]# ls /opt<br>rh  student  t1  test1  test2  test3  xx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制文件到/opt目录（绝对路径方式复制）</span><br>[root@localhost ~]# cp /root/t2 /opt<br>[root@localhost ~]# ls /opt<br>rh  student  t1  t2  test1  test2  test3  xx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时复制多个文件</span><br>[root@localhost ~]# cp t3 t4 /opt/<br>[root@localhost ~]# ls /opt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建目录</span><br>[root@localhost ~]# mkdir abc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用-r对目录执行复制</span><br>[root@localhost ~]# cp -r abc /opt<br>[root@localhost ~]# ls /opt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时复制多个目录</span><br>[root@localhost ~]# mkdir abc1 abc2 abc3<br>[root@localhost ~]# cp -r abc1 abc2 abc3 /opt<br>[root@localhost ~]# ls /opt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制hello文件到/opt并改名为hello.txt</span><br>[root@localhost ~]# cp hello /opt/hello.txt<br>[root@localhost ~]# ls /opt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">复制xxxx目录到/opt并改名xxoo</span><br>[root@localhost ~]# mkdir xxxx<br>[root@localhost ~]# cp -r xxxx /opt/xxoo<br>[root@localhost ~]# ls /opt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用“.”配合<span class="hljs-built_in">cp</span>命令执行复制</span><br>[root@localhost ~]# cd /etc/sysconfig/network-scripts/<br>[root@localhost network-scripts]# pwd<br>/etc/sysconfig/network-scripts<br><br>[root@localhost network-scripts]# cp /root/t1 .<br>[root@localhost network-scripts]# ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">操持属性不变复制文件</span><br>[root@localhost ~]# cp -p anaconda-ks.cfg /opt<br>cp：是否覆盖&quot;/opt/anaconda-ks.cfg&quot;？ y                         <br>[root@localhost ~]# ls -l /opt/anaconda-ks.cfg <br>-rw-------. 1 root root 1800 3月  13 17:34 /opt/anaconda-ks.cfg<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">对比以上两个文件的详细属性信息（最后一次修改时间）</span><br>[root@localhost ~]# ls -l anaconda-ks.cfg <br>-rw-------. 1 root root 1800 3月  13 17:34 anaconda-ks.cfg<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">这两个操作代表什么意思？</span><br>[root@localhost ~]# cp -r xxxx /mnt/oooo  #拷贝并改名<br>[root@localhost ~]# cp -r xxxx /mnt/oooo  #拷贝<br></code></pre></td></tr></table></figure><h4 id="mv-移动命令"><a href="#mv-移动命令" class="headerlink" title="mv 移动命令"></a>mv 移动命令</h4><ul><li>mv（英文全拼：move file）用于移动文件或目录到其他位置，也可用于修改目录或文件名</li><li>命令格式：mv [-选项] 源文件… 目标路径</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">移动当前路径hello文件到/mnt目录</span><br>[root@localhost ~]# mv hello /mnt<br>[root@localhost ~]# ls /mnt<br>hello  home  oooo  test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时移动多个文件</span><br>[root@localhost ~]# mv t1 t2 t3 t4 /mnt<br>[root@localhost ~]# ls /mnt<br>hello  home  oooo  student1  t1  t2  t3  t4  test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">移动/opt目录下文件到/mnt</span><br>root@localhost ~]# mv /opt/test1 /opt/test2 /opt/test3 /mnt/<br>[root@localhost ~]# ls /mnt<br>hello  home  oooo  student1  t1  t2  t3  t4  test  test1  test2  test3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">移动目录</span><br>[root@localhost ~]# mv student1 /mnt<br>[root@localhost ~]# ls /mnt<br>hello  home  oooo  student1  test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">移动文件并改名</span><br>[root@localhost ~]# mv hello.txt /media/hello<br>[root@localhost ~]# ls /media/<br>hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">移动目录并改名</span><br>[root@localhost ~]# mv test /media/testxx<br>[root@localhost ~]# ls /media/<br>hello  testxx<br></code></pre></td></tr></table></figure><h4 id="cat-查看文件内容命令"><a href="#cat-查看文件内容命令" class="headerlink" title="cat 查看文件内容命令"></a>cat 查看文件内容命令</h4><ul><li>cat （英文全拼：concatenate）命令用于查看文本文件内容</li><li>命令格式：cat [选项] 文件名</li><li>常用选项<ul><li>-n #查看文件时以行号的形式显示文件内容</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看文件内容</span><br>[root@localhost ~]# cat anaconda-ks.cfg <br>[root@localhost ~]# cat initial-setup-ks.cfg <br>[root@localhost ~]# cat /etc/hosts<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看网卡文件内容</span><br>[root@localhost ~]# cat /etc/sysconfig/network-scripts/ifcfg-ens32 <br>...<br>NAME=&quot;ens32&quot;   //网卡名<br>UUID=&quot;16085f4c-f690-4058-b29e-d55c73387026&quot;<br>DEVICE=&quot;ens32&quot;<br>ONBOOT=&quot;yes&quot;<br>IPADDR=&quot;192.168.0.50&quot;     //网卡IP地址<br>PREFIX=&quot;24&quot;      //子网掩码<br>GATEWAY=&quot;192.168.0.254&quot;   //网管<br>DNS1=&quot;114.114.114.114&quot;    //DNS<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前系统用户基本信息文件内容</span><br>[root@localhost ~]# cat /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>bin:x:1:1:bin:/bin:/sbin/nologin<br>daemon:x:2:2:daemon:/sbin:/sbin/nologin<br>adm:x:3:4:adm:/var/adm:/sbin/nologin<br>lp:x:4:7:lp:/var/spool/lpd:/sbin/nologin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前系统主机名配置文件内容</span><br>[root@localhost ~]# cat /etc/hostname<br>localhost.localdomain<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前系统版本信息文件内容</span><br>[root@localhost ~]# cat /etc/redhat-release <br>CentOS Linux release 7.6.1810 (Core) <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前系统开机自动挂载配置文件内容</span><br>[root@localhost ~]# cat /etc/fstab<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统组基本信息文件内容</span><br>[root@localhost ~]# cat /etc/group<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用“-n”以行号形式显示文件内容</span><br>[root@localhost ~]# cat -n /etc/passwd<br>[root@localhost ~]# cat -n /etc/hostname<br>[root@localhost ~]# cat -n /etc/fstab<br>[root@localhost ~]# cat -n /etc/group<br>[root@localhost ~]# cat -n /etc/services <br></code></pre></td></tr></table></figure><h4 id="less命令"><a href="#less命令" class="headerlink" title="less命令"></a>less命令</h4><ul><li>less工具是对文件的输出进行分页显示的工具，常用于查看内容量较大的文件</li><li>命令格式：less [-选项] 文件</li><li>常用选项：<ul><li>-N #以行号形式显示文件内容</li></ul></li><li>使用技巧：<ul><li>键盘上下键逐行查看</li><li>pgdn ：向上翻一页（Fn + 上键）</li><li>pgup ：向下翻一页（Fn + 下键）</li><li>&#x2F;字符串 ：搜索指定字符串（n从上向下搜索，N从下向上搜索）</li><li>G：直接跳转到文件最后一行</li><li>gg：直接跳转到文件行首</li><li>q ：退出</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# less -N /etc/services<br></code></pre></td></tr></table></figure><h4 id="head与tail命令"><a href="#head与tail命令" class="headerlink" title="head与tail命令"></a>head与tail命令</h4><ul><li>head命令：用来显示文件开头部分内容，默认显示文件开头10行内容</li><li>命令格式：head [选项] 参数</li><li>常用选项：<ul><li>-n&lt;行数&gt; 指定显示的行数</li><li>-f 动态显示</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# head /etc/passwd<br>[root@localhost ~]# head /etc/fstab<br>[root@localhost ~]# head /etc/group<br>[root@localhost ~]# head /etc/hostname<br>[root@localhost ~]# head /etc/hosts<br>[root@localhost ~]# head /etc/sysconfig/network-scripts/ifcfg-ens32 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看存放DNS配置文件信息</span><br>[root@localhost ~]# head /etc/resolv.conf <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用-n指定显示文件前多少行内容</span><br>[root@localhost ~]# head -n 5 /etc/passwd<br>[root@localhost ~]# head -n 6 /etc/passwd<br>[root@localhost ~]# head -n 15 /etc/passwd<br>[root@localhost ~]# head -n 20 /etc/passwd<br></code></pre></td></tr></table></figure><ul><li>tail命令：用来显示文件末尾部分内容，默认显示文件末尾10行内容</li><li>命令格式：tail [选项] 参数</li><li>常用选项：-n&lt;行数&gt; 指定显示的行数 -f 动态显示</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# tail /etc/passwd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用“-n”指定显示文件末尾多少行内容</span><br>[root@localhost ~]# tail -n 5 /etc/passwd<br>[root@localhost ~]# tail -n 5 /etc/sysconfig/network-scripts/ifcfg-ens32 <br>IPADDR=&quot;192.168.0.50&quot;<br>PREFIX=&quot;24&quot;<br>GATEWAY=&quot;192.168.0.254&quot;<br>DNS1=&quot;114.114.114.114&quot;<br>IPV6_PRIVACY=&quot;no&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">动态查看文件内容</span><br>[root@localhost ~]# touch t1<br>root@localhost ~]# tail -f t1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">另开一个终端向文件写入内容</span><br>[root@localhost ~]# echo 123 &gt; t1<br></code></pre></td></tr></table></figure><h4 id="rm删除命令"><a href="#rm删除命令" class="headerlink" title="rm删除命令"></a>rm删除命令</h4><ul><li>rm（英文全拼：remove）命令用于删除文件或者目录。</li><li>命令格式：rm [-选项…] 目录或文件…</li><li>常用选项<ul><li>-f 强制删除</li><li>-r 删除目录</li><li>“*”特殊字符：系统常用符号，用来代表任意字符</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ls /opt<br>abc  abc1  abc2  abc3  anaconda-ks.cfg  hello.txt  home  rh  student  t1  t2  t3  t4  xx  xxoo<br><br>[root@localhost ~]# ls /mnt<br>hello  home  oooo  student1  t1  t2  t3  t4  test  test1  test2  test3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除指定目录下文件</span><br>[root@localhost ~]# rm /opt/anaconda-ks.cfg <br>rm：是否删除普通文件 &quot;/opt/anaconda-ks.cfg&quot;？y  #默认需要确认（y|n）<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看文件是否被成功删除</span><br>[root@localhost ~]# ls /opt<br>abc  abc1  abc2  abc3  hello.txt  home  rh  student  t1  t2  t3  t4  xx  xxoo<br><br>[root@localhost ~]# rm /opt/hello.txt <br>rm：是否删除普通空文件 &quot;/opt/hello.txt&quot;？y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时删除目录下指定文件</span><br>[root@localhost ~]# rm /opt/t1 /opt/t2 /opt/t3 /opt/t4<br>rm：是否删除普通空文件 &quot;/opt/t1&quot;？y<br>rm：是否删除普通空文件 &quot;/opt/t2&quot;？y<br>rm：是否删除普通空文件 &quot;/opt/t3&quot;？y<br>rm：是否删除普通空文件 &quot;/opt/t4&quot;？y<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看文件是否被成功删除</span><br>[root@localhost ~]# ls /opt<br>abc  abc1  abc2  abc3  home  rh  student  xx  xxoo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用“-f”强制删除文件（无需确认，直接删除）</span><br>[root@localhost ~]# rm -f /mnt/hello<br>[root@localhost ~]# ls /mnt<br>home  oooo  student1  t1  t2  t3  t4  test  test1  test2  test3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时强制删除多个文件</span><br>[root@localhost ~]# rm -f /mnt/t1 /mnt/t2 /mnt/t3 /mnt/t4<br>[root@localhost ~]# ls /mnt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除目录</span><br>[root@localhost ~]# rm  -r /opt/abc<br>rm：是否删除目录 &quot;/opt/abc&quot;？y<br><br>[root@localhost ~]# ls /opt<br>abc1  abc2  abc3  home  rh  student  xx  xxoo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时删除多个目录</span><br>[root@localhost ~]# rm -r /opt/abc1 /opt/abc2 /opt/abc3<br>rm：是否删除目录 &quot;/opt/abc1&quot;？y<br>rm：是否删除目录 &quot;/opt/abc2&quot;？y<br>rm：是否删除目录 &quot;/opt/abc3&quot;？y<br><br>[root@localhost ~]# ls /opt<br>home  rh  student  xx  xxoo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时强制删除多个目录</span><br>[root@localhost ~]# rm -rf /opt/home /opt/student /opt/xx /opt/xxoo<br>[root@localhost ~]# ls /opt<br>rh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建目录与文件</span><br>[root@localhost ~]# touch /opt/t1<br>[root@localhost ~]# mkdir /opt/test<br>[root@localhost ~]# ls /opt<br>rh  t1  test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">rm</span>命令在删除目录时，包含改目录及目录下所有数据全部删除</span><br>[root@localhost ~]# rm -rf /opt/<br>[root@localhost ~]# ls /<br><br>[root@localhost ~]# ls /mnt<br>home  oooo  student1  test  test1  test2  test3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用“*”通配任意所有字符，删除/mnt目录下所有数据</span><br>[root@localhost ~]# rm -rf /mnt/*<br>[root@localhost ~]# ls /mnt<br></code></pre></td></tr></table></figure><h4 id="软连接与硬连接"><a href="#软连接与硬连接" class="headerlink" title="软连接与硬连接"></a>软连接与硬连接</h4><ul><li>Linux中的链接文件类似于windows中的快捷方式</li><li>软连接特点：软连接可以跨分区，可以对目录进行链接，源文件删除后，链接文件不可用</li><li>软连接命令格式：ln -s 源文件路径 目标路径</li><li>注意：创建链接时一定要写目录或文件的绝对路径，哪怕是在当前路径下，也要写绝对路径·</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# touch hello.soft<br>[root@localhost ~]# ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建软连接（必须要绝对路径创建）</span><br>[root@localhost ~]# ln -s /root/hello.soft /opt<br>[root@localhost ~]# ls /opt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看连接文件详细属性</span><br>[root@localhost ~]# ls -l /opt/hello.soft <br>lrwxrwxrwx. 1 root root 16 3月  21 14:28 /opt/hello.soft -&gt; /root/hello.soft<br><span class="hljs-meta prompt_">#</span><span class="language-bash">提示：链接文件的权限最终取决于源文件的权限</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">普通用户验证</span><br>[lisi@localhost ~]$ ls /opt<br>hello.soft<br>[lisi@localhost ~]$ ls -l /opt/hello.soft <br>lrwxrwxrwx. 1 root root 16 3月  21 14:28 /opt/hello.soft -&gt; /root/hello.soft<br>[lisi@localhost ~]$ cat /opt/hello.soft <br>cat: /opt/hello.soft: 权限不够<br><span class="hljs-meta prompt_">#</span><span class="language-bash">提示：由于源文件存放于/root目录下，而普通用户对/root目录没有任何权限，所以普通用户无法查看</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除源文件</span><br>[root@localhost ~]# rm -f /root/hello.soft <br>[root@localhost ~]# ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">山粗源文件后，软链接文件不可用</span><br>[root@localhost ~]# ls -l /opt/hello.soft <br>lrwxrwxrwx. 1 root root 16 3月  21 14:28 /opt/hello.soft -&gt; /root/hello.soft<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建文件并创建软连接</span><br>[root@localhost ~]# touch hello.soft<br>[root@localhost ~]# ln -s /root/hello.soft /opt<br><br>[root@localhost ~]# ls -l /opt/hello.soft <br>lrwxrwxrwx. 1 root root 16 3月  21 14:39 /opt/hello.soft -&gt; /root/hello.soft<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除链接文件后，源文件仍然可用</span><br>[root@localhost ~]# rm -f /opt/hello.soft <br>[root@localhost ~]# ls<br>[root@localhost ~]# cat hello.soft <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">对目录创建软连接</span><br>[root@localhost ~]# ln -s /root/test1 /opt/<br><br>[root@localhost ~]# ls -ld /opt/test1<br>lrwxrwxrwx. 1 root root 11 3月  21 14:44 /opt/test1 -&gt; /root/test1<br><br>3创建链接时一定要写目录或文件的绝对路径，哪怕是在当前路径下，也要写绝对路径<br>[root@localhost ~]# ln -s hello.soft /opt<br>[root@localhost ~]# ls /opt<br>hello.soft  test1<br>[root@localhost ~]# ls -l /opt/hello.soft <br>lrwxrwxrwx. 1 root root 10 3月  21 14:47 /opt/hello.soft -&gt; hello.soft<br></code></pre></td></tr></table></figure><ul><li>硬链接特点：硬连接不可以跨分区，不可以对目录进行链接，源文件删除后，链接文件仍然可用</li><li>硬连接命令格式：ln 源文件路径 目标路径</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建文件，并创建硬连接</span><br>[root@localhost ~]# touch hello.hard<br>[root@localhost ~]# ln /root/hello.hard /opt/<br>[root@localhost ~]# ls /opt<br>hello.hard  hello.soft  test1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">向硬连接的源文件写入内容</span><br>root@localhost ~]# echo 123 &gt; /root/hello.hard <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看源文件内容</span><br>[root@localhost ~]# cat /root/hello.hard <br>123<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看链接文件内容，以同步更新</span><br>[root@localhost ~]# cat /opt/hello.hard <br>123<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">向链接文件写入内容，查看源文件以同步更新</span><br>[root@localhost ~]# echo xx &gt;&gt; /opt/hello.hard <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">擦看源文件，以同步更新</span><br>[root@localhost ~]# cat /root/hello.hard <br>123<br>xx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">硬连接文件的特点可以保持文件属性不发生改变</span><br>[root@localhost ~]# ls -l /root/hello.hard <br>-rw-r--r--. 2 root root 7 3月  21 14:55 /root/hello.hard<br>[root@localhost ~]# ls -l /opt/hello.hard <br>-rw-r--r--. 2 root root 7 3月  21 14:55 /opt/hello.hard<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">并且硬连接文件的i节点号相同</span><br>[root@localhost ~]# ls -i /root/hello.hard <br>33711090 /root/hello.hard<br>[root@localhost ~]# ls -i /opt/hello.hard <br>33711090 /opt/hello.hard<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">硬连接不允许对目录进行连接</span><br>root@localhost ~]# ln /root/test1 /opt<br>ln: &quot;/root/test1&quot;: 不允许将硬链接指向目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">硬连接源文件删除后，链接文件仍然可用</span><br>[root@localhost ~]# rm -f /root/hello.hard <br>[root@localhost ~]# cat /opt/hello.hard <br>123<br>xx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">向硬连接文件写入内容</span><br>[root@localhost ~]# echo  abc &gt;&gt; /opt/hello.hard <br>[root@localhost ~]# cat /opt/hello.hard <br>123<br>xx<br>abc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">硬连接不允许跨分区</span><br>[root@localhost ~]# lsblk<br>NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda               8:0    0   20G  0 disk <br>├─sda1            8:1    0    1G  0 part /boot<br>└─sda2            8:2    0   19G  0 part <br>  ├─centos-root 253:0    0   17G  0 lvm  /<br>  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]<br>sr0              11:0    1  4.3G  0 rom  <br>[root@localhost ~]# ln /root/hello.soft /boot<br>ln: 无法创建硬链接&quot;/boot/hello.soft&quot; =&gt; &quot;/root/hello.soft&quot;: 无效的跨设备连接<br></code></pre></td></tr></table></figure><h4 id="内部命令与外部命令"><a href="#内部命令与外部命令" class="headerlink" title="内部命令与外部命令"></a>内部命令与外部命令</h4><ul><li>什么是命令：用来实现某一种功能的指令或程序</li><li>命令的执行依赖于解释器（例如：&#x2F;bin&#x2F;bash），&#x2F;etc&#x2F;shells文件存放系统可用的shell<ul><li>用户——解释器（shell外壳）——内核</li></ul></li><li>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# shell 终端 交互接口 用户接口</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">搜索命令所在的绝对路径</span><br>[root@localhost ~]# which ls<br>alias ls=&#x27;ls --color=auto&#x27;<br>/usr/bin/ls<br><br>root@localhost ~]# ls /usr/bin/ls<br>/usr/bin/ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">直接运行程序文件</span><br>[root@localhost ~]# /usr/bin/ls<br>[root@localhost ~]# /usr/bin/ls /opt<br>hello.hard  hello.softt1  test1  test.txt<br><br>[root@localhost ~]# which cat<br>[root@localhost ~]# ls /usr/bin/cat<br>/usr/bin/cat<br><br>[root@localhost ~]# which pwd<br>/usr/bin/pwd<br></code></pre></td></tr></table></figure><h4 id="Linux命令的分类"><a href="#Linux命令的分类" class="headerlink" title="Linux命令的分类"></a>Linux命令的分类</h4><ul><li>内部命令：shell程序自带的基本管理命令</li><li>外部命令：有独立的外部可执行程序文件命令</li><li>type 用于区别内部命令与外部命令</li><li>which 用于查找可以执行程序文件位置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost opt]# type ls<br><br>[root@localhost opt]# type cat<br><br>[root@localhost opt]# type hash<br><br>[root@localhost ~]# echo $PATH<br>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br><br>[root@localhost ~]# hash<br>命中命令<br>   1/usr/bin/cat<br>   1/usr/bin/ls<br><br><br>[root@localhost opt]# hash -r<br>[root@localhost opt]# <br>[root@localhost opt]# hash<br>hash: 哈希表为空<br><br>[root@localhost opt]# ls<br>hello.hard  hello.soft  t1  test1  test.txt<br>[root@localhost opt]# hash<br>命中命令<br>   1/usr/sbin/ls<br></code></pre></td></tr></table></figure><ul><li>总结：<ul><li>shell程序是用户和系统之间的接口，用于解释用户的命令</li><li>查找命令对应的程序文件所在位置：which 命令</li><li>shell程序大多数存放在&#x2F;etc&#x2F;shells文件中</li><li>系统默认使用的shell为&#x2F;bin&#x2F;bash</li><li>查看当前使用的shell：echo $SHELL</li><li>区别内部命令与外部命令的方式：typt 命令</li><li>shell程序查找可执行程序文件路径定义在$PATH环境变量中</li><li>shell查找的外部命令路径结果会记录到缓存的hash表中</li></ul></li></ul><h4 id="help-命令帮助手册"><a href="#help-命令帮助手册" class="headerlink" title="help 命令帮助手册"></a>help 命令帮助手册</h4><ul><li>help命令用于查看shell内部命令的帮助信息，包括使用方法、选项等…</li><li>命令格式：help [选项] 命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">获取内部命令帮助信息</span><br>[root@localhost etc]# help cd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">help</span>无法获取外部命令的帮助信息</span><br>root@localhost etc]# help ls<br>bash: help: 没有与 `ls&#x27; 匹配的帮助主题。尝试 `help help&#x27; 或者 `man -k ls&#x27; 或者 `info ls&#x27;。<br><br>[root@localhost etc]# type help<br>help 是 shell 内嵌<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取<span class="hljs-built_in">help</span>命令本身的帮助信息</span><br>[root@localhost etc]# help help<br><br>[root@localhost etc]# type cat<br>cat 是 /usr/bin/cat<br><br>[root@localhost etc]# help cat<br>bash: help: 没有与 `cat&#x27; 匹配的帮助主题。尝试 `help help&#x27; 或者 `man -k cat&#x27; 或者 `info cat&#x27;。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看命令帮助手册（命令自带）</span><br>[root@localhost etc]# cat --help<br>[root@localhost etc]# ls --help<br></code></pre></td></tr></table></figure><h4 id="man-获取命令帮助手册"><a href="#man-获取命令帮助手册" class="headerlink" title="man 获取命令帮助手册"></a>man 获取命令帮助手册</h4><ul><li>man 命令用于查看系统命令的帮助信息，包括使用方法、选项、使用例子等…，对比–help ，mna 输出的信息更加详细</li><li>命令格式：man [-选项] 命令</li><li>常用快捷操作<ul><li>向下键向下移一行</li><li>向上键向上移一行</li><li>[Page Down] 向下翻一页</li><li>[Page Up] 向上翻一页</li><li>&#x2F;关键字 #搜索关键字，配合n（向下查询）、N（向上查询）</li><li>q 退出</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost etc]# man ls<br>[root@localhost etc]# man cat<br>[root@localhost etc]# man touch<br>[root@localhost etc]# man mkdir<br>[root@localhost etc]# info ls<br></code></pre></td></tr></table></figure><p>Google&#x2F;百度（Google，算法）</p><h4 id="Linux系统的运行级别"><a href="#Linux系统的运行级别" class="headerlink" title="Linux系统的运行级别"></a>Linux系统的运行级别</h4><p>Linux系统运行级别：linux系统有7个运行级别，不同的运行级别运行的程序和功能都不一样，而Linux系统默认是运行在一个标准的级别上，系统运行级别文件&#x2F;etc&#x2F;inittab文件</p><p>运行级别 0：所有进程被终止，机器将有序的停止，关机时系统处于这个运行级别（关机）</p><p>运行级别 1：单用户模式，（root用户进行系统维护），系统里运行的所有服务也都不会启动</p><p>运行级别 2：多用户模式（网络文件系统NFS服务没有被启动）</p><p>运行级别 3：完全多用户模式，（有NFS网络文件系统）标准的运行级别</p><p>运行级别 4：系统未使用</p><p>运行级别 5：登录后，进入带GUI的图形化界面，标准的运行级别</p><p>运行级别 6：系统正常关闭并重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前系统运行级别</span><br>[root@localhost etc]# runlevel<br>N 5<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释；当前系统处于的运行级别</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释：N代表没有从任何级别跳转过来</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换系统运行级别</span><br>[root@localhost ~]# init N<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看运行级别文件内容</span><br>[root@localhost ~]# cat /etc/inittab <br><span class="hljs-meta prompt_"># </span><span class="language-bash">inittab is no longer used when using systemd.</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># ADDING CONFIGURATION HERE WILL HAVE NO EFFECT ON YOUR SYSTEM.</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># Ctrl-Alt-Delete is handled by /usr/lib/systemd/system/ctrl-alt-del.target</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># systemd uses &#x27;targets&#x27; instead of runlevels. By default, there are two main targets:</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># multi-user.target: analogous to runlevel 3   #运行级别3</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">graphical.target: analogous to runlevel 5    <span class="hljs-comment">#运行级别5</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># To view current default target, run:</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl get-default     <span class="hljs-comment">#查看当前系统默认的运行级别</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment"># To set a default target, run:</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">systemctl set-default TARGET.target    <span class="hljs-comment">#修改当前系统默认运行级别</span></span>  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看默认运行级别</span><br>[root@localhost ~]# systemctl get-default<br>graphical.target  #默认运行级别为5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"> #</span><span class="language-bash">修改默认运行级别为3</span><br>[root@localhost ~]# systemctl set-default multi-user.target <br>[root@localhost ~]# systemctl get-default<br>multi-user.target<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认运行级别为5</span><br>[root@localhost ~]# systemctl set-default graphical.target<br>[root@localhost ~]# systemctl get-default<br>graphical.target<br></code></pre></td></tr></table></figure><h4 id="关机与重启"><a href="#关机与重启" class="headerlink" title="关机与重启"></a>关机与重启</h4><ul><li>linux下常用的关机命令有：shutdown、halt、poweroff、init<ul><li>init 0 关机</li><li>halt #立刻关机</li><li>poweroff #立刻关机 （记这个）</li><li>shutdown –h now #立刻关机</li><li>shutdown -h 10 #10分钟后自动关机</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# poweroff<br></code></pre></td></tr></table></figure><ul><li>重启命令：reboot shutdown<ul><li>reboot #立刻重启 （记这个）</li><li>shutdown -r now #立刻重启</li><li>shutdown -r 10 #过十分钟后重启</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# reboot<br></code></pre></td></tr></table></figure><h4 id="课后作业"><a href="#课后作业" class="headerlink" title="课后作业"></a>课后作业</h4><p>1.请在&#x2F;tmp目录下创建student目录，并在student目录下同时创建t1、t2、t3文件</p><p>mkdir &#x2F;tmp&#x2F;student</p><p>cd &#x2F;tmp&#x2F;student&#x2F;</p><p>touch t1 t2 t3</p><p>touch &#x2F;tmp&#x2F;student&#x2F;t1 &#x2F;tmp&#x2F;student&#x2F;t2 &#x2F;tmp&#x2F;student&#x2F;t3</p><p>2.请在&#x2F;tmp目录下递归创建test1&#x2F;test2&#x2F;test3目录</p><p>mkdir -p &#x2F;tmp&#x2F;test1&#x2F;test2&#x2F;test3</p><p>3.切换到&#x2F;tmp&#x2F;test1&#x2F;test2&#x2F;test3目录下，并打印(查看)当前所在目录</p><p>cd &#x2F;tmp&#x2F;test1&#x2F;test2&#x2F;test3</p><p>pwd</p><p>4.请同时在&#x2F;opt、&#x2F;media目录下创建upload文件</p><p>touch &#x2F;opt&#x2F;upload &#x2F;media&#x2F;upload</p><p>5.请将&#x2F;opt目录下的upload文件移动至&#x2F;tmp&#x2F;test1&#x2F;test2&#x2F;test3目录下，并改名为upload.bak</p><p>mv &#x2F;opt&#x2F;upload &#x2F;tmp&#x2F;test&#x2F;1&#x2F;test&#x2F;2&#x2F;test3&#x2F;upload.bak</p><p>6.请将&#x2F;etc&#x2F;passwd文件拷贝至&#x2F;opt目录下，改名为passwd.bak，并保持属性不变</p><p>cp -p &#x2F;etc&#x2F;passwd &#x2F;opt&#x2F;passwd.bak</p><p>7.请将&#x2F;etc&#x2F;fstab文件拷贝至&#x2F;opt目录下，并改名为fstab.bak</p><p>cp -p &#x2F;etc&#x2F;fstab &#x2F;opt&#x2F;fstab.bak</p><p>8.请将&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32 文件拷贝至&#x2F;opt目录下，并改名为ens32.bak</p><p>cp &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32 &#x2F;opt&#x2F;ens32.bak</p><p>9.请删除&#x2F;etc&#x2F;yum.repos.d&#x2F;目录下所有内容</p><p>rm -rf &#x2F;etc&#x2F;yum.repos.d&#x2F;*</p><p>10.请在&#x2F;etc&#x2F;yum.repos.d&#x2F;目录下创建local.repo文件</p><p>touch &#x2F;etc&#x2F;yum.repos.d&#x2F;local.repo</p><p>11.请查看&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32文件末尾5行内容</p><p>tail -5 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32</p><p>tail -n 5 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32</p><p>12.请查看&#x2F;etc&#x2F;passwd文件第1行内容</p><p>head -n 1 &#x2F;etc&#x2F;passwd</p><p>head -1 &#x2F;etc&#x2F;passwd</p><p>13.请查看&#x2F;etc&#x2F;hostname文件内容</p><p>cat &#x2F;etc&#x2F;hostname</p><p>14.请查看&#x2F;etc&#x2F;hosts文件内容</p><p>cat &#x2F;etc&#x2F;hosts</p><p>15.请说出软连接与硬连接的特点</p><p>软连接：可以跨分区，可以对目录链接，源文件删除后链接文件不可用</p><p>硬连接：不可以跨分区，不可以对目录进行连接，源文件删除后，链接文件以然可用</p><p>16.请在&#x2F;opt目录下创建hello.soft文件，并创建软连接到&#x2F;tmp目录下</p><p>touch &#x2F;opt&#x2F;hello.soft</p><p>ln -s &#x2F;opt&#x2F;hello.soft &#x2F;tmp</p><p>17.请在&#x2F;opt目录下创建hello.hard文件，并创建硬连接到&#x2F;tmp目录下，并查看连接文件详细属性</p><p>touch &#x2F;opt&#x2F;hello.hard</p><p>ln &#x2F;opt&#x2F;hello.hard &#x2F;tmp</p><p>18.如何获取ls命令的帮助信息？</p><p>man ls</p><p>ls –help</p><p>19.请说出Linux系统的运行级别</p><p>0：关机</p><p>1：单用户模式</p><p>2：多用户模式（没有NFS）</p><p>3：完全多用户模式，标准运行级别</p><p>4：保留</p><p>5：带GUI图形化界面，标准的运行级别</p><p>6：系统关闭并重启</p><p>20.如何重启Linux系统？</p><p>reboot</p><p>init 6</p><h4 id="计算机硬件组成部分"><a href="#计算机硬件组成部分" class="headerlink" title="计算机硬件组成部分"></a>计算机硬件组成部分</h4><ul><li><p>输入设备：键盘、鼠标、触控屏等</p></li><li><p>主机设备：主板、中央处理器（CPU）、主存储器（内存）、网卡、声卡、显示卡等</p></li><li><p>输出设备：屏幕、耳机、打印机、投影仪等</p></li><li><p>外部存储设备：硬盘、软盘、光盘、U盘等、蓝光光驱</p></li><li><p>硬盘：传统硬盘(HDD)&#x3D;&#x3D;固态硬盘(SSD)</p></li><li><p>CPU缓存</p></li><li><p>CPU比较主流的厂商</p><ul><li>AMD公司</li><li>Interl公司</li></ul></li><li><p>CPU架构</p><ul><li>x86架构，8086架构，80286，80386，x86称号</li><li>8位、16位、32位、64位，CPU一次可以处理的数据量，</li><li>32位CPU一次可以从内存中读取大约3.25G左右的数据量</li><li>64位CPU一次可以从内存中读取大约128G左右的数据量</li></ul></li><li><p>CPU核心</p><ul><li>单核心，一颗CPU只能有一个运算单元</li><li>多核心，一颗CPU里边有两个以上的运算单元</li></ul></li><li><p>计算机什么最重要？想要让计算机运行起来，足够的电力</p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxNjkwOTE1OTA2Mi5wbmc." alt="1616909159062"></p></li></ul><h4 id="Linux系统目录介绍"><a href="#Linux系统目录介绍" class="headerlink" title="Linux系统目录介绍"></a>Linux系统目录介绍</h4><ul><li>&#x2F;（根）:系统所有数据都存放在根目录下</li><li>&#x2F;bin：存放用户和管理员必备的可执行的二进制程序文件</li><li>&#x2F;boot：存放Linux系统内核及引导系统程序所需要的文件目录</li><li>&#x2F;dev：存放硬件设备的目录，如键盘、鼠标、硬盘、光盘等等</li><li>&#x2F;etc：存放服务的配置文件，用户信息文件</li><li>&#x2F;root：超级管理员的家目录</li><li>&#x2F;home：系统普通用户的家目录</li><li>&#x2F;lib：存放系统中的程序运行所需要的共享库及内核模块</li><li>&#x2F;opt：额外安装的可选应用程序包所放置的位置</li><li>&#x2F;srv：服务启动之后需要访问的数据目录</li><li>&#x2F;tmp：一般用户或正在执行的程序临时存放文件的目录,任何人都可以访问,重要数据不可放置在此目录下</li><li>&#x2F;var：存放系统执行过程中经常变化的文件，如随时都在变化的日志文件就存放&#x2F;var&#x2F;log&#x2F;下</li><li>&#x2F;mnt、&#x2F;media ：光盘和镜像等预设的挂载点</li><li>&#x2F;proc：Linux伪文件系统，该目录下的数据存在于内存当中，不占用磁盘空间</li><li>&#x2F;lib64 ：存放函式库</li><li>&#x2F;run ：程序或服务启动后，存放PID的目录</li><li>&#x2F;sys：存放被建立在内存中的虚拟文件系统</li><li>&#x2F;usr：操作系统软件资源所放置的目录<ul><li>&#x2F;usr&#x2F;bin：与&#x2F;bin目录相同，存放用户可以使用的命令程序</li><li>&#x2F;usr&#x2F;lib：与&#x2F;lib目录相同，存放系统中的程序运行所需要的共享库及内核模块</li><li>&#x2F;usr&#x2F;etc：用于存放安装软件时使用的配置文件</li><li>&#x2F;usr&#x2F;games：与游戏比较相关的数据放置处</li><li>&#x2F;usr&#x2F;include：c&#x2F;c++等程序语言的档头(header)与包含档(include)放置处</li><li>&#x2F;usr&#x2F;lib64：与&#x2F;lib64目录相同，存放函式库</li><li>&#x2F;usr&#x2F;libexec：不经常被使用的执行程序或脚本会放置在此目录中</li><li>&#x2F;usr&#x2F;local： 额外安装的软件存放目录</li><li>&#x2F;usr&#x2F;sbin：该目录与&#x2F;sbin目录相同，存放用户可执行的二进制程序文件</li><li>&#x2F;usr&#x2F;share： 放置只读架构的杂项数据文件</li><li>&#x2F;usr&#x2F;src：一般软件源代码建议存放该目录下</li></ul></li></ul><h4 id="查看内核信息"><a href="#查看内核信息" class="headerlink" title="查看内核信息"></a>查看内核信息</h4><ul><li>uname 命令用于显示系统内核信息</li><li>命令格式：uname [-选项…]</li><li>常用选项：<ul><li>-s ：显示内核名称</li><li>-r ：显示内核版本</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# uname<br>Linux<br><br>[root@localhost ~]# uname -rs<br>Linux 3.10.0-957.el7.x86_64<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释：</span><br>Linux #内核名称<br>3#主版本<br>10#次版本<br>0#修改版本<br>957#补丁次数<br>el7#Enterprise Linux（企业版Linux）<br>x86_64#CPU架构<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Linux内核官网</span><br>https://www.kernel.org/<br></code></pre></td></tr></table></figure><h4 id="查看CPU信息"><a href="#查看CPU信息" class="headerlink" title="查看CPU信息"></a>查看CPU信息</h4><ul><li>&#x2F;proc&#x2F;cpuinfo文件用于存放系统CPU信息</li><li>lscpu 用于显示CPU架构信息</li><li>命令格式：lscpu [-选项]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看/proc/cpuinfo文件内容</span><br>[root@localhost ~]# cat /proc/cpuinfo <br>processor　：#系统中逻辑处理核的编号。对于单核处理器，则可认为是其CPU编号，对于多核处理器则可以是物理核、或者使用超线程技术虚拟的逻辑核<br>vendor_id　：   #CPU制造商     <br>cpu family　：  #CPU产品系列代号<br>model　　　：    #CPU属于其系列中的哪一代的代号<br>model name：    #CPU属于的名字及其编号、标称主频<br>stepping　  ：   #CPU属于制作更新版本<br>cpu MHz　  ：    #CPU的实际使用主频<br>cache size   ：  #CPU二级缓存大小<br>physical id   ： #单个CPU的标号<br>siblings       ：#单个CPU逻辑物理核数<br>core id        ：#当前物理核在其所处CPU中的编号，这个编号不一定连续<br>cpu cores    ：  #该逻辑核所处CPU的物理核数<br>apicid          ：#用来区分不同逻辑核的编号，系统中每个逻辑核的此编号必然不同，此编号不一定连续<br>fpu             ： #是否具有浮点运算单元（Floating Point Unit）<br>fpu_exception  ：  #是否支持浮点计算异常<br>cpuid level   ：   #执行cpuid指令前，eax寄存器中的值，根据不同的值cpuid指令会返回不同的内容<br>wp             ：  #表明当前CPU是否在内核态支持对用户空间的写保护（Write Protection）<br>flags          ：   #当前CPU支持的功能<br>bogomips   ：       #在系统内核启动时粗略测算的CPU速度（Million Instructions Per Second）<br>clflush size  ：    #每次刷新缓存的大小单位<br>cache_alignment ：  #缓存地址对齐单位<br>address sizes     ：#可访问地址空间位数<br>power management ： #对能源管理的支持，有以下几个可选支持功能：<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用lscpu查看cpu信息</span><br>[root@localhost ~]# lscpu<br>　Architecture: #架构 <br>　　CPU(s): #逻辑cpu颗数 <br>　　Thread(s) per core: #每个核心线程 <br>　　Core(s) per socket: #每个cpu插槽核数/每颗物理cpu核数 <br>　　CPU socket(s): #cpu插槽数 <br>　　Vendor ID: #cpu厂商ID <br>　　CPU family: #cpu系列 <br>　　Model: #型号 <br>　　Stepping: #步进 <br>　　CPU MHz: #cpu主频 <br>　　Virtualization: #cpu支持的虚拟化技术 <br>　　L1d cache: #一级缓存（google了下，这具体表示表示cpu的L1数据缓存） <br>　　L1i cache: #一级缓存（具体为L1指令缓存） <br>　　L2 cache: #二级缓存<br></code></pre></td></tr></table></figure><h4 id="查看系统内存信息"><a href="#查看系统内存信息" class="headerlink" title="查看系统内存信息"></a>查看系统内存信息</h4><ul><li>&#x2F;proc&#x2F;meminfo文件用于存放系统内存信息</li><li>free 用于查看内存使用情况</li><li>命令格式：free [-选项]</li><li>常用选项：-h #以人类易读方式显示大小（KB，MB，GB）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看/proc/meminfo文件内容</span><br>[root@localhost ~]# cat /proc/meminfo <br>MemTotal:          995896 kB    #所有可用的内存大小，物理内存减去预留位和内核使用。系统从加电开始到引导完成，firmware/BIOS要预留一些内存，内核本身要占用一些内存，最后剩下可供内核支配的内存就是MemTotal。这个值在系统运行期间一般是固定不变的，重启会改变。<br>MemFree:            244196 kB   #表示系统尚未使用的内存。<br>MemAvailable:       435080 kB   #真正的系统可用内存，系统中有些内存虽然已被使用但是可以回收的，比如cache/buffer、slab都有一部分可以回收，所以这部分可回收的内存加上MemFree才是系统可用的内存<br>Buffers:             2132 kB   #用来给块设备做缓存的内存，(文件系统的 metadata、pages)<br>Cached:             314632 kB  #分配给文件缓冲区的内存,例如vi一个文件，就会将未保存的内容写到该缓冲区<br>SwapCached:            0 kB    #被高速缓冲存储用的交换空间（硬盘的swap）的大小<br>Active:            295908 kB    #经常使用的高速缓冲存储器页面文件大小<br>Inactive:          271552 kB    #不经常使用的高速缓冲存储器文件大小<br>Active(anon):      251528 kB    #活跃的匿名内存<br>Inactive(anon):     13044 kB    #不活跃的匿名内存<br>Active(file):       44380 kB    #活跃的文件使用内存<br>Inactive(file):    258508 kB   #不活跃的文件使用内存<br>Unevictable:           0 kB    #不能被释放的内存页<br>Mlocked:               0 kB    #系统调用 mlock 家族允许程序在物理内存上锁住它的部分或全部地址空间。这将阻止Linux 将这个内存页调度到交换空间（swap space），即使该程序已有一段时间没有访问这段空间<br>SwapTotal:             0 kB    #交换空间总内存<br>SwapFree:              0 kB    #交换空间空闲内存<br>Dirty:                 4 kB    #等待被写回到磁盘的<br>Writeback:             0 kB    #正在被写回的<br>AnonPages:         15100 kB    #未映射页的内存/映射到用户空间的非文件页表大小<br>Mapped:             7160 kB    #映射文件内存<br>Shmem:               100 kB    #已经被分配的共享内存<br>Slab:               9236 kB    #内核数据结构缓存<br>SReclaimable:       2316 kB    #可收回slab内存<br>SUnreclaim:         6920 kB    #不可收回slab内存<br>KernelStack:        2408 kB    #内核消耗的内存<br>PageTables:         1268 kB    #管理内存分页的索引表的大小<br>NFS_Unstable:          0 kB    #不稳定页表的大小<br>Bounce:                0 kB    #在低端内存中分配一个临时buffer作为跳转，把位于高端内存的缓存数据复制到此处消耗的内存<br>WritebackTmp:          0 kB    #FUSE用于临时写回缓冲区的内存<br>CommitLimit:       22980 kB    #系统实际可分配内存<br>Committed_AS:     536244 kB    #系统当前已分配的内存<br>VmallocTotal:     892928 kB    #预留的虚拟内存总量<br>VmallocUsed:       29064 kB    #已经被使用的虚拟内存<br>VmallocChunk:     860156 kB    #可分配的最大的逻辑连续的虚拟内存<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用free命令查看内存使用情况</span><br>[root@localhost ~]# free -h<br>              total        used        free      shared  buff/cache   available<br>Mem:           972M        344M        238M         13M        389M        424M<br>Swap:          2.0G          0B        2.0G<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释：Mem 物理内存统计信息</span><br>total：#物理内存总量<br>used：#以使用的内存总量<br>free：#空闲内存总量<br>shared：#共享内存总量<br>buff/cache：#块设备与普通文件占用的缓存数量<br>available：#还可以被应用程序使用的物理内存大小<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释：Swap 内存交换空间，当物理内存不足时，可以使用硬盘空间充当内存使用</span><br>total：#交换分区内存总量<br>used：#正在使用的交换分区内存<br>free：#空闲交换分区内存<br></code></pre></td></tr></table></figure><h4 id="查看网卡信息"><a href="#查看网卡信息" class="headerlink" title="查看网卡信息"></a>查看网卡信息</h4><ul><li>网卡配置文件地址： &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;网卡名</li><li>ifconfig 用于显示和设置网卡的参数</li><li>命令格式： ifconfig [网卡名]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cat /etc/sysconfig/network-scripts/ifcfg-ens32<br>TYPE=“Ethernet“#网卡类型=以太 ※<br>PROXY_METHOD=“none“#代理方式=关闭<br>BROWSER_ONLY=&quot;no“#只是浏览器=否<br>BOOTPROTO=“none“#获取IP地址的方式=固定IP ※<br>DEFROUTE=“yes“#是否设置默认路由=是<br>IPV4_FAILURE_FATAL=“no“#是否开启ipv4致命检测=否（如果ipv4配置失败禁用设备）<br>NAME=“ens32“#物理网卡设备名字 ※<br>UUID=“3ef0d258-f9a4-49e5-a9da-7b47bc98daa0“#网卡UUID<br>DEVICE=“ens32“#网卡名字 ※<br>ONBOOT=“yes“#开机或重启时是否启动网卡  ※<br>IPADDR=“192.168.0.210“#IP地址  ※<br>PREFIX=“24“#子网掩码 ※<br>GATEWAY=“192.168.0.254“#网关※<br>DNS1=“8.8.8.8“#dns服务器IP地址 ※<br>DNS2=8.8.4.4#备用dns服务器IP地址 ※<br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用ifconfig命令查看网卡信息</span><br>[root@localhost ~]# ifconfig<br>ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 192.168.0.29  netmask 255.255.255.0  broadcast 192.168.0.255<br>        inet6 fe80::8d50:c4d5:97b0:9d64  prefixlen 64  scopeid 0x20&lt;link&gt;<br>        ether 00:0c:29:b0:cf:c8  txqueuelen 1000  (Ethernet)<br>        RX packets 3948  bytes 1811465 (1.7 MiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 2538  bytes 459113 (448.3 KiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释：</span><br>ens32: #网卡名称  ※<br>flags=4163：#标志<br>UP：#网卡处于活跃状态  ※<br>BROADCAST：#支持广播<br>RUNNING：#网线已接入<br>MULTICAST：#支持组播<br>mtu 1500：#最大传输单元（字节），表示此网卡一次能传输的最大数据包 ※<br>inet 192.168.0.29#IPV4地址 ※<br>netmask 255.255.255.0#子网掩码 ※<br>broadcast 192.168.0.255#广播地址 ※<br>inet6 fe80::8d50:c4d5:97b0:9d64#IPV6地址<br>prefixlen 64  scopeid 0x20&lt;link&gt;#前缀 64 作用域 0x20<br>ether 00:0c:29:b0:cf:c8#网卡MAC地址 ※<br>xqueuelen 1000#网卡设置的传送队列长度<br>(Ethernet)#网卡连接类型<br>RX packets 3948#接收正确的数据包 ※<br>bytes 1811465 (1.7 MiB)#接收的数据量与字节 ※<br>RX errors 0  dropped 0  overruns 0  frame 0 #接收到的错误包、丢弃的数据包数、由于速度过快而丢失的数据包、发生frame错误而丢失的数据包数 ※<br>TX packets 100 #发送的正确的数据包数 ※<br>bytes 8116 (7.9 KiB)#发送的数据量、字节  ※<br>TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0 #发送时产生错误的数据包数、丢弃的数据包数、由于速度过快而丢失的数据包数、发生carrier错误而丢失的数据包数、冲突信息包的数目 ※<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">只查看指定的网卡</span><br>[root@localhost ~]# ifconfig ens32<br><br><br>lo: 本地回环网卡，不是物理网卡，通过软件虚拟出来的一个网卡，127.0.0.1，用于测试本机的联通性<br>[root@localhost ~]# ping 127.0.0.1<br><br>virbr0: 虚拟化的网络接口，通过软件技术虚拟出来的一个网卡，192.168.122.1，KVM虚拟化技术的时候<br></code></pre></td></tr></table></figure><h4 id="查看主机名及修改主机名"><a href="#查看主机名及修改主机名" class="headerlink" title="查看主机名及修改主机名"></a>查看主机名及修改主机名</h4><ul><li>&#x2F;etc&#x2F;hostname文件用于存放主机名</li><li>hostname 命令用于显示和设置主机名</li><li>命令格式：hostname [-选项] [新名称]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看主机名</span><br>[root@localhost ~]# hostname<br>localhost.localdomain<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看主机名配置文件</span><br>[root@localhost ~]# cat /etc/hostname <br>localhost.localdomain<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">临时修改主机名（立刻生效，服务器重启以后失效）</span><br>[root@localhost ~]# hostname test<br>[root@localhost ~]# hostname<br>test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-built_in">exit</span>/loguot登出系统</span><br>[root@localhost ~]# exit<br>[c:\~]$ ssh 192.168.0.50<br>[root@test ~]# <br><br>[root@test ~]# hostname fhsd.jhglshdjkghjkdfhgkjhgdsahgjklhdsfjghsdhgjlhsd<br>[root@test ~]# logout<br><br>[root@fhsd ~]# hostname sdhjghsdfjkhgkjdfshkgljhsdjfhgjksdhgjkhsdjgjkl<br>[root@fhsd ~]# exit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">命令行永久修改主机名（立刻生效，不需要重启系统）</span><br>[root@localhost ~]# hostnamectl set-hostname test<br>[root@localhost ~]# exit<br></code></pre></td></tr></table></figure><h4 id="vi-x2F-vim文本编辑器"><a href="#vi-x2F-vim文本编辑器" class="headerlink" title="vi&#x2F;vim文本编辑器"></a>vi&#x2F;vim文本编辑器</h4><ul><li>Vim是从 vi 发展出来的一个文本编辑器，vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性</li><li>vi&#x2F;vim 共分为三种模式：命令模式、输入模式、底线命令模式（末行模式）<ul><li>命令模式：刚刚启动 vi&#x2F;vim，便进入了命令模式</li><li>输入模式：在命令模式下按 a&#x2F;i&#x2F;o 就进入了输入模式</li><li>ESC，退出输入模式，切换到命令模式</li><li>底线命令模式：在命令模式下按下:（英文冒号）就进入了底线命令模式</li></ul></li><li>命令格式：vim 文件名<ul><li>若目标文件不存在，则新创建文件并编辑</li><li>若目标文件以存在，则打开文件并编辑</li></ul></li><li>命令模式：刚刚启动 vi&#x2F;vim，便进入了命令模式<ul><li>i 切换到输入模式，在当前光标所在字符前插入</li><li>a 切换到输入模式，在当前光标所在字符后插入</li><li>o 切换到输入模式，在当前光标所在行下插入新行</li><li>: 切换到底线命令模式，以在最底一行输入命令</li><li>x 在命令模式下删除当前光标所在的单字符</li><li>dd 删除一整行内容，配合数字可删除指定范围内的行</li><li>C 删除当前光标及光标后所有内容并进入输入模式</li><li>u 恢复上一次修改内容，一次恢复一个操作，可多次恢复，直到恢复本次操作初始状态为止</li><li>$ 将光标移动至行尾</li><li>0（零） 将光标移动至行首</li><li>gg 跳转至文件第一行</li><li>G 跳转至文件最后一行</li><li>yy 复制当前行，配合数字可以同时复制多行</li><li>p 粘贴当前光标所在行下</li><li>&#x2F;关键字 搜索文件内关键字，n从上向下快速定位关键字，N从下向上快速定位关键字</li></ul></li><li>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。<ul><li>:w 保存</li><li>:q 退出</li><li>:wq 保存并退出</li><li>:q! 强制退出不保存</li><li>:wq! 强制保存并退出</li><li>:set nu 以行号形式显示文件内容</li><li>:set nonu 取消行号显示</li><li>:行号 快速跳转到指定行</li><li>:r 读入另一个文件的数据 , 文件内容填加到光标的下一行</li><li>:nohl 取消高亮显示</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@test ~]# vim /etc/services <br></code></pre></td></tr></table></figure><h4 id="修改网卡IP地址"><a href="#修改网卡IP地址" class="headerlink" title="修改网卡IP地址"></a>修改网卡IP地址</h4><ul><li>网卡配置文件地址： &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;网卡名</li><li>ifconfig #用于显示和设置网卡的参数</li><li>systemctl restart network #重启网络</li><li>ifup 网卡名 #启动该网卡设备</li><li>ifdown 网卡名 #禁用该网卡设备</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改IP地址</span><br>[root@test ~]# vim /etc/sysconfig/network-scripts/ifcfg-ens32 <br>TYPE=&quot;Ethernet&quot;<br>PROXY_METHOD=&quot;none&quot;<br>BROWSER_ONLY=&quot;no&quot;<br>BOOTPROTO=&quot;none&quot;<br>DEFROUTE=&quot;yes&quot;<br>IPV4_FAILURE_FATAL=&quot;no&quot;<br>IPV6INIT=&quot;yes&quot;<br>IPV6_AUTOCONF=&quot;yes&quot;<br>IPV6_DEFROUTE=&quot;yes&quot;<br>IPV6_FAILURE_FATAL=&quot;no&quot;<br>IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;<br>NAME=&quot;ens32&quot;<br>UUID=&quot;16085f4c-f690-4058-b29e-d55c73387026&quot;<br>DEVICE=&quot;ens32&quot;<br>ONBOOT=&quot;yes&quot;<br>IPADDR=&quot;192.168.0.60&quot;   #修改IP地址<br>PREFIX=&quot;24&quot;<br>GATEWAY=&quot;192.168.0.254&quot;<br>DNS1=&quot;114.114.114.114&quot;<br>IPV6_PRIVACY=&quot;no&quot;<br>~                    <br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启网络（IP地址发生改变，当前终端会断开）</span><br>[root@test ~]# systemctl restart network<br>[c:\~]$ ssh 192.168.0.60<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动该网卡</span><br>[root@test ~]# ifup ens32<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看所有网卡信息</span><br>[root@test ~]# ip a <br></code></pre></td></tr></table></figure><ul><li>使用命令修改网卡IP地址</li></ul><p>nmcli connection modify 网卡名 ipv4.method manual ipv4.addresses Ip地址&#x2F;掩码 connection.autoconnect yes</p><p>解释：</p><p>nmcli connection modify（修改）</p><p>网卡名 ipv4.method（配置ipv4地址方法）</p><p>manual （手动配置）</p><p>ipv4.addresses（ipv4地址）</p><p>Ip地址&#x2F;掩码 connection.autoconnect yes（开机自动连接）</p><ul><li>激活网卡：nmcli connection up 网卡名</li><li>关闭网卡：nmcli connection down 网卡名</li><li>重启网卡：nmcli connection reload 网卡名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">使用命令修改网卡IPV地址</span><br>[root@test ~]# nmcli connection modify ens32 ipv4.method manual ipv4.addresses 192.168.0.50/24 connection.autoconnect yes<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">激活网卡</span><br>[root@test ~]# nmcli connection up ens32<br>[c:\~]$ ssh 192.168.0.50<br></code></pre></td></tr></table></figure><h4 id="host命令"><a href="#host命令" class="headerlink" title="host命令"></a>host命令</h4><ul><li>host用于将一个域名解析到一个IP地址</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@test ~]# host www.baidu.com<br>www.baidu.com has address 110.242.68.3<br>www.baidu.com has address 110.242.68.4<br>www.baidu.com is an alias for www.a.shifen.com.<br>www.baidu.com is an alias for www.a.shifen.com.<br></code></pre></td></tr></table></figure><h4 id="nslookup命令"><a href="#nslookup命令" class="headerlink" title="nslookup命令"></a>nslookup命令</h4><ul><li>nslookup用于查询域名解析是否正常，在网络故障时用来诊断网络问题</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@test ~]# nslookup www.baidu.com<br>Server:114.114.114.114<br>Address:114.114.114.114#53<br><br>Non-authoritative answer:<br>Name:www.baidu.com<br>Address: 110.242.68.4<br>Name:www.baidu.com<br>Address: 110.242.68.3<br></code></pre></td></tr></table></figure><h4 id="alias别名管理"><a href="#alias别名管理" class="headerlink" title="alias别名管理"></a>alias别名管理</h4><ul><li>alias命令用于设置命令别名，用户可以使用alias自定义命令别名来简化命令的复杂度</li><li>.bashrc 文件存放命令别名</li><li>命令格式：aliasi [别名]&#x3D;[命令] #注意事项：等号（&#x3D;）前后不能有空格</li><li>unalias 别名 #取消别名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">定义别名</span><br>[root@test ~]# alias lsnet=&#x27;ls /etc/sysconfig/network-scripts/&#x27;<br>[root@test ~]# lsnet<br>[root@test ~]# alias myls=&#x27;ls -ldh&#x27;<br>[root@test ~]# myls /opt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看当前系统可用命令别名</span><br>[root@test ~]# alias<br>alias cp=&#x27;cp -i&#x27;<br>alias egrep=&#x27;egrep --color=auto&#x27;<br>alias fgrep=&#x27;fgrep --color=auto&#x27;<br>alias grep=&#x27;grep --color=auto&#x27;<br>alias l.=&#x27;ls -d .* --color=auto&#x27;<br>alias ll=&#x27;ls -l --color=auto&#x27;<br>alias ls=&#x27;ls --color=auto&#x27;<br>alias lsnet=&#x27;ls /etc/sysconfig/network-scripts/&#x27;<br>alias mv=&#x27;mv -i&#x27;<br>alias myls=&#x27;ls -ldh&#x27;<br>alias rm=&#x27;rm -i&#x27;<br>alias which=&#x27;alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde&#x27;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">两条命令效果相同</span><br>[root@test ~]# ls -l hello<br>-rw-r--r--. 1 root root 426 3月  28 15:00 hello<br>[root@test ~]# ll hello<br>-rw-r--r--. 1 root root 426 3月  28 15:00 hello<br><br>[root@test ~]# which ls<br>alias ls=&#x27;ls --color=auto&#x27;<br>/usr/sbin/ls<br>[root@test ~]# /usr/sbin/ls<br>[root@test ~]# ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">取消本次命令的别名功能“\”</span><br>[root@test ~]# \ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">取消命令别名</span><br>[root@test ~]# unalias myls<br>[root@test ~]# myls<br>bash: myls: 未找到命令...<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">定义别名不要跟系统命令发生冲突</span><br>[root@test ~]# alias ls=hostname<br>[root@test ~]# ls<br>test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">取消命令别名</span><br>[root@test ~]# unalias ls<br>[root@test ~]# alias<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重新定义别名</span><br>[root@test ~]# alias ls=&#x27;ls --color=auto&#x27;<br>[root@test ~]# ls<br></code></pre></td></tr></table></figure><h4 id="history-管理历史"><a href="#history-管理历史" class="headerlink" title="history 管理历史"></a>history 管理历史</h4><ul><li>history命令用于显示历史记录和执行过的命令，登录shell时会读取~.&#x2F;bash_history历史文件中记录下的命令，当退出或登出shell时，会自动保存到历史命令文件，该命令单独使用时，仅显示历史命令</li><li>历史命令默认只能存储1000条，可以通过&#x2F;etc&#x2F;profile文件修改</li><li>命令格式：history [-选项] [参数]</li><li>常用选项：<ul><li>-a 追加本次新执行的命令至历史命令文件中</li><li>-d 删除历史命令中指定的命令</li><li>-c 清空历史命令列表</li></ul></li><li>快捷操作：<ul><li>!# 调用命令历史中第N条命令</li><li>!string 调用命令历史中以strind开头的命令</li><li>!! 重复执行上一条命令</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">获取命令帮助</span><br>[root@test ~]# help history <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看历史命令</span><br>[root@test ~]# history<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看记录历史命令文件</span><br>[root@test ~]# cat .bash_history <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将历史命令同步至历史命令配置文件中</span><br>[root@test ~]# history -a<br>[root@test ~]# cat .bash_history <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除历史命令中655条命令历史</span><br>[root@test ~]# history -d 655<br>[root@test ~]# history -d 637<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">清空缓存中所有历史命令</span><br>[root@test ~]# history -c<br>[root@test ~]# history<br>    1  history<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除历史命令配置文件（该文件删除后系统会再次自动创建）</span><br>[root@test ~]# rm -rf .bash_history <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">快速调用历史命令中第1条</span><br>[root@test ~]# !1<br>[root@test ~]# !3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">调用历史命令中以<span class="hljs-built_in">cat</span>开头的命令（只调用最近使用的<span class="hljs-built_in">cat</span>历史命令）</span><br>[root@test ~]# !cat<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重复执行上一条命令</span><br>[root@test ~]# !!<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">历史命令默认只能记录1000条，可以通过/etc/profile文件修改</span><br>[root@test ~]# vim /etc/profile<br>...<br>46 HISTSIZE=100<br></code></pre></td></tr></table></figure><h4 id="date日期时间管理"><a href="#date日期时间管理" class="headerlink" title="date日期时间管理"></a>date日期时间管理</h4><ul><li>date命令用于显示或设置系统日期与时间</li><li>命令格式：date [-选项] [+格式符] #查看系统日期时间</li><li>date [-选项] [MMDDhhmm[[CC]YY][.ss]] #设置日期时间</li><li>常用选项：-s 设置日期时间</li><li>格式符：<ul><li>+%Y 年份</li><li>+%B 月份</li><li>+%d 日</li><li>+%H 时</li><li>+%M 分</li><li>+%S 秒</li><li>+%F 年-月-日</li><li>+%X 时：分：秒</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">显示系统日期与时间</span><br>[root@test ~]# date<br>2021年 03月 28日 星期日 17:08:34 CST<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">只显示年分</span><br>[root@test ~]# date +%Y<br>2021<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">只显示月份</span><br>[root@test ~]# date +%B<br>三月<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">只显示几号</span><br>[root@test ~]# date +%d<br>28<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">只显示小时</span><br>[root@test ~]# date +%H<br>17<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">只显示分钟</span><br>[root@test ~]# date +%M<br>10<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">只显示秒</span><br>[root@test ~]# date +%S<br>24<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示年月日</span><br>[root@test ~]# date +%F<br>2021-03-28<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示时分秒</span><br>[root@test ~]# date +%X<br>17时12分10秒<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示年月日时分秒</span><br>[root@test ~]# date +%F%X<br>2021-03-2817时12分39秒<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">可以自定义分隔符“-”</span><br>[root@test ~]# date +%F-%X<br>2021-03-28-17时13分38秒<br><br>[root@test ~]# date +%F:%X<br>2021-03-28:17时13分55秒<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改系统年月日</span><br>[root@test ~]# date -s 2020-03-28<br>2020年 03月 28日 星期六 00:00:00 CST<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改系统时分秒</span><br>[root@test ~]# date -s 17:16:00<br>2020年 03月 28日 星期六 17:16:00 CST<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改年月日时分秒</span><br>[root@test ~]# date -s &#x27;2021-03-28 17:17:00&#x27;<br>2021年 03月 28日 星期日 17:17:00 CST<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释：</span><br>&#x27;&#x27;单引号：引用整体，屏蔽特殊符号的功能<br>&quot;&quot;双引号：引用整体，不会屏蔽特殊符号的功能<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">Linux的两种时钟</span><br>系统时钟：内核通过CPU的工作频率去计算的时间<br>硬件时钟：<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示硬件时间</span><br>[root@test ~]# clock<br>2021年03月28日 星期日 17时23分42秒  -0.945549 秒<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示并同步系统与硬件时钟</span><br>[root@test ~]# man hwclock<br>-s：把系统时间设置成与硬件时间相同<br>-w：把硬件时间设置成与系统时间相同<br>[root@test ~]# hwclock -w<br>[root@test ~]# date<br>2021年 03月 28日 星期日 17:27:18 CST<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">cal显示日历</span><br>[root@test ~]# cal<br>      三月 2021     <br>日 一 二 三 四 五 六<br>    1  2  3  4  5  6<br> 7  8  9 10 11 12 13<br>14 15 16 17 18 19 20<br>21 22 23 24 25 26 27<br>28 29 30 31<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示指定的全年月份</span><br>[root@test ~]# cal 2021<br></code></pre></td></tr></table></figure><h4 id="wc统计命令"><a href="#wc统计命令" class="headerlink" title="wc统计命令"></a>wc统计命令</h4><ul><li>wc 用于统计文件的字节数、行数，并将统计的结果输出到屏幕</li><li>命令格式：wc [-选项] 文件名</li><li>常用选项：<ul><li>-c #统计字节数</li><li>-l #统计行数</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@test ~]# wc /etc/passwd<br>43   87 2259 /etc/passwd<br>行数 单词 字节  文件名<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">统计文件字节数</span><br>[root@test ~]# wc -c /etc/passwd<br>2259 /etc/passwd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">统计文件行数</span><br>[root@test ~]# wc -l /etc/passwd<br>43 /etc/passwd<br><br>[root@test ~]# wc -l /etc/fstab<br>11 /etc/fstab<br></code></pre></td></tr></table></figure><h4 id="管道符"><a href="#管道符" class="headerlink" title="管道符"></a>管道符</h4><ul><li>管道符“|”：将命令的输出结果交给另外一条命令作为参数继续处理</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@test ~]# head -10 /etc/passwd |tail -5<br><br>[root@test ~]# head -10 /etc/passwd |tail -5 |wc -l<br>5<br><br>root@test ~]# cat -n /etc/passwd |head -10|tail -5<br>     6sync:x:5:0:sync:/sbin:/bin/sync<br>     7shutdown:x:6:0:shutdown:/sbin:/sbin/shutdown<br>     8halt:x:7:0:halt:/sbin:/sbin/halt<br>     9mail:x:8:12:mail:/var/spool/mail:/sbin/nologin<br>    10operator:x:11:0:operator:/root:/sbin/nologin<br><br>[root@test ~]# ifconfig ens32 |head -2<br>ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 192.168.0.50  netmask 255.255.255.0  broadcast 192.168.0.255<br></code></pre></td></tr></table></figure><h4 id="重定向操作"><a href="#重定向操作" class="headerlink" title="重定向操作"></a>重定向操作</h4><ul><li>重定向操作:将前面命令的输出结果，写入到其他的文本文件中</li><li>重定向的表示符号<ul><li>&gt; #重定向输出（覆盖）</li><li>&gt;&gt; #重定向输出（追加）</li><li>&lt; #输入重定向（覆盖）</li><li>&lt;&lt; **#**输入重定向（追加）</li><li>&gt; 只收集正确的输出结果</li><li>2&gt; 只收集错误的输出结果</li><li>&amp;&gt; 正确错误都收集</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">将命令的输出结果以覆盖的方式重定向到文件中，（&gt;附带创建文件功能）</span><br>[root@test ~]# ifconfig ens32 |head -2 &gt; /opt/ens32.bak<br>ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 192.168.0.50  netmask 255.255.255.0  broadcast 192.168.0.255<br><br>[root@test ~]# cat /etc/hostname &gt; /opt/ens32.bak <br>[root@test ~]# cat /opt/ens32.bak <br>test<br><br>[root@test ~]# free -h &gt; /opt/free.bak<br>[root@test ~]# cat /opt/free.bak <br>              total        used        free      shared  buff/cache   available<br>Mem:           972M        414M        123M         15M        435M        336M<br>Swap:          2.0G          0B        2.0G<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将命令的输出结果以追加的方式重定向到文件中</span><br>[root@test ~]# cat /etc/hostname &gt;&gt; /opt/free.bak <br>[root@test ~]# cat /opt/free.bak <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">“&gt;”只收集正确的输出结果，不收集错误的输出结果</span><br>[root@test ~]# ls xxooooxx &gt; /opt/xx.txt<br>ls: 无法访问xxooooxx: 没有那个文件或目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">“2&gt;”只收集错误的输出结果，不收集正确的输出结果</span><br>[root@test ~]# ls xxooooxx 2&gt; /opt/xx.txt<br>[root@test ~]# cat /opt/xx.txt <br>ls: 无法访问xxooooxx: 没有那个文件或目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">“2&gt;”以覆盖的方式将输出结果重定向到文件中</span><br>[root@test ~]# cat /etc/abc 2&gt; /opt/ens32.bak <br>[root@test ~]# cat /opt/ens32.bak <br>cat: /etc/abc: 没有那个文件或目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">“2&gt;&gt;”以追加的方式将输出结果重定向到文件中</span><br>[root@test ~]# ls /etc/abcd 2&gt;&gt; /opt/ens32.bak <br>[root@test ~]# cat /opt/ens32.bak <br>cat: /etc/abc: 没有那个文件或目录<br>ls: 无法访问/etc/abcd: 没有那个文件或目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">“&amp;&gt;”以覆盖的方式将正确输出与错误输出重定向到文件中</span><br>[root@test ~]# lscat &amp;&gt; /opt/abc.txt<br>[root@test ~]# cat /opt/abc.txt <br><br>[root@test ~]# ls /etc/passwd &amp;&gt; /opt/pass.bak<br>[root@test ~]# cat /opt/pass.bak <br><br>[root@test ~]# free -h &amp;&gt; /opt/pass.bak <br>[root@test ~]# cat /opt/pass.bak <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">“&amp;&gt;”以追加的方式将正确输出与错误输出重定向到文件中</span><br>[root@test ~]# ifconfig ens32 | head -2 &amp;&gt;&gt; /opt/pass.bak <br>[root@test ~]# cat /opt/pass.bak <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以覆盖方式将正确输出与错误输出重定向到不同文件中</span><br>[root@test ~]# ll -d /root/  bcd &gt;a.txt 2&gt;b.txt<br>[root@test ~]# cat a.txt <br>dr-xr-x---. 24 root root 4096 3月  28 18:07 /root/<br>[root@test ~]# cat b.txt <br>ls: 无法访问bcd: 没有那个文件或目录<br></code></pre></td></tr></table></figure><h4 id="echo命令与sleep命令"><a href="#echo命令与sleep命令" class="headerlink" title="echo命令与sleep命令"></a>echo命令与sleep命令</h4><ul><li>echo命令用于输出指定的字符串和变量</li><li>命令格式：echo [-选项] [参数]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@test ~]# echo $PATH<br>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br><br>[root@test ~]# echo xxoo<br>xxoo<br><br>[root@test ~]# echo abc<br>abc<br><br>[root@test ~]# echo 男人好难<br>男人好难<br><br>[root@test ~]# echo 123<br>123<br><br>[root@test ~]# cat /etc/hostname <br>test<br><br>[root@test ~]# echo localhost &gt; /etc/hostname<br>[root@test ~]# cat /etc/hostname <br>localhost<br></code></pre></td></tr></table></figure><ul><li>sleep命令可以用来将目前动作延迟一段时间</li><li>命令格式：sleep 时间</li><li>常用选项： s 秒 m 分钟 h 小时 d 日</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@test ~]# sleep 3<br></code></pre></td></tr></table></figure><h4 id="课后作业-1"><a href="#课后作业-1" class="headerlink" title="课后作业"></a>课后作业</h4><p>1.查看当前系统内核名称及版本信息</p><p>uname -sr</p><p>2.请写系统存放cpu配置文件</p><p>&#x2F;proc&#x2F;cpuinfo</p><p>3.请写出查看cpu信息命令</p><p>cat &#x2F;proc&#x2F;cpuinfo</p><p>lscpu</p><p>4.请写出系统存放内存配置文件</p><p>&#x2F;proc&#x2F;meminfo</p><p>5.请写出查看内存命令（以人类易读方式显示）</p><p>free -h</p><p>6.请写出系统存放网卡配置文件路径</p><p>&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;</p><p>7.请写出查看网卡配置信息命令</p><p>ifconfig（如果系统最小化安装，需要安装net-tools）</p><p>ip a （ip address）</p><p>8.请写出系统存放主机名配置文件</p><p>&#x2F;etc&#x2F;hostname</p><p>9.请写出查看主机名命令</p><p>cat &#x2F;etc&#x2F;hostname</p><p>hostname</p><p>10.将主机名修改为student（永久修改）</p><p>hostnamectl set-hostname student</p><p>vim &#x2F;etc&#x2F;hostname</p><p>echo student &gt; &#x2F;etc&#x2F;hostname</p><p>11.请写出vim的三种模式</p><p>命令模式</p><p>输入模式</p><p>底线命令模式（末行模式）</p><p>12.将&#x2F;etc&#x2F;passwd文件复制到&#x2F;opt目录，使用vim打开文件并显示行号</p><p>cp &#x2F;etc&#x2F;passwd &#x2F;opt</p><p>vim &#x2F;opt&#x2F;passwd</p><p>:set nu</p><p>13.使用vim在&#x2F;opt&#x2F;passwd文件中搜索包含root关键字的行</p><p>&#x2F;root</p><p>14.使用vim在&#x2F;opt&#x2F;passwd文件中将光标快速跳转到第10行，并将光标跳转到行尾</p><p>:10 $</p><p>15.使用vim在&#x2F;opt&#x2F;passwd文件中快速跳转到文件最后一行并删除，在将光标跳转到文件第一行，将刚刚删除的行复制到文件第二行</p><p>G dd p</p><p>16.使用vim将&#x2F;etc&#x2F;hostname文件内容读入到&#x2F;opt&#x2F;passwd文件最后一行下</p><p>:r &#x2F;etc&#x2F;hostname</p><p>17.使用vim在&#x2F;opt&#x2F;passwd文件中复制前5行内容并粘贴到文件最后一行下</p><p>5yy p</p><p>18.将本次vim的修改恢复至初始状态，并保存退出</p><p>u</p><p>:wq</p><p>19.将本机IP地址修改为192.168.0.100，并重启动网卡</p><p>vim &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens32</p><p>systemctl restart network</p><p>20.如何获取一个域名所对应的IP地址</p><p>host <a href="http://www.baidu.com/">www.baidu.com</a></p><p>21.如何检测本机使用的DNS是否可用</p><p>nslookup <a href="http://www.jd.com/">www.jd.com</a></p><p>22.请将hostname命令设置别名为hn（临时设置）</p><p>alias hn&#x3D;hostname</p><p>23.取消hostname命令别名</p><p>unalias hn</p><p>24.如何查看本机历史命令</p><p>history</p><p>25.执行命令历史中第20条命令</p><p>!20</p><p>26.删除命令历史中第5条命令</p><p>history -d 5</p><p>27.清空所有历史命令</p><p>history -c</p><p>rm -rf .bash_history</p><p>28.查看本机当前系统日期与时间</p><p>date</p><p>29.将本机日期时间设置与你当前时间一致</p><p>date -s ‘2021-04-10 14:32:00’</p><p>30.统计&#x2F;etc&#x2F;passwd文件行数，并将命令输出结果重定向至&#x2F;opt&#x2F;pass.bak文件中</p><p>wc -l &#x2F;etc&#x2F;passwd &gt; &#x2F;opt&#x2F;pass.bak</p><p>31.显示&#x2F;etc&#x2F;passwd文件末尾10行的前5行内容，并将输出结果追加至&#x2F;opt&#x2F;pass.bak文件中</p><p>tail -10 &#x2F;etc&#x2F;passwd | head -5 &gt; &#x2F;opt&#x2F;pass.bak</p><p>cat -n &#x2F;etc&#x2F;passwd | tail -10 | head -5 &gt;&gt; &#x2F;opt&#x2F;pass.bak</p><h4 id="用户账号管理"><a href="#用户账号管理" class="headerlink" title="用户账号管理"></a>用户账号管理</h4><ul><li>用户账号的作用：用户账号可用来登录系统，可以实现访问控制</li><li>用户模板目录：&#x2F;etc&#x2F;skel&#x2F;</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ls -a /etc/skel/<br>.  ..  .bash_logout  .bash_profile  .bashrc  .mozilla<br><br>[root@localhost ~]# cd /etc/skel/<br>[root@localhost skel]# vim prompt<br></code></pre></td></tr></table></figure><h4 id="useradd创建用户"><a href="#useradd创建用户" class="headerlink" title="useradd创建用户"></a>useradd创建用户</h4><ul><li>useradd 命令用于创建新的用户</li><li>命令格式：useradd [-选项] 用户名</li><li>常用选项：<ul><li>-u 指定用户UID</li><li>-d 指定用户家目录</li><li>-c 用户描述信息</li><li>-g 指定用户基本组</li><li>-G 指定用户附加组</li><li>-s 指定用户的shell</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# useradd user1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建用户并指定用户的UID</span><br>[root@localhost ~]# useradd -u 1100 user2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建用户并指定用户的家目录</span><br>root@localhost ~]# useradd -d /opt/user3 user3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建用户并指定UID与用户描述信息</span><br>[root@localhost ~]# useradd -u 1400  -c yunwei user4<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建<span class="hljs-built_in">test</span>组</span><br>[root@localhost ~]# groupadd test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建用户指定用户UID、描述信息、基本组</span><br>[root@localhost ~]# useradd -u 1500 -c xxoo@163.com -g test user5<br>[root@localhost ~]# id user5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建用户指定用户UID、描述信息、附加组</span><br>[root@localhost ~]# useradd -u 1600 -c yunwei -G test xiaozhang<br>[root@localhost ~]# id xiaozhang<br>uid=1600(xiaozhang) gid=1600(xiaozhang) 组=1600(xiaozhang),1401(test)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">/sbin/nologin ：禁止用户登录系统</span><br>[root@localhost ~]# useradd -u 1800 -c test -s /sbin/nologin user8<br>user8:x:1800:1800:test:/home/user8:/sbin/nologin<br></code></pre></td></tr></table></figure><h4 id="id命令"><a href="#id命令" class="headerlink" title="id命令"></a>id命令</h4><ul><li>id 命令用于查看系统用户和用户所在组的信息</li><li>命令格式：id [-选项] [用户名]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# id user1<br>uid=1001(user1) gid=1001(user1) 组=1001(user1)<br></code></pre></td></tr></table></figure><h4 id="x2F-etc-x2F-passwd用户信息文件"><a href="#x2F-etc-x2F-passwd用户信息文件" class="headerlink" title="&#x2F;etc&#x2F;passwd用户信息文件"></a>&#x2F;etc&#x2F;passwd用户信息文件</h4><p>用户的基本信息存放在&#x2F;etc&#x2F;passwd文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">每个字段含义解释：用户名:密码占位符:UID:基本组GID:用户描述信息:家目录:解释器程序</span><br>UID：0 超级用户<br>UID：1-499 系统伪用户，不能登录系统并且没有家目录<br>UID：500-65535 普通用户<br></code></pre></td></tr></table></figure><p>组：</p><p>基本组（初始组）：一个用户只允许有一个基本组</p><p>附加组（在基本组之外组）：一个用户可以允许有多个附加组</p><p>用户—&gt;shell程序—&gt;内核—&gt;硬件</p><h4 id="x2F-etc-x2F-default-x2F-useradd文件"><a href="#x2F-etc-x2F-default-x2F-useradd文件" class="headerlink" title="&#x2F;etc&#x2F;default&#x2F;useradd文件"></a>&#x2F;etc&#x2F;default&#x2F;useradd文件</h4><p>&#x2F;etc&#x2F;default&#x2F;useradd 存放用户默认值信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim /etc/default/useradd<br><span class="hljs-meta prompt_"># </span><span class="language-bash">useradd defaults file</span><br>GROUP=100 #用户默认组<br>HOME=/home #用户家目录<br>INACTIVE=-1 #密码过期宽限天数（/etc/shadow文件第7个字段）<br>EXPIRE= #密码失效时间（/etc/shadow文件第8个字段）<br>SHELL=/bin/bash #默认使用的shell<br>SKEL=/etc/skel #模板目录<br>CREATE_MAIL_SPOOL=yes #是否建立邮箱<br></code></pre></td></tr></table></figure><h4 id="x2F-var-x2F-spool-x2F-mail-x2F-用户邮件目录"><a href="#x2F-var-x2F-spool-x2F-mail-x2F-用户邮件目录" class="headerlink" title="&#x2F;var&#x2F;spool&#x2F;mail&#x2F;用户邮件目录"></a>&#x2F;var&#x2F;spool&#x2F;mail&#x2F;用户邮件目录</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ls /var/spool/mail/<br>laowang  lisi  rpc  user1  user2  user3  user4  user5  user8  xiaozhang<br></code></pre></td></tr></table></figure><h4 id="passwd设置用户密码"><a href="#passwd设置用户密码" class="headerlink" title="passwd设置用户密码"></a>passwd设置用户密码</h4><ul><li>passwd命令用于设置用户密码</li><li>命令格式：passwd [-选项] [用户名]</li><li>密码规范：长度不能少于8个字符，复杂度（数字、字母区分大小写，特殊字符），普通用户</li><li>密码规范：本次修改的密码不能和上次修改的密码太相近 123xxoo…A</li><li>常用选项<ul><li>-S 查看密码信息</li><li>-l 锁定用户密码</li><li>-u 解锁用户密码</li><li>-d 删除密码</li><li>–stdin 通过管道方式设置用户密码</li></ul></li><li>非交互设置用户密码</li><li>命令格式：echo “密码” | passwd –stdin 用户名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置用户密码</span><br>[root@localhost ~]# passwd user1<br>更改用户 user1 的密码 。<br>新的 密码：1<br>无效的密码： 密码是一个回文<br>重新输入新的 密码：1<br>passwd：所有的身份验证令牌已经成功更新。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用user1用户登录系统</span><br>[user1@localhost ~]$ ls<br>prompt<br>[user1@localhost ~]$ cat prompt <br>不允许随便修改系统xx文件！<br>有问题可联系管理员邮箱：xxoo@163.com<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看用户密码信息</span><br>[root@localhost ~]# passwd -S user1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">锁定用户当密码</span><br>[root@localhost ~]# passwd -l user2<br>锁定用户 user2 的密码 。<br>passwd: 操作成功<br><br>[root@localhost ~]# passwd -S user2<br>user2 LK 2021-04-10 0 99999 7 -1 (密码已被锁定。)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解锁用户密码</span><br>[root@localhost ~]# passwd -u user2<br>解锁用户 user2 的密码。<br>passwd: 操作成功<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除用户密码</span><br>[root@localhost ~]# passwd -d user2<br>清除用户的密码 user2。<br>passwd: 操作成功<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">非交互设置用户密码</span><br>[root@localhost ~]# echo 1 | passwd --stdin laowang<br>更改用户 laowang 的密码 。<br>passwd：所有的身份验证令牌已经成功更新。<br></code></pre></td></tr></table></figure><h4 id="x2F-etc-x2F-shadow用户密码文件"><a href="#x2F-etc-x2F-shadow用户密码文件" class="headerlink" title="&#x2F;etc&#x2F;shadow用户密码文件"></a>&#x2F;etc&#x2F;shadow用户密码文件</h4><ul><li>用户的密码信息存放在&#x2F;etc&#x2F;shadow文件中，该文件默认任何人都没有任何权限（不包括root）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim /etc/shadow<br>root:$6$1ji5e8yglrZWAcI6$FONKr3qebZufQ.u0Mf/MbipzGw/MVvxS.vgXcy/duc4b/GU0U7tfe37wPQ4XJEXstqBuwvaJqq2/kY/g/783u/::0:99999:7:::<br><span class="hljs-meta prompt_">#</span><span class="language-bash">每个字段含义解释：</span><br>第一字段：用户名<br>第二字段：密码加密字符串，加密算法为SHA512散列加密算法，如果密码位是“*”或者“!!”表示密码已过期<br>第三个字段：密码最后一次修改日期，日期从1970年1月1日起，每过一天时间戳加1<br>第四个字段：密码修改的期限，如果该字段为0表示随时可以修改密码，例如：该字段为10，代表10天之内不可以修改密<br>第五个字段：密码有效期<br>第六个字段：密码到期前警告时间（和第五个字段相比）<br>第七个字段：密码过期后的宽限天数（和第五个字段相比）<br>第八个字段：账号失效时间，日期从1970年1月1日起<br>第九个字段：保留<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">chage命硬用于修改/etc/shadow文件信息，修改文件内容第三个字段（密码最后一次修改时间）</span><br>[root@localhost ~]# chage -d 0 user8<br></code></pre></td></tr></table></figure><h4 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h4><ul><li>su命令用于切换当前用户身份到其他用户身份</li><li>命令格式：su [-选项] [用户名]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">只切换用户身份，环境没有改变</span><br>[root@localhost ~]# su user1<br>[user1@localhost root]$ ls<br>ls: 无法打开目录.: 权限不够<br>[user1@localhost root]$ cd<br>[user1@localhost ~]$ exit<br>exit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">切换用户身份，连同环境一起切换</span><br>[root@localhost ~]# su - user1<br>上一次登录：六 4月 10 16:54:40 CST 2021pts/1 上<br>[user1@localhost ~]$ pwd<br>/home/user1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">普通用户切换为root（需要输入root用户的密码）</span><br>[user1@localhost ~]$ su - root<br>密码：<br>上一次登录：六 4月 10 16:05:17 CST 2021从 192.168.0.1pts/2 上<br></code></pre></td></tr></table></figure><h4 id="usermod修改用户属性"><a href="#usermod修改用户属性" class="headerlink" title="usermod修改用户属性"></a>usermod修改用户属性</h4><ul><li>usermod 命令用于修改已存在用户的基本信息</li><li>命令格式：usermod [-选项] 用户名</li><li>常用选项：<ul><li>-u 修改用户UID</li><li>-d 修改用户家目录</li><li>-g 修改用户基本组</li></ul></li><li>-c 修改用户描述信息<ul><li>-G 添加用户附加组</li><li>-s 修改用户shell</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改用户UID（用户如果以登录系统，不允许修改）</span><br>[root@localhost ~]# usermod -u 1111 user1<br>[root@localhost ~]# id user1<br>uid=1111(user1) gid=1001(user1) 组=1001(user1)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改用户描述信息</span><br>[root@localhost ~]# usermod -c xxoo@163.com user8<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改用户的附加组</span><br>[root@localhost ~]# usermod -G test user8<br>[root@localhost ~]# id user8<br>uid=1800(user8) gid=1800(user8) 组=1800(user8),1401(test)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改用户的解释器</span><br>[root@localhost ~]# usermod -s /bin/bash user8<br></code></pre></td></tr></table></figure><h4 id="userdel删除用户"><a href="#userdel删除用户" class="headerlink" title="userdel删除用户"></a>userdel删除用户</h4><ul><li>userdel 用于删除给定的用户以及与用户相关的文件，该命令若不加选项仅删除用户账号，不删除用户相关文件</li><li>命令格式：userdel [-选项] 用户名</li><li>常用选项：<ul><li>-r 删除用户同时，删除与用户相关的所有文件</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">删除用户，仅删除账号，不删除家目录</span><br>[root@localhost ~]# userdel user8<br>[root@localhost ~]# ls /home<br>laowang  lisi  user1  user2  user4  user5  user8  xiaozhang<br>[root@localhost ~]# id user8<br>id: user8: no such user<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除用户，连同用户家目录一并删掉</span><br>[root@localhost ~]# userdel -r user4<br>[root@localhost ~]# ls /home<br>laowang  lisi  user1  user2  user5  user8  xiaozhang<br>[root@localhost ~]# id user4<br>id: user4: no such user<br></code></pre></td></tr></table></figure><h4 id="groupadd添加新组"><a href="#groupadd添加新组" class="headerlink" title="groupadd添加新组"></a>groupadd添加新组</h4><ul><li>groupadd 用于创建一个新的工作组，新组的信息将被添加到&#x2F;etc&#x2F;group文件中</li><li>命令格式：groupadd [-选项] 组名</li><li>常用选项：<ul><li>-g GID #指定组的GID</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建组</span><br>[root@localhost ~]# groupadd -g 1555 student<br>[root@localhost ~]# cat /etc/group<br></code></pre></td></tr></table></figure><h4 id="x2F-etc-x2F-group组信息文件"><a href="#x2F-etc-x2F-group组信息文件" class="headerlink" title="&#x2F;etc&#x2F;group组信息文件"></a>&#x2F;etc&#x2F;group组信息文件</h4><ul><li>组信息存放在&#x2F;etc&#x2F;group文件中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim /etc/group<br>root:x:0:<br><span class="hljs-meta prompt_">#</span><span class="language-bash">每个字段含义解释：组名:组密码占位符:GID:组中附加用户</span><br></code></pre></td></tr></table></figure><h4 id="x2F-etc-x2F-gshadow组密码文件"><a href="#x2F-etc-x2F-gshadow组密码文件" class="headerlink" title="&#x2F;etc&#x2F;gshadow组密码文件"></a>&#x2F;etc&#x2F;gshadow组密码文件</h4><ul><li>组密码信息存放在&#x2F;etc&#x2F;gshadow文件中</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim /etc/gshadow<br>root:::<br><span class="hljs-meta prompt_">#</span><span class="language-bash">每个字段含义解释：组名:组密码:组内管理员:组中附加用户</span><br></code></pre></td></tr></table></figure><h4 id="groupmod修改组属性"><a href="#groupmod修改组属性" class="headerlink" title="groupmod修改组属性"></a>groupmod修改组属性</h4><ul><li>groupmod 用于修改指定工作组属性</li><li>命令格式：groupmod [-选项] 组名</li><li>常用选项：<ul><li>-g GID #修改组的GID</li><li>-n 新组名 #修改组名</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改组名</span><br>[root@localhost ~]# groupmod -n stugrp student<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改组GID</span><br>root@localhost ~]# groupmod -g 1666 stugrp<br></code></pre></td></tr></table></figure><h4 id="gpasswd组管理命令"><a href="#gpasswd组管理命令" class="headerlink" title="gpasswd组管理命令"></a>gpasswd组管理命令</h4><ul><li>gpasswd 是Linux工作组文件&#x2F;etc&#x2F;group和&#x2F;etc&#x2F;gshadow管理工具，用于将用户添加到组或从组中删除</li><li>命令格式：gpasswd [-选项] 用户名 组名</li><li>常用选项：<ul><li>-a #将用户添加到工作组</li><li>-d #将用户从工作组中删除</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建用户</span><br>[root@localhost ~]# useradd hary<br>[root@localhost ~]# useradd tom<br>[root@localhost ~]# useradd natasha<br>[root@localhost ~]# useradd kenji<br>[root@localhost ~]# useradd jack<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">讲用户加入到组</span><br>[root@localhost ~]# gpasswd -a hary stugrp<br>正在将用户“hary”加入到“stugrp”组中<br>[root@localhost ~]# gpasswd -a tom stugrp<br>正在将用户“tom”加入到“stugrp”组中<br>[root@localhost ~]# gpasswd -a kenji stugrp<br>正在将用户“kenji”加入到“stugrp”组中<br>[root@localhost ~]# gpasswd -a natasha stugrp<br>正在将用户“natasha”加入到“stugrp”组中<br>[root@localhost ~]# gpasswd -a jack stugrp<br>正在将用户“jack”加入到“stugrp”组中<br>[root@localhost ~]# <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看组文件信息</span><br>[root@localhost ~]# cat /etc/group<br>stugrp:x:1666:hary,tom,kenji,natasha,jack<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将用户从组中删除</span><br>root@localhost ~]# gpasswd -d tom stugrp<br>[root@localhost ~]# gpasswd -d hary stugrp<br>正在将用户“hary”从“stugrp”组中删除<br>[root@localhost ~]# gpasswd -d jack stugrp<br>正在将用户“jack”从“stugrp”组中删除<br>[root@localhost ~]# gpasswd -d kenji stugrp<br>正在将用户“kenji”从“stugrp”组中删除<br>[root@localhost ~]# cat /etc/group<br></code></pre></td></tr></table></figure><h4 id="groupdel删除组"><a href="#groupdel删除组" class="headerlink" title="groupdel删除组"></a>groupdel删除组</h4><ul><li>groupdel 用于删除指定工作组</li><li>命令格式：groupdel 组名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# groupdel stugrp<br></code></pre></td></tr></table></figure><h4 id="chmod权限管理"><a href="#chmod权限管理" class="headerlink" title="chmod权限管理"></a>chmod权限管理</h4><ul><li>chmod（英文全拼：change mode）设置用户对文件的权限</li><li>命令格式：chmod [-选项] 归属关系+-&#x3D;权限类别 文件…</li><li>root用户可以修改任何文件和目录的权限</li><li>文件所有者</li><li>常用选项：<ul><li>-R 递归修改，包含目录下所有的子文件与子目录</li></ul></li><li>归属关系：u 所有者 g 所属组 o 其他人</li><li>权限类别： r 读取 w 写入 x 执行 - 没有权限</li><li>操作：+ 添加权限 - 去除权限 &#x3D; 重新定义权限</li><li>权限数字表示：r —- 4 w —- 2 x —- 1 0 没有权限</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看文件详细属性</span><br>[root@localhost ~]# ll hello<br>-rw-r--r--. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">为文件所有者添加执行权限</span><br>[root@localhost ~]# chmod u+x hello<br>[root@localhost ~]# ll hello<br>-rwxr--r--. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">为文件所属组添加写权限</span><br>[root@localhost ~]# chmod g+w hello<br>[root@localhost ~]# ll hello<br>-rwxrw-r--. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">为文件其他人添加写权限</span><br>[root@localhost ~]# chmod o+w hello<br>[root@localhost ~]# ll hello<br>-rwxrw-rw-. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用（逗号）可以同时为多个用户授权</span><br>[root@localhost ~]# chmod g+x,o+x hello<br>[root@localhost ~]# ll hello<br>-rwxrwxrwx. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">去除所有者执行权限</span><br>[root@localhost ~]# chmod u-x hello<br>[root@localhost ~]# ll hello<br>-rw-rwxrwx. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">去除所属组执行权限</span><br>[root@localhost ~]# chmod g-x hello<br>[root@localhost ~]# ll hello<br>-rw-rw-rwx. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">去除其他人执行权限</span><br>[root@localhost ~]# chmod o-x hello<br>[root@localhost ~]# ll hello<br>-rw-rw-rw-. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时去除ugo写权限</span><br>[root@localhost ~]# chmod u-w,g-w,o-w hello<br>[root@localhost ~]# ll hello<br>-r--r--r--. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重新定义所有者权限</span><br>[root@localhost ~]# chmod u=rwx hello<br>[root@localhost ~]# ll hello<br>-rwxr--r--. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重新定义所属组权限</span><br>[root@localhost ~]# chmod g=rwx hello<br>[root@localhost ~]# ll hello<br>-rwxrwxr--. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重新定义其他人权限</span><br>[root@localhost ~]# chmod o=rwx hello<br>[root@localhost ~]# ll hello<br>-rwxrwxrwx. 1 root root 426 3月  28 15:00 hello<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建目录并设置目录权限</span><br>[root@localhost ~]# mkdir /test<br>[root@localhost ~]# ll -d /test<br>drwxr-xr-x. 2 root root 6 4月  11 14:30 /test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">为目录所属组添加写权限</span><br>[root@localhost ~]# chmod g+w /test<br>[root@localhost ~]# ll -d /test<br>drwxrwxr-x. 2 root root 6 4月  11 14:30 /test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">为目录其他人添加写权限</span><br>[root@localhost ~]# chmod o+w /test<br>[root@localhost ~]# ll -d /test<br>drwxrwxrwx. 2 root root 6 4月  11 14:30 /test<br>[root@localhost ~]# <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重新定义所有用户权限</span><br>[root@localhost ~]# chmod u=rwx,g=rx,o=rx /test<br>[root@localhost ~]# ll -d /test<br>drwxr-xr-x. 2 root root 6 4月  11 14:30 /test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时为所有用户定义相同权限</span><br>[root@localhost ~]# chmod ugo=rwx /test<br>[root@localhost ~]# ll -d /test<br>drwxrwxrwx. 2 root root 21 4月  11 14:37 /test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">权限数字定义方式</span><br>[root@localhost ~]# ll hello<br>-rwxrwxrwx. 1 root root 426 3月  28 15:00 hello<br>所有者：rwx   4+2+1=7<br>所属组：r     4<br>其他人：r     4<br>[root@localhost ~]# chmod 744 hello<br>[root@localhost ~]# ll hello<br>-rwxr--r--. 1 root root 426 3月  28 15:00 hello<br><br>所有者：rw 4+2=6<br>所属组：rw 4+2=6<br>其他人：--- 0<br>[root@localhost ~]# chmod 660 hello<br>[root@localhost ~]# ll hello<br>-rw-rw----. 1 root root 426 3月  28 15:00 hello<br><br>所有者：rwx 4+2+1=7<br>所属组：wx  2+1=3<br>其他人：--- 0<br>[root@localhost ~]# touch /hello.txt<br>[root@localhost ~]# ll /hello.txt <br>-rw-r--r--. 1 root root 0 4月  11 14:45 /hello.txt<br>[root@localhost ~]# chmod 730 /hello.txt <br>[root@localhost ~]# ll /hello.txt <br>-rwx-wx---. 1 root root 0 4月  11 14:45 /hello.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">去除所有用户权限</span><br>[root@localhost ~]# chmod 000 /hello.txt <br>[root@localhost ~]# ll /hello.txt <br>----------. 1 root student 0 4月  11 14:45 /hello.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">递归修改目录下所有子文件与子目录权限</span><br>[root@localhost ~]# ll -d /test<br>drwxrwxrwx. 2 root root 21 4月  11 14:37 /test<br><br>[root@localhost ~]# mkdir /test/xxoo<br>[root@localhost ~]# ll -d /test/xxoo/<br>drwxr-xr-x. 2 root root 6 4月  11 14:54 /test/xxoo/<br><br>[root@localhost ~]# ll /test/abc.txt <br>-rw-r--r--. 1 root root 0 4月  11 14:37 /test/abc.txt<br><span class="hljs-meta prompt_">#</span><span class="language-bash">默认用户在该目录下创建文件权限与父目录不一致</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">递归修改目录下所有子文件与子目录权限</span><br>[root@localhost ~]# chmod -R 777 /test<br>[root@localhost ~]# ll /test/abc.txt <br>-rwxrwxrwx. 1 root root 0 4月  11 14:37 /test/abc.txt<br>[root@localhost ~]# ll -d /test/xxoo<br>drwxrwxrwx. 2 root root 6 4月  11 14:54 /test/xxoo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">深入理解权限，</span><br>[root@localhost ~]# mkdir /test1<br>[root@localhost ~]# chmod 777 /test1<br>[root@localhost ~]# ll -d /test1<br>drwxrwxrwx. 2 root root 6 4月  11 14:57 /test1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">在该目录下创建文件与目录</span><br>[root@localhost ~]# touch /test1/root.txt<br>[root@localhost ~]# mkdir /test1/rootbak<br>[root@localhost ~]# chmod o=rx /test1<br>[root@localhost ~]# ll -d /test1<br>drwxrwxr-x. 2 root root 6 4月  11 14:59 /test1<br>[root@localhost ~]# touch /test1/root.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">普通用户对该目录如果拥有rwx权限是可以删除该目录下任何用户创建的文件（包括root）</span><br>[user1@localhost ~]$ cd /test1<br>[user1@localhost test1]$ ls<br>root.txt<br>[user1@localhost test1]$ ll root.txt <br>-rw-r--r--. 1 root root 0 4月  11 14:57 root.txt<br>[user1@localhost test1]$ rm -rf root.txt <br>[user1@localhost test1]$ ls<br>rootbak<br>[user1@localhost test1]$ rm -rf rootbak/<br>[user1@localhost test1]$ ls<br>[user1@localhost test1]$ ll -d /test1<br>drwxrwxrwx. 2 root root 6 4月  11 14:59 /test1<br><br>总结：<br>1.用户对文件拥有写权限可以增加/修改/删除文件里内容，并不能删除文件，删除文件取决于对文件的父目录有没有rwx权限<br>2.用户对目录拥有rwx权限可以查看/创建/修改/删除目录下的文件<br></code></pre></td></tr></table></figure><h4 id="umask预设权限"><a href="#umask预设权限" class="headerlink" title="umask预设权限"></a>umask预设权限</h4><ul><li>umask用于显示或设置创建文件的权限掩码</li><li>命令格式：umask [-p] [-S] [mode]</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@localhost ~]# mkdir /test2<br>[root@localhost ~]# ll -d /test2<br>drwxr-xr-x. 2 root root 6 4月  11 15:05 /test2<br>[root@localhost ~]# umask --help<br>umask: 用法:umask [-p] [-S] [模式]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看目录默认权限掩码，以数字形式显示</span><br>[root@localhost ~]# umask -p<br>umask 0022<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看目录默认权限掩码，以字母形式显示</span><br>[root@localhost ~]# umask -S<br>u=rwx,g=rx,o=rx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置目录默认权限掩码，为所属组添加写权限</span><br>[root@localhost ~]# umask g+w <br>[root@localhost ~]# mkdir /test3<br>[root@localhost ~]# ll -d /test3<br>drwxrwxr-x. 2 root root 6 4月  11 15:09 /test3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">去除目录默认权限掩码</span><br>[root@localhost ~]# umask g-w <br>[root@localhost ~]# mkdir /test4<br>[root@localhost ~]# ll -d /test4<br>drwxr-xr-x. 2 root root 6 4月  11 15:10 /test4<br></code></pre></td></tr></table></figure><h4 id="chown归属关系管理"><a href="#chown归属关系管理" class="headerlink" title="chown归属关系管理"></a>chown归属关系管理</h4><ul><li>chown（英文全拼：change owner）用于设置文件的所有者和所属组关系</li><li>命令格式：<ul><li>chown [-选项] 所有者:所属组 文档 #同时修改所有者和所属组身份</li><li>chown [-选项] 所有者 文档 #只修改所有者身份</li><li>chown [-选项] :所属组 文档 #只修改所属组身份</li></ul></li><li>常用选项：<ul><li>-R 递归修改</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建文件</span><br>[root@localhost ~]# chmod 744 /hello.txt <br>[root@localhost ~]# ll /hello.txt <br>-rwxr--r--. 1 root student 0 4月  11 14:45 /hello.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改文件所有者为user1用户</span><br>[root@localhost ~]# chown user1 /hello.txt <br>[root@localhost ~]# ll /hello.txt <br>-rwxr--r--. 1 user1 student 0 4月  11 14:45 /hello.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改文件所有者与所属组为lisi</span><br>[root@localhost ~]# chown lisi:lisi /hello.txt <br>[root@localhost ~]# ll /hello.txt <br>-rwxr--r--. 1 lisi lisi 4 4月  11 15:26 /hello.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建目录</span><br>[root@localhost ~]# mkdir /test5<br>[root@localhost ~]# ll -d /test5<br>drwxr-xr-x. 2 root root 6 4月  11 15:30 /test5<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改目录所有者与所属组为lisi</span><br>[root@localhost ~]# chown lisi:lisi /test5<br>[root@localhost ~]# ll -d /test5<br>drwxr-xr-x. 2 lisi lisi 6 4月  11 15:30 /test5<br><br>[root@localhost ~]# touch /test5/root.txt<br>[root@localhost ~]# ll /test5/root.txt <br>-rw-r--r--. 1 root root 0 4月  11 15:31 /test5/root.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">递归修目录下所有子文件与子目录归属关系</span><br>[root@localhost ~]# chown -R lisi:lisi /test5<br>[root@localhost ~]# ll /test5/root.txt <br>-rw-r--r--. 1 lisi lisi 0 4月  11 15:31 /test5/root.txt<br></code></pre></td></tr></table></figure><h4 id="SetUID特殊权限"><a href="#SetUID特殊权限" class="headerlink" title="SetUID特殊权限"></a>SetUID特殊权限</h4><ul><li>SetUID（SUID）：对于一个可执行的文件用了SUID权限后，普通用户在执行该文件后，临时拥有文件所有者的身份，该权限只在程序执行过程中有效，程序执行完毕后用户恢复原有身份</li><li>SetUID权限会附加在所有者的 x 权限位上，所有者的 x 权限标识会变成 s</li><li>设置SetUID命令格式：chmod u+s 文件名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">搜索命令绝对路径</span><br>[root@localhost ~]# which passwd<br>/usr/bin/passwd<br>[root@localhost ~]# ll /usr/bin/passwd <br>-rwsr-xr-x. 1 root root 27832 6月  10 2014 /usr/bin/passwd<br><br>[root@localhost ~]# which cat<br>/usr/bin/cat<br>[root@localhost ~]# ll /usr/bin/cat<br>-rwxr-xr-x. 1 root root 54160 10月 31 2018 /usr/bin/cat<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">普通用户使用<span class="hljs-built_in">cat</span>命令是默认无法查看/etc/shadow文件内容</span><br>[lisi@localhost ~]$ cat /etc/shadow<br>cat: /etc/shadow: 权限不够<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置SUID权限</span><br>[root@localhost ~]# chmod u+s /usr/bin/cat<br>[root@localhost ~]# ll /usr/bin/cat<br>-rwsr-xr-x. 1 root root 54160 10月 31 2018 /usr/bin/cat<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">普通用户再次使用<span class="hljs-built_in">cat</span>命令时临时获取文件所有者身份</span><br>[lisi@localhost ~]$ cat /etc/shadow<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">去除SUID权限</span><br>[root@localhost ~]# chmod u-s /usr/bin/cat<br>[root@localhost ~]# ll /usr/bin/cat<br>-rwxr-xr-x. 1 root root 54160 10月 31 2018 /usr/bin/cat<br><br>[root@localhost ~]# which vim<br>/usr/bin/vim<br><br>[root@localhost ~]# ll /usr/bin/vim<br>-rwxr-xr-x. 1 root root 2294208 10月 31 2018 /usr/bin/vim<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">为vim设置SUID权限</span><br>[root@localhost ~]# chmod u+s /usr/bin/vim<br>[root@localhost ~]# ll /usr/bin/vim<br>-rwsr-xr-x. 1 root root 2294208 10月 31 2018 /usr/bin/vim<br><br>[root@localhost ~]# ll /etc/passwd<br>-rw-r--r--. 1 root root 2737 4月  10 17:26 /etc/passwd<br><br>[root@localhost ~]# chmod u-s /usr/bin/vim<br>[root@localhost ~]# vim /etc/passwd<br></code></pre></td></tr></table></figure><h4 id="SetGID特殊权限"><a href="#SetGID特殊权限" class="headerlink" title="SetGID特殊权限"></a>SetGID特殊权限</h4><ul><li>SetGID（SGID）：当对一个可执行的二进制文件设置了SGID后，普通用户在执行该文件时临时拥有其所属组的权限，该权限只在程序执行过程中有效，程序执行完毕后用户恢复原有组身份</li><li>当对一个目录作设置了SGID权限后，普通用户在该目录下创建的文件的所属组，均与该目录的所属组相同</li><li>SetGID权限会附加在所属组的 x 权限位上，所属组的 x 权限标识会变成 s</li><li>设置SetGID命令格式：chmod g+s 文件名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mkdir /test6<br>[root@localhost ~]# chmod 777 /test6<br>[root@localhost ~]# ll -d /test6<br>drwxrwxrwx. 2 root root 6 4月  11 15:59 /test6<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">为目录设置SGID权限</span><br>[root@localhost ~]# chmod g+s /test6<br>[root@localhost ~]# ll -d /test6<br>drwxrwsrwx. 2 root root 6 4月  11 15:59 /test6<br><span class="hljs-meta prompt_">#</span><span class="language-bash">SGID权限会附加在所属组执行权限位，所属组执行权限变为s</span><br><br>[root@localhost ~]# touch /test6/1.txt<br>[root@localhost ~]# ll /test6/1.txt <br>-rw-r--r--. 1 root root 0 4月  11 16:00 /test6/1.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改目录所属组为lisi组</span><br>[root@localhost ~]# chown :lisi /test6<br>[root@localhost ~]# ll -d /test6<br>drwxrwsrwx. 2 root lisi 19 4月  11 16:00 /test6<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">SGID对目录设置后，在该目录下创建的任何文件都会继承父目录的所属组</span><br>[root@localhost ~]# touch /test6/2.txt<br>[root@localhost ~]# ll /test6/2.txt <br>-rw-r--r--. 1 root lisi 0 4月  11 16:01 /test6/2.txt<br></code></pre></td></tr></table></figure><h4 id="Sticky-BIT特殊权限"><a href="#Sticky-BIT特殊权限" class="headerlink" title="Sticky BIT特殊权限"></a>Sticky BIT特殊权限</h4><ul><li>Sticky BIT（SBIT）：该权限只针对于目录有效，当普通用户对一个目录拥有w和x权限时，普通用户可以在此目录下拥有增删改的权限，应为普通用户对目录拥有w权限时，是可以删除此目录下的所有文件</li><li>如果对一个目录设置了SBIT权限，除了root可以删除所有文件以外，普通用户就算对该目录拥有w权限，也只能删除自己建立的文件，不能删除其他用户建立的文件</li><li>SBIT权限会附加在其他人的 x 权限位上，其他人的 x 权限标识会变成 t</li><li>设置SBIT命令格式：chmod o+t 目录名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">为目录设置SBIT</span><br>[root@localhost ~]# chmod o+t /test<br>[root@localhost ~]# ll -d /test<br>drwxrwxrwt. 2 root root 6 4月  11 16:07 /test<br><br>[lisi@localhost test]$ ls<br>kenji.txt  laowang.txt  lisi.txt<br><br>[lisi@localhost test]$ rm -rf *<br>rm: 无法删除&quot;kenji.txt&quot;: 不允许的操作<br>rm: 无法删除&quot;laowang.txt&quot;: 不允许的操作<br></code></pre></td></tr></table></figure><h4 id="FACL访问控制列表"><a href="#FACL访问控制列表" class="headerlink" title="FACL访问控制列表"></a>FACL访问控制列表</h4><ul><li>FACL（Filesystemctl Access Control List）文件系统访问控制列表：利用文件扩展属性保存额外的访问控制权限，单独为每一个用户量身定制一个权限</li><li>命令格式：setfacl 选项 归属关系:权限 文档</li><li>常用选项：<ul><li>-m 设置权限</li><li>-x 删除指定用户权限</li><li>-b 删除所有用户权限</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">为natasha用户设置ACL权限</span><br>[root@localhost ~]# setfacl -m u:natasha:rx /yunwei/<br>[root@localhost ~]# ll -d /yunwei/<br>drwxrwx---+ 2 root yunwei 54 4月  11 16:43 /yunwei/<br>[root@localhost ~]# ll -d /test<br>drwxrwxrwt. 2 root root 42 4月  11 16:11 /test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看目录ACL权限</span><br>[root@localhost ~]# getfacl /yunwei<br>getfacl: Removing leading &#x27;/&#x27; from absolute path names<br><span class="hljs-meta prompt_"># </span><span class="language-bash">file: yunwei</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">owner: root</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">group: yunwei</span><br>user::rwx<br>user:natasha:r-x<br>group::rwx<br>mask::rwx<br>other::---<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">用户测试权限</span><br>[natasha@localhost ~]$ ls /yunwei/<br>hell.sh  kenji.txt  lisi.txt<br>[natasha@localhost yunwei]$ rm -rf kenji.txt <br>rm: 无法删除&quot;kenji.txt&quot;: 权限不够<br>[natasha@localhost yunwei]$ touch natasha.txt<br>touch: 无法创建&quot;natasha.txt&quot;: 权限不够<br>[natasha@localhost yunwei]$ vim kenji.txt <br><br><br>[root@localhost ~]# setfacl -m u:tom:rx /yunwei<br>[root@localhost ~]# setfacl -m u:jack:rx /yunwei<br>[root@localhost ~]# setfacl -m u:hary:rx /yunwei<br>[root@localhost ~]# getfacl /yunwei<br>getfacl: Removing leading &#x27;/&#x27; from absolute path names<br><span class="hljs-meta prompt_"># </span><span class="language-bash">file: yunwei</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">owner: root</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">group: yunwei</span><br>user::rwx<br>user:hary:r-x<br>user:tom:r-x<br>user:natasha:r-x<br>user:jack:r-x<br>group::rwx<br>mask::rwx<br>other::---<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除指定用户ACL权限</span><br>[root@localhost ~]# setfacl -x u:tom /yunwei<br>[root@localhost ~]# getfacl /yunwei<br>getfacl: Removing leading &#x27;/&#x27; from absolute path names<br><span class="hljs-meta prompt_"># </span><span class="language-bash">file: yunwei</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">owner: root</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">group: yunwei</span><br>user::rwx<br>user:hary:r-x<br>user:natasha:r-x<br>user:jack:r-x<br>group::rwx<br>mask::rwx<br>other::---<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除所有用户ACL权限</span><br>[root@localhost ~]# setfacl -b /yunwei<br>[root@localhost ~]# getfacl /yunwei<br>getfacl: Removing leading &#x27;/&#x27; from absolute path names<br><span class="hljs-meta prompt_"># </span><span class="language-bash">file: yunwei</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">owner: root</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">group: yunwei</span><br>user::rwx<br>group::rwx<br>other::---<br></code></pre></td></tr></table></figure><h4 id="课后作业-2"><a href="#课后作业-2" class="headerlink" title="课后作业"></a>课后作业</h4><p>1.创建test1用户，并指定用户UID为6666，指定用户描述信息为<a href="mailto:&#x74;&#x65;&#x73;&#116;&#x31;&#64;&#x31;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;">&#x74;&#x65;&#x73;&#116;&#x31;&#64;&#x31;&#x36;&#x33;&#x2e;&#99;&#111;&#x6d;</a>，指定用户解释器为&#x2F;sbin&#x2F;nologin</p><p>test1:x:6666:6666:<a href="mailto:&#116;&#x65;&#115;&#x74;&#x31;&#64;&#49;&#x36;&#51;&#x2e;&#x63;&#x6f;&#x6d;">&#116;&#x65;&#115;&#x74;&#x31;&#64;&#49;&#x36;&#51;&#x2e;&#x63;&#x6f;&#x6d;</a>:&#x2F;home&#x2F;test1:&#x2F;sbin&#x2F;nologin</p><p>2.创建名为stugrp组，将test1用户加入到stugrp组</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# groupadd stugrp</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# gpasswd -a test1 stugrp</p><p>3.请写出&#x2F;etc&#x2F;passwd文件中每个字段含义</p><p>用户名 密码占位符 UID GID 描述信息 家目录 解释器</p><p>4.创建test2用户，并设置密码为123456</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# useradd test2<br>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# passwd test2</p><p>5.修改root用户密码为123456</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# passwd</p><p>6.请写出Linux系统下存放用户密码信息文件</p><p>&#x2F;etc&#x2F;shadow</p><p>7.设置test2用户首次登录系统需要修改密码</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# chage -d 0 test2</p><p>8.使用root切换为test1用户身份</p><p>su - 用户名</p><p>9.将test2用户添加至stugrp组，并锁定用户密码</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# gpasswd -a test2 stugrp</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# passwd -l test2</p><p>10.删除test1用户，连同用户家目录一并删除</p><p>root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# userdel -r test1</p><p>11.请写出Linux系统存放组信息文件，与组密码信息文件</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# ls &#x2F;etc&#x2F;group</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# ls &#x2F;etc&#x2F;gshadow</p><p>12.将test2用户从stugrp组中删除</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# gpasswd -d test2 stugrp</p><p>13.在根下创建upload目录，并修改目录所有者为test2用户，所属组为stugrp组，并将lisi用户加入到stugrp组，修改所有者权限rwx，修改所属组权限为rwx，设置其他人没有任何权限</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# mkdir &#x2F;upload</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# chown test2:stugrp &#x2F;upload&#x2F;</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# gpasswd -a lisi stugrp</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# chmod 770 &#x2F;upload&#x2F;</p><p>14.创建test3用户，非交互式设置用户密码为123456，并设置test3用户可以对upload目录拥有rx权限</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# useradd test3<br>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# echo 123456 | passwd –stdin test3</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# setfacl -m u:test3:rx &#x2F;upload&#x2F;<br>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# getfacl &#x2F;upload&#x2F;</p><p>15.在根下创建shared目录，并同时设置所有人都有完全权限（至少两种方法设置），要求所有普通用户在该目录下只能修改自己创建的文件</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# mkdir &#x2F;shared<br>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# chmod ugo&#x3D;rwx &#x2F;shared&#x2F;<br>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# chmod 777 &#x2F;shared&#x2F;<br>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# ll -d &#x2F;shared&#x2F;</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# chmod o+t &#x2F;shared&#x2F;</p><h4 id="常用特殊符号的使用"><a href="#常用特殊符号的使用" class="headerlink" title="常用特殊符号的使用"></a>常用特殊符号的使用</h4><p>Linux系统下通配符起到了很大的作用，对于不确定的文档名称可以使用以下特殊字符表示</p><p>*常用的特殊符号，在文件名上，用来代表任意多个任意字符</p><p>? 常用的特殊符号，在文件名上，用来代表任意单个任意字符</p><p>[0-9] #在文件名上，用来代表多个字符或连续范围中的一个，若无则忽略</p><p>{a,b,cd,abcd} #在文件名上，用来代表多组不同的字符串，全匹配</p><ul><li>范例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查找以tab结尾的文件</span><br>[root@localhost ~]# ls /etc/*tab<br>[root@localhost ~]# ls /etc/*wd<br>[root@localhost ~]# ls /etc/*.conf<br>[root@localhost ~]# ls /etc/redhat*<br>[root@localhost ~]# ls /etc/*ss*<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找以<span class="hljs-built_in">tty</span>开头的文件，结尾以一个任意字符结尾</span><br>[root@localhost ~]# ls /dev/tty?<br>[root@localhost ~]# ls /etc/host?<br>[root@localhost ~]# ls /etc/pass??<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找<span class="hljs-built_in">tty</span>开头结尾以1-5连续字符结尾</span><br>[root@localhost ~]# ls /dev/tty[1-5]<br>[root@localhost ~]# ls /dev/tty[4-9]<br>[root@localhost ~]# ls /dev/tty[1,3,5,7,9,15,20,30]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找<span class="hljs-built_in">tty</span>开头结尾为不连续字符结尾</span><br>[root@localhost ~]# ls /dev/tty&#123;1,3,5,7,9,15,20,30&#125;<br>[root@localhost ~]# ls /dev/tty&#123;1..9&#125;<br>[root@localhost ~]# ls /dev/tty&#123;1..10&#125;<br>[root@localhost ~]# ls /dev/tty[1-10]<br></code></pre></td></tr></table></figure><h4 id="grep文件内容过滤"><a href="#grep文件内容过滤" class="headerlink" title="grep文件内容过滤"></a>grep文件内容过滤</h4><ul><li>grep用于查找文件中符合条件的字符串，它能利用正则表达式搜索文件中的字符串，并把匹配到的字符串的行打印出来</li><li>命令格式：grep [-选项] “查找条件” 目标文件</li><li>常用选项：<ul><li>-n #以行号形式输出</li><li>-i #忽略字符串大小写</li><li>-v #显示不包含匹配的行（排除）</li></ul></li><li>常用正则表达式符号<ul><li>^字符串 #显示以该字符串开头的行</li><li>$字符串 #显示以该字符串结尾的行</li><li>^$ #显示空行</li></ul></li><li>grep命令示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">过滤包含root关键字的行</span><br>[root@localhost ~]# grep root /etc/passwd<br>root:x:0:0:root:/root:/bin/bash<br>operator:x:11:0:operator:/root:/sbin/nologin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以行号形式过滤包含root关键字的行</span><br>[root@localhost ~]# grep -n root /etc/passwd<br>1:root:x:0:0:root:/root:/bin/bash<br>10:operator:x:11:0:operator:/root:/sbin/nologin<br><br>[root@localhost ~]# grep -n bash /etc/passwd<br>[root@localhost ~]# grep -n : /etc/passwd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">忽略大小写过滤</span><br>[root@localhost ~]# grep -i -n ssh /etc/passwd<br>38:sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">排除包含<span class="hljs-comment">#号的行</span></span><br>[root@localhost ~]# grep -n -v &#x27;^#&#x27; /etc/fstab<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">过滤以root开头的行</span><br>[root@localhost ~]# grep ^root /etc/passwd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">过滤以root结尾的行</span><br>[root@localhost ~]# grep -n &#x27;root$&#x27; /etc/passwd<br>[root@localhost ~]# grep -n &#x27;bash$&#x27; /etc/passwd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">语法错误示范</span><br>[root@localhost ~]# grep -n -v &#x27;^#&#x27; ^$  /etc/fstab<br>grep: ^$: 没有那个文件或目录<br>/etc/fstab:1:<br>/etc/fstab:9:/dev/mapper/centos-root /                       xfs     defaults        0 0<br>/etc/fstab:10:UUID=ae55ec6b-973b-498e-a366-f35e14b3d153 /boot                   xfs     defaults        0 0<br>/etc/fstab:11:/dev/mapper/centos-swap swap    <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">语法错误示范</span><br>[root@localhost ~]# grep -n -v &#x27;^#&#x27; /etc/fstab | grep -v ^$<br>1:<br>9:/dev/mapper/centos-root /                       xfs     defaults        0 0<br>10:UUID=ae55ec6b-973b-498e-a366-f35e14b3d153 /boot                   xfs     defaults        0 0<br>11:/dev/mapper/centos-swap swap                    swap    defaults        0 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">正确语法</span><br>[root@localhost ~]# grep  -v &#x27;^#&#x27; /etc/fstab | grep -v ^$ -n<br>2:/dev/mapper/centos-root /                       xfs     defaults        0 0<br>3:UUID=ae55ec6b-973b-498e-a366-f35e14b3d153 /boot                   xfs     defaults        0 0<br>4:/dev/mapper/centos-swap swap                    swap    defaults        0 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示该文件内有效配置的行</span><br>[root@localhost ~]# grep -v &#x27;^#&#x27; /etc/login.defs | grep -v ^$ -n | wc -l<br></code></pre></td></tr></table></figure><h4 id="find文件-x2F-目录查找命令"><a href="#find文件-x2F-目录查找命令" class="headerlink" title="find文件&#x2F;目录查找命令"></a>find文件&#x2F;目录查找命令</h4><ul><li>find 命令根据预设的条件递归查找文件或目录所在位置</li><li>命令格式：find 查找路径 查找条件1 查找条件2 .. [-exec 处理命令 {} ; ]<ul><li>–exec 可接额外的命令来处理查找到结果</li><li>{} 代表find查找到的内容被放置{}中</li><li>; 代表额外处理命令结束</li></ul></li><li>常用查找条件<ul><li>-type 类型（f文件 d目录 l链接文件）</li><li>-name “文件名”</li><li>-iname 按文件名查找忽略大小写</li><li>-size 文件大小（k、M、G + 大于 - 小于）</li><li>-a （并且）两个条件同时满足</li><li>-o （或者）两个条件满足任意一个即可</li><li>-user 用户名</li><li>-mtime 按日期查找（+ 代表多少天之前 - 代表多少天之内，0代表24小时之内）</li></ul></li><li>find命令范例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ls /var/log<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按照类型查找，类型为文件</span><br>[root@localhost ~]# find /var/log -type f<br>[root@localhost ~]# ll boot.log-20210417<br>[root@localhost ~]# ll /var/log/boot.log-20210417<br>[root@localhost ~]# ll /var/log/vmware-network.2.log<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按照类型查找，类型为目录</span><br>[root@localhost ~]# find /var/log -type d<br>[root@localhost ~]# ll -d /var/log/tuned<br>[root@localhost ~]# ll -d /var/log/qemu-ga<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按照类型查找，类型为链接文件</span><br>[root@localhost ~]# find /var/log -type l<br>[root@localhost ~]# fin /etc/ -type l<br>[root@localhost ~]# find /etc/ -type l<br>[root@localhost ~]# ll /etc/scl/conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按照名字查找</span><br>[root@localhost ~]# find /etc/ -name passwd<br>/etc/passwd<br>/etc/pam.d/passwd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按照名字查找，类型为文件</span><br>[root@localhost ~]# find /etc/ -name passwd -type f<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按照名字查找，以tab结尾，类型为文件</span><br>[root@localhost ~]# find /etc/ -name &#x27;*tab&#x27; -type f<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按照名字查找，以pass开头，类型为文件</span><br>[root@localhost ~]# find /etc/ -name &#x27;pass*&#x27; -type f<br>[root@localhost etc]# find . -name &#x27;*.conf&#x27; -type f<br><br>[root@localhost ~]# find /etc/ -name &#x27;*tab*&#x27; -type f<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按照名字忽略大小写查找，类型为文件</span><br>[root@localhost ~]# find /etc/ -iname FSTAB -type f<br>/etc/fstab<br>[root@localhost ~]# find /etc/ -name FSTAB -type f<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找大于10k的文件</span><br>[root@localhost ~]# find /var/log -size +10k -type f<br>[root@localhost ~]# du -h /var/log/boot.log-20210417<br>16K/var/log/boot.log-20210417<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找大于1M的文件</span><br>[root@localhost ~]# find /var/log -size +1M -type f<br>[root@localhost ~]# du -h /var/log/audit/audit.log<br>2.4M/var/log/audit/audit.log<br><br>[root@localhost ~]# find /home -size +1M -type f<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找小于1M的文件</span><br>[root@localhost ~]# find /var/log -size -1M -type f<br>[root@localhost ~]# du -h /var/log/spooler<br>0/var/log/spooler<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找大于10k并且下于20k，类型为文件</span><br>[root@localhost ~]# find /var/log -size +10k -a -size -20k -type f<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找大于10k或者小于100k，类型为文件</span><br>[root@localhost ~]# find /var/log -size +10k -o -size -100k -type f<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找属于lisi用户的文件/目录</span><br>[root@localhost ~]# find /home -user lisi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找30天之前被修改过，类型为文件</span><br>[root@localhost ~]# find /var/log -mtime +30 -type f<br>[root@localhost ~]# find /var/log -mtime +10 -type f<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找10天之内被修改过，类型为文件</span><br>[root@localhost ~]# find /var/log -mtime -10 -type f<br>root@localhost ~]# find /var/log -mtime -30 -type f<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找30之前被修改过，类型为文件，拷贝到/opt目录下</span><br>[root@localhost ~]# find /var/log -mtime -30 -type f -exec cp &#123;&#125; /opt \;<br></code></pre></td></tr></table></figure><p>题型：</p><ul><li><p>查找&#x2F;etc&#x2F;目录下以.conf结尾的文件（只能在&#x2F;etc这一层目录去查找）</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# ls &#x2F;etc&#x2F;*.conf</p></li><li><p>查找&#x2F;etc&#x2F;目录下以.conf结尾的文件（包含所有的子目录）</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# find &#x2F;etc&#x2F; -name ‘*.conf’ -type f</p></li></ul><h4 id="压缩与解压缩"><a href="#压缩与解压缩" class="headerlink" title="压缩与解压缩"></a>压缩与解压缩</h4><ul><li>Linux独有压缩格式及命令工具:<ul><li>gzip—&gt; .gz</li><li>bzip2—&gt; .bz2</li><li>xz—&gt; .xz</li></ul></li><li>压缩命令格式<ul><li>gzip [选项…] 文件名<ul><li>常用选项：-d 解压缩</li></ul></li><li>bzip2 [选项…] 文件名<ul><li>常用选项：-d 解压缩</li></ul></li><li>xz [选项…] 文件名<ul><li>常用选项：-d 解压缩</li></ul></li></ul></li><li>查看压缩文件内容<ul><li>zcat [选项…] 文件名</li><li>bzcat [选项…] 文件名</li><li>xzcat [选项…] 文件名</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# cp /etc/services /opt<br>[root@localhost ~]# cd /opt<br>[root@localhost opt]# ll services <br>-rw-r--r--. 1 root root 670293 4月  17 17:06 services<br>[root@localhost opt]# ll -h services <br>-rw-r--r--. 1 root root 655K 4月  17 17:06 services<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用gzip格式对文件进行压缩</span><br>[root@localhost opt]# gzip services <br>[root@localhost opt]# ls<br>services.gz<br>[root@localhost opt]# ll -h services.gz <br>-rw-r--r--. 1 root root 133K 4月  17 17:06 services.gz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">不解压查看压缩文件内容</span><br>[root@localhost opt]# zcat services.gz <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压文件</span><br>[root@localhost opt]# gzip -d services.gz <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用bzip2格式对文件进行压缩</span><br>[root@localhost opt]# bzip2 services <br>[root@localhost opt]# ls<br>services.bz2<br>[root@localhost opt]# ll -h services.bz2 <br>-rw-r--r--. 1 root root 122K 4月  17 17:06 services.bz2<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">不解压查看文件内容</span><br>[root@localhost opt]# bzcat services.bz2 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压文件</span><br>[root@localhost opt]# bzip2 -d services.bz2 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用xz格式对文件进行压缩</span><br>[root@localhost opt]# xz services <br>[root@localhost opt]# ls<br>services.xz<br>[root@localhost opt]# ll -h services.xz <br>-rw-r--r--. 1 root root 98K 4月  17 17:06 services.xz<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压文件</span><br>[root@localhost opt]# xz -d services.xz <br></code></pre></td></tr></table></figure><h4 id="tar打包工具"><a href="#tar打包工具" class="headerlink" title="tar打包工具"></a>tar打包工具</h4><ul><li>tar命令用在linux下用于对文件&#x2F;目录打包，使用 tar 程序打出来的包常称为 tar 包，tar 包文件通常都是以 .tar 结尾</li><li>tar 命令格式：tar 选项 压缩包名字 被压缩文件</li><li>常用选项：<ul><li>-c 创建打包文件</li><li>-f 指定打包后的文件名称</li><li>-z 调用gzip压缩工具 -J 调用xz压缩工具 -j 调用bzip2压缩工具</li><li>-t 列出打包文档内容</li><li>-x 释放打包文件</li><li>-C 指定解压路径</li><li>-v 显示详细信息</li></ul></li><li>tar命令范例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">同时打包多个文件/目录并使用gzip格式压缩</span><br>[root@localhost opt]# tar -czf xxx.tar.gz /etc/passwd /etc/fstab /home<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将压缩包数据解压到/media目录</span><br>[root@localhost opt]# tar -xf xxx.tar.gz -C /media/<br>[root@localhost opt]# ls /media/etc<br>[root@localhost opt]# rm -rf xxx.tar.gz <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时打包多个文件/目录并使用xz格式压缩</span><br>[root@localhost opt]# tar -cJf xx.tar.xz /etc/hostname /etc/services /home<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">错误语法，f选项要放到所有选项右边</span><br>[root@localhost opt]# tar -ft xx.tar.xz <br>tar: 您必须从&quot;-Acdtrux&quot;或是&quot;--test-label&quot;选项中指定一个<br>请用“tar --help”或“tar --usage”获得更多信息。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">不解压查看压缩包数据</span><br>[root@localhost opt]# tar -tf xx.tar.xz <br>etc/hostname<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将压缩包数据解压到/tmp目录</span><br>[root@localhost opt]# tar -vxf xx.tar.xz -C /tmp<br>[root@localhost opt]# ls /tmp<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">同时打包多个文件/目录并使用bzip2格式压缩</span><br>[root@localhost opt]# tar -cjf abc.tar.bz2 /etc/hostname /etc/group /home<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压缩</span><br>[root@localhost opt]# tar -xf abc.tar.bz2 -C /media/<br></code></pre></td></tr></table></figure><h4 id="磁盘介绍"><a href="#磁盘介绍" class="headerlink" title="磁盘介绍"></a>磁盘介绍</h4><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxOTAyMDcyMTQwOC5wbmc." alt="1619020721408"></p><h4 id="分区过程"><a href="#分区过程" class="headerlink" title="分区过程"></a>分区过程</h4><p>添加新硬盘–分区–格式化文件系统–挂载使用</p><p>扇区是磁盘存储数据的最小单元，默认一个扇区可以存储512字节的数据</p><h4 id="磁盘类型介绍"><a href="#磁盘类型介绍" class="headerlink" title="磁盘类型介绍"></a>磁盘类型介绍</h4><ul><li>IDE接口类型：主要用于个人家用计算机领域，优点价格便宜，缺点数据传输速度慢</li><li>SCSI接口类型：主要用于服务器理领域，数据传输速度快，支持热插拔</li><li>SATA接口类型：串口磁盘，主要用于个人家用计算机领域</li><li>NVMe接口类型：固态硬盘接口</li></ul><h4 id="Linux常用分区格式"><a href="#Linux常用分区格式" class="headerlink" title="Linux常用分区格式"></a>Linux常用分区格式</h4><ul><li>MBR分区格式：比较古老的分区格式，分为主分区，只能划分4个主分区，扩展分区（容器）逻辑分区，最大支持2.2T磁盘容量<ul><li>IDE接口硬盘逻辑分区最多可以划分59个</li><li>SCSI接口硬盘逻辑分区最多可以划分11个</li><li>最大支持2.2T以内磁盘容量</li></ul></li><li>GPT分区格式：可划分128个主分区，最大支持18EB磁盘容量（1EB&#x3D;1024PB，1PB&#x3D;1024TB，1TB&#x3D;1024GB）</li></ul><h4 id="文件系统类型详解"><a href="#文件系统类型详解" class="headerlink" title="文件系统类型详解"></a>文件系统类型详解</h4><ul><li>文件管理系统，赋予分区文件系统分区才可以正常的使用，根文件系统，多少个多少个文件系统</li><li>CentOS5：分区默认使用文件系统类型ext3</li><li>CentOS6：分区默认使用文件系统类型ext4<ul><li>ext4日志记录功能，意外宕机，通过日志记录把没有保存的数据，在系统再次重启时快速恢复回来</li><li>单个文件系统最大支持1EB的分区容量，单个文件最大可以存储16TB数据</li></ul></li><li>CentOS7：分区默认使用文件系统类型xfs<ul><li>xfs开启了日志记录的功能，数据恢复的时候比ext4文件系统块</li><li>单个文件系统最大支持8EB分区容量，单个文件最大可以存储500TB的数据</li><li>单个文件每秒读写数据的速度可以达到4G</li></ul></li><li>swap文件系统：交换分区，硬盘空间去充当内存去使用</li></ul><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><ul><li>在Linux系统中用户无法直接使用硬件设备的，硬件设备在系统中都是以只读的方式存在的，必须挂载</li><li>挂载就是给我们用户提供一个可以使用设备的一个接口</li><li>挂载注意事项：<ul><li>挂载点必须是一个目录，理论上还得是一个空目录</li><li>一个文件系统不允许重复挂载到多个目录下</li><li>一个目录不允许重复挂载多个文件系统</li></ul></li></ul><h4 id="lsblk查看系统所有磁盘信息"><a href="#lsblk查看系统所有磁盘信息" class="headerlink" title="lsblk查看系统所有磁盘信息"></a>lsblk查看系统所有磁盘信息</h4><ul><li>lsblk（英文全拼：list block）用于列出当前系统所有磁盘与磁盘内的分区信息</li><li>命令格式：lsblk [选项…] [设备名]</li><li>常用选项：<ul><li>-d #仅显示磁盘本身，不会列出磁盘的分区数据</li><li>-f #列出磁盘分区使用的文件系统类型</li></ul></li><li>lsblk命令示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">列出当前系统所有磁盘与磁盘内的分区信息</span><br>[root@localhost ~]# lsblk <br>NAME            MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT<br>sda               8:0    0   20G  0 disk <br>├─sda1            8:1    0    1G  0 part /boot<br>└─sda2            8:2    0   19G  0 part <br>  ├─centos-root 253:0    0   17G  0 lvm  /<br>  └─centos-swap 253:1    0    2G  0 lvm  [SWAP]<br>sr0              11:0    1  4.3G  0 rom  /mnt/centos<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sda1：sd代表SCSI磁盘，a代表第一块磁盘，1代表第一个分区</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">sdb：sd代表SCSI磁盘，b代表第二块磁盘，1代表第一个分区</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释：</span><br>NAME#设备名称<br>MAJ:MIN#主设备号:次设备号，内核通过主次设备号识别磁盘<br>RM#是否为可卸载设备，1可卸载，0不可卸载<br>SIZE#设备的容量大小<br>RO#表示设备是否为只读，0非只读设备，1只读设备<br>TYPE#表示设备类型（disk为磁盘，part为分区，lvm逻辑卷，rom只读）<br>MOUNTPOINT#设备挂载点（SWAP没有挂载点）<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出指定的磁盘信息</span><br>[root@localhost ~]# lsblk -d /dev/sda<br>NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT<br>sda    8:0    0  20G  0 disk <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出所有磁盘分区内使用的文件系统类型</span><br>[root@localhost ~]# lsblk -f <br>NAME            FSTYPE      LABEL           UUID                                   MOUNTPOINT<br>sda                                                                                <br>├─sda1          xfs                         4cb9bb38-c34a-4415-9614-ba38642bb86d   /boot<br>└─sda2          LVM2_member                 cKn0jP-z8Bq-SNvl-BsNa-7vTg-GBU2-OiHCro <br>  ├─centos-root xfs                         55dad88d-a600-42d1-b387-236db62ce396   /<br>  └─centos-swap swap                        2e91599a-6d72-483d-add8-6dfb84296170   [SWAP]<br>sr0             iso9660     CentOS 7 x86_64 2018-11-25-23-54-16-00                 /mnt/centos<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">列出指定分区的文件系统类型</span><br>[root@localhost ~]# lsblk -df /dev/sda1<br>NAME FSTYPE LABEL UUID                                 MOUNTPOINT<br>sda1 xfs          4cb9bb38-c34a-4415-9614-ba38642bb86d /boot<br></code></pre></td></tr></table></figure><h4 id="df查看分区使用情况"><a href="#df查看分区使用情况" class="headerlink" title="df查看分区使用情况"></a>df查看分区使用情况</h4><ul><li>df命令用于查看文件系统使用情况</li><li>命令格式：df [选项…] [参数…]</li><li>常用选项：<ul><li>-h 以人类易读方式显示文件系统容量</li><li>T 显示文件系统类型</li></ul></li><li>df 命令示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# df<br>Filesystem              1K-blocks    Used Available Use% Mounted on<br>/dev/mapper/centos-root  17811456 3746320  14065136  22% /<br>devtmpfs                   480884       0    480884   0% /dev<br>tmpfs                      497948       0    497948   0% /dev/shm<br>tmpfs                      497948    8340    489608   2% /run<br>tmpfs                      497948       0    497948   0% /sys/fs/cgroup<br>/dev/sr0                  4480476 4480476         0 100% /mnt<br>/dev/sda1                 1038336  169448    868888  17% /boot<br>tmpfs                       99592      12     99580   1% /run/user/42<br>tmpfs                       99592       0     99592   0% /run/user/0<br><br>[root@localhost ~]# df -h /<br>Filesystem               Size  Used Avail Use% Mounted on<br>/dev/mapper/centos-root   17G  3.6G   14G  22% /<br></code></pre></td></tr></table></figure><h4 id="du统计文件-x2F-目录大小"><a href="#du统计文件-x2F-目录大小" class="headerlink" title="du统计文件&#x2F;目录大小"></a>du统计文件&#x2F;目录大小</h4><ul><li>du命令用于统计磁盘下目录或文件大小</li><li>命令格式：du [选项…] [参数…]</li><li>常用选项：<ul><li>-h #以人类易读方式（Kb，MB，GB）显示文件大小</li><li>-s #只统计每个参数的总数</li></ul></li><li>du 命令示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><br></code></pre></td></tr></table></figure><ul><li>&#x2F;dev&#x2F;目录下文件详解</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# ls /dev<br>hd[a-t]:IDE设备<br>sd[a-z]:SCSI设备<br>fd[0-7]：软盘驱动设备<br>md[0-32]：软RAID设备<br>loop[0-7]：本地回环设设备<br>lp[0-3]:打印机设备<br>mem：内存设备<br>null：空设备，也称为黑洞，任何写入的数据都将被丢弃<br>zero：零资源设备，任何写入的数据都将被丢弃<br>full：满设备，任何写入的数据都将失败<br>tty[0-63]：虚拟终端设备<br>random：随机数设备<br>urandom：随机数设备<br>port：存取I/O端口<br></code></pre></td></tr></table></figure><h4 id="blkid查看设备属性"><a href="#blkid查看设备属性" class="headerlink" title="blkid查看设备属性"></a>blkid查看设备属性</h4><ul><li>blkid命令显示块设备属性信息（设备名称，设备UUID，文件系统类型）</li><li>命令格式：blkid [选项…] [参数…]</li><li>blkid命令示例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">显示系统所有块设备属性信息</span><br>[root@localhost ~]# blkid<br>/dev/sda1: UUID=&quot;4cb9bb38-c34a-4415-9614-ba38642bb86d&quot; TYPE=&quot;xfs&quot; <br>/dev/sda2: UUID=&quot;cKn0jP-z8Bq-SNvl-BsNa-7vTg-GBU2-OiHCro&quot; TYPE=&quot;LVM2_member&quot; <br>/dev/sr0: UUID=&quot;2018-11-25-23-54-16-00&quot; LABEL=&quot;CentOS 7 x86_64&quot; TYPE=&quot;iso9660&quot; PTTYPE=&quot;dos&quot; <br>/dev/mapper/centos-root: UUID=&quot;55dad88d-a600-42d1-b387-236db62ce396&quot; TYPE=&quot;xfs&quot; <br>/dev/mapper/centos-swap: UUID=&quot;2e91599a-6d72-483d-add8-6dfb84296170&quot; TYPE=&quot;swap&quot; <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看执行分区属性信息</span><br>root@localhost ~]# blkid /dev/sda1<br>/dev/sda1: UUID=&quot;4cb9bb38-c34a-4415-9614-ba38642bb86d&quot; TYPE=&quot;xfs&quot; <br></code></pre></td></tr></table></figure><h4 id="MBR分区格式"><a href="#MBR分区格式" class="headerlink" title="MBR分区格式"></a>MBR分区格式</h4><ul><li>fdisk命令用于查看磁盘使用情况和磁盘分区（MBR分区格式）</li><li>命令格式：fdisk [选项…] [设备路径]</li><li>常用选项：-l 列出磁盘分区表类型与分区信息</li><li>分区</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# fdisk /dev/sdb<br>m#获取命令帮助※<br>p#显示磁盘分区表   ※<br>n#新增加一个分区   ※<br>q#不保存分区退出   ※<br>d#删除一个分区     ※<br>w#保存分区退出     ※<br>a#设置可引导标记<br>b#编辑bsd磁盘标签<br>c#设置DOS操作系统兼容标记<br>l#显示已知的文件系统类型，82为swap交换分区，83为Linux分区<br>o#建立空白DOS分区表<br>s#新建空白SUN磁盘标签<br>t#改变分区的系统ID<br>u#改变显示记录单位<br>v#验证分区表<br>x#附加功能<br><br>命令(输入 m 获取帮助)：m<br>命令(输入 m 获取帮助)：p<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">划分第一个主分区</span><br>命令(输入 m 获取帮助)：n<br>Select (default p):   回车<br>分区号 (1-4，默认 1)：回车<br>起始 扇区 (2048-209715199，默认为 2048)：回车<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (2048-209715199，默认为 209715199)：+10G  #指定大小（K,M,G）<br>分区 1 已设置为 Linux 类型，大小设为 10 GiB<br><br>命令(输入 m 获取帮助)：p<br>磁盘标签类型：dos<br>磁盘标识符：0xefc65503<br><br>   设备 Boot      Start         End      Blocks   Id  System<br>/dev/sdb1            2048    20973567    10485760   83  Linux<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">划分第二个主分区</span><br>命令(输入 m 获取帮助)：n<br>Select (default p): <br>分区号 (2-4，默认 2)：<br>起始 扇区 (20973568-209715199，默认为 20973568)：<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (20973568-209715199，默认为 209715199)：+10G  #指定分区大小<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">划分第三个主分区</span><br>命令(输入 m 获取帮助)：n<br>Select (default p): <br>分区号 (3,4，默认 3)：<br>起始 扇区 (41945088-209715199，默认为 41945088)：<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (41945088-209715199，默认为 209715199)：+10G<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看分区信息</span><br>命令(输入 m 获取帮助)：p<br>磁盘标签类型：dos<br>磁盘标识符：0xefc65503<br><br>   设备 Boot      Start         End      Blocks   Id  System<br>/dev/sdb1            2048    20973567    10485760   83  Linux<br>/dev/sdb2        20973568    41945087    10485760   83  Linux<br>/dev/sdb3        41945088    62916607    10485760   83  Linux<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">划分第四个分区</span><br>命令(输入 m 获取帮助)：n<br>Select (default e): p<br>起始 扇区 (62916608-209715199，默认为 62916608)：<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (62916608-209715199，默认为 209715199)：+10G<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">继续划分分区</span><br>命令(输入 m 获取帮助)：n<br>If you want to create more than four partitions, you must replace a<br>primary partition with an extended partition first.<br><span class="hljs-meta prompt_">#</span><span class="language-bash">提示如果想要创建更多的分区，先将一个主分区替换为扩展分区</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除分区</span><br>命令(输入 m 获取帮助)：d4<br>分区号 (1-4，默认 4)：<br>分区 4 已删除<br><br>命令(输入 m 获取帮助)：d<br>分区号 (1-3，默认 3)：3<br>分区 3 已删除<br><br>命令(输入 m 获取帮助)：p<br>磁盘标签类型：dos<br>磁盘标识符：0xefc65503<br><br>   设备 Boot      Start         End      Blocks   Id  System<br>/dev/sdb1            2048    20973567    10485760   83  Linux<br>/dev/sdb2        20973568    41945087    10485760   83  Linux<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建主分区</span><br>命令(输入 m 获取帮助)：n<br>Select (default p): <br>分区号 (3,4，默认 3)：<br>起始 扇区 (41945088-209715199，默认为 41945088)：<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (41945088-209715199，默认为 209715199)：+10G<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建按扩展分区</span><br>命令(输入 m 获取帮助)：n<br>Select (default e): <br>Using default response e<br>已选择分区 4<br>起始 扇区 (62916608-209715199，默认为 62916608)：<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (62916608-209715199，默认为 209715199)：<br>分区 4 已设置为 Extended 类型，大小设为 70 GiB<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建逻辑分区</span><br>命令(输入 m 获取帮助)：n<br>添加逻辑分区 5<br>起始 扇区 (62918656-209715199，默认为 62918656)：<br>Last 扇区, +扇区 or +size&#123;K,M,G&#125; (62918656-209715199，默认为 209715199)：+10G<br>分区 5 已设置为 Linux 类型，大小设为 10 GiB<br><br>命令(输入 m 获取帮助)：p<br>磁盘 /dev/sdb：107.4 GB, 107374182400 字节，209715200 个扇区<br>磁盘标签类型：dos<br>磁盘标识符：0xefc65503<br><br>   设备 Boot      Start         End      Blocks   Id  System<br>/dev/sdb1            2048    20973567    10485760   83  Linux<br>/dev/sdb2        20973568    41945087    10485760   83  Linux<br>/dev/sdb3        41945088    62916607    10485760   83  Linux<br>/dev/sdb4        62916608   209715199    73399296    5  Extended<br>/dev/sdb5        62918656    83890175    10485760   83  Linux<br>命令(输入 m 获取帮助)：w<br></code></pre></td></tr></table></figure><h4 id="格式化文件系统"><a href="#格式化文件系统" class="headerlink" title="格式化文件系统"></a>格式化文件系统</h4><ul><li>mkfs命令用于在分区上建立文件系统</li><li>常用文件系统类型<ul><li>ext4，xfs</li></ul></li><li>命令格式：<ul><li>mkfs.xfs 分区设备路径 #格式化为xfs类型文件系统</li><li>mkfs.ext4 分区设备路径 #格式化为ext4类型文件系统</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">格式化文件系统</span><br>[root@localhost ~]# mkfs.xfs /dev/sdb1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看文件系统类型</span><br>[root@localhost ~]# blkid /dev/sdb1<br>/dev/sdb1: UUID=&quot;3bb79b0b-3f17-4ad9-ad47-f00dcb6a5afa&quot; TYPE=&quot;xfs&quot; <br></code></pre></td></tr></table></figure><h4 id="mount挂载"><a href="#mount挂载" class="headerlink" title="mount挂载"></a>mount挂载</h4><ul><li>mount文件系统挂载命令</li><li>命令格式：mount 设备路径 挂载点目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建挂载点目录</span><br>[root@localhost ~]# mkdir /mybak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">挂载文件系统</span><br>[root@localhost ~]# mount /dev/sdb1 /mybak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看正在使用中的分区信息</span><br>[root@localhost ~]# df -Th <br><br>[root@localhost ~]# df -Th /mybak<br>文件系统       类型  容量  已用  可用 已用% 挂载点<br>/dev/sdb1      xfs    10G   33M   10G    1% /mybak<br></code></pre></td></tr></table></figure><p>总结：</p><ul><li>添加硬盘—查看系统是否识别新硬盘 lsblk</li><li>划分分区—fdisk 设备路径</li><li>格式化文件系统—mkfs.xfs</li><li>挂载—创建挂载点目录–挂载 mount 设备路径 挂载点目录</li><li>查看分区使用情况 df -hT</li></ul><h4 id="umount卸载"><a href="#umount卸载" class="headerlink" title="umount卸载"></a>umount卸载</h4><ul><li>umount命令用于卸载文件系统</li><li>命令格式：umount 挂载点目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">卸载文件系统</span><br>[root@localhost ~]# umount /mybak<br>[root@localhost ~]# df -h <br></code></pre></td></tr></table></figure><h4 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h4><ul><li>&#x2F;etc&#x2F;fstab用于存放文件系统信息，当系统启动时，系统会自动读取文件内容将指定的文件系统挂载到指定的目录</li><li>文件内容详解</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim /etc/fstab<br>/dev/mapper/centos-root /                       xfs     defaults        0 0<br>UUID=5d36a8b5-5a58-450f-acf9-81fcddaa62de /boot                   xfs     defaults        0 0<br>/dev/mapper/centos-swap swap                    swap    defaults        0 0<br><span class="hljs-meta prompt_">#</span><span class="language-bash">解释：该文件内容为6个字段，每个字段详解如下</span><br>第一个字段：要挂载的设备路径<br>第二个字段：挂载点目录<br>第三个字段：设备文件系统类型<br>第四个字段：挂载参数，参数如下↓<br>sync，async：  此文件系统是否使用同步写入 (sync) 或异步 (async) 的内存机制，默认为异步（async） <br>atime，noatime：更新访问时间/不更新访问时间，访问分区时，是否更新文件的访问时间，默认为更新<br>ro，rw：挂载文件为只读（ro）或读写（rw），默认为rw<br>auto，noauto：自动挂载/手动挂载，执行mount -a时，是否自动挂载/etc/fstab文件内容，默认为自动（auto）<br>dev，nodev：是否允许此文件系统上，可建立装置文件，默认为允许（dev）<br>suid，nosuid：是否允许文件系统上含有SUID与SGID特殊权限，默认为允许（SUID）<br>exec，noexec：是否允许文件系统上拥有可执行文件，默认为允许（exec）<br>user，nouser：是否允许普通用户执行挂载操作，默认为不允许（nouser），只有root用户可以挂载分区<br>defaults默认值：代表async，rw，auto，dev，suid，exec，nouser七个选项<br>第五个字段：是否对文件系统进行备份，0不备份，1为备份<br>第六个字段：是否检查文件系统顺序，允许的数字是0，1，2，0表示不检查，1的优先权最高<br><br>/dev/mapper/centos-root /                       xfs     defaults        0 0<br>UUID=ae55ec6b-973b-498e-a366-f35e14b3d153 /boot                   xfs     defaults        0 0<br>/dev/mapper/centos-swap swap                    swap    defaults        0 0<br>/dev/sdb1 /mybak xfs defaults 0 0     #手动添加                                                    <br></code></pre></td></tr></table></figure><ul><li>mount常用选项：<ul><li>-a：依照配置文件&#x2F;etc&#x2F;fstab的数据将所有未挂载的磁盘都挂载上来</li><li>-o：该选项后边可跟挂载时额外参数</li></ul></li><li>remount命令：重新挂载文件系统，在文件系统出错时或重新挂载文件系统时非常重要，</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# mount -a<br></code></pre></td></tr></table></figure><h4 id="GPT分区格式"><a href="#GPT分区格式" class="headerlink" title="GPT分区格式"></a>GPT分区格式</h4><ul><li>gdisk命令用于查看磁盘使用情况和磁盘分区（GPT分区格式）</li><li>命令格式：gdisk [选项…] [设备路径]</li><li>常用选项：-l 列出磁盘分区表类型与分区信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# gdisk /dev/sdc<br>GPT fdisk (gdisk) version 0.8.10 #GPT版本<br><br>Partition table scan:   #分区表扫描<br>  MBR: not present#MBR分区不存在<br>  BSD: not present#BSD分区不存在<br>  APM: not present#APM分区不存在<br>  GPT: not present#GPT分区不存在<br><br>Creating new GPT entries.  #创建新的GPT分区<br><br>Command (? for help): ?   #输入？号获取命令帮助<br>p#显示磁盘分区表   ※<br>n#新增加一个分区   ※<br>q#不保存分区退出   ※<br>d#删除一个分区     ※<br>w#保存分区退出     ※<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建新的分区</span><br>Command (? for help): n<br>Partition number (1-128, default 1): 回车<br>First sector (34-209715166, default = 2048) or &#123;+-&#125;size&#123;KMGTP&#125;: 回车  #输入起始扇区，默认2048开始<br>Last sector (2048-209715166, default = 209715166) or &#123;+-&#125;size&#123;KMGTP&#125;: +20G #输入新增分区的大小，可以通过扇区数来增加，也可以通过+size&#123;KMGTP&#125;方式来增加<br>Hex code or GUID (L to show codes, Enter = 8300):  #这里要求输入分区的类型，直接回车就行<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看分区类型</span><br>Command (? for help): p  #输入p查看创建的分区<br>Disk /dev/sdc: 209715200 sectors, 100.0 GiB  #磁盘总容量<br>...<br>Total free space is 167772093 sectors (80.0 GiB)  #磁盘剩余容量<br><br>Number  Start (sector)    End (sector)  Size       Code  Name<br>   1            2048        41945087   20.0 GiB    8300  Linux filesystem<br><span class="hljs-meta prompt_">#</span><span class="language-bash">以创建的分区</span><br><br>Command (? for help): w   #输入w保存配置，如果不想保存可以输入q退出<br>Do you want to proceed? (Y/N): y  #问你是否相想继续，输入y继续 <br>OK; writing new GUID partition table (GPT) to /dev/sdc.<br>The operation has completed successfully.   #写入成功<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">格式化文件系统</span><br>[root@localhost ~]# mkfs.xfs /dev/sdc1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看文件系统类型</span><br>[root@localhost ~]# blkid /dev/sdc1<br>/dev/sdc1: UUID=&quot;c57746eb-8170-4c86-82ad-6aae95de19f3&quot; TYPE=&quot;xfs&quot; <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">创建挂载点</span><br>[root@localhost ~]# mkdir /webbak<br>[root@localhost ~]# mount /dev/sdc1 /webbak<br>[root@localhost ~]# df -hT<br>/dev/sdc1               xfs        20G   33M   20G    1% /webbak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">开机自动挂载</span><br>[root@localhost ~]# vim /etc/fstab<br>/dev/mapper/centos-root /                       xfs     defaults        0 0<br>UUID=ae55ec6b-973b-498e-a366-f35e14b3d153 /boot                   xfs     defaults        0 0<br>/dev/mapper/centos-swap swap                    swap    defaults        0 0<br>/dev/sdb1              /mybak                   xfs     defaults        0 0 <br>/dev/sdc1              /webbak                  xfs     defaults        0 0   #手动添加<br><br>[root@localhost ~]# mount -a<br></code></pre></td></tr></table></figure><h4 id="LVM逻辑卷"><a href="#LVM逻辑卷" class="headerlink" title="LVM逻辑卷"></a>LVM逻辑卷</h4><ul><li>逻辑卷：LVM（Logical Volume Manager）逻辑卷管理系统</li><li>逻辑卷可以实现将底层的物理分区整合成一个大的虚拟硬盘</li><li>逻辑卷技术是通过Linux系统内核dm（device mapper）设备映射组件</li></ul><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODczNzk4NzY0MC5wbmc." alt="1618737987640"></p><h4 id="创建卷组"><a href="#创建卷组" class="headerlink" title="创建卷组"></a>创建卷组</h4><ul><li>创建卷组思路：将创建好的物理卷组成卷组（或者直接创建卷组）</li><li>命令格式：vgcreate 卷组名 设备路径1 设备路径2…</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建卷组</span><br>[root@localhost ~]# vgcreate systemvg  /dev/sdb2 /dev/sdb3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">详细显示卷组信息</span><br>[root@localhost ~]# vgdisplay  systemvg<br>  --- Volume group ---<br>  VG Name               systemvg  #卷组名字<br>  System ID             <br>  Format                lvm2      #卷组格式<br>  Metadata Areas        2<br>  Metadata Sequence No  1<br>  VG Access             read/write<br>  VG Status             resizable<br>  MAX LV                0<br>  Cur LV                0<br>  Open LV               0<br>  Max PV                0<br>  Cur PV                2<br>  Act PV                2<br>  VG Size               19.99 GiB  #卷组大小<br>  PE Size               4.00 MiB<br>  Total PE              5118<br>  Alloc PE / Size       0 / 0   <br>  Free  PE / Size       5118 / 19.99 GiB<br>  VG UUID               KEP7XS-wrkI-rTUY-RqBa-UJA6-YRkK-iKDabR  #卷组UUID<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">简要显示卷组信息</span><br>[root@localhost ~]# vgs systemvg<br>  VG       #PV #LV #SN Attr   VSize  VFree <br>  systemvg   2   0   0 wz--n- 19.99g 19.99g<br></code></pre></td></tr></table></figure><h4 id="创建逻辑卷"><a href="#创建逻辑卷" class="headerlink" title="创建逻辑卷"></a>创建逻辑卷</h4><ul><li>创建逻辑卷思路：从创建好的卷组中创建逻辑卷</li><li>命令格式：lvcreate -L 大小 -n 逻辑卷名 卷组名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">创建逻辑卷</span><br>[root@localhost ~]# lvcreate -L 10G -n mylv systemvg<br>  Logical volume &quot;mylv&quot; created.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">简要查看逻辑卷信息</span><br>[root@localhost ~]# lvs<br>  LV   VG       Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert<br>  root centos   -wi-ao---- &lt;17.00g                                                    <br>  swap centos   -wi-ao----   2.00g                                                    <br>  mylv systemvg -wi-a-----  10.00g     <br>[root@localhost ~]# lvs /dev/systemvg/mylv <br>  LV   VG       Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert<br>  mylv systemvg -wi-a----- 10.00g    <br>  <br><span class="hljs-meta prompt_"> #</span><span class="language-bash">查看卷组信息，卷组信息以变小</span><br> [root@localhost ~]# vgs<br>  VG       #PV #LV #SN Attr   VSize   VFree<br>  centos     1   2   0 wz--n- &lt;19.00g    0 <br>  systemvg   2   1   0 wz--n-  19.99g 9.99g<br></code></pre></td></tr></table></figure><h4 id="格式化文件系统-1"><a href="#格式化文件系统-1" class="headerlink" title="格式化文件系统"></a>格式化文件系统</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">格式化文件系统</span><br>[root@localhost ~]# mkfs.xfs /dev/systemvg/mylv<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看文件系统类型</span><br>[root@localhost ~]# blkid /dev/systemvg/mylv<br>/dev/systemvg/mylv: UUID=&quot;7f08daf8-ae3c-40b2-a282-4514a6f37111&quot; TYPE=&quot;xfs&quot; <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">挂载使用</span><br>[root@localhost ~]# mkdir /dbbak<br>[root@localhost ~]# mount /dev/systemvg/mylv /dbbak<br>[root@localhost ~]# df -hT<br>/dev/mapper/systemvg-mylv xfs        10G   33M   10G    1% /dbbak<br></code></pre></td></tr></table></figure><h4 id="扩展逻辑卷"><a href="#扩展逻辑卷" class="headerlink" title="扩展逻辑卷"></a>扩展逻辑卷</h4><ul><li>逻辑卷支线上扩容，逻辑卷的空间来源于卷组，当卷组有足够的空间是，才可以扩展逻辑卷</li><li>扩展命令：lvextend</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">扩容逻辑卷</span><br>[root@localhost ~]# lvextend -L +9G /dev/systemvg/mylv <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看逻辑卷信息</span><br>[root@localhost ~]# lvs <br>  LV   VG       Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert<br>  root centos   -wi-ao---- &lt;17.00g                                                    <br>  swap centos   -wi-ao----   2.00g                                                    <br>  mylv systemvg -wi-ao----  19.00g    #扩容成功<br></code></pre></td></tr></table></figure><h4 id="扩展文件系统"><a href="#扩展文件系统" class="headerlink" title="扩展文件系统"></a>扩展文件系统</h4><ul><li>当逻辑卷扩大以后，也需要多逻辑卷的文件系统进行扩展</li><li>刷新文件系统容量：<ul><li>xfs_growfs #用于扩容XFS设备</li><li>resize2fs #用于扩容EXT3&#x2F;EXT4设备（了解）</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">扩展文件系统</span><br>[root@localhost ~]# xfs_growfs /dbbak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">[root@localhost ~]<span class="hljs-comment"># df -hT</span></span><br>/dev/mapper/systemvg-mylv xfs        19G   33M   19G    1% /dbbak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看卷组信息</span><br>[root@localhost ~]# vgs<br>  VG       #PV #LV #SN Attr   VSize   VFree   <br>  centos     1   2   0 wz--n- &lt;19.00g       0 <br>  systemvg   2   1   0 wz--n-  19.99g 1016.00m<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">扩容卷组</span><br></code></pre></td></tr></table></figure><h4 id="扩展卷组"><a href="#扩展卷组" class="headerlink" title="扩展卷组"></a>扩展卷组</h4><ul><li>卷组的空间来源于物理分区，当卷组没有足够空间提供给逻辑卷时，须扩容卷组</li><li>扩展卷组命令：vgextend</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vgextend systemvg /dev/sdb5 /dev/sdb6 /dev/sdb7 /dev/sdb8<br><br>[root@localhost ~]# vgs<br>  VG       #PV #LV #SN Attr   VSize   VFree  <br>  centos     1   2   0 wz--n- &lt;19.00g      0 <br>  systemvg   6   1   0 wz--n- &lt;59.98g &lt;40.98g<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">扩容逻辑卷</span><br>[root@localhost ~]# lvextend -L +40G /dev/systemvg/mylv <br><br><br>[root@localhost ~]# lvs<br>  LV   VG       Attr       LSize   Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert<br>  root centos   -wi-ao---- &lt;17.00g                                                    <br>  swap centos   -wi-ao----   2.00g                                                    <br>  mylv systemvg -wi-ao----  59.00g   <br><span class="hljs-meta prompt_">  </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">扩展文件系统</span><br>[root@localhost ~]# xfs_growfs /dbbak<br>/dev/mapper/systemvg-mylv   59G   34M   59G    1% /dbbak<br></code></pre></td></tr></table></figure><h4 id="课后作业-3"><a href="#课后作业-3" class="headerlink" title="课后作业"></a>课后作业</h4><p>1.查看&#x2F;var&#x2F;log目录下以包含log的文件</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# ls &#x2F;var&#x2F;log&#x2F;<em>log</em></p><p>2.查看&#x2F;var&#x2F;log目录下以数字结尾的文件</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# ls &#x2F;var&#x2F;log&#x2F;*[0-9]</p><p>3.查看&#x2F;var&#x2F;log目录下以字母结尾的文件（包括大写）</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# ls &#x2F;var&#x2F;log&#x2F;*[a-Z]</p><p>4.过滤&#x2F;etc&#x2F;sudoers文件以root开头的行</p><p>root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# grep ^root &#x2F;etc&#x2F;sudoers<br>root ALL&#x3D;(ALL) ALL</p><p>5.看&#x2F;etc&#x2F;sudoers文件有效的配置</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# grep -v ‘^#’ &#x2F;etc&#x2F;sudoers | grep -v ‘^$’ -n</p><p>6.查找&#x2F;etc&#x2F;目录下crontab文件存放位置，并查看文件内容</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# find &#x2F;etc&#x2F; -name crontab -type f</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# cat &#x2F;etc&#x2F;crontab</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# find &#x2F;etc&#x2F; -name crontab -type f -exec cat {} ;</p><p>7.查找10分钟内被修改的文件</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# find &#x2F; -cmin -10 -type f</p><p>8.查找&#x2F;var&#x2F;log目录下30天之前被修改且大于1M的文件，清空文件内容</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# find &#x2F;var&#x2F;log -mtime +30 -type f -size +10k -exec cp &#x2F;dev&#x2F;null {} ;</p><p>9.Linux下你常熟悉的压缩格式有哪些？</p><p>gzip bzip2 xz</p><p>10.对&#x2F;home目录打包并压缩，打包后名为home.tar.gz</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# tar -czf home.tar.gz &#x2F;home</p><p>11.将home.tar.gz压缩包内容解压至&#x2F;homebak目录下</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# tar -xvf home.tar.gz -C &#x2F;homebak&#x2F;</p><p>12.MBR分区格式可以划分多少个主分区？支持多大容量磁盘？</p><p>4个主分区，2.2T</p><p>13.GPT分区格式可以划分多少个主分区？支持多大容量磁盘？</p><p>128主分区，18EB</p><p>14.CentOS7分区默认使用的文件系统类型是什么？</p><p>xfs</p><p>15.如何查看一块磁盘的分区格式？及扩展分区大小？</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# fdisk -l &#x2F;dev&#x2F;sdc</p><p>磁盘标签类型：gpt</p><p>16如何查看一块磁盘剩余容量？</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# lsblk &#x2F;dev&#x2F;sdc</p><p>17.linux下开机自动挂载文件是哪个？</p><p>&#x2F;etc&#x2F;fstab</p><p>18.如何查看一个分区文件系统类型？及使用情况？</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# df -hT</p><p>19.为根分区扩容40G空间</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看根分区卷组</span><br>[root@localhost ~]# vgs<br>  VG       #PV #LV #SN Attr   VSize   VFree   <br>  centos     1   2   0 wz--n- &lt;19.00g       0 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">扩容根分区卷组</span><br>[root@localhost ~]# vgextend centos /dev/sdc2 /dev/sdc3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看根分区逻辑卷信息</span><br>[root@localhost ~]# lvs<br>  LV   VG       Attr       LSize   <br>  root centos   -wi-ao---- &lt;17.00g  <br><span class="hljs-meta prompt_">  </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">扩容逻辑卷</span><br>[root@localhost ~]# lvextend -L +39G /dev/centos/root <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看逻辑卷信息</span><br>[root@localhost ~]# lvs<br>  root centos   -wi-ao---- &lt;56.00g  <br><span class="hljs-meta prompt_">  </span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看正在使用的分区信息</span><br>[root@localhost ~]# df -hT<br>文件系统                类型      容量  已用  可用 已用% 挂载点<br>/dev/mapper/centos-root xfs        17G  4.4G   13G   26% /<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">扩容文件系统</span><br>[root@localhost ~]# xfs_growfs /<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看使用情况</span><br>[root@localhost ~]# df -h<br>文件系统                 容量  已用  可用 已用% 挂载点<br>/dev/mapper/centos-root   56G  4.4G   52G    8% /<br></code></pre></td></tr></table></figure><h4 id="删除逻辑卷"><a href="#删除逻辑卷" class="headerlink" title="删除逻辑卷"></a>删除逻辑卷</h4><ul><li>逻辑卷的删除不允许联机操作，需要先卸载，在执行删除</li><li>在执行删除操作时，首先删除LV逻辑卷，在删除VG卷组，最后删除PV物理卷</li><li>删除命令：lvremove</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">删除逻辑卷错误示范</span><br>[root@localhost ~]# lvremove /dev/systemvg/mylv <br>  Logical volume systemvg/mylv contains a filesystem in use.  #提示文件正在使用中<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">需要先卸载</span><br>[root@localhost ~]# umount /dblod/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除逻辑卷</span><br>[root@localhost ~]# lvremove /dev/systemvg/mylv <br>Do you really want to remove active logical volume systemvg/mylv? [y/n]: y<br>  Logical volume &quot;mylv&quot; successfully removed<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">删除卷组</span><br>[root@localhost ~]# vgremove systemvg<br>  Volume group &quot;systemvg&quot; successfully removed<br></code></pre></td></tr></table></figure><h4 id="逻辑卷的缩减"><a href="#逻辑卷的缩减" class="headerlink" title="逻辑卷的缩减"></a>逻辑卷的缩减</h4><ul><li>命令lvreduce</li><li>不允许连接缩减</li><li>先缩减文件系统的空间，在缩减逻辑卷的空间</li></ul><h4 id="RAID磁盘阵列"><a href="#RAID磁盘阵列" class="headerlink" title="RAID磁盘阵列"></a>RAID磁盘阵列</h4><ul><li>RAID中文全称：独立磁盘冗余阵列 ，简称磁盘阵列</li><li>RAID可通过技术（软件&#x2F;硬件）将多个独立的磁盘整合成一个巨大容量大逻辑磁盘使用</li><li>RAID可以提高数据I&#x2F;O（读写）速度，和冗余数据的功能</li></ul><h4 id="RAID级别"><a href="#RAID级别" class="headerlink" title="RAID级别"></a>RAID级别</h4><p>RAID0：等量存储，至少由2块磁盘组成，同一个文档等量存放在不同的磁盘并行写入数据来提高效率，但只是单纯的提高效率，并没有冗余功能，如果其中一块盘故障，数据会丢失，不适合存放重要数据</p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODg5Nzg1MzQ3OC5wbmc." alt="1618897853478"></p><p>RAID1：完整备份，至少由两块磁组成，同一个文档复制成多份存储到不同磁盘提高可靠性，读写速度没有提升，适合存储重要的数据</p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODg5OTEwMDE1My5wbmc." alt="1618899100153"></p><p>RAID2：至少由3块磁盘组成，数据分散存储在不同磁盘，在读写数据时需要对数据时时校验，由于采用的校验算法复杂，数据量比原有数据增大，而且导致硬件开销较大</p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODkwMDkxMjUyMi5wbmc." alt="1618900912522"></p><p>RAID3：至少由三块磁盘组成，同一份文档分散写入不同的磁盘，校验数据单独存放在另外一块磁盘，由于每次读写操作都会访问校验盘，容易导致校验盘长时间高负荷工作而挂掉，如果校验盘损坏数据将无法恢复</p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODkwMTIwMDUyMy5wbmc." alt="1618901200523"></p><p>RAID4：与RAID3类似，至少由3块磁盘组成，同一份文档分散存写入不同磁盘，校验数据单独存放在另外一块磁盘，由于每次读写操作都会访问校验盘，容易导致校验盘长时间高负荷工作而挂掉，如果校验盘损坏数据将无法恢复，与RAID3的区别是数据分割方式不一样</p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODkwMTY1MzU5Ni5wbmc." alt="1618901653596"></p><p>RAID5：至少由3块磁盘组成，同一份文档分散写入不同磁盘，每个硬盘都有校验数据，其中校验数据会占用磁盘三分之一的空间，三分之二的空间存放原始数据，允许同时坏一块磁盘，当一块磁盘损坏，其他磁盘里的数据配合校验信息可将数据恢复回来</p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODkwMjA1NjE0MS5wbmc." alt="1618902056141"></p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODkwNDA4NjY4Mi5wbmc." alt="1618904086682"></p><p>RAID6：至少由4块磁盘组成，同一份文档分散写入不同磁盘，每个磁盘都有校验数据，由于采用双校验算法，所以校验数据量是RAID5的两倍，需要占用2块磁盘空间存放校验数据，两块盘存放原始数据，由于数据校验的算法计算量偏大，所以在速写速度上没有RAID5快，允许同时坏2块磁盘</p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODkwNDMzMjAxNy5wbmc." alt="1618904332017"></p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODkwNDAzNjkyMy5wbmc." alt="1618904036923"></p><p>RAID7：美国SCC公司专利，花钱</p><p>RAID10：RAID10&#x3D;RAID1+RAID0合二为一，最少需要4块磁盘，先将4块硬盘组成两组RAID1，在将两组RAID1组成一个RAID0，既提高数据读写速度，又能保障数据安全性，缺点是可用容量是总容量的一半</p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODkwNzYzNzM1OS5wbmc." alt="1618907637359"></p><h4 id="实现RAID方式"><a href="#实现RAID方式" class="headerlink" title="实现RAID方式"></a>实现RAID方式</h4><ul><li>实现RAID通常有三种方式，通过软件技术实现RAID功能（软RAID）</li><li>外接式磁盘阵列柜，被常用在大型服务器上，不过这类产品价格昂贵</li><li>RAID磁盘阵列卡，分为服务器自带和额外安装，硬RAID比软RAID更安全稳定，RAID卡带有缓存功能可实现数据自动恢复，RAID卡有电池</li></ul><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODkwOTU5NzU5NC5wbmc." alt="1618909597594"></p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODg1NzI3MzQyNC5wbmc." alt="1618857273424"></p><ul><li>配置硬RAID方式</li></ul><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODk4ODY5NTcwNS5wbmc." alt="1618988695705"></p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODk4ODc0MDYzNC5wbmc." alt="1618988740634"></p><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYxODk4ODc1NDA0NS5wbmc." alt="1618988754045"></p><h4 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h4><ul><li>什么是程序：用计算机语言编写的命令序列集合，用来实现特定的目标或解决特定的问题，程序占用磁盘空间，程序是静态并且是永久的</li><li>什么是进程：正在运行中的程序叫进程，占用内存空间，进程是动态的，进程是有生命周期的，进程有自己的独立内存空间，每启动一个进程，系统就会为它分配内存空间并分配一个PID号，每个进程都会对应一个父进程，而父进程可以复制多个子进程，每种进程都有两种方式存在，前台与后台，一般进程都是以后台方式运</li><li>什么是线程：线程也被称为轻量级进程，被包含在进程中，是进程的一个子集，是进程中的实际运作单位，一个进程中可以并发多个线程，每条线程并行执行不同的任务，每个线程都是独立的，线程之间共享进程的内存空间，在多线程的程序中，由于线程很“轻”，故线程的切换非常迅速且开销小（在同一进程中）</li></ul><h4 id="查看进程树"><a href="#查看进程树" class="headerlink" title="查看进程树"></a>查看进程树</h4><ul><li>pstree以树状结构显示进程信息，包括进程之间的关系</li><li>命令格式：pstree [选项…] [参数…]</li><li>常用选项：<ul><li>-p #显示进程PID</li><li>-a #显示完整的命令行</li><li>-u #列出每个进程所属账号名称</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看进程树</span><br>[root@localhost ~]# pstree<br>systemd─┬─ModemManager───2*[&#123;ModemManager&#125;]<br>CentOS7版本：天父进程systemd<br>CentOS6版本：天父进程init，Apstart<br>CentOS5版本：天赋进程init<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">以PID形式显示进程信息</span><br>[root@localhost ~]# pstree -p<br>systemd(1)─┬─ModemManager(6714)─┬─&#123;ModemManager&#125;(6739)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统用户的进程信息</span><br>[root@localhost ~]# pstree -p lisi<br>sshd(15086)───bash(15089)───vim(15244)<br>[root@localhost ~]# pstree -pa lisi<br>sshd,15086    <br>  └─bash,15089<br>      └─vim,15244 1.txt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统所有用户的进程</span><br>root@localhost ~]# pstree -up<br>...<br>           ├─smartd(6726)<br>           ├─sshd(7337)─┬─sshd(8880)───bash(8887)───pstree(15395)<br>           │            └─sshd(15066)───sshd(15086,lisi)───bash(15089)───vim(15244)<br></code></pre></td></tr></table></figure><ul><li>ps aux：unix格式静态查看系统进程，查看系统所有进程信息<ul><li>a #显示当前终端所有进程</li><li>u #以用户格式输出</li><li>x #当前用户在所有终端下的进程</li></ul></li><li>ps -ef：Linux格式静态查看系统进程，查看系统所有进程信息<ul><li>-e #显示系统所有进程</li><li>-l #以长格式输出信息</li><li>-f #显示最完整的进程信息</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统所有进程信息</span><br>[root@localhost ~]# ps aux<br>USER PID %CPU %MEM VSZ   RSS TTY STAT START TIME COMMAND<br>root  1  2.2  0.3 127992 6576 ?  Ss   09:08 0:01 /usr/lib/systemd/systemd --switched-root<br><span class="hljs-meta prompt_">#</span><span class="language-bash">个字段含义如下：</span><br>user：进程属于那个用户<br>PID ：进程PID号<br><span class="hljs-meta prompt_">%</span><span class="language-bash">CPU：进程占用CPU资源百分比</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">MEM：进程占用物理内存百分比</span><br>VSZ ：进程使用掉的虚拟内存量（单位：Kb）<br>RSS ：进程占用固定内存量（单位：Kb）<br>TTY ：进程在那个终端运行，如果内核直接调用则显示“？”，tty1-tty6表示本机终端登录的用户进程，pts/0-255则表示远程终端登录用户的进程<br>STAT：进程状态：R（Running）运行，S（Sleep）休眠，s包含子进程，T（stop）停止，Z（Zombie）僵尸，+后台进程<br>START：进程启动时间<br>TIME ：占用CPU运算时间<br>COMMAND：产生进程的命令<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统所有进程信息</span><br>[root@localhost ~]# ps -ef<br>UID  PID PPID  C STIME TTY    TIME  CMD<br>root 1      0  0 09:08 ?  00:00:01 /usr/lib/systemd/systemd --switched-root --system --dese<br><span class="hljs-meta prompt_">#</span><span class="language-bash">PPID ：该进程的父进程ID号</span><br></code></pre></td></tr></table></figure><h4 id="top查看系统健康状态"><a href="#top查看系统健康状态" class="headerlink" title="top查看系统健康状态"></a>top查看系统健康状态</h4><ul><li>top命令动态来查看系统运行性能及状态信息</li><li>命令格式：top [选项…]</li><li>常用选项：-d #指定刷新秒数，默认为3秒刷新一次</li><li>交互界面显示指令：<ul><li>键盘上下键翻行</li><li>h #获取交互模式帮助</li><li>P(大写) #按照CPU使用资源排序</li><li>M #按照内存使用资源排序</li><li>q #退出</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# top<br>top - 21:22:04 up 12:13,  2 users,  load average: 0.00, 0.01, 0.05<br>Tasks: 115 total,   1 running, 114 sleeping,   0 stopped,   0 zombie<br><span class="hljs-meta prompt_">%</span><span class="language-bash">Cpu(s):  0.3 us,  0.3 sy,  0.0 ni, 99.3 <span class="hljs-built_in">id</span>,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br>KiB Mem :  1863224 total,  1502920 free,   107872 used,   252432 buff/cache<br>KiB Swap:  2097148 total,  2097148 free,        0 used.  1565576 avail Mem <br>   <br>   PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND   <br>   8317 root      20   0  161984   2220   1568 R  0.7  0.1   0:01.62 top   <br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一行top每个字段含义如下：</span><br>第二列：21:22:04：当前系统时间<br>第三列：up 12:13：系统运行时间，该系统以运行12小时13分钟（up 10 day，12:13 代表运行10天12小时13分钟）<br>第四列：2 users：当前系统登录终端数量<br>第五列：load average: 0.00, 0.01, 0.05：CPU1分钟，5分钟，15分钟之前平均负载量，根据CPU核数判断系统CPU负载量，1核CPU若高于1代表负载过高，2核CPU若高于2代表负载过高，依次类推。。。<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第二行Tasks每个字段含义如下：</span><br>第二列：115 total：当前系统中进程的总数量<br>第三列：1 running：正在运行的进程数量<br>第四列：114 sleeping：正在睡眠的进程数量<br>第五列：0 stopped：正在停止的进程数量<br>第六列：0 zombie：僵尸进程数量，僵尸进程是当子进程比父进程先结束，而父进程又没有回收子进程，释放子进程占用的资源，此时子进程将成为一个僵尸进程。<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找僵尸进程与其父进程</span><br>ps -A -o stat,ppid,pid,cmd | grep &quot;^Zz&quot;<br>命令解释：<br>-A 参数列出所有进程<br>-o 自定义输出字段，我们设定显示字段为 stat（状态）, ppid（父进程id）, pid(进程id)，cmd（命令）这四个参数，因为状态为 z或者Z的进程为僵尸进程，所以我们使用grep抓取stat状态为zZ进程<br><span class="hljs-meta prompt_">#</span><span class="language-bash">杀死进程</span><br>kill -9 + 父进程号<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第三行%Cpu(s)每个字段含义如下</span><br>第二列：0.0 us：用户进程占用的CPU百分比<br>第三列：0.0 sy：系统进程占用的CPU百分比<br>第四列：0.0 ni：改变过优先级的用户进程占用的CPU百分比<br>第五列：100.0 id：空闲的CPU百分比（重点关注）<br>第六列：0.0 wa：等待输入/输出的进程的占用CPU百分比<br>第七列：0.0 hi：硬中断请求服务占用的CPU百分比<br>第八列：0.0 si：软中断请求服务占用的CPU百分比<br>第九列：0.0 st：虚拟时间百分比，当有虚拟机时，虚拟CPU等待实际CPU的时间百分比<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第四行KiB Mem每个字段含义如下：</span><br>第二列：1863224 total：物理内存总量，单位KB<br>第三列：1502516 free： 空闲内存总量，单位KB<br>第四列：108240 used：  以使用的内存总量，单位KB<br>第五列：252468 buff/cache：块设备与普通文件占用的缓存数量<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第五行KiB Swap每个字段含义如下：</span><br>第二列：2097148 total：交换空间总量，单位KB<br>第三列：2097148 free：可用空闲交换空间总量，单位KB<br>第四列：0 used：：以使用的交换空间总量，单位KB<br>第五列：1565180 avail Mem：可用于进程下一次分配的物理内存数量<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第六行每个字段含义如下：</span><br>PID：进程PID号<br>USER：进程所有者的用户名<br>PR：进程优先级执行顺序，越小越优先被执行<br>NI：负值表示高优先级，正值表示低优先级，越小越优先被执行<br>VIRT：进程使用的虚拟内存总量，单位kb   <br>RES：进程使用的、未被换出的物理内存大小，单位kb<br>SHR：共享内存大小，单位kb<br>S：进程状态。D=不可中断的睡眠状态 R=运行 S=睡眠 T=跟踪/停止 Z=僵尸进程<br><span class="hljs-meta prompt_">%</span><span class="language-bash">CPU：进程使用的CPU百分比（重点关注）</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">MEM：进程使用的物理内存百分比（重点关注）</span><br>TIME+：进程使用的CPU时间总计，单位1/100秒<br>COMMAND：命令名/命令行<br></code></pre></td></tr></table></figure><h4 id="检索进程"><a href="#检索进程" class="headerlink" title="检索进程"></a>检索进程</h4><ul><li>pgrep 通过匹配其程序名，找到匹配的进程</li><li>命令格式：pgrep [选项…] [参数…]</li><li>常用选项：<ul><li>-l #输出进程名与PID</li><li>-U #检索指定用户进程</li><li>-t #检索指定终端进程</li><li>-x #精确匹配完整进程名</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">过滤sshd进程</span><br>[root@localhost ~]# pgrep sshd<br>7337<br>8880<br>15066<br>15086<br>17027<br><br>过滤sshd进程，并显示进程名称<br>[root@localhost ~]# pgrep -l sshd<br>7337 sshd<br>8880 sshd<br>15066 sshd<br>15086 sshd<br>17027 sshd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">过滤指定用户的进程</span><br>[root@localhost ~]# pgrep -lU lisi<br>15086 sshd<br>15089 bash<br>15244 vim<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按照用户名过滤进程时，选项不要颠倒</span><br>[root@localhost ~]# pgrep -Ul lisi<br>pgrep: invalid user name: l<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统所有终端用户</span><br>[root@localhost ~]# who<br>root     pts/0        2021-04-24 14:06 (192.168.0.1)<br>lisi     pts/1        2021-04-24 15:57 (192.168.0.1)<br>root     pts/2        2021-04-24 16:29 (192.168.0.1)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">过滤用户在指定终端开启的进程信息</span><br>[root@localhost ~]# pgrep -lU lisi -t pts/1<br>15089 bash<br>15244 vim<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">过滤用户在指定终端开启的进程信息</span><br>[root@localhost ~]# pgrep -lU lisi -t pts/3<br>19704 bash<br>19754 top<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">精确匹配进程名（没有则不显示）</span><br>[root@localhost ~]# pgrep -x ssh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">精确匹配进程名</span><br>[root@localhost ~]# pgrep -xl crond<br>7362 crond<br></code></pre></td></tr></table></figure><h4 id="进程的前后台调度"><a href="#进程的前后台调度" class="headerlink" title="进程的前后台调度"></a>进程的前后台调度</h4><ul><li>&amp; #将进程放入后台运行</li><li>jobs -l #查看后台进程列表</li><li>fg 进程编号 #将后台进程恢复至前台运行</li><li>ctrl + z 组合键 #挂起当前进程并放入后台</li><li>bg 进程编号 #激活后台被挂起进程</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# sleep 5m &amp;<br>[1] 20130<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看后台进程信息</span><br>[root@localhost ~]# jobs -l<br>[1]+ 20130 运行中               sleep 5m &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">将后台进程放入前台运行</span><br>[root@localhost ~]# fg 1<br>sleep 5m<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">挂起前台进程放入后台</span><br>[root@localhost ~]# jobs<br>[1]+  已停止               sleep 5m<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">激活后台的进程</span><br>[root@localhost ~]# bg 1<br>[1]+ sleep 5m &amp;<br>[root@localhost ~]# jobs -l<br>[1]+ 20130 运行中               sleep 5m &amp;<br></code></pre></td></tr></table></figure><h4 id="杀死进程"><a href="#杀死进程" class="headerlink" title="杀死进程"></a>杀死进程</h4><ul><li>杀死进程的方式</li><li>ctrl + c 组合键结束当前命令程序</li><li>kill [选项…] PID<ul><li>常用选项：-l #列出可用进程信号</li><li>常用信号：-1重启进程，-9强制杀死进程，-15正常杀死进程（默认信号无需指定）</li></ul></li><li>killall -9 进程名 #强制杀死进程</li><li>killall -9 -u 用户名 #强制杀死该用户所有进程</li><li>pkill -9 进程名 #强制杀死进程<ul><li>常用选项：-t 终端号 #提出终端用户</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">结束前台正在运行的进程</span><br>[root@localhost ~]# sleep 5m<br>^C<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启用进程放入后台</span><br>[root@localhost ~]# sleep 5m &amp;<br>[1] 21150<br>[root@localhost ~]# sleep 6m &amp;<br>[2] 21155<br>[root@localhost ~]# sleep 7m &amp;<br>[3] 21159<br>[root@localhost ~]# sleep 8m &amp;<br>[4] 21162<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看后台进程</span><br>[root@localhost ~]# jobs -l<br>[1]  21150 运行中               sleep 5m &amp;<br>[2]  21155 运行中               sleep 6m &amp;<br>[3]- 21159 运行中               sleep 7m &amp;<br>[4]+ 21162 运行中               sleep 8m &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">杀死后台指定的进程（按照PID）</span><br>[root@localhost ~]# kill 21150<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看后台进程</span><br>[root@localhost ~]# jobs -l<br>[1]  21150 已终止               sleep 5m<br>[2]  21155 运行中               sleep 6m &amp;<br>[3]- 21159 运行中               sleep 7m &amp;<br>[4]+ 21162 运行中               sleep 8m &amp;<br><br>[root@localhost ~]# kill 21155<br>[root@localhost ~]# jobs -l<br>[2]  21155 已终止               sleep 6m<br>[3]- 21159 运行中               sleep 7m &amp;<br>[4]+ 21162 运行中               sleep 8m &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">强制杀死进程</span><br>[root@localhost ~]# kill -9 21159<br>[root@localhost ~]# jobs -l<br>[3]- 21159 已杀死               sleep 7m<br>[4]+ 21162 运行中               sleep 8m &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动进程</span><br>[root@localhost ~]# sleep 4m &amp;<br>[5] 21402<br>[root@localhost ~]# sleep 5m &amp;<br>[6] 21406<br>[root@localhost ~]# sleep 6m &amp;<br>[7] 21409<br>[root@localhost ~]# sleep 7m &amp;<br>[8] 21412<br><br>[root@localhost ~]# jobs -l<br>[4]  21162 运行中               sleep 8m &amp;<br>[5]  21402 运行中               sleep 4m &amp;<br>[6]  21406 运行中               sleep 5m &amp;<br>[7]- 21409 运行中               sleep 6m &amp;<br>[8]+ 21412 运行中               sleep 7m &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按照进程名去杀</span><br>[root@localhost ~]# killall sleep<br>[4]   已终止               sleep 8m<br>[5]   已终止               sleep 4m<br>[6]   已终止               sleep 5m<br>[7]-  已终止               sleep 6m<br>[8]+  已终止               sleep 7m<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动进程</span><br>[root@localhost ~]# sleep 5m &amp;<br>[1] 21491<br>[root@localhost ~]# sleep 6m &amp;<br>[2] 21495<br>[root@localhost ~]# sleep 7m &amp;<br>[3] 21498<br>[root@localhost ~]# jobs -l<br>[1]  21491 运行中               sleep 5m &amp;<br>[2]- 21495 运行中               sleep 6m &amp;<br>[3]+ 21498 运行中               sleep 7m &amp;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">按照进程名强制杀死进程</span><br>[root@localhost ~]# killall -9 sleep<br>[1]   已杀死               sleep 5m<br>[2]-  已杀死               sleep 6m<br>[3]+  已杀死               sleep 7m<br><br>[root@localhost ~]# who<br>root     pts/0        2021-04-24 14:06 (192.168.0.1)<br>lisi     pts/1        2021-04-24 15:57 (192.168.0.1)<br>root     pts/2        2021-04-24 16:29 (192.168.0.1)<br>lisi     pts/3        2021-04-24 17:14 (192.168.0.1)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">杀死指定用户的所有进程（讲用户提出系统）</span><br>[root@localhost ~]# killall -9 -u lisi<br>[root@localhost ~]# who<br>root     pts/0        2021-04-24 14:06 (192.168.0.1)<br>root     pts/2        2021-04-24 16:29 (192.168.0.1)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">pkill命令演示</span><br>[root@localhost ~]# sleep 4m &amp;<br>[1] 21870<br>[root@localhost ~]# sleep 5m &amp;<br>[2] 21873<br>[root@localhost ~]# sleep 6m &amp;<br>[3] 21876<br><br>[root@localhost ~]# jobs <br>[1]   运行中               sleep 4m &amp;<br>[2]-  运行中               sleep 5m &amp;<br>[3]+  运行中               sleep 6m &amp;<br><br>[root@localhost ~]# pkill sleep<br>[1]   已终止               sleep 4m<br>[2]-  已终止               sleep 5m<br>[3]+  已终止               sleep 6m<br><br>[root@localhost ~]# who<br>root     pts/0        2021-04-24 14:06 (192.168.0.1)<br>lisi     pts/1        2021-04-24 17:47 (192.168.0.1)<br>root     pts/2        2021-04-24 16:29 (192.168.0.1)<br>lisi     pts/3        2021-04-24 17:48 (192.168.0.1)<br>[root@localhost ~]# pkill -9 -t pts/3<br></code></pre></td></tr></table></figure><h4 id="用户登录分析"><a href="#用户登录分析" class="headerlink" title="用户登录分析"></a>用户登录分析</h4><ul><li>users who w #查看以登录的用户信息（详细度不同）</li><li>last #显示登录成功的用户信息</li><li>lastb #显示登录失败的用户信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# users<br>[root@localhost ~]# users<br>lisi root root<br><span class="hljs-meta prompt_">#</span><span class="language-bash">root：以登录系统的用户名</span><br><br>[root@localhost ~]# who<br>root     pts/0        2021-04-24 14:06 (192.168.0.1)<br>lisi     pts/1        2021-04-24 17:47 (192.168.0.1)<br>root     pts/2        2021-04-24 16:29 (192.168.0.1)<br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一列：以登录系统的用户名</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第二列：用户登录的终端编号</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第三列：登陆时间</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第四列：远程登录地址</span><br><br>[root@localhost ~]# w<br> 08:16:10 up 55 min,  1 user,  load average: 0.00, 0.01, 0.05<br>USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT<br>root     pts/0    192.168.0.1      07:21    2.00s  0.10s  0.00s w<br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一行为top命令显示的第一行数据</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第二行每列含义如下：</span><br>USER：以登录的用户名<br>TTY：用户登录终端编号<br>FROM：登录地址<br>LOGIN@：登录时间<br>IDLE：用户空闲时间，这是个计时器，一旦用户执行任何操作，该计时器便会被重置<br>JCPU：该终端所有进程占用CPU处理时间，包括正在运行和后台作业占用时间。<br>PCPU：进程执行以后消耗的CPU时间<br>WHAT：当前正在执行的任务<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示登录成功用户</span><br>[root@localhost ~]# last<br>lisi     pts/1        192.168.0.1      Sat Apr 24 07:56 - 08:03  (00:07) <br><span class="hljs-meta prompt_">#</span><span class="language-bash">第一列：用户名</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第二列：用户登录终端编号</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第三列：登录地址</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第四列：登录起使时间</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第五列：登录结束时间</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">第六列：登录持续时间</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看最近2次登录系统成功的用户</span><br>[root@localhost ~]# last -2<br>lisi     pts/3        192.168.0.1      Sat Apr 24 17:48 - 17:50  (00:01)    <br>lisi     pts/3        192.168.0.1      Sat Apr 24 17:47 - 17:48  (00:00)  <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看登录失败用户</span><br>[root@localhost ~]# lastb<br>lisi     ssh:notty    192.168.0.1      Sat Apr 24 08:52 - 08:52  (00:00) <br></code></pre></td></tr></table></figure><h4 id="Linux软件包的分类"><a href="#Linux软件包的分类" class="headerlink" title="Linux软件包的分类"></a>Linux软件包的分类</h4><ul><li>源码包</li><li>二进制包（RPM包）</li></ul><h4 id="源码包特点"><a href="#源码包特点" class="headerlink" title="源码包特点"></a>源码包特点</h4><ul><li>源码包缺点：安装过程麻烦，需要用户手动编译，需要手动解决软件包的依赖关系</li><li>源码包优点：软件源代码开放，允许用户二次开发，安装灵活，可以自定义安装路径与安装功能，卸载方便</li></ul><h4 id="RPM包特点"><a href="#RPM包特点" class="headerlink" title="RPM包特点"></a>RPM包特点</h4><ul><li>RPM包缺点：所有功能用户无法自定义，安装没有源码包灵活，不可以看到软件源代码</li><li>RPM包优点：由于已经提前被编译过，所以安装简单，安装速度快</li><li>RPM包命名规则，如：vsftpd-3.0.2-25.el7.x86_64.rpm<ul><li>vsftpd #软件包名称</li><li>3.0.2 #软件包版本，主版本.次版本.修改版本</li><li>25 #补丁次数</li><li>el7 #适合的系统（el7表示RHEL7）</li><li>x86_64 #适合的CPU架构</li><li>rpm #rpm包扩展名</li></ul></li></ul><h4 id="RPM管理软件包"><a href="#RPM管理软件包" class="headerlink" title="RPM管理软件包"></a>RPM管理软件包</h4><ul><li>RPM命令管理软件包需要手动解决软件包之间依赖关系<ul><li>树形依赖：a–&gt;b–&gt;c–d</li><li>环形依赖：a–&gt;b–&gt;c–a</li><li>模块依赖：需要模块文件支持，模块查询地址：<a href="http://www.rpmfind.net/">www.rpmfind.net</a></li></ul></li><li>命令格式：rpm 选项… 软件包全名</li><li>常用选项：<ul><li>-q #仅查询软件是否安装</li><li>-qa #列出所有已经安装在系统中的所有软件，可配合grep过滤指定的软件包</li><li>-qi #列出软件包详细信息，包含版本与官网地址</li><li>-qf #后边接文件名，查询配置文件由哪个软件包产生</li><li>-ql #列出与该软件包相关所有文件与目录的存放位置</li><li>-ivh #i安装，v显示详细信息，h显示软件安装进度</li><li>-Uvh #升级安装软件包</li><li>-e #卸载软件包</li><li>–import #导入红帽签名</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">挂载iso镜像文件</span><br>[root@localhost ~]# mkdir /mnt/centos<br>[root@localhost ~]# mount /dev/cdrom  /mnt/centos/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">实现永久挂载，查看iso镜像文件系统类型</span><br>[root@localhost ~]# df -hT<br>[root@localhost ~]# vim /etc/fstab<br>...<br>/dev/cdrom /mnt/centos iso9660 defaults 0 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重新加载</span><br>[root@localhost ~]# mount -a<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询软件包是否安装</span><br>[root@localhost centos]# rpm -q vsftpd<br>未安装软件包 vsftpd <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装vsftpd软件包</span><br>[root@localhost centos]# rpm -i Packages/vsftpd-3.0.2-25.el7.x86_64.rpm <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询系统中以安装的所有软件</span><br>[root@localhost centos]# rpm -qa<br>[root@localhost centos]# rpm -qa | grep vsftpd<br>vsftpd-3.0.2-25.el7.x86_64<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询软件包详细的信息</span><br>[root@localhost centos]# rpm -qi vsftpd<br>Name        : vsftpd    #软件包名<br>Version     : 3.0.2     #版本<br>Release     : 25.el7    #最终稳定版<br>Architecture: x86_64    #适合安装的CPU架构<br>Install Date: 2021年05月04日 星期二 14时47分06秒   #安装时间<br>Group       : System Environment/Daemons        #软件包属于哪个群组<br>Size        : 361335      #软件包大小<br>License     : GPLv2 with exceptions<br>Signature   : RSA/SHA256, 2018年11月12日 星期一 22时48分54秒, Key ID 24c6a8a7f4a80eb5<br>Source RPM  : vsftpd-3.0.2-25.el7.src.rpm<br>Build Date  : 2018年10月31日 星期三 03时45分10秒<br>Build Host  : x86-01.bsys.centos.org<br>Relocations : (not relocatable)<br>Packager    : CentOS BuildSystem &lt;http://bugs.centos.org&gt;<br>Vendor      : CentOS<br>URL         : https://security.appspot.com/vsftpd.html   #软件包官网地址<br>Summary     : Very Secure Ftp Daemon<br>Description :      #描述信息<br>vsftpd is a Very Secure FTP daemon. It was written completely from<br>scratch.<br><br><br>[root@localhost centos]# which ls<br>alias ls=&#x27;ls --color=auto&#x27;<br>/usr/sbin/ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询文件由哪个软件包产生</span><br>[root@localhost centos]# rpm -qf /usr/bin/ls<br>coreutils-8.22-23.el7.x86_64<br><br>[root@localhost centos]# which vim<br>/usr/bin/vim<br><br>[root@localhost centos]# rpm -qf /usr/bin/vim<br>vim-enhanced-7.4.160-5.el7.x86_64<br><br>[root@localhost centos]# rpm -qi vim-enhanced<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查询软件包自带的文件与目录安装路径</span><br>[root@localhost centos]# rpm -ql vsftpd<br><br>[root@localhost centos]# rpm -qf /usr/bin/vim<br>vim-enhanced-7.4.160-5.el7.x86_64<br><br>[root@localhost centos]# rpm -ql vim-enhanced<br>/etc/profile.d/vim.csh<br>/etc/profile.d/vim.sh<br>/usr/bin/rvim<br>/usr/bin/vim<br>/usr/bin/vimdiff<br>/usr/bin/vimtutor<br><br>[root@localhost centos]# rpm -q vsftpd<br>vsftpd-3.0.2-25.el7.x86_64<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">卸载软件包</span><br>[root@localhost centos]# rpm -e vsftpd<br><br>[root@localhost centos]# rpm -q vsftpd<br>未安装软件包 vsftpd <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装vsftpd软件包</span><br>[root@localhost centos]# rpm -ivh Packages/vsftpd-3.0.2-25.el7.x86_64.rpm <br>警告：Packages/vsftpd-3.0.2-25.el7.x86_64.rpm: 头V3 RSA/SHA256 Signature, 密钥 ID f4a80eb5: NOKEY<br>准备中...                          ################################# [100%]<br>正在升级/安装...<br>   1:vsftpd-3.0.2-25.el7              ################################# [100%]<br><br>[root@localhost centos]# rpm -q vsftpd<br>vsftpd-3.0.2-25.el7.x86_64<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">升级安装软件包</span><br>[root@localhost centos]# rpm -Uvh Packages/vsftpd-3.0.2-25.el7.x86_64.rpm <br>警告：Packages/vsftpd-3.0.2-25.el7.x86_64.rpm: 头V3 RSA/SHA256 Signature, 密钥 ID f4a80eb5: NOKEY<br>准备中...                          ################################# [100%]<br>软件包 vsftpd-3.0.2-25.el7.x86_64 已经安装<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">导入红帽签名文件</span><br>[root@localhost centos]# rpm --import RPM-GPG-KEY-CentOS-7<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装软件包，查看是否还有警告信息</span><br>[root@localhost centos]# rpm -q vsftpd<br>vsftpd-3.0.2-25.el7.x86_64<br>[root@localhost centos]# rpm -e vsftpd<br>[root@localhost centos]# rpm -ivh Packages/vsftpd-3.0.2-25.el7.x86_64.rpm <br>准备中...                          ################################# [100%]<br>正在升级/安装...<br>   1:vsftpd-3.0.2-25.el7              ################################# [100%]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装httpd软件包</span><br>[root@localhost centos]# rpm -ivh Packages/httpd-(tab键)<br>httpd-2.4.6-88.el7.centos.x86_64.rpm         httpd-manual-2.4.6-88.el7.centos.noarch.rpm<br>httpd-devel-2.4.6-88.el7.centos.x86_64.rpm   httpd-tools-2.4.6-88.el7.centos.x86_64.rpm<br>[root@localhost centos]# rpm -ivh Packages/httpd-2.4.6-88.el7.centos.x86_64.rpm <br>错误：依赖检测失败：<br>/etc/mime.types 被 httpd-2.4.6-88.el7.centos.x86_64 需要<br>httpd-tools = 2.4.6-88.el7.centos 被 httpd-2.4.6-88.el7.centos.x86_64 需要<br>libapr-1.so.0()(64bit) 被 httpd-2.4.6-88.el7.centos.x86_64 需要<br>libaprutil-1.so.0()(64bit) 被 httpd-2.4.6-88.el7.centos.x86_64 需要<br>[root@localhost centos]# ls /etc/mime.types<br>ls: 无法访问/etc/mime.types: 没有那个文件或目录<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解决依赖关系</span><br>[root@localhost centos]# rpm -ivh Packages/mailcap-2.1.41-2.el7.noarch.rpm <br>准备中...                          ################################# [100%]<br>正在升级/安装...<br>   1:mailcap-2.1.41-2.el7             ################################# [100%]<br>[root@localhost centos]# ls /etc/mime.types<br>/etc/mime.types<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解决依赖关系</span><br>[root@localhost centos]# rpm -ivh Packages/httpd-tools-2.4.6-88.el7.centos.x86_64.rpm <br>错误：依赖检测失败：<br>libapr-1.so.0()(64bit) 被 httpd-tools-2.4.6-88.el7.centos.x86_64 需要<br>libaprutil-1.so.0()(64bit) 被 httpd-tools-2.4.6-88.el7.centos.x86_64 需要<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解决依赖关系（www.rpmfind.net官网查询提供libapr-1.so.0模块文件的软件包）</span><br>[root@localhost centos]# rpm -ivh Packages/apr-(tab键)<br>apr-1.4.8-3.el7_4.1.x86_64.rpm         apr-util-1.5.2-6.el7.x86_64.rpm        <br>apr-devel-1.4.8-3.el7_4.1.x86_64.rpm   apr-util-devel-1.5.2-6.el7.x86_64.rpm  <br>[root@localhost centos]# rpm -ivh Packages/apr-1.4.8-3.el7_4.1.x86_64.rpm <br>准备中...                          ################################# [100%]<br>正在升级/安装...<br>   1:apr-1.4.8-3.el7_4.1              ################################# [100%]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解决依赖关系（www.rpmfind.net官网查询提供libaprutil-1.so.0模块文件的软件包）</span><br>[root@localhost centos]# rpm -ivh Packages/apr-util-(tab键)<br>apr-util-1.5.2-6.el7.x86_64.rpm        apr-util-devel-1.5.2-6.el7.x86_64.rpm  <br>[root@localhost centos]# rpm -ivh Packages/apr-util-<br>apr-util-1.5.2-6.el7.x86_64.rpm        apr-util-devel-1.5.2-6.el7.x86_64.rpm  <br>[root@localhost centos]# rpm -ivh Packages/apr-util-1.5.2-6.el7.x86_64.rpm <br>准备中...                          ################################# [100%]<br>正在升级/安装...<br>   1:apr-util-1.5.2-6.el7             ################################# [100%]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装依赖关系</span><br>[root@localhost centos]# rpm -ivh Packages/httpd-tools-2.4.6-88.el7.centos.x86_64.rpm <br>准备中...                          ################################# [100%]<br>正在升级/安装...<br>   1:httpd-tools-2.4.6-88.el7.centos  ################################# [100%]<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装httpd主包</span><br>[root@localhost centos]# rpm -ivh Packages/httpd-(tab键)<br>httpd-2.4.6-88.el7.centos.x86_64.rpm         httpd-manual-2.4.6-88.el7.centos.noarch.rpm<br>httpd-devel-2.4.6-88.el7.centos.x86_64.rpm   httpd-tools-2.4.6-88.el7.centos.x86_64.rpm<br>[root@localhost centos]# rpm -ivh Packages/httpd-2.4.6-88.el7.centos.x86_64.rpm <br>准备中...                          ################################# [100%]<br>正在升级/安装...<br>   1:httpd-2.4.6-88.el7.centos        ################################# [100%]<br></code></pre></td></tr></table></figure><h4 id="yum软件包管理"><a href="#yum软件包管理" class="headerlink" title="yum软件包管理"></a>yum软件包管理</h4><ul><li>yum（软件仓库）：提供众多软件包的仓库，并自动解决软件包之间复杂依赖关系</li><li>yum常用命令：<ul><li>yum repolist #列出仓库可用软件包</li><li>yum list 软件包名 #查看系统中提供的软件包（包含未安装的软件包）</li><li>yum list updates #查看系统中可供本机升级的软件包</li><li>yum install 软件包名 #安装软件包，-y自动回答yes</li><li>yum update 软件包名 #升级软件包版本</li><li>yum remove 软件包名 #卸载软件包</li><li>yum clean all #清除仓库缓存</li><li>yum provides 文件名 #查看文件由哪个软件包产生（主要用于查找程序文件）</li></ul></li><li>本地yum源配置（本地软件仓库）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim /etc/yum.repos.d/local.repo <br>[local]               #仓库名称，名称自定义，但具有唯一性<br>name=local_centos            #仓库描述，（类似于仓库解释），描述信息自定义，不具备唯一性<br>baseurl=file:///mnt/centos   #指定软件仓库地址，file://用于指定本地软件包存放位置<br>enabled=1    #软件仓库是否启动，1启动，0不启动<br>gpgcheck=0   #是否检测软件包签名，0不检测，1检测<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">检测仓库可用性</span><br>[root@localhost centos]# yum repolist<br>已加载插件：fastestmirror, langpacks<br>    <br>源标识        源名称            状态<br>local       local_centos      4,021<br>repolist: 4,021<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查找指定的软件包</span><br>[root@localhost centos]# yum list gcc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装软件包</span><br>[root@localhost centos]# yum install gcc<br>...<br>Is this ok [y/d/N]: y (y安装/d下载到本地不安装/N不安装)<br><br>[root@localhost centos]# rpm -q gcc<br>gcc-4.8.5-36.el7.x86_64<br><br>[root@localhost centos]# rpm -qi gcc<br><br>[root@localhost centos]# rpm -ql gcc<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装软件包并自动回答<span class="hljs-built_in">yes</span></span><br>[root@localhost centos]# yum -y install  gcc-c++ <br><br>[root@localhost centos]# rpm -q gcc<br><br>[root@localhost centos]# rpm -qi gcc<br><br>[root@localhost centos]# rpm -ql gcc<br><br>[root@localhost centos]# rpm -qf /usr/bin/ls<br><br>[root@localhost centos]# yum provides /usr/bin/ls<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载挂载点</span><br>[root@localhost ~]# umount /mnt/centos/<br>[root@localhost ~]# ls /mnt/centos/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看仓库可用性</span><br>[root@localhost ~]# yum repolist<br>源标识          源名称                             状态<br>local          local_centos                     4,021<br>repolist: 4,021<br><br><br>[root@localhost ~]# rpm -e vsftpd<br>root@localhost ~]# yum -y install vsftpd<br>Error downloading packages:<br>  vsftpd-3.0.2-25.el7.x86_64: [Errno 256] No more mirrors to try.<br><br>[root@localhost ~]# yum clean all<br>[root@localhost ~]# yum repolist<br>源标识      源名称                                  状态<br>local      local_centos                            0<br>repolist: 0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">挂载</span><br>[root@localhost ~]# mount -a<br>mount: /dev/sr0 写保护，将以只读方式挂载<br></code></pre></td></tr></table></figure><ul><li>网络yum源配置（网络软件仓库，配置阿里开源软件仓库）</li><li><a href="https://hu60.cn/q.php/link.url.html?url64=aHR0cHM6Ly9kZXZlbG9wZXIuYWxpeXVuLmNvbS9zcGVjaWFsL21pcnJvcnMvbm90aWNl">https://developer.aliyun.com/special/mirrors/notice</a> 阿里云官方镜象站（软件仓库）</li><li><a href="https://hu60.cn/q.php/link.url.html?url64=aHR0cHM6Ly9taXJyb3JzLnR1bmEudHNpbmdodWEuZWR1LmNuL2NlbnRvcy83L29zL3g4Nl82NC8.">https://mirrors.tuna.tsinghua.edu.cn/centos/7/os/x86_64&#x2F;</a> 清华大学官方镜象站</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">下载wget工具</span><br>[root@localhost ~]# yum -y install wget<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载阿里Base源（基本软件仓库，解决rpm软件的依赖关系）</span><br>[root@localhost ~]#  wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">下载阿里epel源（额外软件仓库，包含许多基本软件仓库没有的软件包）</span><br>[root@localhost ~]#  wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo<br><br>[root@localhost ~]# vim /etc/yum.repos.d/CentOS-Base.repo<br>[base]<br>name=CentOS-$releasever - Base - mirrors.aliyun.com<br>failovermethod=priority   #故障转移方法，默认优先<br>baseurl=http://mirrors.aliyun.com/centos/$releasever/os/$basearch/<br>        http://mirrors.aliyuncs.com/centos/$releasever/os/$basearch/<br>        http://mirrors.cloud.aliyuncs.com/centos/$releasever/os/$basearch/<br>gpgcheck=1<br>gpgkey=http://mirrors.aliyun.com/centos/RPM-GPG-KEY-CentOS-7<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">配置清华大学开源镜象站</span><br>[root@localhost ~]# vim /etc/yum.repos.d/local.repo <br>[local]<br>name=local_centos<br>baseurl=file:///mnt/centos/<br>enabled=1<br>gpgcheck=0<br><br>[tuna.tsinghua.edu.cn]<br>name=tuna.tsinghua.edu.cn<br>baseurl=https://mirrors.tuna.tsinghua.edu.cn/centos/7/os/x86_64/<br>enabled=1<br>gpgcheck=0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">生成yum仓库缓存提高软件包下载速度</span><br>[root@localhost ~]# yum makecache<br>...<br>元数据缓存已建立<br></code></pre></td></tr></table></figure><h4 id="设置yum源优先级"><a href="#设置yum源优先级" class="headerlink" title="设置yum源优先级"></a>设置yum源优先级</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">设置本地yum为最高优先级</span><br>[root@localhost ~]# vim /etc/yum.repos.d/local.repo<br>[local]<br>name=local_centos<br>baseurl=file:///mnt/centos<br>enabled=1<br>gpgcheck=0<br>priority=1  #优先级为1-99之间，数字越小越优先<br></code></pre></td></tr></table></figure><h4 id="源码包安装方式"><a href="#源码包安装方式" class="headerlink" title="源码包安装方式"></a>源码包安装方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">从官网下载源码包</span><br>http://nginx.org/<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装源码包依赖包</span><br>[root@localhost ~]# yum -y install gcc pcre-devel openssl-devel zlib<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">解压源码包并进入源码包路径</span><br>[root@localhost ~]# tar -xf nginx-1.20.0.tar.gz <br>[root@localhost ~]# cd nginx-1.20.0/<br>[root@localhost nginx-1.20.0]# ls<br>auto  CHANGES  CHANGES.ru  conf  configure  contrib  html  LICENSE  man  README  src<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">使用configure程序检查系统环境并指定安装参数</span><br>[root@localhost nginx-1.20.0]# ./configure --with-http_ssl_module  --with-file-aio  --with-http_realip_module<br>  <br>  nginx path prefix: &quot;/usr/local/nginx&quot;<br>  nginx binary file: &quot;/usr/local/nginx/sbin/nginx&quot;<br>  nginx modules path: &quot;/usr/local/nginx/modules&quot;<br>  nginx configuration prefix: &quot;/usr/local/nginx/conf&quot;<br>  nginx configuration file: &quot;/usr/local/nginx/conf/nginx.conf&quot;<br>  nginx pid file: &quot;/usr/local/nginx/logs/nginx.pid&quot;<br>  nginx error log file: &quot;/usr/local/nginx/logs/error.log&quot;<br>  nginx http access log file: &quot;/usr/local/nginx/logs/access.log&quot;<br>  nginx http client request body temporary files: &quot;client_body_temp&quot;<br>  nginx http proxy temporary files: &quot;proxy_temp&quot;<br>  nginx http fastcgi temporary files: &quot;fastcgi_temp&quot;<br>  nginx http uwsgi temporary files: &quot;uwsgi_temp&quot;<br>  nginx http scgi temporary files: &quot;scgi_temp&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">make将源码包转换成二进制</span><br>[root@localhost nginx-1.20.0]# make<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">make install安装源码包</span><br>[root@localhost nginx-1.20.0]# make install<br><br>[root@localhost nginx-1.20.0]# cd /usr/local/nginx/<br>[root@localhost nginx]# ls<br>conf  html  logs  sbin<br></code></pre></td></tr></table></figure><h4 id="源码包管理方式"><a href="#源码包管理方式" class="headerlink" title="源码包管理方式"></a>源码包管理方式</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">启动nginx服务</span><br>[root@localhost nginx]# sbin/nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">netstat|ss命令用于查看系统中启动的端口信息</span><br>-a显示所有端口信息<br>-n以数字格式显示端口号<br>-t显示TCP连接的端口<br>-u显示UDP连接的端口<br>-l显示服务正在监听的端口信息<br>-p显示监听端口的服务名称是什么（也就是程序名）<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看nginx服务端口信息</span><br>[root@localhost ~]# ss -anptul | grep nginx<br>tcp    LISTEN     0      128       *:80  #Nginx服务默认通过TCP 80 端口监听客户端请求<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统所有服务占用的端口虚拟系</span><br>[root@localhost nginx]# ss -ntlp <br><br>[root@localhost nginx]# ss -anptul | grep sshd<br><br>[root@localhost nginx]# ss -anptul | grep vsftpd<br></code></pre></td></tr></table></figure><h4 id="systemd管理服务"><a href="#systemd管理服务" class="headerlink" title="systemd管理服务"></a>systemd管理服务</h4><ul><li>systemd是内核加载的第一个进程（PID&#x3D;1），systemd负责整个Linux系统的运行与服务控制，systemd为用户提供systemctl命令来管理RPM包安装的服务，如：启动服务、重启服务、关闭服务、查看服务状态，服务随机自启</li><li>服务的启动有两个阶段，一是系统开机时随着系统的启动而启动（随机自启），二是系统启动以后用户手动将服务启动</li><li>常用命令：<ul><li>systemctl start 程序名 #启动服务</li><li>systemctl restart 程序名 #重启服务</li><li>systemctl stop 程序名 #停止服务</li><li>systemctl enable 程序名 #设置服务随机自启</li><li>systemctl disable 程序名 #设置服务不随机自启</li><li>systemctl status 程序名 #查看服务状态</li><li>systemctl is-enabled 程序名 #查看服务是否被设置随机自启</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost nginx]# yum -y install vsftpd<br><br>[root@localhost nginx]# rpm -ql vsftpd<br>...<br>/usr/sbin/vsftpd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动vsftpd服务</span><br>[root@localhost nginx]# systemctl start vsftpd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看服务运行状态</span><br>[root@localhost nginx]# systemctl status vsftpd<br>● vsftpd.service - Vsftpd ftp daemon<br>   Loaded: loaded (/usr/lib/systemd/system/vsftpd.service; disabled; vendor preset: disabled)<br>   Active: active (running) since 二 2021-05-04 17:58:38 CST; 1min 7s ago<br>  Process: 14028 ExecStart=/usr/sbin/vsftpd /etc/vsftpd/vsftpd.conf (code=exited, status=0/SUCCESS)<br> Main PID: 14030 (vsftpd)<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看端口信息</span><br>[root@localhost nginx]# ss -anptul | grep vsftpd<br>tcp  LISTEN  0  32  :::21    :::*     users:((&quot;vsftpd&quot;,pid=14030,fd=4))<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">重启服务（用于对配置发生修改且立即生效时使用）</span><br>[root@localhost nginx]# systemctl restart vsftpd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">停止服务</span><br>[root@localhost nginx]# systemctl stop vsftpd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动服务并设置服务随机自启</span><br>[root@localhost nginx]# systemctl start vsftpd<br>[root@localhost nginx]# systemctl enable vsftpd<br>Created symlink from /etc/systemd/system/multi-user.target.wants/vsftpd.service to /usr/lib/systemd/system/vsftpd.service.<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看服务是否被设置随机自启</span><br>[root@localhost nginx]# systemctl is-enabled vsftpd<br>enabled  #随机自启<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">设置服务不随机自启</span><br>[root@localhost nginx]# systemctl disable vsftpd<br>Removed symlink /etc/systemd/system/multi-user.target.wants/vsftpd.service.<br><br>[root@localhost nginx]# systemctl is-enabled vsftpd<br>disabled  #不随机自启<br><br>[root@localhost nginx]# systemctl is-enabled sshd<br>enabled<br></code></pre></td></tr></table></figure><h4 id="课后作业-4"><a href="#课后作业-4" class="headerlink" title="课后作业"></a>课后作业</h4><p>1.请说出RAID0、RAID1、RAID5、RAID10的特点</p><p>RAID0：等量存储，至少由两块磁盘组成，同一个文档分散并行存储，提高数据的读写速度，没有冗余功能</p><p>RAID1：完整备份，至少由两块磁盘组成，同一个文档复制成多份分散存储，提高数据的安全性，没有提高读写速度</p><p>RAID5：至少由三块磁盘组成，同一份文档分散写入不同磁盘，每个磁盘中都有校验数据，允许坏一块磁盘的数据，校验数据会占用磁盘的三分之一存储空间</p><p>RAID10：至少需要4快磁盘组成，先将4快磁盘组成两组RAID1，在将两组RAID1组成一个RAID0，既能够提高数据读写速度，还有冗余功能，可用容量是总容量一半</p><p>2.如何查看系统中的进程树，并显示每个进程的PID</p><p>pstree -p</p><p>3.如何查找到系统中lisi用户开启了哪些进程？</p><p>pstree -p lisi</p><p>4.如何将进程放入后台运行？</p><p>&amp;</p><p>5.如何将后台运行进程调度到前台运行？</p><p>fg 进程编号</p><p>6.如何查看后台进程？</p><p>jobs</p><p>7.kill与killall命令的区别是什么？</p><p>kill 结束进程时，按照进程的PID结束</p><p>killall 结束进程时候，按照进程名字结束</p><p>8.如何将lisi用户提出系统？</p><p>killall -9 -u lisi</p><p>9.如何查看系统中登录失败的用户？</p><p>lastb</p><p>10.如何查看系统中登录成功的用户？</p><p>last</p><p>11.如何查询一个软件包在系统中安装了哪些文件与目录？</p><p>rpm -ql 软件包名</p><p>12.如何查询ifconfig命令是由哪个软件包产生？</p><p>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# which ifconfig<br>&#x2F;usr&#x2F;sbin&#x2F;ifconfig<br>[root<a href="https://hu60.cn/q.php/bbs.topic.100995.html#">@</a><a href="https://hu60.cn/q.php/user.info.0.html">localhost</a> ~]# rpm -qf &#x2F;usr&#x2F;sbin&#x2F;ifconfig<br>net-tools-2.0-0.24.20131004git.el7.x86_64</p><p>13.如何查看一个软件包是否被安装在系统中？</p><p>rpm -q 软件包名</p><p>14.如何卸载一个软件包？</p><p>卸载RPM包：rpm -e 软件包名</p><p>卸载源码包：直接删除源码包安装路径</p><p>15.说明本地yum仓库每一行的配置含义</p><p>[仓库名字]</p><p>name&#x3D;仓库描述</p><p>baseurl&#x3D;仓库地址</p><p>enabled&#x3D;仓库状态（1&#x2F;0，启用&#x2F;不起用）</p><p>16.源码包的安装过程大体步骤</p><p>下载源码包</p><p>安装源码包依赖关系</p><p>解压源码包，进入源码包路径</p><p>.&#x2F;configure 安装参数</p><p>make 编译</p><p>make install 安装</p><p>17.如何查看一个服务占用的端口信息？</p><p>ss&#x2F;netstat -anptul | grep 程序名称</p><p>18.如何启动vsftpd服务？</p><p>systemctl start vsftpd</p><p>19.如何查看vsftpd运行状态？</p><p>systemctl status vsftpd</p><p>20.如何设置vsftpd服务随机自启？</p><p>systemctl enable vsftpd</p><p>21.如何停止vsftpd服务？</p><p>systemctl stop vsftpd</p><h4 id="shell概述"><a href="#shell概述" class="headerlink" title="shell概述"></a>shell概述</h4><ul><li>shell是一个程序，它连接了用户和Linux内核，它可以解释用户输入的命令传递给内核，让用户可以更加方便的使用Linux系统</li><li>shell 本身并不是内核的一部分，它只是站在内核的基础上编写的一个应用程序</li></ul><p><img src="https://hu60.cn/q.php/link.img.html?url64=QzpcVXNlcnNcemhpeV9cQXBwRGF0YVxSb2FtaW5nXFR5cG9yYVx0eXBvcmEtdXNlci1pbWFnZXNcMTYyMDQ4OTI5OTcwOS5wbmc." alt="1620489299709"></p><ul><li>shell具备编程的能力，shell也是一种语言，C,C++,java,Python,Go等</li><li>语言分为编译型语言，C,C++,Go，需要提前编译，编译语言都有编译器</li><li>解释型语言,shell，Python,php，不需要提前编译，一边执行，一边编译，每种解释型语言都有解释器</li><li>shell语言支持大部分编程语言都具备的功能：if判断，for循环，变量，数组，函数，加减乘除，逻辑运算</li></ul><h4 id="规范shell脚本组成"><a href="#规范shell脚本组成" class="headerlink" title="规范shell脚本组成"></a>规范shell脚本组成</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@test ~]# vim user.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash（环境声明）</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注释信息</span><br>可执行代码…<br></code></pre></td></tr></table></figure><h4 id="如何写好一个shell脚本"><a href="#如何写好一个shell脚本" class="headerlink" title="如何写好一个shell脚本"></a>如何写好一个shell脚本</h4><ul><li>明确任务需求</li><li>按需求整理好每一个步骤，先做什么，后做什么</li><li>运行脚本，并根据运行结果排除错误</li><li>优化脚本并达到最终效果</li></ul><h4 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h4><ul><li>编写第一个脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim hello.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">hello word</span><br>echo hello word<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">赋予执行权限</span><br>[root@localhost ~]# chmod u+x hello.sh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行脚本</span><br>[root@localhost ~]# /root/hello.sh <br>hello word<br></code></pre></td></tr></table></figure><ul><li>编写创建用户脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim user.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>useradd abc  <br>passwd abc<br><br>[root@localhost ~]# chmod u+x user.sh <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">非交互</span><br>[root@localhost ~]# vim user.sh<br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>useradd yyyy<br>echo 1 | passwd --stdin yyyy<br><br>[root@localhost ~]# ./user.sh <br>更改用户 yyyy 的密码 。<br>passwd：所有的身份验证令牌已经成功更新。<br></code></pre></td></tr></table></figure><ul><li>编写批量查看脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统版本信息，查看系统内核信息，查看系统内存信息，查看系统网卡信息，查看当前主机名</span><br>[root@localhost ~]# vim info.sh<br>cat /etc/redhat-release<br>uname -r<br>free -h<br>ifconfig ens32<br>hostname<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">赋予执行权限</span><br>[root@localhost ~]# chmod u+x info.sh <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行脚本</span><br>[root@localhost ~]# ./info.sh <br>CentOS Linux release 7.6.1810 (Core) <br>3.10.0-957.el7.x86_64<br>              total        used        free      shared  buff/cache   available<br>Mem:           972M        480M        147M         16M        344M        260M<br>Swap:          2.0G        239M        1.8G<br>ens32: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 192.168.0.100  netmask 255.255.255.0  broadcast 192.168.0.255<br>        inet6 fe80::8903:cb8:127b:dbc8  prefixlen 64  scopeid 0x20&lt;link&gt;<br>        ether 00:0c:29:a0:e8:12  txqueuelen 1000  (Ethernet)<br>        RX packets 230110  bytes 325471733 (310.3 MiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 20635  bytes 1385581 (1.3 MiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0<br><br>localhost.localdomain<br></code></pre></td></tr></table></figure><ul><li>编写配置本地yum源脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">编写搭建本地yum仓库脚本【版1，丢人版】</span><br>[root@localhost ~]# vim yum.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>mkdir /mnt/centos<br>mount /dev/cdrom /mnt/centos<br>echo &#x27;/dev/cdrom /mnt/centos iso9660 defaults 0 0&#x27; &gt;&gt; /etc/fstab<br>rm -rf /etc/yum.repos.d/*<br>touch  /etc/yum.repos.d/local.repo<br>echo &quot;[local]&quot; &gt; /etc/yum.repos.d/local.repo<br>echo &quot;name=local_centos&quot; &gt;&gt; /etc/yum.repos.d/local.repo<br>echo &quot;baseurl=file:///mnt/centos&quot; &gt;&gt; /etc/yum.repos.d/local.repo<br>echo &quot;enabled=1&quot; &gt;&gt; /etc/yum.repos.d/local.repo<br>echo &quot;gpgcheck=0&quot; &gt;&gt; /etc/yum.repos.d/local.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">编写搭建本地yum仓库脚本【版2，正常版】</span><br>[root@localhost ~]# vim yum.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>mkdir /mnt/centos<br>mount /dev/cdrom /mnt/centos<br>echo &#x27;/dev/cdrom /mnt/centos iso9660 defaults 0 0&#x27; &gt;&gt; /etc/fstab<br>mount -a<br>rm -rf /etc/yum.repos.d/*<br>echo &quot;[local] <br>name=local_centos <br>baseurl=file:///mnt/centos <br>enabled=1 <br>gpgcheck=0&quot; &gt; /etc/yum.repos.d/local.repo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">编写搭建本地yum仓库脚本【升级版】</span><br>[root@localhost ~]# vim yum.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo &quot;正在配置本地yum仓库...&quot;<br>mkdir /mnt/centos<br>mount /dev/cdrom /mnt/centos &amp;&gt; /dev/null<br>echo &#x27;/dev/cdrom /mnt/centos iso9660 defaults 0 0&#x27; &gt;&gt; /etc/fstab<br>mount -a<br>rm -rf /etc/yum.repos.d/*<br>echo &quot;[local] <br>name=local_centos <br>baseurl=file:///mnt/centos <br>enabled=1 <br>gpgcheck=0&quot; &gt; /etc/yum.repos.d/local.repo<br>echo &quot;本地yum仓库配置以完成...&quot;<br>yum clean all &amp;&gt; /dev/null<br>yum repolist | tail -1<br>echo &quot;仓库软件包数量&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行脚本</span><br>[root@localhost ~]# ./yum.sh<br>正在配置本地yum仓库...<br>本地yum仓库配置以完成...<br>repolist: 4,021<br>仓库软件包数量<br></code></pre></td></tr></table></figure><h4 id="脚本的执行方式"><a href="#脚本的执行方式" class="headerlink" title="脚本的执行方式"></a>脚本的执行方式</h4><ul><li>执行一个脚本的方法有很多种</li><li>方法一：赋予脚本执行权限后，可用绝对路径或者当前路径执行</li><li>方法二：调用解释器执行脚本文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">绝对路径执行脚本</span><br>[root@localhost ~]# /root/hello.sh <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">相对路径执行脚本</span><br>[root@localhost ~]# ./hello.sh <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">去除执行权限</span><br>[root@localhost ~]# chmod u-x hello.sh <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">执行脚本</span><br>[root@localhost ~]# /root/hello.sh<br>-bash: /root/hello.sh: 权限不够<br><br>[root@localhost ~]# ./hello.sh<br>-bash: ./hello.sh: 权限不够<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">调用解释器执行脚本</span><br>[root@localhost ~]# bash hello.sh<br>hello word<br><br>[root@localhost ~]# cat /etc/shells <br>/bin/sh<br>/bin/bash<br>/usr/bin/sh<br>/usr/bin/bash<br>/bin/tcsh<br>/bin/csh<br>[root@localhost ~]# sh hello.sh<br>hello word<br>[root@localhost ~]# tcsh hello.sh<br>hello word<br>[root@localhost ~]# csh hello.sh<br>hello word<br></code></pre></td></tr></table></figure><h4 id="常用特殊符号补充"><a href="#常用特殊符号补充" class="headerlink" title="常用特殊符号补充"></a>常用特殊符号补充</h4><ul><li><p>“ “ #双引号，引用整体</p></li><li><p>‘ ’ #单引号，引用整体并取消所有特殊字符含义</p></li><li><p>$[] #四则运算（+ - * &#x2F; % 取余数）</p></li><li><p>$() #将命令的输出结果作为参数</p></li><li><h1 id="反撇-96-96-将命令的输出结果作为参数"><a href="#反撇-96-96-将命令的输出结果作为参数" class="headerlink" title="反撇 &#96;&#96; 将命令的输出结果作为参数"></a>反撇 &#96;&#96; 将命令的输出结果作为参数</h1></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">引用整体，不屏蔽特殊符号的功能</span><br>[root@localhost ~]# echo &quot;$PATH&quot;<br>/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">引用整体，屏蔽特殊符号的功能</span><br>[root@localhost ~]# echo &#x27;$PATH&#x27;<br><span class="hljs-meta prompt_">$</span><span class="language-bash">PATH</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">没有特殊符号单引双引都可以</span><br>[root@localhost ~]# echo &quot;xxoo&quot;<br>xxoo<br>[root@localhost ~]# echo &#x27;xxoo&#x27;<br>xxoo<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">四则运算</span><br>[root@localhost ~]# echo $[1+1]<br>2<br>[root@localhost ~]# echo $[1+5]<br>6<br>[root@localhost ~]# echo $[10-5]<br>5<br>[root@localhost ~]# echo $[10*5]<br>50<br>[root@localhost ~]# echo $[10/5]<br>2<br>[root@localhost ~]# echo $[1+3+4+5+7]<br>20<br>[root@localhost ~]# echo $[10/3]<br>3<br>[root@localhost ~]# echo $[10%3]<br>1<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">$()取命令结果作为参数</span><br>root@localhost ~]# touch $(date +%F)-abc.txt<br>2021-05-09-abc.txt <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">``取命令结果作为参数</span><br>[root@localhost ~]# touch `date +%F`-xxoo.txt<br>2021-05-09-xxoo.txt<br></code></pre></td></tr></table></figure><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul><li>以固定的名称存放可能变化的值，提高脚本的灵活度来适应多变的环境</li><li>定义变量：变量名&#x3D;变量值，如：a1&#x3D;abc（等号两边不要有空格）</li><li>取消变量：unset 变量名</li><li>定义变量注意事项：<ul><li>变量名由字母&#x2F;数字&#x2F;下划线组成，区分大小写，不能以数字开头，不要使用命令和特殊符号</li><li>若指定的变量名已经存在，相当于为此变量重新赋值</li></ul></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@localhost ~]# xx=haha<br><br>[root@localhost ~]# echo $xx<br>haha<br><br>[root@localhost ~]# xx=abcd<br>[root@localhost ~]# echo $xx<br>abcd<br><br>[root@localhost ~]# xx=5<br>[root@localhost ~]# echo $xx<br>5<br>[root@localhost ~]# echo $[xx+5]<br>10<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">通过变量定义用户名</span><br>[root@localhost ~]# vim user.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>user=wangxin<br>useradd $user   <br>echo 1 | passwd --stdin $user<br><br>[root@localhost ~]# ./user.sh <br>更改用户 wangxin 的密码 。<br>passwd：所有的身份验证令牌已经成功更新。<br><br>[root@localhost ~]# vim user.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>user=sdd<br>useradd $user<br>echo 1 | passwd --stdin $user<br><br>[root@localhost ~]# ./user.sh <br>更改用户 sdd 的密码 。<br>passwd：所有的身份验证令牌已经成功更新。<br><br>[root@localhost ~]# vim user.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>user=panghu<br>useradd $user<br>echo &quot;用户$user创建成功&quot;<br>echo 1 | passwd --stdin $user &amp;&gt; /dev/null<br>echo &quot;用户$user密码设置成功&quot;<br><br>[root@localhost ~]# ./user.sh <br>用户panghu创建成功<br>用户panghu密码设置成功<br></code></pre></td></tr></table></figure><h4 id="read标准输入取值"><a href="#read标准输入取值" class="headerlink" title="read标准输入取值"></a>read标准输入取值</h4><ul><li>read 读取用户在键盘上输入的内容，并把内容存放在变量里，可以降低脚本的使用难度</li><li>命令格式：read -p “提示信息” 变量名</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim user.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>read -p &#x27;请输入用户名：&#x27; user<br>useradd $user <br>echo &quot;用户$user创建成功&quot;<br>read -p &#x27;请设置用户密码：&#x27; pass<br>echo $pass | passwd --stdin $user &amp;&gt; /dev/null<br>echo &quot;用户$user密码设置成功&quot;<br><br>[root@localhost ~]# ./user.sh <br>请输入用户名：wuhan<br>用户wuhan创建成功<br>请设置用户密码：1<br>用户wuhan密码设置成功<br><br>[root@localhost ~]# ./user.sh <br>请输入用户名：liangjing<br>用户liangjing创建成功<br>请设置用户密码：xxoo<br>用户liangjing密码设置成功<br></code></pre></td></tr></table></figure><h4 id="变量种类"><a href="#变量种类" class="headerlink" title="变量种类"></a>变量种类</h4><ul><li>环境变量：变量名一般都大写，用来设置用户&#x2F;系统环境</li><li>位置变量：bash内置，存储执行脚本时提供的命令参数</li><li>预定义变量：bash内置，可直接调用的特殊值，不能直接修改</li><li>自定义变量：用户自定义</li><li>env 命令查看系统所有环境变量</li><li>set 命令查看系统所有变量，包括用户自定义变量</li><li>环境变量</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost etc]# env<br>MAIL=/var/spool/mail/root<br>PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<br>PWD=/root<br>LANG=zh_CN.UTF-8<br>SELINUX_LEVEL_REQUESTED=<br>HISTCONTROL=ignoredups<br>SHLVL=1<br>HOME=/root<br>LOGNAME=root<br>XDG_DATA_DIRS=/root/.local/share/flatpak/exports/share:/var/lib/flatpak/exports/share:/usr/local/share:/usr/share<br>SSH_CONNECTION=192.168.0.1 51791 192.168.0.100 22<br>LESSOPEN=||/usr/bin/lesspipe.sh %s<br>XDG_RUNTIME_DIR=/run/user/0<br>DISPLAY=localhost:10.0<br>_=/usr/bin/env<br>OLDPWD=/root<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">获取变量值</span><br>[root@localhost etc]# echo $SHELL<br>/bin/bash<br><br>[root@localhost ~]# echo $PWD<br>/root<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看系统所有变量</span><br>[root@localhost ~]# set<br>[root@localhost ~]# set | grep $a<br></code></pre></td></tr></table></figure><ul><li><p>位置变量</p><p>$0 #脚本名称</p><p>$1 #第一个参数</p><p>$2 #第二个参数</p><p>$3 #第三个参数</p><p>$4 #第四个参数</p><p>$n… #第n个参数</p></li><li><p>预定义变量</p><p>$0 #代表脚本本身</p><p>$* #显示所有参数内容</p><p>$# #显示有多少个参数</p><p>$? #显示上一条命令的执行结果（0代表正确，非0代表错误）</p><p>$$ #显示脚本进程号（PID）</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# vim test.sh <br><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>echo $0<br>echo $1<br>echo $2<br>echo $3<br>echo $*<br>echo $#<br>echo $$<br>echo $?<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">赋予执行权限，执行脚本</span><br>[root@localhost ~]# ./test.sh xx oo dd<br>./test.sh  $0<br>xx         $1<br>oo         $2<br>dd         $3<br>xx oo dd   $*<br>3          $#<br>15594      $$<br>0          $?<br></code></pre></td></tr></table></figure><h4 id="判断文件状态"><a href="#判断文件状态" class="headerlink" title="判断文件状态"></a>判断文件状态</h4><ul><li>-e #判断文档（文件&#x2F;目录）是否存在，存在为真</li><li>-d #判断目录是否存在，存在为真</li><li>-f #判断文件是否存在，存在为真</li><li>-r #可读为真</li><li>-w #可写为真</li><li>-x #可执行为真</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">判断文档是否存在</span><br>[root@localhost ~]# [ -e /etc/ ]<br>[root@localhost ~]# echo $?<br>0 #为真<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断目录是否存在</span><br>[root@localhost ~]# [ -d /opt ]<br>[root@localhost ~]# echo $?<br>0<br><br>[root@localhost ~]# [ -d /etc/passwd ]<br>[root@localhost ~]# echo $?<br>1<br><br>[root@localhost ~]# [ -f /etc/passwd ]<br>[root@localhost ~]# echo $?<br>0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断是否可读（以当前用户身份判断）</span><br>[root@localhost ~]# [ -r /etc/passwd ]<br>[root@localhost ~]# echo $?<br>0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断是否可写</span><br>[root@localhost ~]# [ -w /etc/passwd ]<br>[root@localhost ~]# echo $?<br>0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">判断是否可执行</span><br>[root@localhost ~]# [ -x /etc/passwd ]<br>[root@localhost ~]# echo $?<br>1<br>[root@localhost ~]# ll /etc/passwd<br>-rw-r--r--. 1 root root 3294 5月   9 16:43 /etc/passwd<br></code></pre></td></tr></table></figure><h4 id="整数比较"><a href="#整数比较" class="headerlink" title="整数比较"></a>整数比较</h4><ul><li>-gt 大于</li><li>-ge 大于等于</li><li>-eq 等于</li><li>-lt 小于</li><li>-le 小于等于</li><li>-ne 不等于</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# [ 1 -gt 1 ]<br>[root@localhost ~]# echo $?<br>1<br><br>[root@localhost ~]# [ 1 -eq 1 ]<br>[root@localhost ~]# echo $?<br>0<br><br>[root@localhost ~]# [ 1 -ge 1 ]<br>[root@localhost ~]# echo $?<br>0<br><br>[root@localhost ~]# [ 1 -ge 2 ]<br>[root@localhost ~]# echo $?<br>1<br><br>[root@localhost ~]# [ 1 -lt 2 ]<br>[root@localhost ~]# echo $?<br>0<br><br>[root@localhost ~]# [ 1 -le 2 ]<br>[root@localhost ~]# echo $?<br>0<br><br>[root@localhost ~]# [ 1 -le 10 ]<br>[root@localhost ~]# echo $?<br>0<br>[root@localhost ~]# [ 10 -le 10 ]<br>[root@localhost ~]# echo $?<br>0<br><br>[root@localhost ~]# [ 1 -ne 2 ]<br>[root@localhost ~]# echo $?<br>0<br><br>[root@localhost ~]# [ 2 -ne 2 ]<br>[root@localhost ~]# echo $?<br>1<br></code></pre></td></tr></table></figure><h4 id="字符串对比"><a href="#字符串对比" class="headerlink" title="字符串对比"></a>字符串对比</h4><ul><li>&#x3D;&#x3D; 相等</li><li>!&#x3D; 不相等</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# [ root == xxoo ]<br>[root@localhost ~]# echo $?<br>1<br><br>[root@localhost ~]# [ root == $USER ]<br>[root@localhost ~]# echo $?<br>0<br><br>[root@localhost ~]# [ $USER == root ]<br>[root@localhost ~]# echo $?<br>0<br><br>[root@localhost ~]# [ abc == bcd ]<br>[root@localhost ~]# echo $?<br>1<br><br>[root@localhost ~]# [ abc != bcd ]<br>[root@localhost ~]# echo $?<br>0<br><br>[root@localhost ~]# [ $USER != root ]<br>[root@localhost ~]# echo $?<br>1<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHPstorm代码提示优化</title>
    <link href="/2022/07/10/PHPstorm%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA%E4%BC%98%E5%8C%96/"/>
    <url>/2022/07/10/PHPstorm%E4%BB%A3%E7%A0%81%E6%8F%90%E7%A4%BA%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<p>先看一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$request</span> = <span class="hljs-title class_">Max\Di\Context</span>::<span class="hljs-title function_ invoke__">getContainer</span>()-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-title class_">ServerRequestInterface</span>::<span class="hljs-variable language_">class</span>);<br><span class="hljs-variable">$get</span>     = <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">get</span>();<br></code></pre></td></tr></table></figure><p>此时会发现<code>get</code>方法是不能点击进去的，因为ide不知道$request是个什么。</p><p>解决这个问题有三种方法：</p><p>方法一：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">/** <span class="hljs-doctag">@var</span> ServerRequestInterface $request */</span><br><span class="hljs-variable">$request</span> = <span class="hljs-title class_">Max\Di\Context</span>::<span class="hljs-title function_ invoke__">getContainer</span>()-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-title class_">ServerRequestInterface</span>::<span class="hljs-variable language_">class</span>);<br><span class="hljs-variable">$get</span>     = <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">get</span>();<br></code></pre></td></tr></table></figure><p>给$request添加一个注释，说明类型是一个ServerRequestInterface，这时候ide就会有自动提示了</p><p>方法二：</p><p>在项目目录添加<code>.phpstorm.meta.php</code> 文件，内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">PHPSTORM_META</span> &#123;<br>    <span class="hljs-title class_">override</span>(\<span class="hljs-title class_">Max</span>\<span class="hljs-title class_">Di</span>\<span class="hljs-title class_">Container</span>::<span class="hljs-title class_">make</span>(0), <span class="hljs-title class_">map</span>(&#x27;@&#x27;));<br>&#125;<br></code></pre></td></tr></table></figure><p>这时候，make方法的返回值类型就是make方法的第一个参数，这时候ide也会自动提示</p><p>方法三：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@template</span> T</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> class-string&lt;T&gt; $id</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span> T</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">make</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$id</span></span>)</span><br><span class="hljs-function">   </span>&#123;<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>使用phpstorm泛型注解，可以参考文章 <a href="https://www.evget.com/article/2021/7/19/42418.html">https://www.evget.com/article/2021/7/19/42418.html</a></p><p>另外再提一点关于方法注释的问题</p><p>php 越来越向强类型转换了，因此在使用高版本php的代码中，有一些注释我认为是可以去掉的，如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;base_path&#x27;</span>) === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> string $path</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base_path</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$path</span> = <span class="hljs-string">&#x27;&#x27;</span></span>): <span class="hljs-title">string</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> BASE_PATH . <span class="hljs-title function_ invoke__">ltrim</span>(<span class="hljs-variable">$path</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> string $path</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> string</span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><p>是完全可以删除的，因为函数的原型已经描述得很清楚了，参数path类型是string，返回值是string。对于方法中没有提示类型的可以加上参数类型的注释，对于抛出异常应该加注释，如果想要解释这个函数的作用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* balabala</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">base_path</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$path</span> = <span class="hljs-string">&#x27;&#x27;</span></span>): <span class="hljs-title">string</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> BASE_PATH . <span class="hljs-title function_ invoke__">ltrim</span>(<span class="hljs-variable">$path</span>, <span class="hljs-string">&#x27;/&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>就可以了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>怎么在maxphp中集成Illuminate-database</title>
    <link href="/2022/07/10/%E6%80%8E%E4%B9%88%E5%9C%A8maxphp%E4%B8%AD%E9%9B%86%E6%88%90Illuminate-database/"/>
    <url>/2022/07/10/%E6%80%8E%E4%B9%88%E5%9C%A8maxphp%E4%B8%AD%E9%9B%86%E6%88%90Illuminate-database/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">composer require illuminate/database illuminate/pagination illuminate/events<br></code></pre></td></tr></table></figure><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">return</span> [<br>    <span class="hljs-comment">// 默认数据库</span><br>    <span class="hljs-string">&#x27;default&#x27;</span>     =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>    <span class="hljs-comment">// 各种数据库配置</span><br>    <span class="hljs-string">&#x27;connections&#x27;</span> =&gt; [<br>        <span class="hljs-string">&#x27;mysql&#x27;</span> =&gt; [<br>            <span class="hljs-string">&#x27;driver&#x27;</span>      =&gt; <span class="hljs-string">&#x27;mysql&#x27;</span>,<br>            <span class="hljs-string">&#x27;host&#x27;</span>        =&gt; <span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,<br>            <span class="hljs-string">&#x27;port&#x27;</span>        =&gt; <span class="hljs-number">3306</span>,<br>            <span class="hljs-string">&#x27;database&#x27;</span>    =&gt; <span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;DB_NAME&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>),<br>            <span class="hljs-string">&#x27;username&#x27;</span>    =&gt; <span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;DB_USER&#x27;</span>, <span class="hljs-string">&#x27;user&#x27;</span>),<br>            <span class="hljs-string">&#x27;password&#x27;</span>    =&gt; <span class="hljs-title function_ invoke__">env</span>(<span class="hljs-string">&#x27;DB_PASS&#x27;</span>, <span class="hljs-string">&#x27;pass&#x27;</span>),<br>            <span class="hljs-string">&#x27;unix_socket&#x27;</span> =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;charset&#x27;</span>     =&gt; <span class="hljs-string">&#x27;utf8&#x27;</span>,<br>            <span class="hljs-string">&#x27;collation&#x27;</span>   =&gt; <span class="hljs-string">&#x27;utf8_unicode_ci&#x27;</span>,<br>            <span class="hljs-string">&#x27;prefix&#x27;</span>      =&gt; <span class="hljs-string">&#x27;&#x27;</span>,<br>            <span class="hljs-string">&#x27;strict&#x27;</span>      =&gt; <span class="hljs-literal">true</span>,<br>            <span class="hljs-string">&#x27;engine&#x27;</span>      =&gt; <span class="hljs-literal">null</span>,<br>        ],<br>    ],<br>];<br><br></code></pre></td></tr></table></figure><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">class_exists</span>(<span class="hljs-title class_">Manager</span>::<span class="hljs-variable language_">class</span>)) &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-variable">$connections</span> = <span class="hljs-title function_ invoke__">config</span>(<span class="hljs-string">&#x27;database.connections&#x27;</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$connections</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-variable">$capsule</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Manager</span>();<br><span class="hljs-variable">$configs</span> = <span class="hljs-title function_ invoke__">config</span>(<span class="hljs-string">&#x27;database&#x27;</span>);<br><span class="hljs-comment">// 扩展mongodb，需要安装对应的包</span><br><span class="hljs-variable">$capsule</span>-&gt;<span class="hljs-title function_ invoke__">getDatabaseManager</span>()-&gt;<span class="hljs-title function_ invoke__">extend</span>(<span class="hljs-string">&#x27;mongodb&#x27;</span>, function(<span class="hljs-variable">$config</span>, <span class="hljs-variable">$name</span>) &#123;<br>    <span class="hljs-variable">$config</span>[<span class="hljs-string">&#x27;name&#x27;</span>] = <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MongodbConnection</span>(<span class="hljs-variable">$config</span>);<br>&#125;);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$configs</span>[<span class="hljs-string">&#x27;default&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$default_config</span> = <span class="hljs-variable">$connections</span>[<span class="hljs-variable">$configs</span>[<span class="hljs-string">&#x27;default&#x27;</span>]];<br>    <span class="hljs-variable">$capsule</span>-&gt;<span class="hljs-title function_ invoke__">addConnection</span>(<span class="hljs-variable">$default_config</span>);<br>&#125;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$connections</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$name</span> =&gt; <span class="hljs-variable">$config</span>) &#123;<br>    <span class="hljs-variable">$capsule</span>-&gt;<span class="hljs-title function_ invoke__">addConnection</span>(<span class="hljs-variable">$config</span>, <span class="hljs-variable">$name</span>);<br>&#125;<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">class_exists</span>(<span class="hljs-title class_">Dispatcher</span>::<span class="hljs-variable language_">class</span>)) &#123;<br>    <span class="hljs-variable">$capsule</span>-&gt;<span class="hljs-title function_ invoke__">setEventDispatcher</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dispatcher</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Container</span>));<br>&#125;<br><span class="hljs-variable">$capsule</span>-&gt;<span class="hljs-title function_ invoke__">setAsGlobal</span>();<br><span class="hljs-variable">$capsule</span>-&gt;<span class="hljs-title function_ invoke__">bootEloquent</span>();<br></code></pre></td></tr></table></figure><p>初始化应该放在workerStart回调中</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Springboot实践</title>
    <link href="/2022/07/10/Springboot%E5%AE%9E%E8%B7%B5/"/>
    <url>/2022/07/10/Springboot%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<h2 id="创建一个springboot项目"><a href="#创建一个springboot项目" class="headerlink" title="创建一个springboot项目"></a>创建一个springboot项目</h2><p><a href="https://blog.csdn.net/qq_42539533/article/details/90607415">(50条消息) 创建一个Spring Boot项目_慕北丶的博客-CSDN博客_创建springboot项目</a></p><h2 id="Maven更换仓库"><a href="#Maven更换仓库" class="headerlink" title="Maven更换仓库"></a>Maven更换仓库</h2><p>从官方仓库<a href="https://link.jianshu.com/?t=http://repo.maven.apache.org/maven2/">http://repo.maven.apache.org/maven2/</a> 下载较慢，可以设置<a href="https://so.csdn.net/so/search?q=maven&spm=1001.2101.3001.7020">maven</a>仓库源为国内镜像，加快依赖的下载。</p><p>修改Maven默认的下载仓库</p><h3 id="可以在pom-xml中设置如下代码："><a href="#可以在pom-xml中设置如下代码：" class="headerlink" title="可以在pom.xml中设置如下代码："></a>可以在pom.<a href="https://so.csdn.net/so/search?q=xml&spm=1001.2101.3001.7020">xml</a>中设置如下代码：</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">releases</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">releases</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="也可以在本地maven子目录-x2F-conf-x2F-settings-xml中settings-xml中配置："><a href="#也可以在本地maven子目录-x2F-conf-x2F-settings-xml中settings-xml中配置：" class="headerlink" title="也可以在本地maven子目录&#x2F;conf&#x2F;settings.xml中settings.xml中配置："></a>也可以在本地maven子目录&#x2F;conf&#x2F;settings.xml中settings.xml中配置：</h3><p>想要修改Maven默认的下载仓库，其实我们只需要找到Maven的settings.xml文件。如果使用的是IDEA默认的Maven，那么settings.xml默认存放地址为IDEA安装路劲下的：\JetBrains\IntelliJ IDEA xxx.xxx\plugins\maven\lib\maven3\conf</p><p>复制一份settings.xml 到：C:\Users\You user.m2(默认本地存放下载的jar包位置为当前用户文件下下的.m2文件中)下也就是你的本地maven仓库下。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--This sends everything else to /public --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>nexus-aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>*<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Nexus aliyun<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="maven缺少依赖包，强制更新依赖命令"><a href="#maven缺少依赖包，强制更新依赖命令" class="headerlink" title="maven缺少依赖包，强制更新依赖命令"></a>maven缺少依赖包，强制更新依赖命令</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">mvn clean <span class="hljs-keyword">install</span> -e -U -Dmaven.<span class="hljs-keyword">test</span>.skip=<span class="hljs-keyword">true</span><br></code></pre></td></tr></table></figure><ul><li>-e详细异常，-U强制更新</li><li>-DskipTests，不执行测试用例，但编译测试用例类生成相应的class文件至target&#x2F;test-classes下。</li><li>-Dmaven.test.skip&#x3D;true，不执行测试用例，也不编译测试用例类。</li></ul><p>使用maven.test.skip，不但跳过单元测试的运行，也跳过测试代码的编译。</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">mvn <span class="hljs-keyword">package</span> -Dmaven.test.skip=<span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="Error-java-错误-不支持发行版本-5-解决方法"><a href="#Error-java-错误-不支持发行版本-5-解决方法" class="headerlink" title="Error:java: 错误: 不支持发行版本 5 解决方法"></a>Error:java: 错误: 不支持发行版本 5 解决方法</h2><p><a href="https://blog.csdn.net/DD04567/article/details/107205871">(50条消息) Error:java: 错误: 不支持发行版本 5 解决方法（详细）_哇咔咔i的博客-CSDN博客_java错误不支持发行版本5</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>腾讯云验证码使用教程</title>
    <link href="/2022/07/09/%E8%85%BE%E8%AE%AF%E4%BA%91%E9%AA%8C%E8%AF%81%E7%A0%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    <url>/2022/07/09/%E8%85%BE%E8%AE%AF%E4%BA%91%E9%AA%8C%E8%AF%81%E7%A0%81%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<blockquote><p>注意： 以下内容来自互联网，与本站无关，包括使用在内的所有责任和本站无关</p></blockquote><p>前端</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>腾讯验证码接入示例<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css"><span class="hljs-selector-tag">body</span>&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">50px</span> <span class="hljs-number">0</span>;<span class="hljs-attribute">text-align</span>:center;<span class="hljs-attribute">font-family</span>:PingFangSC-Regular,<span class="hljs-string">&quot;Open Sans&quot;</span>,Arial,<span class="hljs-string">&quot;Hiragino Sans GB&quot;</span>,<span class="hljs-string">&quot;Microsoft YaHei&quot;</span>,STHeiti,<span class="hljs-string">&quot;WenQuanYi Micro Hei&quot;</span>,SimSun,sans-serif&#125;</span><br><span class="language-css"><span class="hljs-selector-class">.btn</span>&#123;<span class="hljs-attribute">display</span>:inline-block;<span class="hljs-attribute">box-sizing</span>:border-box;<span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;<span class="hljs-attribute">border-radius</span>:<span class="hljs-number">2px</span>;<span class="hljs-attribute">width</span>:<span class="hljs-number">100px</span>;<span class="hljs-attribute">height</span>:<span class="hljs-number">40px</span>;<span class="hljs-attribute">line-height</span>:<span class="hljs-number">40px</span>;<span class="hljs-attribute">font-size</span>:<span class="hljs-number">16px</span>;<span class="hljs-attribute">color</span>:<span class="hljs-number">#666</span>;<span class="hljs-attribute">cursor</span>:pointer;<span class="hljs-attribute">background</span>:<span class="hljs-number">#fff</span> <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">180deg</span>,<span class="hljs-number">#fff</span> <span class="hljs-number">0</span>,<span class="hljs-number">#f3f3f3</span> <span class="hljs-number">100%</span>)&#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 验证码程序依赖(必须)。请勿修改以下程序依赖，如使用本地缓存，或通过其他手段规避加载，会影响程序的正常使用。 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://ssl.captcha.qq.com/TCaptcha.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;TencentCaptcha&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span>&gt;</span>验证<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> tcaptchaCallback = <span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;</span><br><span class="language-javascript"><span class="hljs-comment">// 返回结果</span></span><br><span class="language-javascript"><span class="hljs-comment">// ret         Int       验证结果，0：验证成功。2：用户主动关闭验证码。</span></span><br><span class="language-javascript"><span class="hljs-comment">// ticket      String    验证成功的票据，当且仅当 ret = 0 时 ticket 有值。</span></span><br><span class="language-javascript"><span class="hljs-comment">// CaptchaAppId       String    验证码应用ID。</span></span><br><span class="language-javascript"><span class="hljs-comment">// bizState    Any       自定义透传参数。</span></span><br><span class="language-javascript"><span class="hljs-comment">// randstr     String    本次验证的随机串，请求后台接口时需带上。</span></span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;callback:&#x27;</span>, res);</span><br><span class="language-javascript"><span class="hljs-comment">// res（用户主动关闭验证码）= &#123;ret: 2, ticket: null&#125;</span></span><br><span class="language-javascript"><span class="hljs-comment">// res（验证成功） = &#123;ret: 0, ticket: &quot;String&quot;, randstr: &quot;String&quot;&#125;</span></span><br><span class="language-javascript"><span class="hljs-comment">// res（客户端出现异常错误 仍返回可用票据） = &#123;ret: 0, ticket: &quot;String&quot;, randstr: &quot;String&quot;,  errorCode: Number, errorMessage: &quot;String&quot;&#125;</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (res.<span class="hljs-property">ret</span> === <span class="hljs-number">0</span>) &#123;</span><br><span class="language-javascript">$.<span class="hljs-title function_">ajax</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;html&quot;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">data</span>: &#123;<span class="hljs-attr">ticket</span>: res.<span class="hljs-property">ticket</span>, <span class="hljs-attr">randstr</span>: res.<span class="hljs-property">randstr</span>&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">url</span>: <span class="hljs-string">&quot;api.php&quot;</span>,</span><br><span class="language-javascript"><span class="hljs-attr">success</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(data);</span><br><span class="language-javascript">&#125;,</span><br><span class="language-javascript"><span class="hljs-attr">error</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;服务器错误&#x27;</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> captcha1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TencentCaptcha</span>(<span class="hljs-string">&#x27;2046626881&#x27;</span>, tcaptchaCallback);</span><br><span class="language-javascript">$(<span class="hljs-string">&quot;#TencentCaptcha&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">captcha1.<span class="hljs-title function_">show</span>();</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>后端</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;?php<br><br>@header(<span class="hljs-string">&#x27;Content-Type: text/html; charset=UTF-8&#x27;</span>);<br><br><span class="hljs-variable">$ticket</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ticket&#x27;</span>];<br><span class="hljs-variable">$randstr</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;randstr&#x27;</span>];<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-variable">$ticket</span> || !<span class="hljs-variable">$randstr</span>) <span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;参数不能为空&#x27;</span>);<br><br><span class="hljs-variable">$result</span> = check_ticket(<span class="hljs-variable">$ticket</span>, <span class="hljs-variable">$randstr</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$result</span> === <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;验证通过&#x27;</span>);<br>&#125;elseif(<span class="hljs-variable">$result</span> === -<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;接口已失效&#x27;</span>);<br>&#125;elseif(<span class="hljs-variable">$result</span> === <span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">exit</span>(<span class="hljs-string">&#x27;验证不通过&#x27;</span>);<br>&#125;<br><br><br><span class="hljs-keyword">function</span> check_ticket(<span class="hljs-variable">$ticket</span>, <span class="hljs-variable">$randstr</span>)<br>&#123;<br><span class="hljs-variable">$url</span> = <span class="hljs-string">&#x27;https://cgi.urlsec.qq.com/index.php?m=check&amp;a=gw_check&amp;callback=url_query&amp;url=https%3A%2F%2Fwww.qq.com%2F&#x27;</span>.rand(<span class="hljs-number">111111</span>,<span class="hljs-number">999999</span>).<span class="hljs-string">&#x27;&amp;ticket=&#x27;</span>.urlencode(<span class="hljs-variable">$ticket</span>).<span class="hljs-string">&#x27;&amp;randstr=&#x27;</span>.urlencode(<span class="hljs-variable">$randstr</span>);<br>    <span class="hljs-variable">$ch</span> = curl_init();<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_URL, <span class="hljs-variable">$url</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYPEER, false);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_SSL_VERIFYHOST, false);<br><span class="hljs-variable">$httpheader</span>[] = <span class="hljs-string">&quot;Accept: application/json&quot;</span>;<br><span class="hljs-variable">$httpheader</span>[] = <span class="hljs-string">&quot;Accept-Language: zh-CN,zh;q=0.8&quot;</span>;<br><span class="hljs-variable">$httpheader</span>[] = <span class="hljs-string">&quot;Connection: close&quot;</span>;<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_HTTPHEADER, <span class="hljs-variable">$httpheader</span>);<br>curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_REFERER, <span class="hljs-string">&#x27;https://urlsec.qq.com/check.html&#x27;</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_USERAGENT, <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36&#x27;</span>);<br>    curl_setopt(<span class="hljs-variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$ret</span> = curl_exec(<span class="hljs-variable">$ch</span>);<br>    curl_close(<span class="hljs-variable">$ch</span>);<br><br><span class="hljs-variable">$arr</span> = jsonp_decode(<span class="hljs-variable">$ret</span>, true);<br><span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;reCode&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;reCode&#x27;</span>] == <span class="hljs-number">0</span>)&#123; <span class="hljs-regexp">//</span>验证通过<br>return <span class="hljs-number">1</span>;<br>&#125;elseif(<span class="hljs-variable">$arr</span>[<span class="hljs-string">&#x27;reCode&#x27;</span>] == -<span class="hljs-number">109</span>)&#123; <span class="hljs-regexp">//</span>验证码错误<br>return <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-regexp">//</span>接口已失效<br>return -<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">function</span> jsonp_decode(<span class="hljs-variable">$jsonp</span>, <span class="hljs-variable">$assoc</span> = false)<br>&#123;<br><span class="hljs-variable">$jsonp</span> = trim(<span class="hljs-variable">$jsonp</span>);<br><span class="hljs-keyword">if</span>(isset(<span class="hljs-variable">$jsonp</span>[<span class="hljs-number">0</span>]) &amp;&amp; <span class="hljs-variable">$jsonp</span>[<span class="hljs-number">0</span>] !== <span class="hljs-string">&#x27;[&#x27;</span> &amp;&amp; <span class="hljs-variable">$jsonp</span>[<span class="hljs-number">0</span>] !== <span class="hljs-string">&#x27;&#123;&#x27;</span>) &#123;<br><span class="hljs-variable">$begin</span> = strpos(<span class="hljs-variable">$jsonp</span>, <span class="hljs-string">&#x27;(&#x27;</span>);<br><span class="hljs-keyword">if</span>(false !== <span class="hljs-variable">$begin</span>)<br>&#123;<br><span class="hljs-variable">$end</span> = strrpos(<span class="hljs-variable">$jsonp</span>, <span class="hljs-string">&#x27;)&#x27;</span>);<br><span class="hljs-keyword">if</span>(false !== <span class="hljs-variable">$end</span>)<br>&#123;<br><span class="hljs-variable">$jsonp</span> = substr(<span class="hljs-variable">$jsonp</span>, <span class="hljs-variable">$begin</span> + <span class="hljs-number">1</span>, <span class="hljs-variable">$end</span> - <span class="hljs-variable">$begin</span> - <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br>return json_decode(<span class="hljs-variable">$jsonp</span>, <span class="hljs-variable">$assoc</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GDB简单调试</title>
    <link href="/2022/07/04/GDB%E7%AE%80%E5%8D%95%E8%B0%83%E8%AF%95/"/>
    <url>/2022/07/04/GDB%E7%AE%80%E5%8D%95%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>        fmt.Println(i)    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">go build -o main main.go<br></code></pre></td></tr></table></figure><p>调试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gdb main<br></code></pre></td></tr></table></figure><p>如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs shell">GNU gdb (Ubuntu 9.2-0ubuntu1~20.04) 9.2<br>Copyright (C) 2020 Free Software Foundation, Inc.<br>License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;<br>This is free software: you are free to change and redistribute it.<br>There is NO WARRANTY, to the extent permitted by law.<br>Type &quot;show copying&quot; and &quot;show warranty&quot; for details.<br>This GDB was configured as &quot;x86_64-linux-gnu&quot;.<br>Type &quot;show configuration&quot; for configuration details.<br>For bug reporting instructions, please see:<br>&lt;http://www.gnu.org/software/gdb/bugs/&gt;.<br>Find the GDB manual and other documentation resources online at:<br>    &lt;http://www.gnu.org/software/gdb/documentation/&gt;.<br><br>For help, type &quot;help&quot;.<br>Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...<br>Reading symbols from test...<br>warning: File &quot;/usr/local/go/src/runtime/runtime-gdb.py&quot; auto-loading has been declined by your `auto-load safe-path&#x27; set to &quot;$debugdir:$datadir/auto-load&quot;.<br>To enable execution of this file add<br>        add-auto-load-safe-path /usr/local/go/src/runtime/runtime-gdb.py<br>line to your configuration file &quot;/root/.gdbinit&quot;.<br>To completely disable this security protection add<br>        set auto-load safe-path /<br>line to your configuration file &quot;/root/.gdbinit&quot;.<br>For more information about this security protection see the<br>&quot;Auto-loading safe path&quot; section in the GDB manual.  E.g., run from the shell:<br>        info &quot;(gdb)Auto-loading safe path&quot;<br>(gdb) <br></code></pre></td></tr></table></figure><p>输入<code>l</code>回车查看源码，可以使用<code>l &lt;line&gt;</code> 跳到某一行查看</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css">(gdb) l<br><span class="hljs-number">1</span>       package <span class="hljs-selector-tag">main</span><br><span class="hljs-number">2</span><br><span class="hljs-number">3</span>       import (<br><span class="hljs-number">4</span>               &quot;fmt&quot;<br><span class="hljs-number">5</span>       )<br><span class="hljs-number">6</span><br><span class="hljs-number">7</span>       func <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-number">8</span>               for <span class="hljs-selector-tag">i</span> := <span class="hljs-number">0</span>; <span class="hljs-selector-tag">i</span> &lt; <span class="hljs-number">10</span>; <span class="hljs-selector-tag">i</span>++ &#123;<br><span class="hljs-number">9</span>                       fmt<span class="hljs-selector-class">.Print</span>(<span class="hljs-selector-tag">i</span>)<br><span class="hljs-number">10</span>              &#125;<br>(gdb)<br></code></pre></td></tr></table></figure><p>设置断点<code>b &lt;line&gt;</code>，例如 <code>b 9</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">(gdb) b <span class="hljs-number">9</span><br>Breakpoint <span class="hljs-number">1</span> at <span class="hljs-number">0</span>x49766a: <span class="hljs-keyword">file</span> <span class="hljs-regexp">/mnt/</span>c<span class="hljs-regexp">/Users/</span>ChengYao<span class="hljs-regexp">/Desktop/</span>Web<span class="hljs-regexp">/Go/</span>test.go, line <span class="hljs-number">9</span>.<br>(gdb)<br></code></pre></td></tr></table></figure><p>运行<code>run</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gradle">(gdb) run<br>Starting program: <span class="hljs-regexp">/mnt/</span>c<span class="hljs-regexp">/Users/</span>ChengYao<span class="hljs-regexp">/Desktop/</span>Web<span class="hljs-regexp">/Go/</span>test <br>[<span class="hljs-keyword">New</span> LWP <span class="hljs-number">10861</span>]<br>[<span class="hljs-keyword">New</span> LWP <span class="hljs-number">10862</span>]<br>[<span class="hljs-keyword">New</span> LWP <span class="hljs-number">10863</span>]<br>[<span class="hljs-keyword">New</span> LWP <span class="hljs-number">10864</span>]<br>[<span class="hljs-keyword">New</span> LWP <span class="hljs-number">10865</span>]<br><br>Thread <span class="hljs-number">1</span> <span class="hljs-string">&quot;test&quot;</span> hit Breakpoint <span class="hljs-number">1</span>, main.main () at <span class="hljs-regexp">/mnt/</span>c<span class="hljs-regexp">/Users/</span>ChengYao<span class="hljs-regexp">/Desktop/</span>Web<span class="hljs-regexp">/Go/</span>test.go:<span class="hljs-number">9</span><br><span class="hljs-number">9</span>                       fmt.<span class="hljs-keyword">Print</span>(i)<br>(gdb)<br></code></pre></td></tr></table></figure><p>打印变量<code>p &lt;var&gt;</code>， 例如 <code>p i</code></p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gams">(gdb) p i<br><span class="hljs-meta"><span class="hljs-keyword">$1</span> = 0</span><br>(gdb)<br></code></pre></td></tr></table></figure><p>下一行<code>n </code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">(gdb) n<br><span class="hljs-number">08</span>              for <span class="hljs-selector-tag">i</span> := <span class="hljs-number">0</span>; <span class="hljs-selector-tag">i</span> &lt; <span class="hljs-number">10</span>; <span class="hljs-selector-tag">i</span>++ &#123;<br>(gdb)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Golang 通道(channel)</title>
    <link href="/2022/06/26/Golang%20%E9%80%9A%E9%81%93(channel)/"/>
    <url>/2022/06/26/Golang%20%E9%80%9A%E9%81%93(channel)/</url>
    
    <content type="html"><![CDATA[<p>单纯地将函数并发执行是没有意义的。函数与函数间需要交换数据才能体现并发执行函数的意义。</p><p>虽然可以使用共享内存进行数据交换，但是共享内存在不同的goroutine中容易发生竞态问题。为了保证数据交换的正确性，必须使用互斥量对内存进行加锁，这种做法势必造成性能问题。</p><p>Go语言的并发模型是CSP（Communicating Sequential Processes），提倡通过通信共享内存而不是通过共享内存而实现通信。</p><p>如果说goroutine是Go程序并发的执行体，channel就是它们之间的连接。channel是可以让一个goroutine发送特定值到另一个goroutine的通信机制。</p><p>Go 语言中的通道（channel）是一种特殊的类型。通道像一个传送带或者队列，总是遵循先入先出（First In First Out）的规则，保证收发数据的顺序。每一个通道都是一个具体类型的导管，也就是声明channel的时候需要为其指定元素类型。</p><h1 id="操作通道"><a href="#操作通道" class="headerlink" title="操作通道"></a>操作通道</h1><h2 id="创建channel"><a href="#创建channel" class="headerlink" title="创建channel"></a>创建channel</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> ch <span class="hljs-keyword">chan</span> <span class="hljs-type">int</span><br><span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> 元素类型, [缓冲大小])<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">uint8</span>, <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>我们在将一个 channel 变量传递到一个函数时，可以通过将其指定为单向 channel 变量，从而限制该函数中可以对此 channel 的操作，比如只能往这个 channel 中写入数据，或者只能从这个 channel 读取数据。</p><blockquote><p>可以使用len,cap获取通道内元素数量和容量</p></blockquote><h2 id="无缓冲通道"><a href="#无缓冲通道" class="headerlink" title="无缓冲通道"></a>无缓冲通道</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">ch := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>) <br></code></pre></td></tr></table></figure><p>无缓冲通道也叫阻塞通道，同步通道，无缓冲的通道只有在有接收值的时候才能发送值，无缓冲通道上的发送操作会阻塞，直到另一个goroutine在该通道上执行接收操作，这时值才能发送成功，两个goroutine将继续执行。相反，如果接收操作先执行，接收方的goroutine将阻塞，直到另一个goroutine在该通道上发送一个值。使用无缓冲通道进行通信将导致发送和接收的goroutine同步化</p><h2 id="单向通道"><a href="#单向通道" class="headerlink" title="单向通道"></a>单向通道</h2><p>单向 channel 变量的声明非常简单，只能写入数据的通道类型为<code>chan&lt;-</code>，只能读取数据的通道类型为<code>&lt;-chan</code>，格式如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> 通道实例 <span class="hljs-keyword">chan</span>&lt;- 元素类型   <span class="hljs-comment">// 只能写入数据的通道</span><br><span class="hljs-keyword">var</span> 通道实例 &lt;-<span class="hljs-keyword">chan</span> 元素类型   <span class="hljs-comment">// 只能读取数据的通道</span><br></code></pre></td></tr></table></figure><ul><li>元素类型：通道包含的元素类型。</li><li>通道实例：声明的通道变量。</li></ul><h3 id="time包中的单向通道"><a href="#time包中的单向通道" class="headerlink" title="time包中的单向通道"></a>time包中的单向通道</h3><p>time 包中的计时器会返回一个 timer 实例，代码如下：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">timer</span> := <span class="hljs-built_in">time</span>.NewTimer(<span class="hljs-built_in">time</span>.Second)<br></code></pre></td></tr></table></figure><p>timer的Timer类型定义如下：</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">Timer</span> struct &#123; <br><span class="hljs-type">C</span> &lt;-chan <span class="hljs-type">Time</span>   <br>    r runtimeTimer<br>&#125;<br></code></pre></td></tr></table></figure><p>第 2 行中 C 通道的类型就是一种只能读取的单向通道。如果此处不进行通道方向约束，一旦外部向通道写入数据，将会造成其他使用到计时器的地方逻辑产生混乱。</p><p>因此，单向通道有利于代码接口的严谨性。</p><h2 id="发送接收"><a href="#发送接收" class="headerlink" title="发送接收"></a>发送接收</h2><p>通道有发送（send）、接收(receive）和关闭（close）三种操作。发送和接收都使用&lt;-符号。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean">&lt;- ch<br>ch &lt;- <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go">channel := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-type">bool</span>, <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> v, ok := <span class="hljs-keyword">range</span> channel &#123;<br><span class="hljs-keyword">if</span> ok &#123;<br><span class="hljs-comment">// 通道未关闭</span><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-keyword">select</span> &#123;<br><span class="hljs-keyword">case</span> v := &lt;-channel: <br> <span class="hljs-comment">// 接收到值</span><br><span class="hljs-keyword">default</span>: <br><span class="hljs-comment">// 其他</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">close</span><span class="hljs-params">(ch)</span></span><br></code></pre></td></tr></table></figure><p>close 函数官方定义如下：<br>close函数是一个内建函数， 用来关闭channel，这个channel要么是双向的， 要么是只写的（chan&lt;- Type）。</p><p>关于关闭通道需要注意的事情是，只有在通知接收方goroutine所有的数据都发送完毕的时候才需要关闭通道。通道是可以被垃圾回收机制回收的，它和关闭文件是不一样的，在结束操作之后关闭文件是必须要做的，但关闭通道不是必须的。</p><p>关闭后的通道有以下特点：</p><p>​    1.对一个关闭的通道再发送值就会导致panic。<br>​    2.对一个关闭的通道进行接收会一直获取值直到通道为空。<br>​    3.对一个关闭的并且没有值的通道执行接收操作会得到对应类型的零值。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`v, ok := &lt;-c`，中`ok`为<span class="hljs-literal">false</span> 标识通道已经被成功关闭<br></code></pre></td></tr></table></figure><p>​    4.关闭一个已经关闭的通道会导致panic。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://topgoer.com/static/8.1/1.png"></p><p>参考文章：</p><p><a href="https://topgoer.com/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/channel.html">channel</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql导出csv文件</title>
    <link href="/2022/06/18/mysql%E5%AF%BC%E5%87%BAcsv%E6%96%87%E4%BB%B6/"/>
    <url>/2022/06/18/mysql%E5%AF%BC%E5%87%BAcsv%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>CSV格式，其要点包括：</p><ul><li>字段之间以逗号分隔，数据行之间以\r\n分隔；</li><li>字符串以半角双引号包围，字符串本身的双引号用两个双引号表示。</li></ul><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>首先需要查看下一个变量</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">SHOW <span class="hljs-keyword">VARIABLES</span> LIKE <span class="hljs-comment">&quot;secure_file_priv&quot;</span>;<br></code></pre></td></tr></table></figure><p>可以看到，本地value的值为NULL。解释如下</p><p>（1）NULL，表示禁止。</p><p>（2）如果value值有文件夹目录，则表示只允许该目录下文件（PS：测试子目录也不行）。</p><p>（3）如果为空，则表示不限制目录。</p><p>修改</p><ol><li>把导入文件放入secure-file-priv目前的value值对应路径</li><li>把secure-file-priv的value值修改为准备导入文件的放置路径</li><li>去掉导入的目录限制。可修改mysql配置文件（Windows下为my.ini, Linux下的my.cnf），在[mysqld]下面，查看是否有: <code>secure_file_priv = </code>这样一行内容，表示不限制目录，等号一定要有，否则mysql无法启动。</li></ol><p>修改完配置文件后，重启mysql生效。</p><p>重启后：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service mysqld <span class="hljs-literal">stop</span><br>service mysqld <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><p>如果不修改可能会有如下报错</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">The MySQL server is running with the --secure-file-priv option so it cannot<span class="hljs-built_in"> execute </span>this statement.<br></code></pre></td></tr></table></figure><h1 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h1><p>CSV代表逗号分隔值。 您经常使用CSV文件格式在<em>Microsoft Excel</em>，<em>Open Office</em>，<em>Google Docs</em>等应用程序之间交换数据。</p><p>以CSV文件格式从MySQL数据库中获取数据将非常有用，因为您可以按照所需的方式分析和格式化数据。</p><p>MySQL提供了一种将查询结果导出到位于数据库服务器中的CSV文件的简单方法。</p><p>在导出数据之前，必须确保：</p><ul><li>MySQL服务器的进程对包含目标CSV文件的目标文件夹具有写访问权限。</li><li>要导出的目标CSV文件不能存在。</li></ul><p>以下查询从<code>orders</code>表中查询选择已取消的订单：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    orderNumber, status, orderDate, requiredDate, comments<br><span class="hljs-keyword">FROM</span><br>    orders<br><span class="hljs-keyword">WHERE</span><br>    status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Cancelled&#x27;</span>;<br></code></pre></td></tr></table></figure><p>要将此结果集导出为CSV文件，请按如下方式向上述查询添加一些子句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    orderNumber, status, orderDate, requiredDate, comments<br><span class="hljs-keyword">FROM</span><br>    orders<br><span class="hljs-keyword">WHERE</span><br>    status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Cancelled&#x27;</span> <br><span class="hljs-keyword">INTO</span> OUTFILE <span class="hljs-string">&#x27;F:/worksp/mysql/cancelled_orders.csv&#x27;</span> <br>FIELDS ENCLOSED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&quot;&#x27;</span> <br>TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;;&#x27;</span> <br>ESCAPED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&quot;&#x27;</span> <br>LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\r\n&#x27;</span>;<br></code></pre></td></tr></table></figure><p>该语句在<code>F:/worksp/mysql/</code>目录下创建一个包含结果集，名称为<code>cancelled_orders.csv</code>的CSV文件。</p><p>CSV文件包含结果集中的行集合。每行由一个回车序列和由<code>LINES TERMINATED BY &#39;\r\n&#39;</code>子句指定的换行字符终止。文件中的每行包含表的结果集的每一行记录。</p><p>每个值由<code>FIELDS ENCLOSED BY &#39;&quot;&#39;</code>子句指示的双引号括起来。 这样可以防止可能包含逗号(<code>，</code>)的值被解释为字段分隔符。 当用双引号括住这些值时，该值中的逗号不会被识别为字段分隔符。</p><h2 id="将数据导出到文件名包含时间戳的CSV文件"><a href="#将数据导出到文件名包含时间戳的CSV文件" class="headerlink" title="将数据导出到文件名包含时间戳的CSV文件"></a>将数据导出到文件名包含时间戳的CSV文件</h2><p>我们经常需要将数据导出到CSV文件中，该文件的名称包含创建文件的时间戳。 为此，您需要使用<a href="http://www.yiibai.com/mysql/prepared-statement.html">MySQL准备语句</a>。</p><p>以下命令将整个<code>orders</code>表导出为将时间戳作为文件名的一部分的CSV文件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SET</span> <span class="hljs-variable">@TS</span> <span class="hljs-operator">=</span> DATE_FORMAT(NOW(),<span class="hljs-string">&#x27;_%Y%m%d_%H%i%s&#x27;</span>);<br><br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@FOLDER</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;F:/worksp/mysql/&#x27;</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@PREFIX</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;orders&#x27;</span>;<br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@EXT</span>    <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;.csv&#x27;</span>;<br><br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@CMD</span> <span class="hljs-operator">=</span> CONCAT(&quot;SELECT * FROM orders INTO OUTFILE &#x27;&quot;,<span class="hljs-variable">@FOLDER</span>,<span class="hljs-variable">@PREFIX</span>,<span class="hljs-variable">@TS</span>,<span class="hljs-variable">@EXT</span>,<br>    &quot;&#x27; FIELDS ENCLOSED BY &#x27;\&quot;<span class="hljs-string">&#x27; TERMINATED BY &#x27;</span>;<span class="hljs-string">&#x27; ESCAPED BY &#x27;</span>\&quot;&#x27;&quot;,<br>    &quot;  LINES TERMINATED BY &#x27;\r\n&#x27;;&quot;);<br><br><span class="hljs-keyword">PREPARE</span> statement <span class="hljs-keyword">FROM</span> <span class="hljs-variable">@CMD</span>;<br><br><span class="hljs-keyword">EXECUTE</span> statement;<br></code></pre></td></tr></table></figure><p>下面，让我们来详细讲解上面的命令。</p><ul><li><strong>首先</strong>，构造了一个具有当前时间戳的查询作为文件名的一部分。</li><li><strong>其次</strong>，使用<code>PREPARE</code>语句<code>FROM</code>命令准备执行语句。</li><li><strong>第三</strong>，使用<code>EXECUTE</code>命令执行语句。</li></ul><p>可以通过<a href="http://www.yiibai.com/mysql/triggers/working-mysql-scheduled-event.html">事件</a>包装命令，并根据需要定期安排事件的运行。</p><h2 id="使用列标题导出数据"><a href="#使用列标题导出数据" class="headerlink" title="使用列标题导出数据"></a>使用列标题导出数据</h2><p>如果CSV文件包含第一行作为列标题，那么该文件更容易理解，这是非常方便的。</p><p>要添加列标题，需要使用<a href="http://www.yiibai.com/sql-union-mysql.html">UNION</a>语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">(<span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;Order Number&#x27;</span>,<span class="hljs-string">&#x27;Order Date&#x27;</span>,<span class="hljs-string">&#x27;Status&#x27;</span>)<br><span class="hljs-keyword">UNION</span> <br>(<span class="hljs-keyword">SELECT</span> orderNumber,orderDate, status<br><span class="hljs-keyword">FROM</span> orders<br><span class="hljs-keyword">INTO</span> OUTFILE <span class="hljs-string">&#x27;F:/worksp/mysql/orders_union_title.csv&#x27;</span><br>FIELDS ENCLOSED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&quot;&#x27;</span> TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;;&#x27;</span> ESCAPED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&quot;&#x27;</span><br>LINES TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\r\n&#x27;</span>);<br></code></pre></td></tr></table></figure><p>如查询所示，需要包括每列的列标题。</p><h2 id="处理NULL值"><a href="#处理NULL值" class="headerlink" title="处理NULL值"></a>处理NULL值</h2><p>如果结果集中的值包含<a href="http://www.yiibai.com/mysql/null.html">NULL</a>值，则目标文件将使用“<code>N/A</code>”来代替数据中的<code>NULL</code>值。要解决此问题，您需要将<code>NULL</code>值替换为另一个值，例如不适用(<code>N/A</code>)，方法是使用<a href="http://www.yiibai.com/mysql/ifnull.html">IFNULL函数</a>，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    orderNumber, orderDate, IFNULL(shippedDate, <span class="hljs-string">&#x27;N/A&#x27;</span>)<br><span class="hljs-keyword">FROM</span><br>    orders <span class="hljs-keyword">INTO</span> OUTFILE <span class="hljs-string">&#x27;F:/worksp/mysql/orders_null2na.csv&#x27;</span> <br>    FIELDS ENCLOSED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&quot;&#x27;</span> <br>    TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;;&#x27;</span> <br>    ESCAPED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;&quot;&#x27;</span> LINES <br>    TERMINATED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;\r\n&#x27;</span>;<br></code></pre></td></tr></table></figure><p>我们用<code>N/A</code>字符串替换了<code>shippingDate</code>列中的<code>NULL</code>值。 CSV文件将显示<code>N/A</code>而不是<code>NULL</code>值。</p><p>给导出文件添加列名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">into</span> outfile <span class="hljs-string">&#x27;/tmp/test1.csv&#x27;</span> fields terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;,&#x27;</span> escaped <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;&#x27;</span> optionally enclosed  <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;&#x27;</span> lisnes terminated <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;\n&#x27;</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;col1&#x27;</span>,<span class="hljs-string">&#x27;col2&#x27;</span>,<span class="hljs-string">&#x27;col3&#x27;</span>,<span class="hljs-string">&#x27;col4&#x27;</span>,<span class="hljs-string">&#x27;col5&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> id,<span class="hljs-keyword">user</span>,url,<span class="hljs-type">name</span>,age  <span class="hljs-keyword">from</span> test) b;<br></code></pre></td></tr></table></figure><p>使用MySQL命令结合sed的方法</p><ul><li>使用-e参数执行命令，-s是去掉输出结果的各种划线</li><li>利用sed将字段之间的tab换成，并且将NULL替换成空字符</li><li>如果不想要标题行，可以使用-N参数</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot  <span class="hljs-operator">-</span>p密码  test <span class="hljs-operator">-</span>e &quot;select * from test where id &gt; 1&quot; <span class="hljs-operator">-</span>s <span class="hljs-operator">|</span>sed <span class="hljs-operator">-</span>e  &quot;s/\t/,/g&quot; <span class="hljs-operator">-</span>e &quot;s/NULL/  /g&quot; <span class="hljs-operator">-</span>e &quot;s/\n/\r\n/g&quot;  <span class="hljs-operator">&gt;</span> <span class="hljs-operator">/</span>tmp<span class="hljs-operator">/</span>test2.csv<br></code></pre></td></tr></table></figure><p>使用mysqldump导出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysqldump <span class="hljs-operator">-</span>uroot  <span class="hljs-operator">-</span>p密码  <span class="hljs-operator">-</span>t <span class="hljs-operator">-</span>T<span class="hljs-operator">/</span>tmp<span class="hljs-operator">/</span> test  test <span class="hljs-comment">--fields-terminated-by=&#x27;,&#x27; --fields-escaped-by=&#x27;&#x27; --fields-optionally-enclosed-by=&#x27;&#x27; </span><br></code></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">test</span>（第一个<span class="hljs-keyword">test</span>） ：导出的数据库；<br><span class="hljs-keyword">test</span>（第二个<span class="hljs-keyword">test</span>）：导出的数据表；<br>-t ：不导出create 语句，只要数据；<br>-T 指定到处的位置，注意目录权限，注意这里只到目录，默认名字是table_name.txt；<br>–fields-terminated-<span class="hljs-keyword">by</span>=’,’：字段分割符；<br>–fields-enclosed-<span class="hljs-keyword">by</span>=’’ ：字段引号；<br><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;更多请阅读：<a href="https://www.yiibai.com/mysql/export-table-to-csv.html">https://www.yiibai.com/mysql/export-table-to-csv.html</a> </p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP8配置opcache并开启jit</title>
    <link href="/2022/06/15/PHP8%E9%85%8D%E7%BD%AEopcache%E5%B9%B6%E5%BC%80%E5%90%AFjit/"/>
    <url>/2022/06/15/PHP8%E9%85%8D%E7%BD%AEopcache%E5%B9%B6%E5%BC%80%E5%90%AFjit/</url>
    
    <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>php编译参数需要加上–enable-opcache </p><p>配置文件如下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">zend_extension</span>=opcache.so<br>[opcache]<br>opcache.<span class="hljs-attribute">enable</span>=1<br><br>opcache.<span class="hljs-attribute">enable_cli</span>=1<br><br>opcache.<span class="hljs-attribute">memory_consumption</span>=528<br><br>opcache.<span class="hljs-attribute">interned_strings_buffer</span>=8<br><br>opcache.<span class="hljs-attribute">max_accelerated_files</span>=10000<br><br>opcache.<span class="hljs-attribute">revalidate_freq</span>=1<br><br>opcache.<span class="hljs-attribute">fast_shutdown</span>=1<br><br>opcache.jit_buffer_size  # 开启jit，设置buffer_size<br><br></code></pre></td></tr></table></figure><p>请注意，如果您通过命令行运行PHP，则还可以通过-d标志传递这些选项，而不是将它们添加到php.ini：</p><p>php -dopcache.enable&#x3D;1 -dopcache.jit_buffer_size&#x3D;100M<br>如果不包含此伪指令，那么默认值将设置为0，并且JIT将不会运行。如果要在CLI脚本中测试JIT，则需要使用opcache.enable_cli来启用opcache：</p><p>php -dopcache.enable_cli&#x3D;1 -dopcache.jit_buffer_size&#x3D;100M<br>opcache.enable和opcache.enable_cli之间的区别是，如果要运行，例如内置的PHP服务器则应该使用前者。如果您实际上正在运行CLI脚本，则需要opcache.enable_cli。</p><p>在继续之前，让我们确保JIT确实有效，创建一个可通过浏览器或CLI访问的PHP脚本（取决于您测试JIT的位置），并查看以下输出opcache_get_status()：</p><p>var_dump(opcache_get_status()[‘jit’]);</p><h1 id="清除opcache"><a href="#清除opcache" class="headerlink" title="清除opcache"></a>清除opcache</h1><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">opcache_reset</span> <span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-title">opcache_invalidate</span> <span class="hljs-params">()</span> </span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>a标签的download属性</title>
    <link href="/2022/06/14/a%E6%A0%87%E7%AD%BE%E7%9A%84download%E5%B1%9E%E6%80%A7/"/>
    <url>/2022/06/14/a%E6%A0%87%E7%AD%BE%E7%9A%84download%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<p>a标签加上downlaod属性后，就可完成对href属性链接文件的下载，但仅仅是限于同源文件，如果是非同源，download属性会失效。没有download属性的时候，a标签的默认行为是链接跳转进行预览，而针对浏览无法预览的文件，也可达到下载的效果。怎么解决下载非同源文件的问题？？ 例如image图片</p><p>方法： 通过canvas绘制，生成临时路径 (</p><p>data协议路径  &#x2F;&#x2F; data:image&#x2F;jpeg;base64,&#x2F;9j&#x2F;4AAQSkZJRgABAQ…9oADAMBAAIRAxEAPwD&#x2F;AD&#x2F;6AP&#x2F;Z”)，这个路径就是一个同源路径，然后传入下载函数进行下载。 </p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">let</span> img = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Image()</span>;<br>img.set<span class="hljs-constructor">Attribute(&#x27;<span class="hljs-params">crossOrigin</span>&#x27;, &#x27;<span class="hljs-params">anonymous</span>&#x27;)</span><br>img.src = data.entry;<br>img.onload = <span class="hljs-keyword">function</span>(data) &#123;<br>    <span class="hljs-keyword">let</span> canvas = document.create<span class="hljs-constructor">Element(&#x27;<span class="hljs-params">canvas</span>&#x27;)</span>;<br>    canvas.width = img.width;<br>    canvas.height = img.height;<br>    <span class="hljs-keyword">let</span> context = canvas.get<span class="hljs-constructor">Context(&#x27;2d&#x27;)</span>;<br>    context.draw<span class="hljs-constructor">Image(<span class="hljs-params">img</span>, 0, 0, <span class="hljs-params">canvas</span>.<span class="hljs-params">width</span>, <span class="hljs-params">canvas</span>.<span class="hljs-params">height</span>)</span>;<br>    <span class="hljs-keyword">let</span> url = canvas.<span class="hljs-keyword">to</span><span class="hljs-constructor">DataURL(&#x27;<span class="hljs-params">image</span><span class="hljs-operator">/</span><span class="hljs-params">png</span>&#x27;)</span>;<br>    down<span class="hljs-constructor">LoadByLink(<span class="hljs-params">url</span>,<span class="hljs-string">&quot;小程序码&quot;</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sas">const downLoadByLink = (url, <span class="hljs-keyword">filename</span>) =&gt;&#123;<br>    //如果提供<span class="hljs-keyword">filename</span>，则<span class="hljs-keyword">filename</span>需要包含扩展名<br>    var <span class="hljs-keyword">link</span>,<br>        evt;<br>    <br>    <span class="hljs-keyword">link</span> = document.createElement(<span class="hljs-string">&#x27;a&#x27;</span>);<br>    <span class="hljs-keyword">link</span>.href = url;<br>    <span class="hljs-keyword">filename</span> <span class="hljs-variable">&amp;&amp;</span> <span class="hljs-keyword">link</span>.setAttribute(<span class="hljs-string">&#x27;download&#x27;</span>, <span class="hljs-keyword">filename</span>);<br>    <span class="hljs-keyword">if</span>(document.fireEvent) &#123;<br>        <span class="hljs-keyword">window</span>.<span class="hljs-meta">open</span>(<span class="hljs-keyword">link</span>.href);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        evt = document.createEvent(<span class="hljs-string">&#x27;MouseEvents&#x27;</span>);<br>        evt.initEvent(<span class="hljs-string">&#x27;click&#x27;</span>, true, true);<br>        <span class="hljs-keyword">link</span>.dispatchEvent(evt);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>golang 终止协程</title>
    <link href="/2022/06/14/golang%20%E7%BB%88%E6%AD%A2%E5%8D%8F%E7%A8%8B/"/>
    <url>/2022/06/14/golang%20%E7%BB%88%E6%AD%A2%E5%8D%8F%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="1-手动终止"><a href="#1-手动终止" class="headerlink" title="1.手动终止"></a>1.手动终止</h2><p>调用 <code>runtime.Goexit()</code> 来手动终止协程</p><p>goroutine作为Golang并发的核心，我们不仅要关注它们的创建和管理，当然还要关注如何合理的退出这些协程，不（合理）退出不然可能会造成阻塞、panic、程序行为异常、数据结果不正确等问题。</p><h2 id="2-1-使用for-range退出"><a href="#2-1-使用for-range退出" class="headerlink" title="2.1 使用for-range退出"></a>2.1 使用for-range退出</h2><p><code>for-range</code>是使用频率很高的结构，常用它来遍历数据，**<code>range</code>能够感知channel的关闭，当channel被发送数据的协程关闭时，range就会结束<strong>，接着退出for循环。<br>它在并发中的使用场景是：</strong>当协程只从1个channel读取数据，然后进行处理，处理后协程退出。下面这个示例程序，当in通道被关闭时，协程可自动退出。**</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs awk">go <span class="hljs-keyword">func</span>(<span class="hljs-keyword">in</span> &lt;-chan int) &#123;<br>    <span class="hljs-regexp">//</span> Using <span class="hljs-keyword">for</span>-range to <span class="hljs-keyword">exit</span> goroutine<br>    <span class="hljs-regexp">//</span> range has the ability to detect the close/end of a channel<br>    <span class="hljs-keyword">for</span> x := range <span class="hljs-keyword">in</span> &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;Process %d\n&quot;</span>, x)<br>    &#125;<br>&#125;(inCh)<br></code></pre></td></tr></table></figure><h2 id="2-2使用-ok退出"><a href="#2-2使用-ok退出" class="headerlink" title="2.2使用,ok退出"></a>2.2使用,ok退出</h2><p><code>for-select</code>也是使用频率很高的结构，select提供了多路复用的能力，所以for-select可以让函数具有持续多路处理多个channel的能力。<strong>但select没有感知channel的关闭，这引出了2个问题</strong>：</p><p>1）继续在关闭的通道上读，会读到通道传输数据类型的零值。</p><p>2）继续在关闭的通道上写，将会panic。问题2可使用的原则是，通道只由发送方关闭，接收方不可关闭，即某个写通道只由使用该select的协程关闭，select中就不存在继续在关闭的通道上写数据的问题。</p><p>第一种：<strong>如果某个通道关闭后，需要退出协程，直接return即可</strong>。示例代码中，该协程需要从in通道读数据，还需要定时打印已经处理的数量，有2件事要做，所有不能使用for-range，需要使用for-select，当in关闭时，<code>ok=false</code>，我们直接返回。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">go <span class="hljs-keyword">func</span>() &#123;<br>    <span class="hljs-regexp">//</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">for</span>-select using ok to <span class="hljs-keyword">exit</span> goroutine<br>    <span class="hljs-keyword">for</span> &#123;<br>        select &#123;<br>        case x, ok := &lt;-<span class="hljs-keyword">in</span>:<br>            <span class="hljs-keyword">if</span> !ok &#123;<br>                return<br>            &#125;<br>            fmt.Printf(<span class="hljs-string">&quot;Process %d\n&quot;</span>, x)<br>            processedCnt++<br>        case &lt;-t.C:<br>            fmt.Printf(<span class="hljs-string">&quot;Working, processedCnt = %d\n&quot;</span>, processedCnt)<br>        &#125;<br>    &#125;<br>&#125;()<br></code></pre></td></tr></table></figure><p>第二种：如果<strong>某个通道关闭了，不再处理该通道，而是继续处理其他case</strong>，退出是等待所有的可读通道关闭。我们需要<strong>使用select的一个特征：select不会在nil的通道上进行等待</strong>。这种情况，把只读通道设置为nil即可解决。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">go <span class="hljs-keyword">func</span>() &#123;<br>    <span class="hljs-regexp">//</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">for</span>-select using ok to <span class="hljs-keyword">exit</span> goroutine<br>    <span class="hljs-keyword">for</span> &#123;<br>        select &#123;<br>        case x, ok := &lt;-in1:<br>            <span class="hljs-keyword">if</span> !ok &#123;<br>                in1 = nil<br>            &#125;<br>            <span class="hljs-regexp">//</span> Process<br>        case y, ok := &lt;-in2:<br>            <span class="hljs-keyword">if</span> !ok &#123;<br>                in2 = nil<br>            &#125;<br>            <span class="hljs-regexp">//</span> Process<br>        case &lt;-t.C:<br>            fmt.Printf(<span class="hljs-string">&quot;Working, processedCnt = %d\n&quot;</span>, processedCnt)<br>        &#125;<br><br>        <span class="hljs-regexp">//</span> If both <span class="hljs-keyword">in</span> channel are closed, goroutine <span class="hljs-keyword">exit</span><br>        <span class="hljs-keyword">if</span> in1 == nil &amp;&amp; in2 == nil &#123;<br>            return<br>        &#125;<br>    &#125;<br>&#125;()<br></code></pre></td></tr></table></figure><h2 id="2-3使用退出通道退出"><a href="#2-3使用退出通道退出" class="headerlink" title="2.3使用退出通道退出"></a>2.3使用退出通道退出</h2><p><strong>使用<code>,ok</code>来退出使用for-select协程，解决是当读入数据的通道关闭时，没数据读时程序的正常结束</strong>。想想下面这2种场景，<code>,ok</code>还能适用吗？</p><ol><li>接收的协程要退出了，如果它直接退出，不告知发送协程，发送协程将阻塞。</li><li>启动了一个工作协程处理数据，如何通知它退出？</li></ol><p><strong>使用一个专门的通道，发送退出的信号，可以解决这类问题</strong>。以第2个场景为例，协程入参包含一个停止通道<code>stopCh</code>，当<code>stopCh</code>被关闭，<code>case &lt;-stopCh</code>会执行，直接返回即可。</p><p>当我启动了100个worker时，只要<code>main()</code>执行关闭stopCh，每一个worker都会都到信号，进而关闭。如果<code>main()</code>向stopCh发送100个数据，这种就低效了。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">worker</span><span class="hljs-params">(stopCh &lt;-<span class="hljs-keyword">chan</span> <span class="hljs-keyword">struct</span>&#123;&#125;)</span></span> &#123;<br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;worker exit&quot;</span>)<br>        <span class="hljs-comment">// Using stop channel explicit exit</span><br>        <span class="hljs-keyword">for</span> &#123;<br>            <span class="hljs-keyword">select</span> &#123;<br>            <span class="hljs-keyword">case</span> &lt;-stopCh:<br>                fmt.Println(<span class="hljs-string">&quot;Recv stop signal&quot;</span>)<br>                <span class="hljs-keyword">return</span><br>            <span class="hljs-keyword">case</span> &lt;-t.C:<br>                fmt.Println(<span class="hljs-string">&quot;Working .&quot;</span>)<br>            &#125;<br>        &#125;<br>    &#125;()<br>    <span class="hljs-keyword">return</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ol><li>发送协程主动关闭通道，接收协程不关闭通道。技巧：把接收方的通道入参声明为只读(<code>&lt;-chan</code>)，如果接收协程关闭只读协程，编译时就会报错。</li><li>协程处理1个通道，并且是读时，协程优先使用<code>for-range</code>，因为<code>range</code>可以关闭通道的关闭自动退出协程。</li><li><code>,ok</code>可以处理多个读通道关闭，需要关闭当前使用<code>for-select</code>的协程。</li><li>显式关闭通道<code>stopCh</code>可以处理主动通知协程退出的场景。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Golang fmt.Scan获取命令行输入（八）｜Go主题月</title>
    <link href="/2022/06/14/Golang%20fmt.Scan%E8%8E%B7%E5%8F%96%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%85%A5%EF%BC%88%E5%85%AB%EF%BC%89%EF%BD%9CGo%E4%B8%BB%E9%A2%98%E6%9C%88/"/>
    <url>/2022/06/14/Golang%20fmt.Scan%E8%8E%B7%E5%8F%96%E5%91%BD%E4%BB%A4%E8%A1%8C%E8%BE%93%E5%85%A5%EF%BC%88%E5%85%AB%EF%BC%89%EF%BD%9CGo%E4%B8%BB%E9%A2%98%E6%9C%88/</url>
    
    <content type="html"><![CDATA[<p>Golang 本身十分轻量级，运行效率极高，同时对并发编程有着原生的支持，从而能更好的利用多核处理器。 这使得Golang对微服务开发具有先天的优势</p><p>常见的程序触发形式有<code>api 调用</code>，<code>命令行执行</code>。而在命令行执行中，用户输入执行参数的获取至关重要。 下面就来详细讲一讲</p><p>Golang 语言<code>fmt</code>包下有<code>fmt.Scan</code>、<code>fmt.Scanf</code>、<code>fmt.Scanln</code>三个函数，可以在程序运行过程中从标准输入获取用户的输入。</p><h2 id="fmt-Scan"><a href="#fmt-Scan" class="headerlink" title="fmt.Scan"></a>fmt.Scan</h2><p>函数调用语法：</p><blockquote><p>func Scan(a …interface{}) (n int, err error)</p></blockquote><ul><li><code>Scan</code> 从命令行输入扫描文本，读取由<code>空白符分隔</code>的值 传递到本<code>函数参数</code>中，换行符视为空白符。</li><li>函数返回<code>成功扫描数据个数</code>和<code>执行遇到的任何错误</code>。如果读取的数据个数比参数少，会抛出错误。</li></ul><p>具体代码示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> (<br>        name    <span class="hljs-type">string</span><br>        age     <span class="hljs-type">int</span><br>        is_marry <span class="hljs-type">bool</span><br>    )<br>    <br>    fmt.Scan(&amp;name, &amp;age, &amp;is_marry)<br>    fmt.Printf(<span class="hljs-string">&quot;获取结果 name:%s age:%d is_marry:%t \n&quot;</span>, name, age, is_marry)<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>将上面的代码编译后在终端执行，在终端依次输入<code>韩韩、18、false</code>使用空格分隔。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs md">$ ./scan<span class="hljs-emphasis">_demo </span><br><span class="hljs-emphasis">韩韩 18 false</span><br><span class="hljs-emphasis">获取结果 name:韩韩 age:18 is_</span>marry:false<br>复制代码<br></code></pre></td></tr></table></figure><p>fmt.Scan从命令行输入中扫描用户输入的数据，将以空白符分隔的数据分别存入指定的参数。</p><h2 id="fmt-Scanf"><a href="#fmt-Scanf" class="headerlink" title="fmt.Scanf"></a>fmt.Scanf</h2><p>函数调用语法：</p><blockquote><p>func Scanf(format string, a …interface{}) (n int, err error)</p></blockquote><ul><li><code>Scanf</code> 从命令行输入扫描文本，根据 <code>format参数</code> 指定格式去读取由 <code>空白符分隔的值</code> 保存到传递给本函数参数中。</li><li>函数返回<code>成功扫描数据个数</code>和<code>执行遇到的任何错误</code>。</li></ul><p>代码示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-keyword">var</span> (<br>        name    <span class="hljs-type">string</span><br>        age     <span class="hljs-type">int</span><br>        is_marry <span class="hljs-type">bool</span><br>    )<br>    <br>    fmt.Scanf(<span class="hljs-string">&quot;1:%s 2:%d 3:%t&quot;</span>, &amp;name, &amp;age, &amp;is_marry)<br>    fmt.Printf(<span class="hljs-string">&quot;扫描结果 name:%s age:%d is_marry:%t \n&quot;</span>, name, age, is_marry)<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>将上面代码编译执行后，在终端按照指定的格式依次输入 韩韩、18、false。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs md">$ ./scan<span class="hljs-emphasis">_demo </span><br><span class="hljs-emphasis">1:韩韩 2:18 3:false</span><br><span class="hljs-emphasis">获取结果 name:韩韩 age:18 is_</span>marry:false<br>复制代码<br></code></pre></td></tr></table></figure><p>fmt.Scanf不同于fmt.Scan简单的以空格作为输入数据的分隔符，fmt.Scanf为输入数据指定了具体的输入内容格式，只有按照格式输入数据才会被扫描并存入对应变量。</p><h2 id="fmt-Scanln"><a href="#fmt-Scanln" class="headerlink" title="fmt.Scanln"></a>fmt.Scanln</h2><p>函数调用语法：</p><blockquote><p>func Scanln(a …interface{}) (n int, err error)</p></blockquote><ul><li>Scanln类似Scan，它在遇到换行时才停止扫描。最后一个数据后面必须有换行或者到达结束位置。</li><li>函数返回<code>成功扫描数据个数</code>和<code>执行遇到的任何错误</code>。</li></ul><p>具体代码示例如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go">    <span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">var</span> (<br>            name    <span class="hljs-type">string</span><br>            age     <span class="hljs-type">int</span><br>            is_marry <span class="hljs-type">bool</span><br>        )<br>        fmt.Scanln(&amp;name, &amp;age, &amp;is_marry)<br>        fmt.Printf(<span class="hljs-string">&quot;获取结果 name:%s age:%d is_marry:%t \n&quot;</span>, name, age, is_marry)<br>    &#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>将上面代码编译执行后，在终端依次输入韩韩、18、false使用空格分隔。</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs md">$ ./scan<span class="hljs-emphasis">_demo </span><br><span class="hljs-emphasis">韩韩 18 false</span><br><span class="hljs-emphasis">获取结果 name:韩韩 age:18 is_</span>marry:false<br>复制代码<br></code></pre></td></tr></table></figure><p>fmt.Scanln遇到回车就结束扫描了，这个比较常用。</p><h2 id="Fscan系列"><a href="#Fscan系列" class="headerlink" title="Fscan系列"></a>Fscan系列</h2><p>函数功能分别对应上述 <code>fmt.Scan、fmt.Scanf、fmt.Scanln</code> 函数， 只不过它们<code>并不从命令行</code>输入中读取数据而是从<code>io.Reader</code>中读取数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fscan</span><span class="hljs-params">(r io.Reader, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fscanln</span><span class="hljs-params">(r io.Reader, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fscanf</span><span class="hljs-params">(r io.Reader, format <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br>复制代码<br></code></pre></td></tr></table></figure><h2 id="Sscan系列"><a href="#Sscan系列" class="headerlink" title="Sscan系列"></a>Sscan系列</h2><p>函数功能分别对应上述 <code>fmt.Scan、fmt.Scanf、fmt.Scanln</code> 函数， 只不过它们<code>并不从命令行</code>输入中读取数据而是从 <code>指定字符串</code> 中读取数据。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sscan</span><span class="hljs-params">(str <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sscanln</span><span class="hljs-params">(str <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sscanf</span><span class="hljs-params">(str <span class="hljs-type">string</span>, format <span class="hljs-type">string</span>, a ...<span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p>作者：锐玩道<br>链接：<a href="https://juejin.cn/post/6945631500335480839">https://juejin.cn/post/6945631500335480839</a><br>来源：稀土掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>log4j里面的info，debug，error级别有什么区别</title>
    <link href="/2022/06/12/log4j%E9%87%8C%E9%9D%A2%E7%9A%84info%EF%BC%8Cdebug%EF%BC%8Cerror%E7%BA%A7%E5%88%AB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/06/12/log4j%E9%87%8C%E9%9D%A2%E7%9A%84info%EF%BC%8Cdebug%EF%BC%8Cerror%E7%BA%A7%E5%88%AB%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>一共分为五个级别：DEBUG、INFO、WARN、ERROR和FATAL。这五个级别是有顺序的，DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL，明白这一点很重要，这里Log4j有一个规则：假设设置了级别为P，如果发生了一个级别Q比P高，则可以启动，否则屏蔽掉。<br>DEBUG: 这个级别最低的东东，一般的来说，在系统实际运行过程中，一般都是不输出的。因此这个级别的信息，可以随意的使用，任何觉得有利于在调试时更详细的了解系统运行状态的东东，比如变量的值等等，都输出来看看也无妨。<br>INFO：这个应该用来反馈系统的当前状态给最终用户的，所以，在这里输出的信息，应该对最终用户具有实际意义，也就是最终用户要能够看得明白是什么意思才行。从某种角度上说，Info 输出的信息可以看作是软件产品的一部分（就像那些交互界面上的文字一样），所以需要谨慎对待，不可随便。<br>WARN、ERROR和FATAL：警告、错误、严重错误，这三者应该都在系统运行时检测到了一个不正常的状态，他们之间的区别，要区分还真不是那么简单的事情。我大致是这样区分的：<br>        所谓警告，应该是这个时候进行一些修复性的工作，应该还可以把系统恢复到正常状态中来，系统应该可以继续运行下去。<br>        所谓错误，就是说可以进行一些修复性的工作，但无法确定系统会正常的工作下去，系统在以后的某个阶段，很可能会因为当前的这个问题，导致一个无法修复的错误（例如宕机），但也可能一直工作到停止也不出现严重问题。<br>        所谓Fatal，那就是相当严重的了，可以肯定这种错误已经无法修复，并且如果系统继续运行下去的话，可以肯定必然会越来越乱。这时候采取的最好的措施不是试图将系统状态恢复到正常，而是尽可能地保留系统有效数据并停止运行。<br>        也就是说，选择 Warn、Error、Fatal 中的具体哪一个，是根据当前的这个问题对以后可能产生的影响而定的，如果对以后基本没什么影响，则警告之，如果肯定是以后要出严重问题的了，则Fatal之，拿不准会怎么样，则 Error 之。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go算法</title>
    <link href="/2022/06/11/Go%E7%AE%97%E6%B3%95/"/>
    <url>/2022/06/11/Go%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡"><a href="#冒泡" class="headerlink" title="冒泡"></a>冒泡</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">BubbleSort</span><span class="hljs-params">(list []<span class="hljs-type">int</span>)</span></span> []<span class="hljs-type">int</span> &#123;<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(list); i++ &#123;<br><span class="hljs-keyword">for</span> j := i + <span class="hljs-number">1</span>; j &lt; <span class="hljs-built_in">len</span>(list); j++ &#123;<br><span class="hljs-keyword">if</span> list[j] &gt; list[i] &#123;<br>list[i], list[j] = list[j], list[i]<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> list<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>list := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>&#125;<br>fmt.Println(BubbleSort(list))<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP算法</title>
    <link href="/2022/06/11/PHP%E7%AE%97%E6%B3%95/"/>
    <url>/2022/06/11/PHP%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-keyword">function</span> quickSort(<span class="hljs-variable">$arr</span>)<br>&#123;<br>  <span class="hljs-keyword">if</span> <span class="hljs-built_in">(count</span>(<span class="hljs-variable">$arr</span>) &lt;= <span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable">$key</span> = <span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$left</span> = [];<br>    <span class="hljs-variable">$right</span> = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$i</span> &lt;<span class="hljs-built_in"> count</span>(<span class="hljs-variable">$arr</span>); <span class="hljs-variable">$i</span>++) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>] &lt; <span class="hljs-variable">$key</span>) &#123;<br>        <span class="hljs-variable">$left</span>[] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$right</span>[] = <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$i</span>];<br>      &#125;<br>    &#125;<br>    <span class="hljs-variable">$left</span> = quickSort(<span class="hljs-variable">$left</span>);<br>    <span class="hljs-variable">$right</span> = quickSort(<span class="hljs-variable">$right</span>);<br>    <span class="hljs-keyword">return</span> array_merge(<span class="hljs-variable">$left</span>, [<span class="hljs-variable">$key</span>], <span class="hljs-variable">$right</span>);<br>  &#125;    <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="无限级分类"><a href="#无限级分类" class="headerlink" title="无限级分类"></a>无限级分类</h1><p>例如数据格式如下：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dart">$categories = [<br>  [<br>    <span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&#x27;parent_id&#x27;</span> =&gt; <span class="hljs-number">0</span>,<br>  ],<br>  [<br>    <span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-number">2</span>,<br>    <span class="hljs-string">&#x27;parent_id&#x27;</span> =&gt; <span class="hljs-number">1</span>,<br>  ],<br>  [<br>    <span class="hljs-string">&#x27;id&#x27;</span> =&gt; <span class="hljs-number">3</span>,<br>    <span class="hljs-string">&#x27;parent_id&#x27;</span> =&gt; <span class="hljs-number">2</span>,<br>  ]<br>];<br></code></pre></td></tr></table></figure><p>示例方法</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_tree</span>(<span class="hljs-params"><span class="hljs-variable">$data</span></span>) </span>&#123;<br>    <span class="hljs-variable">$items</span> = [];<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$data</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$v</span>)&#123;<br>        <span class="hljs-variable">$items</span>[<span class="hljs-variable">$v</span>[<span class="hljs-string">&#x27;id&#x27;</span>]] = <span class="hljs-variable">$v</span>;<br>    &#125;<br>    <span class="hljs-variable">$tree</span> = <span class="hljs-keyword">array</span>();<span class="hljs-comment">//格式化好的树</span><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$items</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$item</span>)<br>       <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$items</span>[<span class="hljs-variable">$item</span>[<span class="hljs-string">&#x27;parent_id&#x27;</span>]]))<br>             <span class="hljs-variable">$items</span>[<span class="hljs-variable">$item</span>[<span class="hljs-string">&#x27;parent_id&#x27;</span>]][<span class="hljs-string">&#x27;children&#x27;</span>][] = &amp;<span class="hljs-variable">$items</span>[<span class="hljs-variable">$item</span>[<span class="hljs-string">&#x27;id&#x27;</span>]];<br>       <span class="hljs-keyword">else</span>   <span class="hljs-variable">$tree</span>[] = &amp;<span class="hljs-variable">$items</span>[<span class="hljs-variable">$item</span>[<span class="hljs-string">&#x27;id&#x27;</span>]];<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$tree</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_tree</span>(<span class="hljs-params"><span class="hljs-variable">$categories</span>, <span class="hljs-variable">$parent_id</span> = <span class="hljs-number">0</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>  <span class="hljs-variable">$arr</span> = [];<br>  <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$categories</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$v</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$v</span>[<span class="hljs-string">&#x27;parent_id&#x27;</span>] == <span class="hljs-variable">$parent_id</span>) &#123;<br>      <span class="hljs-variable">$v</span>[<span class="hljs-string">&#x27;children&#x27;</span>] = <span class="hljs-title function_ invoke__">get_tree</span>(<span class="hljs-variable">$categories</span>, <span class="hljs-variable">$v</span>[<span class="hljs-string">&#x27;id&#x27;</span>]);<br>      <span class="hljs-variable">$arr</span>[] = <span class="hljs-variable">$v</span>;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$arr</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">array</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span> &#123;<br>  <span class="hljs-selector-attr">[0]</span>=&gt;<br>  <span class="hljs-built_in">array</span>(<span class="hljs-number">3</span>) &#123;<br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;id&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;parent_id&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">int</span>(<span class="hljs-number">0</span>)<br>    <span class="hljs-selector-attr">[<span class="hljs-string">&quot;children&quot;</span>]</span>=&gt;<br>    <span class="hljs-built_in">array</span>(<span class="hljs-number">1</span>) &#123;<br>      <span class="hljs-selector-attr">[0]</span>=&gt;<br>      <span class="hljs-built_in">array</span>(<span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-selector-attr">[<span class="hljs-string">&quot;id&quot;</span>]</span>=&gt;<br>        <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>)<br>        <span class="hljs-selector-attr">[<span class="hljs-string">&quot;parent_id&quot;</span>]</span>=&gt;<br>        <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)<br>        <span class="hljs-selector-attr">[<span class="hljs-string">&quot;children&quot;</span>]</span>=&gt;<br>        <span class="hljs-built_in">array</span>(<span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-selector-attr">[0]</span>=&gt;<br>          <span class="hljs-built_in">array</span>(<span class="hljs-number">3</span>) &#123;<br>            <span class="hljs-selector-attr">[<span class="hljs-string">&quot;id&quot;</span>]</span>=&gt;<br>            <span class="hljs-built_in">int</span>(<span class="hljs-number">3</span>)<br>            <span class="hljs-selector-attr">[<span class="hljs-string">&quot;parent_id&quot;</span>]</span>=&gt;<br>            <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>)<br>            <span class="hljs-selector-attr">[<span class="hljs-string">&quot;children&quot;</span>]</span>=&gt;<br>            <span class="hljs-built_in">array</span>(<span class="hljs-number">0</span>) &#123;<br>            &#125;<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="拼手气分红包分配"><a href="#拼手气分红包分配" class="headerlink" title="拼手气分红包分配"></a>拼手气分红包分配</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 拼手气红包分配算法</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> $money  金额</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> $count 数量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">redAlgorithm</span>(<span class="hljs-params"><span class="hljs-variable">$money</span>, <span class="hljs-variable">$count</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">// 参数校验</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$count</span> * <span class="hljs-number">0.01</span> &gt; <span class="hljs-variable">$money</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">\Exception</span>(<span class="hljs-string">&quot;单个红包不能低于0.01元&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 存放随机红包</span><br>    <span class="hljs-variable">$redpack</span> = [];<br>    <span class="hljs-comment">// 未分配的金额</span><br>    <span class="hljs-variable">$surplus</span> = <span class="hljs-variable">$money</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">1</span>; <span class="hljs-variable">$i</span> &lt;= <span class="hljs-variable">$count</span>; <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-comment">// 安全金额</span><br>        <span class="hljs-variable">$safeMoney</span> = <span class="hljs-variable">$surplus</span> - (<span class="hljs-variable">$count</span> - <span class="hljs-variable">$i</span>) * <span class="hljs-number">0.01</span>;<br>        <span class="hljs-comment">// 平均金额</span><br>        <span class="hljs-variable">$avg</span> = <span class="hljs-variable">$i</span> == <span class="hljs-variable">$count</span> ? <span class="hljs-variable">$safeMoney</span> : <span class="hljs-title function_ invoke__">bcdiv</span>(<span class="hljs-variable">$safeMoney</span>, (<span class="hljs-variable">$count</span> - <span class="hljs-variable">$i</span>), <span class="hljs-number">2</span>);<br>        <span class="hljs-comment">// 随机红包</span><br>        <span class="hljs-variable">$rand</span> = <span class="hljs-variable">$avg</span> &gt; <span class="hljs-number">0.01</span> ? <span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">1</span>, <span class="hljs-variable">$avg</span> * <span class="hljs-number">100</span>) / <span class="hljs-number">100</span> : <span class="hljs-number">0.01</span>;<br>        <span class="hljs-comment">// 剩余红包</span><br>        <span class="hljs-variable">$surplus</span> = <span class="hljs-title function_ invoke__">bcsub</span>(<span class="hljs-variable">$surplus</span>, <span class="hljs-variable">$rand</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$redpack</span>[] = <span class="hljs-variable">$rand</span>;<br>    &#125;<br>    <span class="hljs-comment">// 平分剩余红包</span><br>    <span class="hljs-variable">$avg</span> = <span class="hljs-title function_ invoke__">bcdiv</span>(<span class="hljs-variable">$surplus</span>, <span class="hljs-variable">$count</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$n</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$n</span> &lt; <span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$redpack</span>); <span class="hljs-variable">$n</span>++) &#123;<br>        <span class="hljs-variable">$redpack</span>[<span class="hljs-variable">$n</span>] = <span class="hljs-title function_ invoke__">bcadd</span>(<span class="hljs-variable">$redpack</span>[<span class="hljs-variable">$n</span>], <span class="hljs-variable">$avg</span>, <span class="hljs-number">2</span>);<br>        <span class="hljs-variable">$surplus</span> = <span class="hljs-title function_ invoke__">bcsub</span>(<span class="hljs-variable">$surplus</span>, <span class="hljs-variable">$avg</span>, <span class="hljs-number">2</span>);<br>    &#125;<br>    <span class="hljs-comment">// 如果还有红包没有分配完时继续分配</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$surplus</span> &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 随机抽取分配好的红包，将剩余金额分配进去</span><br>        <span class="hljs-variable">$keys</span> = <span class="hljs-title function_ invoke__">array_rand</span>(<span class="hljs-variable">$redpack</span>, <span class="hljs-variable">$surplus</span> * <span class="hljs-number">100</span>);<br>        <span class="hljs-comment">// array_rand 第二个参数为 1 时返回的是下标而不是数组</span><br>        <span class="hljs-variable">$keys</span> = <span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$keys</span>) ? <span class="hljs-variable">$keys</span> : [<span class="hljs-variable">$keys</span>];<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$keys</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>) &#123;<br>            <span class="hljs-variable">$redpack</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-title function_ invoke__">bcadd</span>(<span class="hljs-variable">$redpack</span>[<span class="hljs-variable">$key</span>], <span class="hljs-number">0.01</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-variable">$surplus</span> = <span class="hljs-title function_ invoke__">bcsub</span>(<span class="hljs-variable">$surplus</span>, <span class="hljs-number">0.01</span>, <span class="hljs-number">2</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">// 红包分配结果</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$redpack</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>原文地址:<a href="https://www.itqaq.com/index/art/352.html">https://www.itqaq.com/index/art/352.html</a></p><h1 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h1><h2 id="雪花算法"><a href="#雪花算法" class="headerlink" title="雪花算法"></a>雪花算法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Idcreate</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">EPOCH</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//开始时间,固定一个小于当前时间的毫秒数</span><br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">max12bit</span> = <span class="hljs-number">1024</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">max41bit</span> = <span class="hljs-number">1099511627888</span>;<br>    <span class="hljs-built_in">static</span> <span class="hljs-variable">$machineId</span> = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">machineId</span>(<span class="hljs-params"><span class="hljs-variable">$mId</span> = <span class="hljs-number">0</span></span>) </span>&#123;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$machineId</span> = <span class="hljs-variable">$mId</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createOnlyId</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 时间戳 42字节</span><br>        <span class="hljs-variable">$time</span> = <span class="hljs-title function_ invoke__">floor</span>(<span class="hljs-title function_ invoke__">microtime</span>(<span class="hljs-literal">true</span>) * <span class="hljs-number">1000</span>);<br>        <span class="hljs-comment">// 当前时间 与 开始时间 差值</span><br>        <span class="hljs-variable">$time</span> -= <span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">EPOCH</span>;<br>        <span class="hljs-comment">// 二进制的 毫秒级时间戳</span><br>        <span class="hljs-variable">$base</span> = <span class="hljs-title function_ invoke__">decbin</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">max41bit</span> + <span class="hljs-variable">$time</span>);<br>        <span class="hljs-comment">// 机器id  10 字节</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">self</span> ::<span class="hljs-variable">$machineId</span>) &#123;<br>            <span class="hljs-variable">$machineid</span> = <span class="hljs-built_in">self</span> ::<span class="hljs-variable">$machineId</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$machineid</span> = <span class="hljs-title function_ invoke__">str_pad</span>(<span class="hljs-title function_ invoke__">decbin</span>(<span class="hljs-built_in">self</span> ::<span class="hljs-variable">$machineId</span>),<span class="hljs-number">10</span>,<span class="hljs-string">&quot;0&quot;</span>,STR_PAD_LEFT);<br>        &#125;<br>        <span class="hljs-variable">$random</span> = <span class="hljs-title function_ invoke__">str_pad</span>(<span class="hljs-title function_ invoke__">decbin</span>(<span class="hljs-title function_ invoke__">mt_rand</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">self</span>::<span class="hljs-variable constant_">max12bit</span>)),<span class="hljs-number">12</span>,<span class="hljs-string">&quot;0&quot;</span>,STR_PAD_LEFT);<br>        <span class="hljs-comment">// 拼接</span><br>        <span class="hljs-variable">$base</span> = <span class="hljs-variable">$base</span> . <span class="hljs-variable">$machineid</span> . <span class="hljs-variable">$random</span>;<br>        <span class="hljs-comment">// 转化为 十进制 返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">bindec</span>(<span class="hljs-variable">$base</span>);<br>    &#125;<br>&#125;<br><span class="hljs-variable">$obj</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Idcreate</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt;<span class="hljs-number">100</span> ; <span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$obj</span>-&gt;<span class="hljs-title function_ invoke__">createOnlyId</span>().<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="PHP-Redis生成唯一序列"><a href="#PHP-Redis生成唯一序列" class="headerlink" title="PHP+Redis生成唯一序列"></a>PHP+Redis生成唯一序列</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$prefix</span> = ‘DS’; <span class="hljs-regexp">//</span>标题前缀<br><br><span class="hljs-variable">$currentCycle</span> = date(‘ymd‘); <span class="hljs-regexp">//</span> 日期拼接成中间<br><span class="hljs-variable">$key</span> = <span class="hljs-string">&quot;codegen:&#123;$currentCycle&#125;:&#123;$prefix&#125;&quot;</span>; <span class="hljs-regexp">//</span> 生成redis健  健名前缀按照天来更新<br><span class="hljs-variable">$Redis</span> = <span class="hljs-variable">$this</span>-&gt;Redis-&gt;getRedis(); <span class="hljs-regexp">//</span> 连接redis<br><span class="hljs-variable">$codeNum</span> = <span class="hljs-variable">$Redis</span>-&gt;incr(<span class="hljs-variable">$key</span>);  <span class="hljs-regexp">//</span> 这里用incr 方法来获取当前自增数量 incr是原子性的 能处理并发<br><span class="hljs-regexp">//</span> 为<span class="hljs-number">1</span>说明是当天的第一条，设置有效期，删除过期key<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$codeNum</span> == <span class="hljs-number">1</span>) &#123;<br><br>　　<span class="hljs-regexp">//</span> 设置有效期<span class="hljs-number">1</span>天<br>　　　　<span class="hljs-variable">$expireAt</span> = strtotime(date(<span class="hljs-string">&#x27;Y-m-d 00:00:00&#x27;</span>, strtotime(<span class="hljs-string">&quot;+1 day&quot;</span>)));<br>　　　　<span class="hljs-variable">$Redis</span>-&gt;expireAt(<span class="hljs-variable">$key</span>, <span class="hljs-variable">$expireAt</span>);<br>　　<span class="hljs-regexp">//</span> 删除过期key，加锁，一周期只删一次 setnx锁设置键不存在则设置并返回<span class="hljs-number">1</span>，否则返回<span class="hljs-number">0</span><br>　　<span class="hljs-keyword">if</span> (<span class="hljs-variable">$Redis</span>-&gt;setnx(<span class="hljs-string">&quot;codegen:&#123;$currentCycle&#125;:rmLock&quot;</span>, <span class="hljs-number">1</span>)) &#123;<br>　　　　<span class="hljs-variable">$lastCycle</span> = date(<span class="hljs-variable">$dateFormat</span>, strtotime(<span class="hljs-string">&quot;-1 day&quot;</span>));<br>　　　　<span class="hljs-variable">$keys</span> = <span class="hljs-variable">$Redis</span>-&gt;keys(<span class="hljs-string">&quot;codegen:&#123;$lastCycle&#125;:*&quot;</span>);<br>　　　　foreach (<span class="hljs-variable">$keys</span> as <span class="hljs-variable">$k</span>) &#123;<br>　　　　<span class="hljs-variable">$Redis</span>-&gt;del(<span class="hljs-variable">$k</span>);<br>　　&#125;<br><br>&#125;<br><br><span class="hljs-variable">$codeNum</span> = str_pad(<span class="hljs-variable">$codeNum</span>, <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;0&#x27;</span>, STR_PAD_LEFT);  <span class="hljs-regexp">//</span> 拼成固定长度  比如  <span class="hljs-number">1</span>  <span class="hljs-number">100</span>  返回 <span class="hljs-number">0001</span>  <span class="hljs-number">0100</span><br><br>return <span class="hljs-variable">$prefix</span> . <span class="hljs-variable">$codeNum</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Golang判断字符串是否是纯数字</title>
    <link href="/2022/06/11/Golang%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%98%AF%E7%BA%AF%E6%95%B0%E5%AD%97/"/>
    <url>/2022/06/11/Golang%E5%88%A4%E6%96%AD%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF%E5%90%A6%E6%98%AF%E7%BA%AF%E6%95%B0%E5%AD%97/</url>
    
    <content type="html"><![CDATA[<p>提供了两个方法，一个逐字符判断，一个使用正则</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsNumeric</span><span class="hljs-params">(str <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> str &#123;<br><span class="hljs-keyword">if</span> !unicode.IsNumber(v) &#123;    <span class="hljs-comment">// IsNumber判断是否为一个数字字符 (类别 N)</span><br><span class="hljs-comment">// if !unicode.IsDigit(v) &#123; // IsDigit 判断 r 是否为一个十进制的数字字符</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><br># https:<span class="hljs-comment">//www.coder.work/article/193576</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">IsNumericP</span><span class="hljs-params">(str <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br><span class="hljs-comment">// 使用正则判断是不是数字字符串</span><br><span class="hljs-keyword">return</span> regexp.MustCompile(<span class="hljs-string">`^[0-9]+$`</span>).MatchString(str)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>示例</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">func <span class="hljs-selector-tag">main</span>() &#123;<br>str := <span class="hljs-string">&quot;12345&quot;</span><br>str1 := <span class="hljs-string">&quot;123rr&quot;</span><br>// fmt.<span class="hljs-built_in">Println</span>(<span class="hljs-built_in">IsNumeric</span>(str), <span class="hljs-built_in">IsNumeric</span>(str1)) // true, false<br>fmt.<span class="hljs-built_in">Println</span>(<span class="hljs-built_in">IsNumericP</span>(str), <span class="hljs-built_in">IsNumericP</span>(str)) // true, false<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>详解PV、UV、VV、IP及其关系与计算</title>
    <link href="/2022/06/11/%E8%AF%A6%E8%A7%A3PV%E3%80%81UV%E3%80%81VV%E3%80%81IP%E5%8F%8A%E5%85%B6%E5%85%B3%E7%B3%BB%E4%B8%8E%E8%AE%A1%E7%AE%97/"/>
    <url>/2022/06/11/%E8%AF%A6%E8%A7%A3PV%E3%80%81UV%E3%80%81VV%E3%80%81IP%E5%8F%8A%E5%85%B6%E5%85%B3%E7%B3%BB%E4%B8%8E%E8%AE%A1%E7%AE%97/</url>
    
    <content type="html"><![CDATA[<p><strong>一、什么是PV？</strong></p><p>  <strong>PV即Page View，网站浏览量，指页面浏览的次数，用以衡量网站用户访问的网页数量。****用户每次打开一个页面便记录1次PV，多次打开同一页面则浏览量累计。一般来说，PV与来访者的数量成正比，但是PV并不直接决定页面的真实来访者数量，如同一个来访者通过不断的刷新页面，也可以制造出非常高的PV。具体的说，PV值就是所有访问者在24小时（0点到24点）内看了某个网站多少个页面或某个网页多少次。PV是指页面刷新的次数，每一次页面刷新，就算做一次PV流量。</strong></p><p>  <strong>度量方法就是从浏览器发出一个对网络服务器的请求（Request），网络服务器接到这个请求后，会将该请求对应的一个网页（Page）发送给浏览器，从而产生了一个PV。那么在这里只要是这个请求发送给了浏览器，无论这个页面是否完全打开（下载完成），那么都是应当计为1个PV。</strong></p><p><strong>二、什么是UV？</strong></p><p> <strong>UV即Unique Visitor，独立访客数，指一天内访问某站点的人数，以cookie为依据。****1天内同一访客的多次访问只记录为一个访客。通过IP和cookie是判断UV值的两种方式。</strong></p><p><strong>用Cookie分析UV值</strong></p><p> <strong>当客户端第一次访问某个网站服务器的时候，网站服务器会给这个客户端的电脑发出一个Cookie，通常放在这个客户端电脑的C盘当中。在这个Cookie中会分配一个独一无二的编号，这其中会记录一些访问服务器的信息，如访问时间，访问了哪些页面等等。当你下次再访问这个服务器的时候，服务器就可以直接从你的电脑中找到上一次放进去的Cookie文件，并且对其进行一些更新，但那个独一无二的编号是不会变的。</strong></p><p><strong>三、什么是VV？</strong></p><p> <strong>VV即Visit View，访客访问的次数，用以记录所有访客一天内访问量多少次网站。当访客完成所有的浏览并最终关掉该网站的所有页面时，便完成了一次访问，同一访客一天内可能有多次访问行为，访问次数累计。</strong></p><p><strong>四、什么是IP？</strong></p><p>**IP即独立IP数，指一天内使用不同IP地址的用户访问网站数量，同一IP无论访问了几个页面，独立的IP数均为1.**<strong>但是假如说两台机器访问而使用的是同一个IP，那么只能算是一个IP的访问。</strong></p><p><strong>IP和UV之间的数据不会有太大的差异，通常UV量和比IP量高出一点，每个UV相对于每个IP更准确地对应一个实际的浏览者。</strong></p><p><strong>①UV大于IP</strong></p><p><strong>这种情况就是在网吧、学校、公司等，公用相同IP的场所中不同的用户，或者多种不同浏览器访问您网站，那么UV数会大于IP数。</strong></p><p><strong>②UV小于IP</strong></p><p><strong>在家庭中大多数电脑使用ADSL拨号上网，所以同一个用户在家里不同时间访问您网站时，IP可能会不同，因为它会根据时间变动IP，即动态的IP地址，但是实际访客数唯一，便会出现UV数小于IP数。</strong></p><p><strong>五、实例说明</strong></p><p><strong>小明在家用ADSL拨号上网，早上8点访问了<a href="http://www.a.com下的2个页面，下午2点又访问了www.a.com3个页面。那么，对于www.a.com来讲，今天的PV、UV、VV、IP各项指标该如何计算呢？">www.a.com下的2个页面，下午2点又访问了www.a.com3个页面。那么，对于www.a.com来讲，今天的PV、UV、VV、IP各项指标该如何计算呢？</a></strong></p><p><strong>PV：5 PV指浏览量，因此PV指等于上午浏览的2个页面和下午浏览的3个页面之和；</strong></p><p><strong>UV：1 UV指独立访客数，因此一天内同一访客的多次访问只计为1个UV；</strong></p><p><strong>VV：1 VV指访客的访问次数，上午和下午分别有一次访问行为，因此VV为2</strong></p><p><strong>IP：2 IP为独立IP数，由于ADSL拨号上网每次都IP不同，因此独立IP数位2；</strong></p><p>本文出自 “<a href="http://linuxnote.blog.51cto.com/">Just For Fun!</a>” 博客，请务必保留此出处<a href="http://linuxnote.blog.51cto.com/9876511/1653958">http://linuxnote.blog.51cto.com/9876511/1653958</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 信号列表</title>
    <link href="/2022/06/11/Linux%20%E4%BF%A1%E5%8F%B7%E5%88%97%E8%A1%A8/"/>
    <url>/2022/06/11/Linux%20%E4%BF%A1%E5%8F%B7%E5%88%97%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<table><thead><tr><th>信号</th><th>取值</th><th>默认动作</th><th>含义（发出信号的原因）</th></tr></thead><tbody><tr><td>SIGHUP</td><td>1</td><td>Term</td><td>终端的挂断或进程死亡</td></tr><tr><td>SIGINT</td><td>2</td><td>Term</td><td>来自键盘的中断信号</td></tr><tr><td>SIGQUIT</td><td>3</td><td>Core</td><td>来自键盘的离开信号</td></tr><tr><td>SIGILL</td><td>4</td><td>Core</td><td>非法指令</td></tr><tr><td>SIGABRT</td><td>6</td><td>Core</td><td>来自 abort 的异常信号</td></tr><tr><td>SIGFPE</td><td>8</td><td>Core</td><td>浮点例外</td></tr><tr><td>SIGKILL</td><td>9</td><td>Term</td><td>杀死</td></tr><tr><td>SIGSEGV</td><td>11</td><td>Core</td><td>段非法错误 (内存引用无效)</td></tr><tr><td>SIGPIPE</td><td>13</td><td>Term</td><td>管道损坏：向一个没有读进程的管道写数据</td></tr><tr><td>SIGALRM</td><td>14</td><td>Term</td><td>来自 alarm 的计时器到时信号</td></tr><tr><td>SIGTERM</td><td>15</td><td>Term</td><td>终止</td></tr><tr><td>SIGUSR1</td><td>30,10,16</td><td>Term</td><td>用户自定义信号 1</td></tr><tr><td>SIGUSR2</td><td>31,12,17</td><td>Term</td><td>用户自定义信号 2</td></tr><tr><td>SIGCHLD</td><td>20,17,18</td><td>Ign</td><td>子进程停止或终止</td></tr><tr><td>SIGCONT</td><td>19,18,25</td><td>Cont</td><td>如果停止，继续执行</td></tr><tr><td>SIGSTOP</td><td>17,19,23</td><td>Stop</td><td>非来自终端的停止信号</td></tr><tr><td>SIGTSTP</td><td>18,20,24</td><td>Stop</td><td>来自终端的停止信号</td></tr><tr><td>SIGTTIN</td><td>21,21,26</td><td>Stop</td><td>后台进程读终端</td></tr><tr><td>SIGTTOU</td><td>22,22,27</td><td>Stop</td><td>后台进程写终端</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SIGBUS</td><td>10,7,10</td><td>Core</td><td>总线错误（内存访问错误）</td></tr><tr><td>SIGPOLL</td><td></td><td>Term</td><td>Pollable 事件发生 (Sys V)，与 SIGIO 同义</td></tr><tr><td>SIGPROF</td><td>27,27,29</td><td>Term</td><td>统计分布图用计时器到时</td></tr><tr><td>SIGSYS</td><td>12,-,12</td><td>Core</td><td>非法系统调用 (SVr4)</td></tr><tr><td>SIGTRAP</td><td>5</td><td>Core</td><td>跟踪 &#x2F; 断点自陷</td></tr><tr><td>SIGURG</td><td>16,23,21</td><td>Ign</td><td>socket 紧急信号 (4.2BSD)</td></tr><tr><td>SIGVTALRM</td><td>26,26,28</td><td>Term</td><td>虚拟计时器到时 (4.2BSD)</td></tr><tr><td>SIGXCPU</td><td>24,24,30</td><td>Core</td><td>超过 CPU 时限 (4.2BSD)</td></tr><tr><td>SIGXFSZ</td><td>25,25,31</td><td>Core</td><td>超过文件长度限制 (4.2BSD)</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>SIGIOT</td><td>6</td><td>Core</td><td>IOT 自陷，与 SIGABRT 同义</td></tr><tr><td>SIGEMT</td><td>7,-,7</td><td></td><td>Term</td></tr><tr><td>SIGSTKFLT</td><td>-,16,-</td><td>Term</td><td>协处理器堆栈错误 (不使用)</td></tr><tr><td>SIGIO</td><td>23,29,22</td><td>Term</td><td>描述符上可以进行 I&#x2F;O 操作</td></tr><tr><td>SIGCLD</td><td>-,-,18</td><td>Ign</td><td>与 SIGCHLD 同义</td></tr><tr><td>SIGPWR</td><td>29,30,19</td><td>Term</td><td>电力故障 (System V)</td></tr><tr><td>SIGINFO</td><td>29,-,-</td><td></td><td>与 SIGPWR 同义</td></tr><tr><td>SIGLOST</td><td>-,-,-</td><td>Term</td><td>文件锁丢失</td></tr><tr><td>SIGWINCH</td><td>28,28,20</td><td>Ign</td><td>窗口大小改变 (4.3BSD, Sun)</td></tr><tr><td>SIGUNUSED</td><td>-,31,-</td><td>Term</td><td>未使用信号 (will be SIGSYS)</td></tr></tbody></table><h2 id="非可靠信号"><a href="#非可靠信号" class="headerlink" title="非可靠信号"></a>非可靠信号</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>SIGHUP</td><td>连接断开</td></tr><tr><td>SIGINT</td><td>终端中断符</td></tr><tr><td>SIGQUIT</td><td>终端退出符</td></tr><tr><td>SIGILL</td><td>非法硬件指令</td></tr><tr><td>SIGTRAP</td><td>硬件故障</td></tr><tr><td>SIGABRT</td><td>异常终止 (abort)</td></tr><tr><td>SIGBUS</td><td>硬件故障</td></tr><tr><td>SIGFPE</td><td>算术异常</td></tr><tr><td>SIGKILL</td><td>终止</td></tr><tr><td>SIGUSR1</td><td>用户定义信号</td></tr><tr><td>SIGUSR2</td><td>用户定义信号</td></tr><tr><td>SIGSEGV</td><td>无效内存引用</td></tr><tr><td>SIGPIPE</td><td>写至无读进程的管道</td></tr><tr><td>SIGALRM</td><td>定时器超时 (alarm)</td></tr><tr><td>SIGTERM</td><td>终止</td></tr><tr><td>SIGCHLD</td><td>子进程状态改变</td></tr><tr><td>SIGCONT</td><td>使暂停进程继续</td></tr><tr><td>SIGSTOP</td><td>停止</td></tr><tr><td>SIGTSTP</td><td>终端停止符</td></tr><tr><td>SIGTTIN</td><td>后台读控制 tty</td></tr><tr><td>SIGTTOU</td><td>后台写向控制 tty</td></tr><tr><td>SIGURG</td><td>紧急情况 (套接字)</td></tr><tr><td>SIGXCPU</td><td>超过 CPU 限制 (setrlimit)</td></tr><tr><td>SIGXFSZ</td><td>超过文件长度限制 (setrlimit)</td></tr><tr><td>SIGVTALRM</td><td>虚拟时间闹钟 (setitimer)</td></tr><tr><td>SIGPROF</td><td>梗概时间超时 (setitimer)</td></tr><tr><td>SIGWINCH</td><td>终端窗口大小改变</td></tr><tr><td>SIGIO</td><td>异步 I&#x2F;O</td></tr><tr><td>SIGPWR</td><td>电源失效 &#x2F; 重启动</td></tr><tr><td>SIGSYS</td><td>无效系统调用</td></tr></tbody></table><h2 id="可靠信号"><a href="#可靠信号" class="headerlink" title="可靠信号"></a>可靠信号</h2><table><thead><tr><th>名称</th><th>用户自定义</th></tr></thead><tbody><tr><td>SIGRTMIN</td><td></td></tr><tr><td>SIGRTMIN+1</td><td></td></tr><tr><td>SIGRTMIN+2</td><td></td></tr><tr><td>SIGRTMIN+3</td><td></td></tr><tr><td>SIGRTMIN+4</td><td></td></tr><tr><td>SIGRTMIN+5</td><td></td></tr><tr><td>SIGRTMIN+6</td><td></td></tr><tr><td>SIGRTMIN+7</td><td></td></tr><tr><td>SIGRTMIN+8</td><td></td></tr><tr><td>SIGRTMIN+9</td><td></td></tr><tr><td>SIGRTMIN+10</td><td></td></tr><tr><td>SIGRTMIN+11</td><td></td></tr><tr><td>SIGRTMIN+12</td><td></td></tr><tr><td>SIGRTMIN+13</td><td></td></tr><tr><td>SIGRTMIN+14</td><td></td></tr><tr><td>SIGRTMIN+15</td><td></td></tr><tr><td>SIGRTMAX-14</td><td></td></tr><tr><td>SIGRTMAX-13</td><td></td></tr><tr><td>SIGRTMAX-12</td><td></td></tr><tr><td>SIGRTMAX-11</td><td></td></tr><tr><td>SIGRTMAX-10</td><td></td></tr><tr><td>SIGRTMAX-9</td><td></td></tr><tr><td>SIGRTMAX-8</td><td></td></tr><tr><td>SIGRTMAX-7</td><td></td></tr><tr><td>SIGRTMAX-6</td><td></td></tr><tr><td>SIGRTMAX-5</td><td></td></tr><tr><td>SIGRTMAX-4</td><td></td></tr><tr><td>SIGRTMAX-3</td><td></td></tr><tr><td>SIGRTMAX-2</td><td></td></tr><tr><td>SIGRTMAX-1</td><td></td></tr><tr><td>SIGRTMAX</td><td></td></tr></tbody></table><p>来源： <a href="https://wiki.swoole.com/#/other/signal">https://wiki.swoole.com/#/other/signal</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript使用 Fetch</title>
    <link href="/2022/05/22/JavaScript%E4%BD%BF%E7%94%A8%20Fetch/"/>
    <url>/2022/05/22/JavaScript%E4%BD%BF%E7%94%A8%20Fetch/</url>
    
    <content type="html"><![CDATA[<p><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a> 提供了一个 JavaScript接口，用于访问和操纵HTTP管道的部分，例如请求和响应。它还提供了一个全局 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch"><code>fetch()</code></a>方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源。</p><p>这种功能以前是使用  <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest"><code>XMLHttpRequest</code></a>实现的。Fetch提供了一个更好的替代方法，可以很容易地被其他技术使用，例如 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorker_API"><code>Service Workers</code></a>。Fetch还提供了单个逻辑位置来定义其他HTTP相关概念，例如CORS和HTTP的扩展。</p><p>请注意，<code>fetch</code>规范与<code>jQuery.ajax()</code>主要有两种方式的不同，牢记：</p><ul><li>当接收到一个代表错误的 HTTP 状态码时，从 <code>fetch()</code>返回的 Promise <strong>不会被标记为 reject，</strong> 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 <code>ok</code> 属性设置为 false ），仅当网络故障时或请求被阻止时，才会标记为 reject。</li><li>默认情况下，<code>fetch</code> <strong>不会从服务端发送或接收任何 cookies</strong>, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch%23%E5%8F%82%E6%95%B0">credentials</a> 选项）。自从2017年8月25日后，默认的credentials政策变更为<code>same-origin</code>Firefox也在61.0b13中改变默认值</li></ul><h2 id="进行-fetch-请求-参考"><a href="#进行-fetch-请求-参考" class="headerlink" title="进行 fetch 请求 参考"></a>进行 fetch 请求 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23%E8%BF%9B%E8%A1%8C_fetch_%E8%AF%B7%E6%B1%82">参考</a></h2><p>一个基本的 fetch请求设置起来很简单。看看下面的代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;http://example.com/movies.json&#x27;</span>)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>();<br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">myJson</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(myJson);<br>  &#125;);<br></code></pre></td></tr></table></figure><p>这里我们通过网络获取一个JSON文件并将其打印到控制台。最简单的用法是只提供一个参数用来指明想<code>fetch()</code>到的资源路径，然后返回一个包含响应结果的promise(一个 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response"><code>Response</code></a> 对象)。</p><p>当然它只是一个 HTTP 响应，而不是真的JSON。为了获取JSON的内容，我们需要使用  <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Body/json"><code>json()</code></a>方法（在<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Body"><code>Body</code></a>mixin 中定义，被 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Request"><code>Request</code></a> 和 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response"><code>Response</code></a> 对象实现）。</p><p><strong>注意</strong>：Body mixin 还有其他相似的方法，用于获取其他类型的内容。参考 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23Body">Body</a>。</p><p>最好使用符合<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/Security/CSP/CSP_policy_directives">内容安全策略 (CSP)</a>的链接而不是使用直接指向资源地址的方式来进行Fetch的请求。</p><h3 id="支持的请求参数参考"><a href="#支持的请求参数参考" class="headerlink" title="支持的请求参数参考"></a>支持的请求参数<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23%E6%94%AF%E6%8C%81%E7%9A%84%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0">参考</a></h3><p><code>fetch()</code> 接受第二个可选参数，一个可以控制不同配置的 <code>init</code> 对象：</p><p>参考 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch"><code>fetch()</code></a>，查看所有可选的配置和更多描述。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-comment">// Example POST method implementation:</span><br><br><span class="hljs-title function_">postData</span>(<span class="hljs-string">&#x27;http://example.com/answer&#x27;</span>, &#123;<span class="hljs-attr">answer</span>: <span class="hljs-number">42</span>&#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)) <span class="hljs-comment">// JSON from `response.json()` call</span><br>  .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(error))<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">postData</span>(<span class="hljs-params">url, data</span>) &#123;<br>  <span class="hljs-comment">// Default options are marked with *</span><br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(url, &#123;<br>    <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data), <span class="hljs-comment">// must match &#x27;Content-Type&#x27; header</span><br>    <span class="hljs-attr">cache</span>: <span class="hljs-string">&#x27;no-cache&#x27;</span>, <span class="hljs-comment">// *default, no-cache, reload, force-cache, only-if-cached</span><br>    <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;same-origin&#x27;</span>, <span class="hljs-comment">// include, same-origin, *omit</span><br>    <span class="hljs-attr">headers</span>: &#123;<br>      <span class="hljs-string">&#x27;user-agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/4.0 MDN Example&#x27;</span>,<br>      <span class="hljs-string">&#x27;content-type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-comment">// *GET, POST, PUT, DELETE, etc.</span><br>    <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;cors&#x27;</span>, <span class="hljs-comment">// no-cors, cors, *same-origin</span><br>    <span class="hljs-attr">redirect</span>: <span class="hljs-string">&#x27;follow&#x27;</span>, <span class="hljs-comment">// manual, *follow, error</span><br>    <span class="hljs-attr">referrer</span>: <span class="hljs-string">&#x27;no-referrer&#x27;</span>, <span class="hljs-comment">// *client, no-referrer</span><br>  &#125;)<br>  .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>()) <span class="hljs-comment">// parses response to JSON</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="发送带凭据的请求参考"><a href="#发送带凭据的请求参考" class="headerlink" title="发送带凭据的请求参考"></a>发送带凭据的请求<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23%E5%8F%91%E9%80%81%E5%B8%A6%E5%87%AD%E6%8D%AE%E7%9A%84%E8%AF%B7%E6%B1%82">参考</a></h3><p>为了让浏览器发送包含凭据的请求（即使是跨域源），要将<code>credentials: &#39;include&#39;</code>添加到传递给 <code>fetch()</code>方法的<code>init</code>对象。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-symbol">&#x27;https</span>:<span class="hljs-comment">//example.com&#x27;, &#123;</span><br>  credentials: <span class="hljs-symbol">&#x27;include</span>&#x27;  <br>&#125;)<br></code></pre></td></tr></table></figure><p>如果你只想在请求URL与调用脚本位于同一起源处时发送凭据，请添加<code>credentials: &#39;same-origin&#39;</code>。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// The calling script is on the origin &#x27;https://example.com&#x27;</span><br><br><span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-string">&#x27;https://example.com&#x27;</span>, &#123;<br>  <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;same-origin&#x27;</span>  <br>&#125;)<br></code></pre></td></tr></table></figure><p>要改为确保浏览器不在请求中包含凭据，请使用<code>credentials: &#39;omit&#39;</code>。</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-title function_ invoke__">fetch</span>(<span class="hljs-symbol">&#x27;https</span>:<span class="hljs-comment">//example.com&#x27;, &#123;</span><br>  credentials: <span class="hljs-symbol">&#x27;omit</span>&#x27;  <br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="上传-JSON-数据参考"><a href="#上传-JSON-数据参考" class="headerlink" title="上传 JSON 数据参考"></a>上传 JSON 数据<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23%E4%B8%8A%E4%BC%A0_JSON_%E6%95%B0%E6%8D%AE">参考</a></h3><p>使用 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch"><code>fetch()</code></a>  POST JSON数据</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> url = <span class="hljs-string">&#x27;https://example.com/profile&#x27;</span>;<br><span class="hljs-keyword">var</span> data = &#123;<span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;example&#x27;</span>&#125;;<br><br><span class="hljs-title function_">fetch</span>(url, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-comment">// or &#x27;PUT&#x27;</span><br>  <span class="hljs-attr">body</span>: <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(data), <span class="hljs-comment">// data can be `string` or &#123;object&#125;!</span><br>  <span class="hljs-attr">headers</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>(&#123;<br>    <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>  &#125;)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> res.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error))<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Success:&#x27;</span>, response));<br></code></pre></td></tr></table></figure><h3 id="上传文件参考"><a href="#上传文件参考" class="headerlink" title="上传文件参考"></a>上传文件<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6">参考</a></h3><p>可以通过HTML<code>&lt;input type=&quot;file&quot; /&gt;</code>元素，<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/FormData"><code>FormData()</code></a> 和<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch"><code>fetch()</code></a>上传文件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br><span class="hljs-keyword">var</span> fileField = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;input[type=&#x27;file&#x27;]&quot;</span>);<br><br>formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;abc123&#x27;</span>);<br>formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;avatar&#x27;</span>, fileField.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]);<br><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://example.com/profile/avatar&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;PUT&#x27;</span>,<br>  <span class="hljs-attr">body</span>: formData<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error))<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Success:&#x27;</span>, response));<br></code></pre></td></tr></table></figure><h3 id="上传多个文件参考"><a href="#上传多个文件参考" class="headerlink" title="上传多个文件参考"></a>上传多个文件<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23%E4%B8%8A%E4%BC%A0%E5%A4%9A%E4%B8%AA%E6%96%87%E4%BB%B6">参考</a></h3><p>可以通过HTML<code>&lt;input type=&quot;file&quot; mutiple/&gt;</code>元素，<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/FormData"><code>FormData()</code></a> 和<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch"><code>fetch()</code></a>上传文件。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br><span class="hljs-keyword">var</span> photos = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&quot;input[type=&#x27;file&#x27;][multiple]&quot;</span>);<br><br>formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;My Vegas Vacation&#x27;</span>);<br>formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;photos&#x27;</span>, photos.<span class="hljs-property">files</span>);<br><br><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;https://example.com/posts&#x27;</span>, &#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>  <span class="hljs-attr">body</span>: formData<br>&#125;)<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;Success:&#x27;</span>, <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(response)))<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;Error:&#x27;</span>, error));<br></code></pre></td></tr></table></figure><h3 id="检测请求是否成功参考"><a href="#检测请求是否成功参考" class="headerlink" title="检测请求是否成功参考"></a>检测请求是否成功<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23%E6%A3%80%E6%B5%8B%E8%AF%B7%E6%B1%82%E6%98%AF%E5%90%A6%E6%88%90%E5%8A%9F">参考</a></h3><p>如果遇到网络故障，<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch"><code>fetch()</code></a> promise 将会 reject，带上一个 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError"><code>TypeError</code></a> 对象。虽然这个情况经常是遇到了权限问题或类似问题——比如 404 不是一个网络故障。想要精确的判断 <code>fetch()</code> 是否成功，需要包含 promise resolved 的情况，此时再判断 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response/ok"><code>Response.ok</code></a> 是不是为 true。类似以下代码：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">fetch</span>(<span class="hljs-string">&#x27;flowers.jpg&#x27;</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>  <span class="hljs-keyword">if</span>(response.<span class="hljs-property">ok</span>) &#123;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">blob</span>();<br>  &#125;<br>  <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;Network response was not ok.&#x27;</span>);<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">myBlob</span>) &#123; <br>  <span class="hljs-keyword">var</span> objectURL = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(myBlob); <br>  myImage.<span class="hljs-property">src</span> = objectURL; <br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;There has been a problem with your fetch operation: &#x27;</span>, error.<span class="hljs-property">message</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="自定义请求对象参考"><a href="#自定义请求对象参考" class="headerlink" title="自定义请求对象参考"></a>自定义请求对象<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82%E5%AF%B9%E8%B1%A1">参考</a></h3><p>除了传给 <code>fetch()</code> 一个资源的地址，你还可以通过使用 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Request/Request"><code>Request()</code></a> 构造函数来创建一个 request 对象，然后再作为参数传给 <code>fetch()</code>：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> myHeaders = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Headers</span>();<br><br><span class="hljs-keyword">var</span> myInit = &#123; <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>               <span class="hljs-attr">headers</span>: myHeaders,<br>               <span class="hljs-attr">mode</span>: <span class="hljs-string">&#x27;cors&#x27;</span>,<br>               <span class="hljs-attr">cache</span>: <span class="hljs-string">&#x27;default&#x27;</span> &#125;;<br><br><span class="hljs-keyword">var</span> myRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(<span class="hljs-string">&#x27;flowers.jpg&#x27;</span>, myInit);<br><br><span class="hljs-title function_">fetch</span>(myRequest).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>  <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">blob</span>();<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">myBlob</span>) &#123;<br>  <span class="hljs-keyword">var</span> objectURL = <span class="hljs-variable constant_">URL</span>.<span class="hljs-title function_">createObjectURL</span>(myBlob);<br>  myImage.<span class="hljs-property">src</span> = objectURL;<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>Request()</code> 和 <code>fetch()</code> 接受同样的参数。你甚至可以传入一个已存在的 request 对象来创造一个拷贝：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">var</span> anotherRequest = <span class="hljs-keyword">new</span> Request(myRequest,myInit);<br></code></pre></td></tr></table></figure><p>这个很有用，因为 request 和 response bodies 只能被使用一次（译者注：这里的意思是因为设计成了 stream 的方式，所以它们只能被读取一次）。创建一个拷贝就可以再次使用 request&#x2F;response 了，当然也可以使用不同的 <code>init</code> 参数。</p><p><strong>注意</strong>：<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Request/clone"><code>clone()</code></a> 方法也可以用于创建一个拷贝。它在语义上有一点不同于其他拷贝的方法。其他方法（比如拷贝一个 response）中，如果 request 的 body 已经被读取过，那么将执行失败，然而 <code>clone()</code> 则不会失败。</p><h2 id="Headers参考"><a href="#Headers参考" class="headerlink" title="Headers参考"></a>Headers<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23Headers">参考</a></h2><p>使用 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Headers"><code>Headers</code></a> 的接口，你可以通过 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Headers/Headers"><code>Headers()</code></a> 构造函数来创建一个你自己的 headers 对象。一个 headers 对象是一个简单的多名值对：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">var</span> content = <span class="hljs-string">&quot;Hello World&quot;</span>;<br><span class="hljs-keyword">var</span> myHeaders = <span class="hljs-built_in">new</span> Headers();<br>myHeaders.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/plain&quot;</span>);<br>myHeaders.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;Content-Length&quot;</span>, content.length.toString());<br>myHeaders.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;X-Custom-Header&quot;</span>, <span class="hljs-string">&quot;ProcessThisImmediately&quot;</span>);<br></code></pre></td></tr></table></figure><p>也可以传一个多维数组或者对象字面量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">myHeaders = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Headers</span>(&#123;<br>  <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;text/plain&quot;</span>,<br>  <span class="hljs-string">&quot;Content-Length&quot;</span>: content.length.<span class="hljs-built_in">toString</span>(),<br>  <span class="hljs-string">&quot;X-Custom-Header&quot;</span>: <span class="hljs-string">&quot;ProcessThisImmediately&quot;</span>,<br>&#125;);<br></code></pre></td></tr></table></figure><p>它的内容可以被获取：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">console.<span class="hljs-built_in">log</span>(myHeaders.<span class="hljs-built_in">has</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>)); <span class="hljs-comment">// true</span><br>console.<span class="hljs-built_in">log</span>(myHeaders.<span class="hljs-built_in">has</span>(<span class="hljs-string">&quot;Set-Cookie&quot;</span>)); <span class="hljs-comment">// false</span><br>myHeaders.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;text/html&quot;</span>);<br>myHeaders.<span class="hljs-built_in">append</span>(<span class="hljs-string">&quot;X-Custom-Header&quot;</span>, <span class="hljs-string">&quot;AnotherValue&quot;</span>);<br><br>console.<span class="hljs-built_in">log</span>(myHeaders.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;Content-Length&quot;</span>)); <span class="hljs-comment">// 11</span><br>console.<span class="hljs-built_in">log</span>(myHeaders.<span class="hljs-built_in">getAll</span>(<span class="hljs-string">&quot;X-Custom-Header&quot;</span>)); <span class="hljs-comment">// [&quot;ProcessThisImmediately&quot;, &quot;AnotherValue&quot;]</span><br><br>myHeaders.<span class="hljs-built_in">delete</span>(<span class="hljs-string">&quot;X-Custom-Header&quot;</span>);<br>console.<span class="hljs-built_in">log</span>(myHeaders.<span class="hljs-built_in">getAll</span>(<span class="hljs-string">&quot;X-Custom-Header&quot;</span>)); <span class="hljs-comment">// [ ]</span><br></code></pre></td></tr></table></figure><p>虽然一些操作只能在 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorker_API"><code>ServiceWorkers</code></a> 中使用，但是它提供了更方便的操作 Headers 的 API。</p><p>如果使用了一个不合法的HTTP Header属性名，那么Headers的方法通常都抛出 TypeError 异常。如果不小心写入了一个不可写的属性，也会抛出一个 TypeError 异常。除此以外的情况，失败了并不抛出异常。例如：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">var myResponse = Response.<span class="hljs-built_in">error</span>();<br><span class="hljs-keyword">try</span> &#123;<br>  myResponse.headers.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;Origin&quot;</span>, <span class="hljs-string">&quot;http://mybank.com&quot;</span>);<br>&#125; <span class="hljs-built_in">catch</span>(e) &#123;<br>  console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;Cannot pretend to be a bank!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>最佳实践是在使用之前检查 content type 是否正确，比如：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-title function_">fetch</span>(myRequest).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>  <span class="hljs-keyword">if</span>(response.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;content-type&quot;</span>) === <span class="hljs-string">&quot;application/json&quot;</span>) &#123;<br>    <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">json</span>().<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">json</span>) &#123;<br>      <span class="hljs-comment">// process your JSON further</span><br>    &#125;);<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Oops, we haven&#x27;t got JSON!&quot;</span>);<br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="Guard参考"><a href="#Guard参考" class="headerlink" title="Guard参考"></a>Guard<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23Guard">参考</a></h3><p>由于 Headers 可以在 request 请求中被发送或者在 response 请求中被接收，并且规定了哪些参数是可写的，Headers 对象有一个特殊的 guard 属性。这个属性没有暴露给 Web，但是它影响到哪些内容可以在 Headers 对象中被操作。</p><p>可能的值如下：</p><ul><li><code>none</code>：默认的</li><li><code>request</code>：从 request 中获得的 headers（<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Request/headers"><code>Request.headers</code></a>）只读</li><li><code>request-no-cors</code>：从不同域（<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Request/mode"><code>Request.mode</code></a> <code>no-cors</code>）的 request 中获得的 headers 只读</li><li><code>response</code>：从 response 中获得的 headers（<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response/headers"><code>Response.headers</code></a>）只读</li><li><code>immutable</code>：在 ServiceWorkers 中最常用的，所有的 headers 都只读。</li></ul><p><strong>注意</strong>：你不可以添加或者修改一个 guard 属性是 <code>request</code> 的 Request Headers 的 <code>Content-Length</code> 属性。同样地，插入 <code>Set-Cookie</code> 属性到一个 response headers 是不允许的，因此 ServiceWorkers 是不能给合成的 Response 的 headers 添加一些 cookies。</p><h2 id="Response-对象参考"><a href="#Response-对象参考" class="headerlink" title="Response 对象参考"></a>Response 对象<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23Response_%E5%AF%B9%E8%B1%A1">参考</a></h2><p>如上述, <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response"><code>Response</code></a> 实例是在 <code>fetch()</code> 处理完promises之后返回的。</p><p>你会用到的最常见的response属性有:</p><ul><li><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response/status"><code>Response.status</code></a> — 整数(默认值为200) 为response的状态码.</li><li><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response/statusText"><code>Response.statusText</code></a> — 字符串(默认值为”OK”),该值与HTTP状态码消息对应.</li><li><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response/ok"><code>Response.ok</code></a> — 如上所示, 该属性是来检查response的状态是否在200-299(包括200,299)这个范围内.该属性返回一个<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Boolean"><code>Boolean</code></a>值.</li></ul><p>它的实例也可用通过 JavaScript 来创建, 但只有在<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/ServiceWorker_API"><code>ServiceWorkers</code></a>中才真正有用,当使用<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/FetchEvent/respondWith"><code>respondWith()</code></a>方法并提供了一个自定义的response来接受request时:</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-keyword">var</span> myBody = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Blob</span>();<br><br><span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;<br>  event.<span class="hljs-title function_">respondWith</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Response</span>(myBody, &#123;<br>    <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&quot;Content-Type&quot;</span> : <span class="hljs-string">&quot;text/plain&quot;</span> &#125;<br>  &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response/Response"><code>Response()</code></a> 构造方法接受两个可选参数—response的数据体和一个初始化对象(与<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Request/Request"><code>Request()</code></a>所接受的init参数类似.)</p><p><strong>注意</strong>: 静态方法<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response/error"><code>error()</code></a>只是返回了一个错误的response. 与此类似地, <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response/redirect"><code>redirect()</code></a> 只是返回了一个可以重定向至某URL的response. 这些也只与Service Workers才有关。</p><h2 id="Body参考"><a href="#Body参考" class="headerlink" title="Body参考"></a>Body<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23Body">参考</a></h2><p>不管是请求还是响应都能够包含body对象. body也可以是以下任意类型的实例.</p><ul><li><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBuffer"><code>ArrayBuffer</code></a></li><li><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/ArrayBufferView"><code>ArrayBufferView</code></a> (Uint8Array等)</li><li><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Blob"><code>Blob</code></a>&#x2F;File</li><li>string</li><li><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams"><code>URLSearchParams</code></a></li><li><a href="%5Bhttps://developer.mozilla.org/zh-CN/docs/Web/API/FormData%5D(https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/FormData"><code>FormData</code></a> “FormData 接口提供了一种表示表单数据的键值对的构造方式，经过它的数据可以使用 XMLHttpRequest.send() 方法送出，本接口和此方法都相当简单直接。如果送出时的编码类型被设为 “multipart&#x2F;form-data”，它会使用和表单一样的格式。”)</li></ul><p><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Body"><code>Body</code></a> 类定义了以下方法 (这些方法都被 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Request"><code>Request</code></a> 和<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response"><code>Response</code></a>所实现)以获取body内容. 这些方法都会返回一个被解析后的<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Promise"><code>Promise</code></a>对象和数据.</p><ul><li><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Body/arrayBuffer"><code>arrayBuffer()</code></a></li><li><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Body/blob"><code>blob()</code></a></li><li><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Body/json"><code>json()</code></a></li><li><a href="%5Bhttps://developer.mozilla.org/zh-CN/docs/Web/API/Body/text%5D(https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Body/text"><code>text()</code></a> “Body混入的 text() 方法提供了一个可供读取的”返回流”, ——它返回一个包含USVString对象 (text)的Promise对象，返回结果的编码为UTF-8。”)</li><li><a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Body/formData"><code>formData()</code></a></li></ul><p>比起XHR来，这些方法让非文本化的数据使用起来更加简单。</p><p>请求体可以由传入body参数来进行设置:</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> form = <span class="hljs-keyword">new</span> FormData(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;login-form&#x27;</span>));<br>fetch(<span class="hljs-string">&quot;/login&quot;</span>, &#123;<br>  method: <span class="hljs-string">&quot;POST&quot;</span>,<br>  body: form<br>&#125;)<br></code></pre></td></tr></table></figure><p>request和response（包括<code>fetch()</code> 方法）都会试着自动设置<code>Content-Type</code>。如果没有设置<code>Content-Type</code>值，发送的请求也会自动设值。</p><h2 id="特性检测参考"><a href="#特性检测参考" class="headerlink" title="特性检测参考"></a>特性检测<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Fetch_API/Using_Fetch%23%E7%89%B9%E6%80%A7%E6%A3%80%E6%B5%8B">参考</a></h2><p>Fetch API 的支持情况，可以通过检测<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Headers"><code>Headers</code></a>, <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Request"><code>Request</code></a>, <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Response"><code>Response</code></a> 或 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalFetch/fetch"><code>fetch()</code></a>是否在<a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Window"><code>Window</code></a> 或 <a href="https://links.jianshu.com/go?to=https://developer.mozilla.org/zh-CN/docs/Web/API/Worker"><code>Worker</code></a> 域中。例如：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-keyword">if</span>(<span class="hljs-variable language_">self</span>.fetch) &#123;<br>    <span class="hljs-regexp">//</span> run my fetch request here<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-regexp">//</span> <span class="hljs-keyword">do</span> something with XMLHttpRequest?<br>&#125;<br></code></pre></td></tr></table></figure><p>链接：<a href="https://www.jianshu.com/p/e18ced22cfaa">https://www.jianshu.com/p/e18ced22cfaa</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP如何实现Aop</title>
    <link href="/2022/05/22/PHP%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0Aop/"/>
    <url>/2022/05/22/PHP%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0Aop/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>至于什么是面向切面，面向切面的优势可以参考： <a href="https://zhuanlan.zhihu.com/p/421999882">https://zhuanlan.zhihu.com/p/421999882</a></p><p>目前看来比较好的实现方式是代理类，代理类就是对原始类文件进行修改，并且通过自动加载加载代理类而非原始类从而实现某些功能。对于常驻内存型的应用，可以使用子进程扫描的方式直接生成代理类，非常驻型则需要提前生成好后将代理类的map缓存起来下次直接使用。</p><p>下面讲下基于PHP8原生注解和上述的思路实现的切面</p><h1 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h1><p>先看下这个类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">declare</span>(strict_types=<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This file is part of the Max package.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * (c) Cheng Yao &lt;987861463<span class="hljs-doctag">@qq</span>.com&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * For the full copyright and license information, please view the LICENSE</span><br><span class="hljs-comment"> * file that was distributed with this source code.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Http</span>\<span class="hljs-title class_">Controllers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Max</span>\<span class="hljs-title">Di</span>\<span class="hljs-title">Annotations</span>\<span class="hljs-title">Inject</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Max</span>\<span class="hljs-title">Routing</span>\<span class="hljs-title">Annotations</span>\<span class="hljs-title">Controller</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Max</span>\<span class="hljs-title">Routing</span>\<span class="hljs-title">Annotations</span>\<span class="hljs-title">GetMapping</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">ResponseInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">ServerRequestInterface</span>;<br><br><span class="hljs-meta">#[Controller</span>(<span class="hljs-attr">prefix</span>: <span class="hljs-string">&#x27;/&#x27;</span>)<span class="hljs-meta">]</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-meta">#[Inject</span><span class="hljs-meta">]</span><br>    <span class="hljs-keyword">protected</span> ServerRequestInterface <span class="hljs-variable">$request</span>;<br>    <span class="hljs-meta">#[Inject</span><span class="hljs-meta">]</span><br>    <span class="hljs-keyword">protected</span> ResponseInterface      <span class="hljs-variable">$response</span>;<br><br>    <span class="hljs-meta">#[GetMapping</span>(<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>)<span class="hljs-meta">]</span><br>    <span class="hljs-meta">#[Cacheable</span><span class="hljs-meta">]</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>): <span class="hljs-title">array</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;response-&gt;<span class="hljs-title function_ invoke__">success</span>(<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello, &#x27;</span> . <span class="hljs-variable">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;MaxPHP&#x27;</span>) . <span class="hljs-string">&#x27;!&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用了类注解，属性注解，方法注解。和代理类相关的主要有属性注解和方法注解，来看下生成的代理类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">declare</span> (strict_types=<span class="hljs-number">1</span>);<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This file is part of the Max package.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * (c) Cheng Yao &lt;987861463<span class="hljs-doctag">@qq</span>.com&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * For the full copyright and license information, please view the LICENSE</span><br><span class="hljs-comment"> * file that was distributed with this source code.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">App</span>\<span class="hljs-title class_">Http</span>\<span class="hljs-title class_">Controllers</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Max</span>\<span class="hljs-title">Cache</span>\<span class="hljs-title">Aspects</span>\<span class="hljs-title">Cacheable</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Max</span>\<span class="hljs-title">Di</span>\<span class="hljs-title">Annotations</span>\<span class="hljs-title">Inject</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Max</span>\<span class="hljs-title">Routing</span>\<span class="hljs-title">Annotations</span>\<span class="hljs-title">Controller</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Max</span>\<span class="hljs-title">Routing</span>\<span class="hljs-title">Annotations</span>\<span class="hljs-title">GetMapping</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">ResponseInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Http</span>\<span class="hljs-title">Message</span>\<span class="hljs-title">ServerRequestInterface</span>;<br><span class="hljs-meta">#[Controller</span>(<span class="hljs-attr">prefix</span>: <span class="hljs-string">&#x27;/&#x27;</span>)<span class="hljs-meta">]</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">IndexController</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">use</span> \<span class="hljs-title">Max</span>\<span class="hljs-title">Aop</span>\<span class="hljs-title">ProxyHandler</span>;<br>    <span class="hljs-keyword">use</span> \<span class="hljs-title">Max</span>\<span class="hljs-title">Aop</span>\<span class="hljs-title">PropertyHandler</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">__handleProperties</span>();<br>    &#125;<br>    <span class="hljs-meta">#[Inject</span><span class="hljs-meta">]</span><br>    <span class="hljs-keyword">protected</span> ServerRequestInterface <span class="hljs-variable">$request</span>;<br>    <span class="hljs-meta">#[Inject</span><span class="hljs-meta">]</span><br>    <span class="hljs-keyword">protected</span> ResponseInterface <span class="hljs-variable">$response</span>;<br><br>    <span class="hljs-meta">#[GetMapping</span>(<span class="hljs-attr">path</span>: <span class="hljs-string">&#x27;/&#x27;</span>)<span class="hljs-meta">]</span><br>    <span class="hljs-meta">#[Cacheable</span><span class="hljs-meta">]</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>) : <span class="hljs-title">array</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">__callViaProxy</span>(<span class="hljs-keyword">__FUNCTION__</span>, function () &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;response-&gt;<span class="hljs-title function_ invoke__">success</span>(<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello, &#x27;</span> . <span class="hljs-variable">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;MaxPHP&#x27;</span>) . <span class="hljs-string">&#x27;!&#x27;</span>);<br>        &#125;, <span class="hljs-title function_ invoke__">func_get_args</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对比上面的代码，可以发现由于使用了Inject和Cacheable注解，代理类多了构造方法，并且index方法的方法体被$this-&gt;__callViaProxy包裹了。在运行时实际加载的类文件是代理类，而不是原始类。那么如何实现这一过程呢，下面是hyperf的一段代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$loaders</span> = <span class="hljs-title function_ invoke__">spl_autoload_functions</span>();<br><br><span class="hljs-comment">// Proxy the composer class loader</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$loaders</span> <span class="hljs-keyword">as</span> &amp;<span class="hljs-variable">$loader</span>) &#123;<br>    <span class="hljs-variable">$unregisterLoader</span> = <span class="hljs-variable">$loader</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$loader</span>) &amp;&amp; <span class="hljs-variable">$loader</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">instanceof</span> ComposerClassLoader) &#123;<br>        <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> ComposerClassLoader $composerClassLoader */</span><br>        <span class="hljs-variable">$composerClassLoader</span> = <span class="hljs-variable">$loader</span>[<span class="hljs-number">0</span>];<br>        <span class="hljs-title class_">AnnotationRegistry</span>::<span class="hljs-title function_ invoke__">registerLoader</span>(function (<span class="hljs-variable">$class</span>) <span class="hljs-keyword">use</span> ($<span class="hljs-title">composerClassLoader</span>) &#123;<br>            <span class="hljs-title">return</span> (<span class="hljs-title">bool</span>) $<span class="hljs-title">composerClassLoader</span>-&gt;<span class="hljs-title">findFile</span>($<span class="hljs-title">class</span>);<br>        &#125;);<br>        <span class="hljs-variable">$loader</span>[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-built_in">static</span>(<span class="hljs-variable">$composerClassLoader</span>, <span class="hljs-variable">$proxyFileDirPath</span>, <span class="hljs-variable">$configDir</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">spl_autoload_unregister</span>(<span class="hljs-variable">$unregisterLoader</span>);<br>&#125;<br><br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$loader</span>);<br><br><span class="hljs-comment">// Re-register the loaders</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$loaders</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$loader</span>) &#123;<br>    <span class="hljs-title function_ invoke__">spl_autoload_register</span>(<span class="hljs-variable">$loader</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>注册新的类加载器，而加载被代理的文件时会加载对应的代理类。下面是MaxPHP的实现</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/** <span class="hljs-doctag">@var</span> Composer\Autoload\ClassLoader $loader */</span><br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$proxyMap</span>);<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$proxyMap</span>)) &#123;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$pid</span> = <span class="hljs-title function_ invoke__">pcntl_fork</span>()) == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProcessException</span>(<span class="hljs-string">&#x27;Process fork failed.&#x27;</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">pcntl_wait</span>(<span class="hljs-variable">$pid</span>);<br>&#125;<br><span class="hljs-variable">$loader</span>-&gt;<span class="hljs-title function_ invoke__">addClassMap</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-title function_ invoke__">getProxyMap</span>());<br><span class="hljs-comment">// 收集注解</span><br></code></pre></td></tr></table></figure><p>思路：因为扫描注解过程会加载类文件，加载之后不能被重新加载（目前不知道咋实现，知道的可以讲下），所以采用子进程扫描生成代理类地图。如上代码，$proxyMap是代理类地图文件，内容例如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span> (<br>  <span class="hljs-string">&#x27;App\\Http\\Controllers\\IndexController&#x27;</span> =&gt; <span class="hljs-string">&#x27;/home/cheng/max/max-http-project/bin/../runtime/aop/proxy/App_Http_Controllers_IndexController_Proxy.php&#x27;</span>,<br>  <span class="hljs-string">&#x27;App\\Listeners\\DatabaseQueryListener&#x27;</span> =&gt; <span class="hljs-string">&#x27;/home/cheng/max/max-http-project/bin/../runtime/aop/proxy/App_Listeners_DatabaseQueryListener_Proxy.php&#x27;</span>,<br>  <span class="hljs-string">&#x27;App\\Http\\Middlewares\\ExceptionHandlerMiddleware&#x27;</span> =&gt; <span class="hljs-string">&#x27;/home/cheng/max/max-http-project/bin/../runtime/aop/proxy/App_Http_Middlewares_ExceptionHandlerMiddleware_Proxy.php&#x27;</span>,<br>);<br></code></pre></td></tr></table></figure><p>当文件不存在的时候fork子进程，然后使用pcntl_wait等待子进程退出，接着走到$this-&gt;getProxyMap() 方法，方法内容如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getProxyMap</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(代理类地图不存在) &#123;<br>        <span class="hljs-comment">// 收集注解</span><br>        <span class="hljs-comment">// 生成代理类，并写入</span><br>        <span class="hljs-comment">// 生成代理类地图，并写入</span><br>        <span class="hljs-keyword">exit</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">// 返回代理类地图</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如上伪代码，代理类不存在会导致子进程退出，而在上面的代码中事先将代理类地图删掉了，所以重启服务肯定会启动两个进程，一个扫描注解，生成代理类后退出，一个等待退出后直接加载代理类地图 ，当然框架中实现还添加了缓存，可以参考max&#x2F;aop包。重新回到fork子进程的代码，可以看到$loader-&gt;addClassMap()， 代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addClassMap</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$classMap</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;classMap) &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;classMap = <span class="hljs-title function_ invoke__">array_merge</span>(<span class="hljs-variable">$this</span>-&gt;classMap, <span class="hljs-variable">$classMap</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;classMap = <span class="hljs-variable">$classMap</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将覆盖原始的类自动加载映射，至此代理类生成原理和代理方法介绍完毕，生成代理类需要使用”nikic&#x2F;php-parser”包。</p><h1 id="如何代理"><a href="#如何代理" class="headerlink" title="如何代理"></a>如何代理</h1><p>接下来看到代理类的代码，控制器方法里添加了以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">__handleProperties</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>$this-&gt;__handleProperties() 主要是用来处理属性的，在注解扫描过程中会将符合条件的注解收集起来，这个方法会根据收集的注解，在实例化对象后将对应的属性使用对应的注解来处理，例如Inject注解，将容器中的实例注入到该属性中，因此在编写代码的时候不必要在构造方法中初始化值，都有代理类完成。这样的好处是你不必依赖容器或这其他服务来注入或者操作属性，直接使用new关键字实例化依然可以自动注入</p><h1 id="被切入的方法"><a href="#被切入的方法" class="headerlink" title="被切入的方法"></a>被切入的方法</h1><p>然后看到控制器方法index</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">index</span>(<span class="hljs-params"></span>) : <span class="hljs-title">array</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">__callViaProxy</span>(<span class="hljs-keyword">__FUNCTION__</span>, function () &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;response-&gt;<span class="hljs-title function_ invoke__">success</span>(<span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;Hello, &#x27;</span> . <span class="hljs-variable">$this</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;MaxPHP&#x27;</span>) . <span class="hljs-string">&#x27;!&#x27;</span>);<br>    &#125;, <span class="hljs-title function_ invoke__">func_get_args</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到$this-&gt;__callVieProxy传递了三个参数，依次是本方法名，闭包（包含原方法体），原方法参数列表，走到这，就意味着这个方法被切入了。</p><p>来看下__callVieProxy方法：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__callViaProxy</span>(<span class="hljs-params"><span class="hljs-keyword">string</span> <span class="hljs-variable">$method</span>, <span class="hljs-built_in">Closure</span> <span class="hljs-variable">$callback</span>, <span class="hljs-keyword">array</span> <span class="hljs-variable">$parameters</span></span>): <span class="hljs-title">mixed</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">/** <span class="hljs-doctag">@var</span> AspectInterface $aspect */</span><br>    <span class="hljs-variable">$pipeline</span> = <span class="hljs-title function_ invoke__">array_reduce</span>(<br>        <span class="hljs-title function_ invoke__">array_reverse</span>([...<span class="hljs-title class_">AspectCollector</span>::<span class="hljs-title function_ invoke__">getClassAspects</span>(<span class="hljs-keyword">__CLASS__</span>), ...<span class="hljs-title class_">AspectCollector</span>::<span class="hljs-title function_ invoke__">getMethodAspects</span>(<span class="hljs-keyword">__CLASS__</span>, <span class="hljs-variable">$method</span>)]),<br>        fn(<span class="hljs-variable">$stack</span>, <span class="hljs-variable">$aspect</span>) =&gt; <span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params">JoinPoint <span class="hljs-variable">$joinPoint</span></span>) =&gt;</span> <span class="hljs-variable">$aspect</span>-&gt;<span class="hljs-title function_ invoke__">process</span>(<span class="hljs-variable">$joinPoint</span>, <span class="hljs-variable">$stack</span>),<br>        <span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params">JoinPoint <span class="hljs-variable">$joinPoint</span></span>) =&gt;</span> <span class="hljs-variable">$joinPoint</span>-&gt;<span class="hljs-title function_ invoke__">process</span>()<br>    );<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$pipeline</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JoinPoint</span>(<span class="hljs-variable language_">$this</span>, <span class="hljs-variable">$method</span>, <span class="hljs-variable">$parameters</span>, <span class="hljs-variable">$callback</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>方法很简单，将收集的该方法的切面，使用array_reduce处理。最终调用的方法在JoinPoint中，该对象包含所有元数据，例如对象，方法和方法参数，这些都是可以在切面类中拿到并且可以修改的，最终调用的方法如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params"></span>): <span class="hljs-title">mixed</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">call_user_func_array</span>(<span class="hljs-variable">$this</span>-&gt;callback, <span class="hljs-variable">$this</span>-&gt;parameters);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到调用闭包并传递处理后的参数。</p><h2 id="切面类实现如下"><a href="#切面类实现如下" class="headerlink" title="切面类实现如下"></a>切面类实现如下</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">declare</span>(strict_types=<span class="hljs-number">1</span>);<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * This file is part of the Max package.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * (c) Cheng Yao &lt;987861463<span class="hljs-doctag">@qq</span>.com&gt;</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * For the full copyright and license information, please view the LICENSE</span><br><span class="hljs-comment"> * file that was distributed with this source code.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">namespace</span> <span class="hljs-title class_">Max</span>\<span class="hljs-title class_">Cache</span>\<span class="hljs-title class_">Aspects</span>;<br><br><span class="hljs-keyword">use</span> <span class="hljs-title">Closure</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Max</span>\<span class="hljs-title">Aop</span>\<span class="hljs-title">Contracts</span>\<span class="hljs-title">AspectInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Max</span>\<span class="hljs-title">Aop</span>\<span class="hljs-title">JoinPoint</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">Psr</span>\<span class="hljs-title">Container</span>\<span class="hljs-title">ContainerExceptionInterface</span>;<br><span class="hljs-keyword">use</span> <span class="hljs-title">ReflectionException</span>;<br><br><span class="hljs-meta">#[\Attribute</span>(<span class="hljs-title class_">\Attribute</span>::<span class="hljs-variable constant_">TARGET_METHOD</span>)<span class="hljs-meta">]</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestRandom</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AspectInterface</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span>     <span class="hljs-variable">$ramdom</span> = <span class="hljs-number">0</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">    </span>)</span><br><span class="hljs-function">    </span>&#123;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ContainerExceptionInterface</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ReflectionException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params">JoinPoint <span class="hljs-variable">$joinPoint</span>, <span class="hljs-built_in">Closure</span> <span class="hljs-variable">$next</span></span>): <span class="hljs-title">mixed</span></span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;before&#x27;</span>;<br>        <span class="hljs-variable">$result</span> = <span class="hljs-variable">$next</span>(<span class="hljs-variable">$joinPoint</span>);<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;after&#x27;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$result</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到调用方法和pipeline原理类似。构造方法的参数是可以通过使用注解的时候传递的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>php的aop的重点：代理类生成，如何调用</p><p>浅薄理解，相对于其他框架的思路可能略显幼稚。感兴趣可以参与开发 max&#x2F;aop： <a href="https://github.com/topyao/max-aop">https://github.com/topyao/max-aop</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue操作select</title>
    <link href="/2022/05/22/Vue%E6%93%8D%E4%BD%9Cselect/"/>
    <url>/2022/05/22/Vue%E6%93%8D%E4%BD%9Cselect/</url>
    
    <content type="html"><![CDATA[<p>Vue操作select</p><p>html如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;category&quot;</span> <span class="hljs-attr">v-on:change</span>=<span class="hljs-string">&quot;switchCategory($event, 1)&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(category, index) in categories&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">v-bind:value</span>=<span class="hljs-string">&quot;category.id&quot;</span>&gt;</span><br>&#123;&#123;category.name&#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>js如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><br>Vue.<span class="hljs-title function_ invoke__">createApp</span>(&#123;<br>  <span class="hljs-title function_ invoke__">data</span>() &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">category</span>: <span class="hljs-number">0</span>,<br>      <span class="hljs-attr">categories</span>: [<br>        &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;PHP&quot;</span>,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Go&quot;</span>,<br>        &#125;,<br>        &#123;<br>          <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;Java&quot;</span>,<br>        &#125;,<br>      ],<br>    &#125;;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_ invoke__">switchCategory</span>(<span class="hljs-variable">$event</span>, p) &#123;<br>      console.<span class="hljs-title function_ invoke__">log</span>(<span class="hljs-variable">$event</span>.target.value, p, this.category);<br>    &#125;,<br>  &#125;,<br>&#125;).<span class="hljs-title function_ invoke__">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vue中watch用法详解</title>
    <link href="/2022/05/21/Vue%E4%B8%ADwatch%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/05/21/Vue%E4%B8%ADwatch%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="基本用法："><a href="#基本用法：" class="headerlink" title="基本用法："></a>基本用法：</h3><p> 当firstName值变化时，watch监听到并且执行</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>FullName: &#123;&#123;fullName&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>FirstName: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;firstName&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">firstName</span>: <span class="hljs-string">&#x27;Dawei&#x27;</span>,<br>    <span class="hljs-attr">lastName</span>: <span class="hljs-string">&#x27;Lou&#x27;</span>,<br>    <span class="hljs-attr">fullName</span>: <span class="hljs-string">&#x27;&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-title function_">firstName</span>(<span class="hljs-params">newName, oldName</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">fullName</span> = newName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">lastName</span>;<br>    &#125;<br>  &#125; <br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="handler方法和immediate属性："><a href="#handler方法和immediate属性：" class="headerlink" title="handler方法和immediate属性："></a>handler方法和immediate属性：</h3><p> 上面的例子是值变化时候，watch才执行，我们想让值最初时候watch就执行就用到了<code>handler</code>和<code>immediate</code>属性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">watch: &#123;<br>  firstName: &#123;<br>    handler(newName, oldName) &#123;<br>      <span class="hljs-keyword">this</span>.fullName = newName + <span class="hljs-string">&#x27; &#x27;</span> + <span class="hljs-keyword">this</span>.lastName;<br>    &#125;,<br>    <span class="hljs-comment">// 代表在wacth里声明了firstName这个方法之后立即先去执行handler方法，如果设置了false，那么效果和上边例子一样</span><br>    immediate: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="deep属性（深度监听，常用语对象下面属性的改变）："><a href="#deep属性（深度监听，常用语对象下面属性的改变）：" class="headerlink" title="deep属性（深度监听，常用语对象下面属性的改变）："></a>deep属性（深度监听，常用语对象下面属性的改变）：</h3><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs jsx">&lt;div&gt;<br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>obj.a: &#123;&#123;obj.a&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br>      <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>obj.a: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">&quot;obj.a&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br> <br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#root&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">obj</span>: &#123;<br>      <span class="hljs-attr">a</span>: <span class="hljs-number">123</span><br>    &#125;<br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">obj</span>: &#123;<br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params">newName, oldName</span>) &#123;<br>         <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;obj.a changed&#x27;</span>);<br>      &#125;,<br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125; <br>&#125;)<br></code></pre></td></tr></table></figure><p> 我们在在输入框中输入数据视图改变obj.a的值时，我们发现是无效的。受现代 JavaScript 的限制 (以及废弃 Object.observe)，Vue 不能检测到对象属性的添加或删除。由于 Vue 会在初始化实例时对属性执行 getter&#x2F;setter 转化过程，所以属性必须在 data 对象上存在才能让 Vue 转换它，这样才能让它是响应的。</p><p> 默认情况下 handler 只监听obj这个属性它的引用的变化，我们只有给obj赋值的时候它才会监听到，比如我们在 mounted事件钩子函数中对obj进行重新赋值：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">mounted: &#123;<br>  <span class="hljs-keyword">this</span>.obj = &#123;<br>    a: <span class="hljs-string">&#x27;456&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 那么我们需要监听obj里的属性a的值呢？这时候deep属性就派上用场了:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs css">watch: &#123;<br>  obj: &#123;<br>    handler(newName, oldName) &#123;<br>      console<span class="hljs-selector-class">.log</span>(&#x27;obj<span class="hljs-selector-class">.a</span> changed&#x27;);<br>    &#125;,<br>    immediate: true,<br>    deep: true<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> 这样的方法对性能影响很大，修改obj里面任何一个属性都会触发这个监听器里的 handler。我们可以做如下处理：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsx"><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-string">&#x27;obj.a&#x27;</span>: &#123;<br>    <span class="hljs-title function_">handler</span>(<span class="hljs-params">newName, oldName</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;obj.a changed&#x27;</span>);<br>    &#125;,<br>    <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// deep: true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p> watch的注销这里就不在多说了，实际开发中，watch会随着组件一并销毁。</p><p>链接：<a href="https://www.jianshu.com/p/b70f1668d08f">https://www.jianshu.com/p/b70f1668d08f</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Js获取图片宽高</title>
    <link href="/2022/05/15/Js%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E5%AE%BD%E9%AB%98/"/>
    <url>/2022/05/15/Js%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E5%AE%BD%E9%AB%98/</url>
    
    <content type="html"><![CDATA[<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;do&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./Web/img/20211207_20145862_avatar.png.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">let</span> i = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;do&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i.<span class="hljs-property">clientWidth</span>);</span><br><span class="language-javascript">&#125;, <span class="hljs-number">1000</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP如何爬取页面数据</title>
    <link href="/2022/05/11/PHP%E5%A6%82%E4%BD%95%E7%88%AC%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE/"/>
    <url>/2022/05/11/PHP%E5%A6%82%E4%BD%95%E7%88%AC%E5%8F%96%E9%A1%B5%E9%9D%A2%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>PHP作为世界上最好的语言，爬页面当然不在话下，官方提供了解析DOM的类DOMDocument和XPATH相关的类DOMXPath，使用起来方便快速，但是对于一些不标准的页面可能会出现各种报错。所以推荐下面一款包，虽然依然是使用上面提到的两个类，但是却做了许多容错处理</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer require voku/simple_html_dom<br></code></pre></td></tr></table></figure><p>packagist : <a href="https://packagist.org/packages/voku/simple_html_dom">https://packagist.org/packages/voku/simple_html_dom</a></p><p>使用说明可以参考文档，但是这里还是有必要记录一下</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="引入文件"><a href="#引入文件" class="headerlink" title="引入文件"></a>引入文件</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-keyword">use</span> <span class="hljs-title">voku</span>\<span class="hljs-title">helper</span>\<span class="hljs-title">HtmlDomParser</span>;<br><br><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;./vendor/autoload.php&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="解析html"><a href="#解析html" class="headerlink" title="解析html"></a>解析html</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$html</span> = curl(<span class="hljs-variable">$url</span>);<br><span class="hljs-variable">$dom</span> = <span class="hljs-title class_">HtmlDomParser</span>::str_get_html(<span class="hljs-variable">$html</span>);<br></code></pre></td></tr></table></figure><h2 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-symbol">$eleme</span>nts = <span class="hljs-symbol">$dom</span>-&gt;findMulti(<span class="hljs-string">&#x27;.class&#x27;</span>);<br><span class="hljs-symbol">$eleme</span>nt = <span class="hljs-symbol">$dom</span>-&gt;findOne(<span class="hljs-string">&#x27;#id&#x27;</span>)<br></code></pre></td></tr></table></figure><p>这个返回值是一个可以迭代的对象，所以需要迭代它</p><h2 id="迭代元素"><a href="#迭代元素" class="headerlink" title="迭代元素"></a>迭代元素</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$elements</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$element</span>) &#123;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$element</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$html</span> = <span class="hljs-string">&lt;&lt;&lt;EOT</span><br><span class="hljs-string">&lt;ul id=&quot;example-list&quot;&gt;</span><br><span class="hljs-string">&lt;li class=&quot;list&quot;&gt;</span><br><span class="hljs-string">第一行</span><br><span class="hljs-string">&lt;/li&gt;</span><br><span class="hljs-string">&lt;li class=&quot;list&quot;&gt;</span><br><span class="hljs-string">第二行</span><br><span class="hljs-string">&lt;/li&gt;</span><br><span class="hljs-string">&lt;li id=&quot;end-li&quot;&gt;</span><br><span class="hljs-string">第二行</span><br><span class="hljs-string">&lt;/li&gt;</span><br><span class="hljs-string">&lt;/ul&gt;</span><br><span class="hljs-string">EOT</span>;<br><span class="hljs-variable">$dom</span> = <span class="hljs-title class_">HtmlDomParser</span>::<span class="hljs-title function_ invoke__">str_get_html</span>(<span class="hljs-variable">$html</span>);<br><span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">findMulti</span>(<span class="hljs-string">&#x27;.list&#x27;</span>)-&gt;<span class="hljs-title function_ invoke__">getIterator</span>() <span class="hljs-keyword">as</span> <span class="hljs-variable">$li</span>) &#123;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$li</span>-&gt;attr[<span class="hljs-string">&#x27;class&#x27;</span>]);<br>&#125;<br><span class="hljs-variable">$ul</span> = <span class="hljs-variable">$dom</span>-&gt;<span class="hljs-title function_ invoke__">findOne</span>(<span class="hljs-string">&#x27;#example-list #end-li&#x27;</span>);  <span class="hljs-comment">// 例子</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$ul</span>-&gt;attr[<span class="hljs-string">&#x27;id&#x27;</span>]);<br></code></pre></td></tr></table></figure><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>爬取页面要尽量伪装自己，防止被禁止</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">curl</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$ch</span> = <span class="hljs-title function_ invoke__">curl_init</span>(<span class="hljs-variable">$url</span>);<br>    <span class="hljs-variable">$headers</span> = [<br>        <span class="hljs-string">&#x27;DNT&#x27;</span> =&gt; <span class="hljs-number">1</span>,<br>        <span class="hljs-string">&#x27;Referer&#x27;</span> =&gt; <span class="hljs-string">&#x27;https://www.1kmb.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-ch-ua&#x27;</span> =&gt; <span class="hljs-string">&#x27;&quot; Not A;Brand&quot;;v=&quot;99&quot;, &quot;Chromium&quot;;v=&quot;100&quot;, &quot;Microsoft Edge&quot;;v=&quot;100&quot;&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-ch-ua-mobile&#x27;</span> =&gt; <span class="hljs-string">&#x27;?0&#x27;</span>,<br>        <span class="hljs-string">&#x27;sec-ch-ua-platform&#x27;</span> =&gt; <span class="hljs-string">&#x27;&quot;Windows&quot;&#x27;</span>,<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span> =&gt; <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36 Edg/100.0.1185.50</span><br><span class="hljs-string">]&#x27;</span>];<br><br>    <span class="hljs-title function_ invoke__">curl_setopt_array</span>(<span class="hljs-variable">$ch</span>, [<br>        CURLOPT_HTTPHEADER =&gt; <span class="hljs-variable">$headers</span>,<br>        CURLOPT_HEADER =&gt; <span class="hljs-literal">false</span>,<br>        CURLOPT_RETURNTRANSFER =&gt; <span class="hljs-literal">true</span>,<br>        CURLOPT_SSL_VERIFYHOST =&gt; <span class="hljs-literal">false</span>,<br>        CURLOPT_SSL_VERIFYPEER =&gt; <span class="hljs-literal">false</span>,<br>    ]);<br><br>    <span class="hljs-variable">$r</span> = <span class="hljs-title function_ invoke__">curl_exec</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-title function_ invoke__">curl_close</span>(<span class="hljs-variable">$ch</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$r</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>尽可能让服务端认为这是一次正常请求。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>实用的 FFmpeg 脚本合集</title>
    <link href="/2022/05/05/%E5%AE%9E%E7%94%A8%E7%9A%84%20FFmpeg%20%E8%84%9A%E6%9C%AC%E5%90%88%E9%9B%86/"/>
    <url>/2022/05/05/%E5%AE%9E%E7%94%A8%E7%9A%84%20FFmpeg%20%E8%84%9A%E6%9C%AC%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="FFMPEG实例"><a href="#FFMPEG实例" class="headerlink" title="FFMPEG实例"></a>FFMPEG实例</h1><p><a href="https://blog.csdn.net/yu540135101/article/details/103025957">(50条消息) FFmpeg命令实例合集_张雨zy的博客-CSDN博客_ffmpeg gblur</a></p><h2 id="淡入淡出效果（fade）"><a href="#淡入淡出效果（fade）" class="headerlink" title="淡入淡出效果（fade）"></a>淡入淡出效果（fade）</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs excel">•<span class="hljs-built_in">type</span>, <span class="hljs-built_in">t</span><br>指定类型是in代表淡入，out代表淡出，默认为in<br><br>•start_frame, s<br>指定应用效果的开始时间，默认为<span class="hljs-number">0</span>.<br><br>•nb_frames, <span class="hljs-built_in">n</span><br>应用效果的最后一帧序数。<br>对于淡入，在此帧后将以本身的视频输出，对于淡出此帧后将以设定的颜色输出，默认<span class="hljs-number">25</span>.<br><br>•alpha<br>如果设置为<span class="hljs-number">1</span>，则只在透明通道实施效果（如果只存在一个输入），默认为<span class="hljs-number">0</span><br><br>•start_time, st<br>指定按秒的开始时间戳来应用效果。<br>如果start_frame和start_time都被设置，则效果会在更后的时间开始，默认为<span class="hljs-number">0</span><br><br>•<span class="hljs-built_in">duration</span>, d<br>按秒的效果持续时间。<br>对于淡入，在此时后将以本身的视频输出，对于淡出此时后将以设定的颜色输出。<br>如果<span class="hljs-built_in">duration</span>和nb_frames同时被设置，将采用<span class="hljs-built_in">duration</span>值。默认为<span class="hljs-number">0</span>（此时采用nb_frames作为默认）<br><br>•color, c<br>设置淡化后（淡入前）的颜色，默认为<span class="hljs-string">&quot;black&quot;</span>.<br></code></pre></td></tr></table></figure><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs routeros">•30帧开始淡入<br><span class="hljs-attribute">fade</span>=in:0:30<br><br>•等效上面<br><span class="hljs-attribute">fade</span>=t=in:s=0:n=30<br><br>•在200帧视频中从最后45帧淡出<br><span class="hljs-attribute">fade</span>=out:155:45 <span class="hljs-attribute">fade</span>=type=out:start_frame=155:nb_frames=45<br><br>•对1000帧的视频25帧淡入，最后25帧淡出:<br><span class="hljs-attribute">fade</span>=in:0:25, <span class="hljs-attribute">fade</span>=out:975:25<br><br>•让前5帧为黄色，然后在5-24淡入:<br><span class="hljs-attribute">fade</span>=in:5:20:color=yellow<br><br>•仅在透明通道的第25开始淡入<br><span class="hljs-attribute">fade</span>=in:0:25:alpha=1<br><br>•设置5.5秒的黑场，然后开始0.5秒的淡入:<br><span class="hljs-attribute">fade</span>=t=in:st=5.5:d=0.5<br></code></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i <span class="hljs-number">1</span>.mp4 -vf fade=in:<span class="hljs-number">0</span>:<span class="hljs-number">50</span> out3.mp4<br></code></pre></td></tr></table></figure><h2 id="使用高斯模糊为视频生成一个模糊背景（gblur）"><a href="#使用高斯模糊为视频生成一个模糊背景（gblur）" class="headerlink" title="使用高斯模糊为视频生成一个模糊背景（gblur）"></a>使用高斯模糊为视频生成一个模糊背景（gblur）</h2><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Apply Gaussian blur filter.<br><br>The filter accepts the following options:<br><br>sigma<br><span class="hljs-keyword">Set</span> horizontal sigma, standard deviation <span class="hljs-keyword">of</span> Gaussian blur. <span class="hljs-keyword">Default</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0.5</span>.<br><br>steps<br><span class="hljs-keyword">Set</span> number <span class="hljs-keyword">of</span> steps <span class="hljs-keyword">for</span> Gaussian approximation. <span class="hljs-keyword">Default</span> <span class="hljs-keyword">is</span> <span class="hljs-number">1</span>.<br><br>planes<br><span class="hljs-keyword">Set</span> which planes <span class="hljs-keyword">to</span> filter. <span class="hljs-keyword">By</span> <span class="hljs-keyword">default</span> all planes are filtered.<br><br>sigmaV<br><span class="hljs-keyword">Set</span> vertical sigma, <span class="hljs-keyword">if</span> negative it will be same <span class="hljs-keyword">as</span> sigma. <span class="hljs-keyword">Default</span> <span class="hljs-keyword">is</span> -<span class="hljs-number">1</span>.<br></code></pre></td></tr></table></figure><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">ffmpeg -i 纸短情长.mp4 -filter_complex [<span class="hljs-number">0</span>:v]crop=(ih/<span class="hljs-number">16</span>*<span class="hljs-number">9</span>):ih,scale=iw/<span class="hljs-number">10</span>:-<span class="hljs-number">2</span>,gblur=sigma=<span class="hljs-number">5</span>,scale=<span class="hljs-number">720</span>:<span class="hljs-number">1280</span>[vbg];[vbg][<span class="hljs-number">0</span>:v]overlay=<span class="hljs-number">0</span>:(<span class="hljs-symbol">H</span>-h)/<span class="hljs-number">2</span> -y out.mp4<br></code></pre></td></tr></table></figure><h3 id="命令解析"><a href="#命令解析" class="headerlink" title="命令解析"></a>命令解析</h3><p>输入的原视频是一个1280x720的横屏视频<br>命令核心在于滤镜filter_complex可以拆解成两部分。</p><ol><li>背景的生成</li><li>原视频与背景的叠加</li></ol><h4 id="生成背景"><a href="#生成背景" class="headerlink" title="生成背景"></a>生成背景</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[0:v]</span><span class="hljs-attr">crop</span>=(ih/<span class="hljs-number">16</span>*<span class="hljs-number">9</span>):ih,scale=iw/<span class="hljs-number">10</span>:-<span class="hljs-number">2</span>,gblur=sigma=<span class="hljs-number">5</span>,scale=<span class="hljs-number">720</span>:<span class="hljs-number">1280</span>[vbg]<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><ul><li>crop&#x3D;(ih&#x2F;16*9)，从原视频中裁剪出一个竖屏区域作为背景</li><li>scale&#x3D;iw&#x2F;10:-2，对裁剪后的视频缩小未原来的1&#x2F;10以便高斯模糊（速度快）</li><li>gblur&#x3D;sigma&#x3D;5，对缩小后的视频背景进行高斯模糊</li><li>scale&#x3D;720:1280[vbg]，对高斯模糊后的视频进行放大，并保存到vbg变量中</li></ul><h4 id="背景与原视频的叠加"><a href="#背景与原视频的叠加" class="headerlink" title="背景与原视频的叠加"></a>背景与原视频的叠加</h4><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[vbg]</span><span class="hljs-section">[0:v]</span><span class="hljs-attr">overlay</span>=<span class="hljs-number">0</span>:(H-h)/<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><ul><li>overlay的参数x,y。</li><li>0为x的坐标</li><li>(H-h)&#x2F;2是y的坐标，也就是高度居中叠加</li></ul><h2 id="alphamerge实现溶图效果"><a href="#alphamerge实现溶图效果" class="headerlink" title="alphamerge实现溶图效果"></a>alphamerge实现溶图效果</h2><h3 id="合成命令"><a href="#合成命令" class="headerlink" title="合成命令"></a>合成命令</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ffmpeg -<span class="hljs-selector-tag">i</span> ceshi2<span class="hljs-selector-class">.png</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-attribute">mask</span><span class="hljs-selector-class">.png</span> -filter_complex <span class="hljs-selector-attr">[1:v]</span>alphaextract<span class="hljs-selector-attr">[mask]</span>;<span class="hljs-selector-attr">[0:v]</span><span class="hljs-selector-attr">[mask]</span>alphamerge -y out<span class="hljs-selector-class">.png</span><br></code></pre></td></tr></table></figure><blockquote><p> 注意的是：两个输入源（这里是两个图片）的尺寸要一致，如果不一致的话，可以在滤镜中先用scale命令缩放到一致的大小。</p></blockquote><h3 id="alphaextract"><a href="#alphaextract" class="headerlink" title="alphaextract"></a>alphaextract</h3><p>可以提取一个透明图中的透明通道。黑色代表透明，白色代表不透明。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-attribute">mask</span><span class="hljs-selector-class">.png</span> -vf alphaextract -y extract<span class="hljs-selector-class">.png</span><br></code></pre></td></tr></table></figure><h3 id="alphamerge"><a href="#alphamerge" class="headerlink" title="alphamerge"></a>alphamerge</h3><p>可以将透明通道图，和另一个素材图合并。实现最终的效果。</p><h2 id="colorkey，chromakey抠图的使用"><a href="#colorkey，chromakey抠图的使用" class="headerlink" title="colorkey，chromakey抠图的使用"></a>colorkey，chromakey抠图的使用</h2><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">color</span><br>The <span class="hljs-built_in">color</span> which will be replaced with transparency.<br>用于抠图的背景色。这个色值将会被替换成透明色<br><br>similarity<br>Similarity percentage with the <span class="hljs-built_in">key</span> <span class="hljs-built_in">color</span>.<br><span class="hljs-number">0.01</span> matches only the exact <span class="hljs-built_in">key</span> <span class="hljs-built_in">color</span>, <span class="hljs-keyword">while</span> <span class="hljs-number">1.0</span> matches everything.<br>相似度，范围[<span class="hljs-number">0.01</span>-<span class="hljs-number">1</span>]，<span class="hljs-number">1</span>的话匹配所有色值<br><br><br>blend<br>Blend percentage.<br><span class="hljs-number">0.0</span> makes pixels either fully <span class="hljs-built_in">transparent</span>, <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">transparent</span> <span class="hljs-built_in">at</span> all.<br>Higher <span class="hljs-built_in">values</span> result <span class="hljs-keyword">in</span> semi-<span class="hljs-built_in">transparent</span> pixels, with a higher transparency the more similar the pixels <span class="hljs-built_in">color</span> <span class="hljs-built_in">is</span> to the <span class="hljs-built_in">key</span> <span class="hljs-built_in">color</span>.<br>透明度[<span class="hljs-number">0</span>-<span class="hljs-number">1</span>]，默认<span class="hljs-number">0</span>，完全透明，例如<span class="hljs-number">0.5</span>则是<span class="hljs-number">50</span><span class="hljs-symbol">%</span>的透明度<br></code></pre></td></tr></table></figure><h3 id="colorkey抠图"><a href="#colorkey抠图" class="headerlink" title="colorkey抠图"></a>colorkey抠图</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i pic1.png -vf colorkey=<span class="hljs-number">0</span>xc9c8c8:<span class="hljs-number">0</span>.<span class="hljs-number">3</span> -y colorkey_test_1.png<br></code></pre></td></tr></table></figure><h2 id="edgedetect边缘检测"><a href="#edgedetect边缘检测" class="headerlink" title="edgedetect边缘检测"></a>edgedetect边缘检测</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs vim">Detect <span class="hljs-built_in">and</span> draw edges. The <span class="hljs-built_in">filter</span> uses the Canny Edge Detection algorithm.<br>边缘检测，使用canny边缘算法<br><br>The <span class="hljs-built_in">filter</span> accepts the following <span class="hljs-keyword">options</span>:<br>滤镜接收一下参数<br><br>low<br>high<br>Set low <span class="hljs-built_in">and</span> high threshold <span class="hljs-built_in">values</span> used by the Canny thresholding algorithm.<br>设置Canny阈值算法使用的低阈值和高阈值。<br><br>The high threshold selects the <span class="hljs-string">&quot;strong&quot;</span> edge pixels, which are then connected through <span class="hljs-number">8</span>-connectivity with the <span class="hljs-string">&quot;weak&quot;</span> edge pixels selected by the low threshold.<br>高阈值选择“强”边缘像素，然后通过<span class="hljs-number">8</span>-连通性与低阈值选择的“弱”边缘像素连接<br>四连通区域是<span class="hljs-number">11011</span>其中<span class="hljs-number">0</span>代表中心点，<span class="hljs-number">4</span>个<span class="hljs-number">1</span>代表上下左右四个方向。<br>八连通区域是<span class="hljs-number">111101111</span>也就是除了上下左右四个方向外，还有左上、右上、左下、右下。<br><br>low <span class="hljs-built_in">and</span> high threshold <span class="hljs-built_in">values</span> must <span class="hljs-keyword">be</span> chosen in the <span class="hljs-built_in">range</span> [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>], <span class="hljs-built_in">and</span> low should <span class="hljs-keyword">be</span> lesser <span class="hljs-built_in">or</span> equal <span class="hljs-keyword">to</span> high.<br>必须在[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]范围内选择低阈值和高阈值，低阈值应小于或等于高阈值。<br><br>Default value <span class="hljs-keyword">for</span> low <span class="hljs-keyword">is</span> <span class="hljs-number">20</span>/<span class="hljs-number">255</span>, <span class="hljs-built_in">and</span> default value <span class="hljs-keyword">for</span> high <span class="hljs-keyword">is</span> <span class="hljs-number">50</span>/<span class="hljs-number">255</span>.<br>“低”的默认值为<span class="hljs-number">20</span>/<span class="hljs-number">255</span>，“高”的默认值为<span class="hljs-number">50</span>/<span class="hljs-number">255</span><br><br><span class="hljs-keyword">mode</span><br>Define the drawing <span class="hljs-keyword">mode</span>.<br>定义绘图模式<br><br>‘wires’<br>Draw white/gray wires <span class="hljs-keyword">on</span> black background.<br>如上图，黑白<br><br>‘colormix’<br>Mix the colors <span class="hljs-keyword">to</span> create <span class="hljs-keyword">a</span> paint/cartoon effect.<br>最后生成图，类似油画效果，卡通效果<br><br>‘canny’<br>Apply Canny edge detector <span class="hljs-keyword">on</span> <span class="hljs-keyword">all</span> selected planes.<br><br>Default value <span class="hljs-keyword">is</span> wires.<br><br>planes<br>Select planes <span class="hljs-keyword">for</span> filtering. By default <span class="hljs-keyword">all</span> available planes are filtered.<br></code></pre></td></tr></table></figure><p><a href="http://ffmpeg.org/ffmpeg-filters.html#edgedetect">ffmpeg edgedetect</a></p><p><a href="https://baike.baidu.com/item/canny%E7%AE%97%E6%B3%95/8439208?fr=aladdin">Canny边缘检测算法</a></p><h2 id="overlay动画，右移动画，左侧入场"><a href="#overlay动画，右移动画，左侧入场" class="headerlink" title="overlay动画，右移动画，左侧入场"></a>overlay动画，右移动画，左侧入场</h2><h3 id="命令-1"><a href="#命令-1" class="headerlink" title="命令"></a>命令</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i <span class="hljs-number">11</span>.jpg -vf color=c=green:s=<span class="hljs-number">720</span>x1280[vbg];[vbg][<span class="hljs-number">0</span>:v]overlay=x=&#x27;if(lte(t,<span class="hljs-number">5</span>),-w+(W+w)/<span class="hljs-number">2</span>/<span class="hljs-number">5</span>*t,(W-w)/<span class="hljs-number">2</span>)&#x27;:y=(H-h)/<span class="hljs-number">2</span> -t <span class="hljs-number">5</span> -y move.mp4<br></code></pre></td></tr></table></figure><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>输入文件<br>-i <span class="hljs-number">11</span>.jpg<br><br><span class="hljs-regexp">//</span>创建一个绿色的底板<br>color=c=green:s=<span class="hljs-number">720</span>x1280[vbg]<br><br><span class="hljs-regexp">//</span>两个层叠加<br>[vbg][<span class="hljs-number">0</span>:v]overlay=x=<span class="hljs-string">&#x27;if(lte(t,5),-w+(W+w)/2/5*t,(W-w)/2)&#x27;</span>:y=(H-h)/<span class="hljs-number">2</span><br><span class="hljs-regexp">//</span>x的坐标<br>x=<span class="hljs-string">&#x27;if(lte(t,5),-w+(W+w)/2/5*t,(W-w)/2)&#x27;</span><br><span class="hljs-regexp">//y</span>的坐标<br>y=(H-h)/<span class="hljs-number">2</span><br><br><span class="hljs-regexp">//</span>总时长<span class="hljs-number">5</span>秒<br>-t <span class="hljs-number">5</span><br><br><span class="hljs-regexp">//</span>生成并覆盖文件<br>-y move.mp4<br></code></pre></td></tr></table></figure><h3 id="核心"><a href="#核心" class="headerlink" title="核心"></a>核心</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">核心是x的坐标计算<br>x=<span class="hljs-string">&#x27;if(lte(t,5),-w+(W+w)/2/5*t,(W-w)/2)&#x27;</span><br><br>lte(t,<span class="hljs-number">5</span>)当t小于等于<span class="hljs-number">5</span>的时候，执行-w+(W+w)<span class="hljs-regexp">/2/</span><span class="hljs-number">5</span>*t<br><br>其中最核心的是-w+(W+w)<span class="hljs-regexp">/2/</span><span class="hljs-number">5</span>*t<br><span class="hljs-number">1</span>.移动距离(W+w)/<span class="hljs-number">2</span><br><span class="hljs-number">2</span>.移动速度(W+w)<span class="hljs-regexp">/2/</span><span class="hljs-number">5</span><br><span class="hljs-number">3</span>.当前时刻的移动距离(W+w)<span class="hljs-regexp">/2/</span><span class="hljs-number">5</span>*t<br><span class="hljs-number">4</span>.当前位置-w+(W+w)<span class="hljs-regexp">/2/</span><span class="hljs-number">5</span>*t<br></code></pre></td></tr></table></figure><h2 id="比特率码率（-b）、帧率（-r）和文件大小（-fs）相关操作"><a href="#比特率码率（-b）、帧率（-r）和文件大小（-fs）相关操作" class="headerlink" title="比特率码率（-b）、帧率（-r）和文件大小（-fs）相关操作"></a>比特率码率（-b）、帧率（-r）和文件大小（-fs）相关操作</h2><h3 id="帧率"><a href="#帧率" class="headerlink" title="帧率"></a>帧率</h3><blockquote><p>帧率（Frame rate）也叫帧频率，帧率是视频文件中每一秒的帧数，肉眼想看到连续移动图像至少需要15帧。</p></blockquote><p>帧率</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> –i input –r <span class="hljs-number">25</span> output # 用 -r 参数设置帧率<br><span class="hljs-attribute">ffmpeg</span> -i <span class="hljs-number">1</span>.mp4 -vf fps=fps=<span class="hljs-number">25</span> <span class="hljs-number">11</span>.mp4  # 用fps的filter设置帧率<br></code></pre></td></tr></table></figure><p>例如设置帧率为29.97fps，下面三种方式具有相同的结果：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.avi</span> -r <span class="hljs-number">29.97</span> output<span class="hljs-selector-class">.mp4</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.avi</span> -r <span class="hljs-number">30000</span>/<span class="hljs-number">1001</span> output<span class="hljs-selector-class">.mp4</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.avi</span> -r netsc output.mp4<br></code></pre></td></tr></table></figure><h3 id="码率"><a href="#码率" class="headerlink" title="码率"></a>码率</h3><blockquote><p>码率也叫比特率（Bit rate）(也叫数据率)是一个确定整体视频&#x2F;音频质量的参数，秒为单位处理的字节数，码率和视频质量成正比，在视频文件中中比特率用bps来表达。</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i <span class="hljs-number">1</span>.mp4 -b <span class="hljs-number">1</span>.<span class="hljs-number">5</span>M <span class="hljs-number">2</span>.mp4  # 设置参数-b<br><span class="hljs-attribute">ffmpeg</span> -i input.avi -b:v <span class="hljs-number">1500</span>k output.mp4 # 音频：-b:a ,视频： -b:v  设置视频码率为<span class="hljs-number">1500</span>kbps<br></code></pre></td></tr></table></figure><h3 id="文件大小"><a href="#文件大小" class="headerlink" title="文件大小"></a>文件大小</h3><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sas">控制输出文件大小<br>-fs (<span class="hljs-keyword">file</span> size首字母缩写) <br>ffmpeg -i <span class="hljs-keyword">input</span>.avi -fs 1024K <span class="hljs-keyword">output</span>.mp4<br><br>计算输出文件大小<br>(视频码率+音频码率) <span class="hljs-comment">* 时长 /8 = 文件大小</span><br></code></pre></td></tr></table></figure><h2 id="crop裁剪相关"><a href="#crop裁剪相关" class="headerlink" title="crop裁剪相关"></a>crop裁剪相关</h2><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">crop的参数格式为w:h:<span class="hljs-keyword">x</span>:y，<br>w、h为输出视频的宽和高，<br><span class="hljs-keyword">x</span>、y标记输入视频中的某点，将该点作为基准点，向右下进行裁剪得到输出视频。<br>如果<span class="hljs-keyword">x</span> y不写的话，默认居中剪切<br></code></pre></td></tr></table></figure><h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i <span class="hljs-number">3</span>.mp4 -vf crop=<span class="hljs-number">400</span>:<span class="hljs-number">400</span> <span class="hljs-number">33</span>.mp4 -y<br><span class="hljs-attribute">ffmpeg</span> -i <span class="hljs-number">3</span>.mp4 -vf crop=<span class="hljs-number">400</span>:<span class="hljs-number">400</span>:<span class="hljs-number">0</span>:<span class="hljs-number">0</span> <span class="hljs-number">333</span>.mp4 -y<br></code></pre></td></tr></table></figure><h2 id="vflip，hflip实现视频对称效果，镜面水面效果，上下对称，左右对称"><a href="#vflip，hflip实现视频对称效果，镜面水面效果，上下对称，左右对称" class="headerlink" title="vflip，hflip实现视频对称效果，镜面水面效果，上下对称，左右对称"></a>vflip，hflip实现视频对称效果，镜面水面效果，上下对称，左右对称</h2><p>上下对称，水面效果</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">ffmpeg -i 1.mp4 -filter_complex <span class="hljs-string">&quot;<span class="hljs-subst">[0:v]</span>pad=h=2*ih<span class="hljs-subst">[a]</span>;<span class="hljs-subst">[0:v]</span>vflip<span class="hljs-subst">[b]</span>;<span class="hljs-subst">[a]</span><span class="hljs-subst">[b]</span>overlay=y=h&quot;</span> duichen3.mp4 -y<br></code></pre></td></tr></table></figure><p>左右对称，镜面效果</p><pre><code class="hljs">ffmpeg -i 1.mp4 -filter_complex &quot;[0:v]pad=w=2*iw[a];[0:v]hflip[b];[a][b]overlay=x=w&quot; duichen2.mp4 -y</code></pre><p>将视频的上半部分翻转，并覆盖在下半部分的区域</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">ffmpeg -i 4.mp4 -vf <span class="hljs-string">&quot;split <span class="hljs-subst">[main]</span><span class="hljs-subst">[tmp]</span>;<span class="hljs-subst">[tmp]</span> crop=iw:ih/2:0:0, vflip <span class="hljs-subst">[flip]</span>;<span class="hljs-subst">[main]</span><span class="hljs-subst">[flip]</span> overlay=0:H/2&quot;</span> 44.mp4 -y<br></code></pre></td></tr></table></figure><h2 id="split，pad，crop，scale，hflip，overlay"><a href="#split，pad，crop，scale，hflip，overlay" class="headerlink" title="split，pad，crop，scale，hflip，overlay"></a>split，pad，crop，scale，hflip，overlay</h2><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs smali">1.mp4<br>原视频<br><br>2.mp4<br>将视频宽度放大一倍，高不变，视频被横向拉伸<br>ffmpeg -i 1.mp4 -vf scale=iw*2:ih 2.mp4<br><br>3.mp4<br>宽高各放大一倍<br>ffmpeg -i 1.mp4 -vf scale=iw*2:ih*2 3.mp4<br><br>4.mp4<br>将宽度扩展一倍，不是缩放，不是拉伸，而是加长，用黑色填充。<br>ffmpeg -i 1.mp4 -vf pad=2*iw 4.mp4<br><br>5.mp4<br>视频水平翻转hflip 如果是竖直翻转vflip<br>ffmpeg -i 1.mp4 -vf hflip 5.mp4<br><br>6.mp4<br>将视频4和5结合，5放在4的空白区域内<br>ffmpeg -i 4.mp4 -i 5.mp4 -filter_complex overlay=w:0 6.mp4<br><br>7.mp4<br>使用过滤器链，一句命令搞定4，5，6步<br>ffmpeg -i 1.mp4 -vf split[a][b];[a]pad=2*iw[1];[b]hflip[2];[1][2]overlay=w:0 7.mp4<br>F1: split过滤器创建两个输入文件的拷贝并标记为[a],[b]<br>F2: [a]作为pad过滤器的输入，pad过滤器产生2倍宽度并输出到[1].<br>F3: [b]作为hflip过滤器的输入，vflip过滤器水平翻转视频并输出到[2].<br>F4: 用overlay过滤器把 [2]覆盖到[1]的旁边.<br></code></pre></td></tr></table></figure><h2 id="分辨率相关的操作（-s-和-scale-filter）"><a href="#分辨率相关的操作（-s-和-scale-filter）" class="headerlink" title="分辨率相关的操作（-s 和 -scale filter）"></a>分辨率相关的操作（-s 和 -scale filter）</h2><h3 id="调整视频分辨率-s"><a href="#调整视频分辨率-s" class="headerlink" title="调整视频分辨率-s"></a>调整视频分辨率-s</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">1</span>、用-s参数设置视频分辨率，参数值wxh，w宽度单位是像素，h高度单位是像素<br>ffmpeg -<span class="hljs-selector-tag">i</span> input_file -s <span class="hljs-number">320</span>x240 output_file<br><br><span class="hljs-number">2</span>、预定义的视频尺寸<br>下面两条命令有相同效果<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.avi</span> -s <span class="hljs-number">640</span>x480 output<span class="hljs-selector-class">.avi</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.avi</span> -s vga output.avi<br></code></pre></td></tr></table></figure><h3 id="Scale-filter调整分辨率"><a href="#Scale-filter调整分辨率" class="headerlink" title="Scale filter调整分辨率"></a>Scale filter调整分辨率</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs stylus">Scale <span class="hljs-attribute">filter</span>的优点是可以使用一些额外的参数<br>Scale=<span class="hljs-attribute">width</span>:height[:interl=&#123;<span class="hljs-number">1</span>|-<span class="hljs-number">1</span>&#125;]<br><br>下面两条命令有相同效果<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mpg</span> -s <span class="hljs-number">320</span>x240 output<span class="hljs-selector-class">.mp4</span> <br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mpg</span> -vf scale=<span class="hljs-number">320</span>:<span class="hljs-number">240</span> output<span class="hljs-selector-class">.mp4</span><br><br>对输入视频成比例缩放<br>改变为源视频一半大小<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mpg</span> -vf scale=iw/<span class="hljs-number">2</span>:ih/<span class="hljs-number">2</span> output<span class="hljs-selector-class">.mp4</span><br>改变为原视频的<span class="hljs-number">90%</span>大小：<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mpg</span> -vf scale=iw*<span class="hljs-number">0.9</span>:ih*<span class="hljs-number">0.9</span> output.mp4<br></code></pre></td></tr></table></figure><h3 id="在未知视频的分辨率时，保证调整的分辨率与源视频有相同的横纵比。"><a href="#在未知视频的分辨率时，保证调整的分辨率与源视频有相同的横纵比。" class="headerlink" title="在未知视频的分辨率时，保证调整的分辨率与源视频有相同的横纵比。"></a>在未知视频的分辨率时，保证调整的分辨率与源视频有相同的横纵比。</h3><blockquote><p>可能会有错误，不推荐使用，最好传入明确的缩放值。另外，scale只能接受偶数，否则height not divisible by 2</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">宽度固定<span class="hljs-number">400</span>，高度成比例：<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.avi</span> -vf scale=<span class="hljs-number">400</span>:-<span class="hljs-number">2</span><br><br>相反地，高度固定<span class="hljs-number">300</span>，宽度成比例：<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.avi</span> -vf scale=-<span class="hljs-number">2</span>:<span class="hljs-number">300</span><br></code></pre></td></tr></table></figure><h2 id="crop（宽高xy）-scale（宽高）-overlay（xy）-参数区别"><a href="#crop（宽高xy）-scale（宽高）-overlay（xy）-参数区别" class="headerlink" title="crop（宽高xy） scale（宽高） overlay（xy） 参数区别"></a>crop（宽高xy） scale（宽高） overlay（xy） 参数区别</h2><h3 id="crop视频裁剪区域，宽高xy"><a href="#crop视频裁剪区域，宽高xy" class="headerlink" title="crop视频裁剪区域，宽高xy"></a>crop视频裁剪区域，宽高xy</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs css">w, out_w<br>The <span class="hljs-attribute">width</span> of the output <span class="hljs-selector-tag">video</span>. It defaults <span class="hljs-selector-tag">to</span> iw. This expression is evaluated only once during the <span class="hljs-attribute">filter</span> configuration, or when the ‘w’ or ‘out_w’ command is sent.<br><br>h, out_h<br>The <span class="hljs-attribute">height</span> of the output <span class="hljs-selector-tag">video</span>. It defaults <span class="hljs-selector-tag">to</span> ih. This expression is evaluated only once during the <span class="hljs-attribute">filter</span> configuration, or when the ‘h’ or ‘out_h’ command is sent.<br><br>x<br>The horizontal <span class="hljs-attribute">position</span>, in the <span class="hljs-selector-tag">input</span> <span class="hljs-selector-tag">video</span>, of the <span class="hljs-attribute">left</span> edge of the output <span class="hljs-selector-tag">video</span>. It defaults <span class="hljs-selector-tag">to</span> (in_w-out_w)/<span class="hljs-number">2</span>. This expression is evaluated per-frame.<br><br>y<br>The vertical <span class="hljs-attribute">position</span>, in the <span class="hljs-selector-tag">input</span> <span class="hljs-selector-tag">video</span>, of the <span class="hljs-attribute">top</span> edge of the output <span class="hljs-selector-tag">video</span>. It defaults <span class="hljs-selector-tag">to</span> (in_h-out_h)/<span class="hljs-number">2</span>. This expression is evaluated per-frame.<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">crop</span>=w=<span class="hljs-number">100</span>:h=<span class="hljs-number">100</span>:x=<span class="hljs-number">12</span>:y=<span class="hljs-number">34</span><br></code></pre></td></tr></table></figure><h3 id="scale缩放，宽高"><a href="#scale缩放，宽高" class="headerlink" title="scale缩放，宽高"></a>scale缩放，宽高</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">width, w<br>height, h<br><span class="hljs-keyword">Set</span> the output video dimension expression. <span class="hljs-keyword">Default</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> the <span class="hljs-keyword">input</span> dimension.<br><br><span class="hljs-keyword">If</span> the width <span class="hljs-keyword">or</span> w <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0</span>, the <span class="hljs-keyword">input</span> width <span class="hljs-keyword">is</span> used <span class="hljs-keyword">for</span> the output. <span class="hljs-keyword">If</span> the height <span class="hljs-keyword">or</span> h <span class="hljs-keyword">value</span> <span class="hljs-keyword">is</span> <span class="hljs-number">0</span>, the <span class="hljs-keyword">input</span> height <span class="hljs-keyword">is</span> used <span class="hljs-keyword">for</span> the output.<br><br><span class="hljs-keyword">If</span> one <span class="hljs-keyword">and</span> <span class="hljs-keyword">only</span> one <span class="hljs-keyword">of</span> the <span class="hljs-keyword">values</span> <span class="hljs-keyword">is</span> -n <span class="hljs-keyword">with</span> n &gt;= <span class="hljs-number">1</span>, the scale <span class="hljs-keyword">filter</span> will use a <span class="hljs-keyword">value</span> that maintains the aspect ratio <span class="hljs-keyword">of</span> the <span class="hljs-keyword">input</span> image, calculated <span class="hljs-keyword">from</span> the other specified dimension. <span class="hljs-keyword">After</span> that it will, however, make sure that the calculated dimension <span class="hljs-keyword">is</span> divisible <span class="hljs-keyword">by</span> n <span class="hljs-keyword">and</span> adjust the <span class="hljs-keyword">value</span> <span class="hljs-keyword">if</span> necessary.<br><br><span class="hljs-keyword">If</span> <span class="hljs-keyword">both</span> <span class="hljs-keyword">values</span> are -n <span class="hljs-keyword">with</span> n &gt;= <span class="hljs-number">1</span>, the behavior will be identical <span class="hljs-keyword">to</span> <span class="hljs-keyword">both</span> <span class="hljs-keyword">values</span> being <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> previously detailed.<br><br>See below <span class="hljs-keyword">for</span> the list <span class="hljs-keyword">of</span> accepted constants <span class="hljs-keyword">for</span> use <span class="hljs-keyword">in</span> the dimension expression.<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">scale</span>=w=<span class="hljs-number">200</span>:h=<span class="hljs-number">100</span><br><span class="hljs-attribute">scale</span>=w=iw/<span class="hljs-number">2</span>:h=ih/<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="overlay视频叠加，xy"><a href="#overlay视频叠加，xy" class="headerlink" title="overlay视频叠加，xy"></a>overlay视频叠加，xy</h3><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">x<br>y<br>Set <span class="hljs-keyword">the</span> expression <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> x <span class="hljs-keyword">and</span> y coordinates <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> overlaid video <span class="hljs-keyword">on</span> <span class="hljs-title">the</span> <span class="hljs-title">main</span> <span class="hljs-title">video</span>.<br>Default <span class="hljs-built_in">value</span> is <span class="hljs-string">&quot;0&quot;</span> <span class="hljs-keyword">for</span> both expressions. <br>In <span class="hljs-keyword">case</span> <span class="hljs-keyword">the</span> expression is invalid, <span class="hljs-keyword">it</span> is <span class="hljs-built_in">set</span> <span class="hljs-built_in">to</span> <span class="hljs-keyword">a</span> huge <span class="hljs-built_in">value</span> <br>(meaning that <span class="hljs-keyword">the</span> overlay will <span class="hljs-keyword">not</span> be displayed <span class="hljs-keyword">within</span> <span class="hljs-keyword">the</span> output visible area)<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">overlay</span>=<span class="hljs-number">0</span>:<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h2 id="scale宽高只能接受偶数，否则出错-height-not-divisible-by-2"><a href="#scale宽高只能接受偶数，否则出错-height-not-divisible-by-2" class="headerlink" title="scale宽高只能接受偶数，否则出错 height not divisible by 2"></a>scale宽高只能接受偶数，否则出错 height not divisible by 2</h2><p>例如想要把视频缩放到1111x1111，则会报错 height not divisible by 2</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i <span class="hljs-number">10</span>.mp4 -vf scale=<span class="hljs-number">1111</span>:<span class="hljs-number">1111</span> <span class="hljs-number">101010</span>.mp4<br></code></pre></td></tr></table></figure><p>FFmpeg中的scale命令后面的宽高，只能接受偶数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i <span class="hljs-number">10</span>.mp4 -vf scale=<span class="hljs-number">1110</span>:<span class="hljs-number">1110</span> <span class="hljs-number">101010</span>.mp4<br></code></pre></td></tr></table></figure><p>可行的方案是：在scale中加入处理trunc类似于int取整，对1111&#x2F;2取整，最后在*2，结果一定是偶数</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i <span class="hljs-number">10</span>.mp4 -vf scale=trunc(<span class="hljs-number">1111</span>/<span class="hljs-number">2</span>)*<span class="hljs-number">2</span>:trunc(<span class="hljs-number">1111</span>/<span class="hljs-number">2</span>)*<span class="hljs-number">2</span> <span class="hljs-number">101010</span>.mp4<br></code></pre></td></tr></table></figure><p>另一个简单的方案：高度使用-2，负数代表自动按比例缩放，2代表结果取2的倍数</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">ffmpeg -i <span class="hljs-keyword">in</span>.mp4 -vf <span class="hljs-built_in">scale</span>=iw:-<span class="hljs-number">2</span> <span class="hljs-keyword">out</span>.mp4<br></code></pre></td></tr></table></figure><blockquote><p>另外：crop命令裁剪的时候，会自动裁剪成偶数</p></blockquote><h2 id="map命令的使用"><a href="#map命令的使用" class="headerlink" title="-map命令的使用"></a>-map命令的使用</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>标题理解-map参数的最好办法就是想像一下怎么去告诉ffmpeg你要从源文件中选择&#x2F;拷贝哪个流到输出文件。输出文件的stream顺序取决于在命令行中-map的参数顺序。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认操作（没有指定map参数），比如：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ffmpeg -i <span class="hljs-literal">INPUT</span> <span class="hljs-literal">OUTPUT</span><br></code></pre></td></tr></table></figure><p>本质上，是从所有输入中发现“最高质量”（单个）视频输入流和“最高质量”（单个）音频输入流，并“发送”到OUTPUT。所有其他输入流实质上都被丢弃了。</p><p>如果我们想用map命令“显示”与上面命令相同的操作，它会是这样的：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ffmpeg -i <span class="hljs-literal">INPUT</span> -map single_highest_quality_video_stream_from_all_inputs -map single_highest_quality_audio_stream_from_all_inputs <span class="hljs-literal">OUTPUT</span><br></code></pre></td></tr></table></figure><p>此处输出将有两个流，一个音频，一个视频。</p><p>当你想要控制哪些流被包含，或者在输出中包含不止一个流时，你需要&#x2F;想要手动指定“-map”命令，并修改这些参数。</p><p>输入文件<br>在下面的所有示例中，我们将使用一个类似下面的示例输入文件：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-comment"># fmpeg -i input.mkv</span><br><br>ffmpeg <span class="hljs-built_in">version</span> ... Copyright (c) <span class="hljs-number">2000</span><span class="hljs-number">-2012</span> <span class="hljs-keyword">the</span> FFmpeg developers<br>...<br>Input <span class="hljs-comment">#0, matroska,webm, from &#x27;input.mkv&#x27;:</span><br>  Duration: <span class="hljs-number">01</span>:<span class="hljs-number">39</span>:<span class="hljs-number">44.02</span>, <span class="hljs-built_in">start</span>: <span class="hljs-number">0.000000</span>, bitrate: <span class="hljs-number">5793</span> kb/s<br>    Stream <span class="hljs-comment">#0:0(eng): Video: h264 (High), yuv420p, 1920x800, 23.98 fps, 23.98 tbr, 1k tbn, 47.95 tbc (default)</span><br>    Stream <span class="hljs-comment">#0:1(ger): Audio: dts (DTS), 48000 Hz, 5.1(side), s16, 1536 kb/s (default)</span><br>    Stream <span class="hljs-comment">#0:2(eng): Audio: dts (DTS), 48000 Hz, 5.1(side), s16, 1536 kb/s</span><br>    Stream <span class="hljs-comment">#0:3(ger): Subtitle: text (default)</span><br>At least <span class="hljs-literal">one</span> output <span class="hljs-built_in">file</span> must be specified<br></code></pre></td></tr></table></figure><p>例子1<br>那么现在，我们说我们想要：</p><p>将视频流复制<br>将德语音频流编码为MP3（128kbps）和AAC（96kbps）（在输出中创建两个音频流）<br>将英语音频流删除<br>将字幕流复制<br>这可以用以下的ffmpeg命令来完成：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim">ffmpeg -i <span class="hljs-built_in">input</span>.<span class="hljs-keyword">mkv</span> \<br>    -<span class="hljs-keyword">map</span> <span class="hljs-number">0</span>:<span class="hljs-number">0</span> -<span class="hljs-keyword">map</span> <span class="hljs-number">0</span>:<span class="hljs-number">1</span> -<span class="hljs-keyword">map</span> <span class="hljs-number">0</span>:<span class="hljs-number">1</span> -<span class="hljs-keyword">map</span> <span class="hljs-number">0</span>:<span class="hljs-number">3</span> \<br>    -<span class="hljs-keyword">c</span>:v <span class="hljs-keyword">copy</span> \<br>    -<span class="hljs-keyword">c</span>:<span class="hljs-variable">a:0</span> libmp3lame -<span class="hljs-variable">b:a</span>:<span class="hljs-number">0</span> <span class="hljs-number">128</span><span class="hljs-keyword">k</span> \<br>    -<span class="hljs-keyword">c</span>:<span class="hljs-variable">a:1</span> libfaac -<span class="hljs-variable">b:a</span>:<span class="hljs-number">1</span> <span class="hljs-number">96</span><span class="hljs-keyword">k</span> \<br>    -<span class="hljs-keyword">c</span>:s <span class="hljs-keyword">copy</span> \<br>    output.<span class="hljs-keyword">mkv</span><br></code></pre></td></tr></table></figure><p>注意一下参数里没有“-map 0:2”，并且“-map 0:1”被写了两次。</p><p>使用“-map 0:0 -map 0:1 -map 0:1 -map 0:3”，我们告诉ffmpeg选择&#x2F;映射指定的输入流按相应顺序输出。</p><p>因此，我们的输出将具有以下流：</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso">Output #0, matroska, <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;output.mkv&#x27;</span>:<br>    Stream #0:<span class="hljs-number">0</span>(eng): Video <span class="hljs-params">...</span><br>    Stream #0:<span class="hljs-number">1</span>(ger): Audio <span class="hljs-params">...</span><br>    Stream #0:<span class="hljs-number">2</span>(ger): Audio <span class="hljs-params">...</span><br>    Stream #0:<span class="hljs-number">3</span>(ger): Subtitle <span class="hljs-params">...</span><br></code></pre></td></tr></table></figure><p>在我们选择好在输出中包含哪些流之后，使用“-map”选项，我们为输出中的每个流指定相应的编解码器。</p><p>视频和字幕流已经被复制，德语的音频流被编码成了两个新的音频流，MP3和AAC。</p><p>我们使用“-c?️0”来指定输出的第一路音频流编解码器（codec），且用“-c?️1”来指定输出的第二路音频流编解码器（codec）。</p><p>注意，“a:0”指的是输出的第一路音频流（本例中为0:1）,“a:1”指的是输出的第二路音频流（也映射到输入流0:1），等。</p><p>结果将会是：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Output</span> #<span class="hljs-number">0</span>, matroska, to &#x27;output.mkv&#x27;:<br>    <span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">0</span>(eng): Video ...<br>    <span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">1</span>(ger): Audio ...<br>    <span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">2</span>(ger): Audio ...<br>    <span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">3</span>(ger): Subtitle ...<br><span class="hljs-attribute">Stream</span> mapping:<br>  <span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">0</span> -&gt; #<span class="hljs-number">0</span>:<span class="hljs-number">0</span> (copy)<br>  <span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">1</span> -&gt; #<span class="hljs-number">0</span>:<span class="hljs-number">1</span> (dca -&gt; libmp3lame)<br>  <span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">2</span> -&gt; #<span class="hljs-number">0</span>:<span class="hljs-number">2</span> (dca -&gt; libfaac)<br>  <span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">3</span> -&gt; #<span class="hljs-number">0</span>:<span class="hljs-number">3</span> (copy)<br></code></pre></td></tr></table></figure><p>例子2<br>如果说我们想要倒序排列输入流，比如类似这样的输出：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">0</span>(ger): Subtitle: text (default)<br><span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">1</span>(eng): Audio: dts (DTS), <span class="hljs-number">48000</span> Hz, <span class="hljs-number">5</span>.<span class="hljs-number">1</span>(side), s16, <span class="hljs-number">1536</span> kb/s<br><span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">2</span>(ger): Audio: dts (DTS), <span class="hljs-number">48000</span> Hz, <span class="hljs-number">5</span>.<span class="hljs-number">1</span>(side), s16, <span class="hljs-number">1536</span> kb/s (default)<br><span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">3</span>(eng): Video: h264 (High), yuv420p, <span class="hljs-number">1920</span>x800, <span class="hljs-number">23</span>.<span class="hljs-number">98</span> fps, <span class="hljs-number">23</span>.<span class="hljs-number">98</span> tbr, <span class="hljs-number">1</span>k tbn, <span class="hljs-number">47</span>.<span class="hljs-number">95</span> tbc (default)<br></code></pre></td></tr></table></figure><p>这可以简单地使用下面的命令行来完成：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i input.mkv -map <span class="hljs-number">0</span>:<span class="hljs-number">3</span> -map <span class="hljs-number">0</span>:<span class="hljs-number">2</span> -map <span class="hljs-number">0</span>:<span class="hljs-number">1</span> -map <span class="hljs-number">0</span>:<span class="hljs-number">0</span> -c copy output.mkv<br></code></pre></td></tr></table></figure><p>注意，我们指定了所有的输入流，输出中的流顺序也会按照输入流的顺序生成。</p><p>选项“-c copy”告诉ffmpeg在所有流上使用“复制”操作。</p><p>例子3<br>如果我们想从同一个输入文件中仅提取音频流，那么我们可以这样做：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">ffmpeg -i <span class="hljs-built_in">input</span>.<span class="hljs-keyword">mkv</span> -<span class="hljs-keyword">map</span> <span class="hljs-number">0</span>:<span class="hljs-number">1</span> -<span class="hljs-keyword">map</span> <span class="hljs-number">0</span>:<span class="hljs-number">2</span> -<span class="hljs-keyword">c</span> <span class="hljs-keyword">copy</span> output.<span class="hljs-keyword">mkv</span><br></code></pre></td></tr></table></figure><p>例子4<br>如果我们想重新编码视频流，但复制所有其他流（如音频、字幕、附件等），我们可能会使用这样的东西：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">ffmpeg -i <span class="hljs-built_in">input</span>.<span class="hljs-keyword">mkv</span> -<span class="hljs-keyword">map</span> <span class="hljs-number">0</span> -<span class="hljs-keyword">c</span> <span class="hljs-keyword">copy</span> -<span class="hljs-keyword">c</span>:v mpeg2video output.<span class="hljs-keyword">mkv</span><br></code></pre></td></tr></table></figure><p>这将会告诉ffmpeg：</p><p>读取输入文件“‘input.mkv’”<br>选择要处理的所有输入流（第一个input＝0）（使用“-map 0”）<br>标记所有流被复制到输出（使用“-c copy”）<br>标记要重新编码的视频流（使用“-c:v mpeg2video”）<br>写入输出文件到“output.mkv”</p><p>例子5<br>你可以使用”-map”命令来创建多路文件输出，比如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">ffmpeg -i <span class="hljs-built_in">input</span>.<span class="hljs-keyword">mkv</span> -<span class="hljs-keyword">map</span> <span class="hljs-number">0</span>:<span class="hljs-number">1</span> -<span class="hljs-keyword">map</span> <span class="hljs-number">0</span>:<span class="hljs-number">2</span> audios_only.<span class="hljs-keyword">mkv</span> -<span class="hljs-keyword">map</span> <span class="hljs-number">0</span>:<span class="hljs-number">0</span> video_only.<span class="hljs-keyword">mkv</span><br></code></pre></td></tr></table></figure><p>默认是将“最高质量视频”和“最高质量音频”映射到每个输出文件（基本上为每个输出重复使用），更多请参考创建多个输出。</p><p>例子6<br>你可以使用一个滤镜（filtergraph）做为map参数来控制输出：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ffmpeg -i <span class="hljs-literal">INPUT</span> -filter_complex <span class="hljs-string">&quot;[0] scale=100x100[smaller_sized]&quot;</span>  -map <span class="hljs-string">&quot;[smaller_sized]&quot;</span> out.mp4<br></code></pre></td></tr></table></figure><p>这（在我们的示例中）与更精确地指定流是相同的，并且完全一样。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> INPUT -filter_complex “<span class="hljs-selector-attr">[0:0]</span> scale=<span class="hljs-number">100</span>x100<span class="hljs-selector-attr">[smaller_sized]</span>” -map “<span class="hljs-selector-attr">[smaller_sized]</span>” out.mp4<br></code></pre></td></tr></table></figure><p>例子7<br>还有一些流选择快捷方式，比如你也可以使用“0:v”：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">ffmpeg</span> <span class="hljs-selector-tag">-i</span> <span class="hljs-selector-tag">input</span> <span class="hljs-selector-tag">-map</span> <span class="hljs-number">0</span>:<span class="hljs-selector-tag">v</span> <span class="hljs-selector-tag">-map</span> <span class="hljs-number">0</span>:<span class="hljs-selector-tag">a</span> <span class="hljs-selector-tag">output</span><span class="hljs-selector-class">.mkv</span> # <span class="hljs-selector-tag">chooses</span> <span class="hljs-selector-tag">video</span> <span class="hljs-selector-tag">and</span> <span class="hljs-selector-tag">audio</span> <span class="hljs-selector-tag">from</span> <span class="hljs-selector-tag">input</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>具体请参见流指示器</p><p>例子8<br>MPEG流的选择：</p><p>最棘手的部分是从MPEG TS流选择时它可能会有多个流&#x2F;通道，如果你正在接收“实时数据”（live data）,仅仅指定索引可能是不行的，因为索引可以在运行时有所变化，所以：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ffmpeg -i <span class="hljs-literal">INPUT</span> -map <span class="hljs-number">0</span>:<span class="hljs-number">6</span> <span class="hljs-literal">OUTPUT</span> # 每次运行产生的结果可能都不一样，请不要这样使用!<br></code></pre></td></tr></table></figure><p>假设您的文件是MPEG，您可以运行“ffmpeg -i INPUT”（不指定输出）来查看它包含的程序ID和流ID，比如这个示例（对其进行分析，以帮助“确保”它接收到其中的所有流，可能并不总是需要的）。</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs prolog">$ ffmpeg -probesize <span class="hljs-number">50</span><span class="hljs-symbol">M</span> -analyzeduration <span class="hljs-number">50</span><span class="hljs-symbol">M</span> -i <span class="hljs-symbol">INPUT</span><br>...<br><span class="hljs-symbol">Input</span> #<span class="hljs-number">0</span>, mpegts, from <span class="hljs-string">&#x27;INPUT&#x27;</span>:<br>  <span class="hljs-symbol">Duration</span>: <span class="hljs-symbol">N</span>/<span class="hljs-symbol">A</span>, start: <span class="hljs-number">22159.226833</span>, bitrate: <span class="hljs-symbol">N</span>/<span class="hljs-symbol">A</span><br>  <span class="hljs-symbol">Program</span> <span class="hljs-number">1344</span><br>    <span class="hljs-symbol">Metadata</span>:<br>      service_name    : <span class="hljs-number">7</span> <span class="hljs-symbol">Digital</span><br>      service_provider: <span class="hljs-symbol">Seven</span> <span class="hljs-symbol">Network</span><br>    <span class="hljs-symbol">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">0</span>[<span class="hljs-number">0x401</span>]: <span class="hljs-symbol">Video</span>: mpeg2video (<span class="hljs-symbol">Main</span>) ([<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] / <span class="hljs-number">0x0002</span>), yuv420p(tv), <span class="hljs-number">720</span>x576 [<span class="hljs-symbol">SAR</span> <span class="hljs-number">64</span>:<span class="hljs-number">45</span> <span class="hljs-symbol">DAR</span> <span class="hljs-number">16</span>:<span class="hljs-number">9</span>], max. <span class="hljs-number">14950</span> kb/s, <span class="hljs-number">25</span> fps, <span class="hljs-number">25</span> tbr, <span class="hljs-number">90</span>k tbn, <span class="hljs-number">50</span> tbc<br>    <span class="hljs-symbol">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">1</span>[<span class="hljs-number">0x402</span>](eng): <span class="hljs-symbol">Audio</span>: mp2 ([<span class="hljs-number">3</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] / <span class="hljs-number">0x0003</span>), <span class="hljs-number">48000</span> <span class="hljs-symbol">Hz</span>, stereo, s16p, <span class="hljs-number">256</span> kb/s<br>  <span class="hljs-symbol">Program</span> <span class="hljs-number">1346</span><br>    <span class="hljs-symbol">Metadata</span>:<br>      service_name    : <span class="hljs-number">7</span><span class="hljs-symbol">TWO</span><br>      service_provider: <span class="hljs-symbol">Seven</span> <span class="hljs-symbol">Network</span><br>    <span class="hljs-symbol">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">3</span>[<span class="hljs-number">0x406</span>]: <span class="hljs-symbol">Unknown</span>: none ([<span class="hljs-number">5</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] / <span class="hljs-number">0x0005</span>)<br>    <span class="hljs-symbol">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">6</span>[<span class="hljs-number">0x421</span>]: <span class="hljs-symbol">Video</span>: mpeg2video (<span class="hljs-symbol">Main</span>) ([<span class="hljs-number">2</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] / <span class="hljs-number">0x0002</span>), yuv420p(tv), <span class="hljs-number">720</span>x576 [<span class="hljs-symbol">SAR</span> <span class="hljs-number">64</span>:<span class="hljs-number">45</span> <span class="hljs-symbol">DAR</span> <span class="hljs-number">16</span>:<span class="hljs-number">9</span>], max. <span class="hljs-number">14950</span> kb/s, <span class="hljs-number">25</span> fps, <span class="hljs-number">25</span> tbr, <span class="hljs-number">90</span>k tbn, <span class="hljs-number">50</span> tbc<br>    <span class="hljs-symbol">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">7</span>[<span class="hljs-number">0x422</span>](eng): <span class="hljs-symbol">Audio</span>: mp2 ([<span class="hljs-number">3</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] / <span class="hljs-number">0x0003</span>), <span class="hljs-number">48000</span> <span class="hljs-symbol">Hz</span>, stereo, s16p, <span class="hljs-number">192</span> kb/s<br>    <span class="hljs-symbol">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">8</span>[<span class="hljs-number">0x424</span>](eng): <span class="hljs-symbol">Subtitle</span>: dvb_teletext ([<span class="hljs-number">6</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] / <span class="hljs-number">0x0006</span>), <span class="hljs-number">492</span>x250<br>    <span class="hljs-symbol">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">4</span>[<span class="hljs-number">0x499</span>]: <span class="hljs-symbol">Unknown</span>: none ([<span class="hljs-number">11</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] / <span class="hljs-number">0x000B</span>)<br></code></pre></td></tr></table></figure><p>你可以通过程序ID指定所需的流：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i INPUT -map <span class="hljs-number">0</span>:p:<span class="hljs-number">1344</span> OUTPUT # 从程序<span class="hljs-number">1344</span>中输入两个输入，在本例子中是通道“<span class="hljs-number">7</span> digital”<br></code></pre></td></tr></table></figure><p>或指定子流：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ffmpeg -i <span class="hljs-literal">INPUT</span> -map i:<span class="hljs-number">0x401</span> <span class="hljs-literal">OUTPUT</span> # 从找到的任何地方用PID（MPEG Packet ID [stream identifier]）`<span class="hljs-number">0x401</span>拉入单个输入流，在本例中，它是“<span class="hljs-number">7</span> digital”中的视频流<br></code></pre></td></tr></table></figure><p>其他类似的，请参阅其说明符示例。注意，如果你有“未知”的流在那里，你可能需要添加-ignore_unknown标志。</p><p>还请注意，如果输入流包含多个程序ID，则可以使用相同的ffmpeg实例和这里描述的map命令同时来记录它们。</p><p>例子9<br>包括“全部”输入到输出。默认行为是只复制一个音频和一个视频通道。如果你想复制“所有”频道，请使用“-map”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ffmpeg -i <span class="hljs-built_in">input</span> -<span class="hljs-built_in">map</span> <span class="hljs-number">0</span> output.mp4 <span class="hljs-comment"># 从一个输入重新编码所有视频和音频通道 </span><br>ffmpeg -i <span class="hljs-built_in">input</span> -<span class="hljs-built_in">map</span> <span class="hljs-number">0</span> -c copy output.mp4 <span class="hljs-comment"># 将所有视频和音频通道从一个输入复制到输出，而不是仅一个视频</span><br></code></pre></td></tr></table></figure><p>英文原文地址：<a href="http://trac.ffmpeg.org/wiki/Map">http://trac.ffmpeg.org/wiki/Map</a></p><h2 id="视频的倒放"><a href="#视频的倒放" class="headerlink" title="视频的倒放"></a>视频的倒放</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">Reverse</span> a video <span class="hljs-built_in">clip</span>.<br><br>Warning: This <span class="hljs-built_in">filter</span> requires memory to <span class="hljs-built_in">buffer</span> the entire <span class="hljs-built_in">clip</span>, so trimming is suggested.<br><br>Examples<br>Take the <span class="hljs-built_in">first</span> <span class="hljs-number">5</span> seconds of a <span class="hljs-built_in">clip</span>, and <span class="hljs-built_in">reverse</span> it.<br><span class="hljs-built_in">trim</span>=end=<span class="hljs-number">5</span>,<span class="hljs-built_in">reverse</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">ffmpeg -i G:\<span class="hljs-number">1</span>\<span class="hljs-keyword">c</span><span class="hljs-number">6</span>cfb<span class="hljs-number">2</span>d<span class="hljs-number">13929</span>eb<span class="hljs-number">4967417e0</span>bd<span class="hljs-number">81</span><span class="hljs-keyword">c</span><span class="hljs-number">314</span><span class="hljs-keyword">c</span>.mp<span class="hljs-number">4</span> -vf reverse -y reverse.mp<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h2 id="生成YUV、PCM原始数据"><a href="#生成YUV、PCM原始数据" class="headerlink" title="生成YUV、PCM原始数据"></a>生成YUV、PCM原始数据</h2><h3 id="YUV"><a href="#YUV" class="headerlink" title="YUV"></a>YUV</h3><p>提取YUV数据</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -an -c:v rawvideo -pixel_format yuv420p out<span class="hljs-selector-class">.yuv</span><br>-c:v rawvideo 指定将视频转成原始数据<br>-pixel_format yuv420p 指定转换格式为yuv420p<br><br>播放这个<br>ffplay -s wxh out<span class="hljs-selector-class">.yuv</span><br><br>YUV转H264<br>ffmpeg -f rawvideo -pix_fmt yuv420p -s <span class="hljs-number">320</span>x240 -r <span class="hljs-number">30</span> -<span class="hljs-selector-tag">i</span> out<span class="hljs-selector-class">.yuv</span> -c:v libx264 -f rawvideo out.h264<br></code></pre></td></tr></table></figure><h3 id="PCM"><a href="#PCM" class="headerlink" title="PCM"></a>PCM</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus">提取PCM数据<br>ffmpeg -<span class="hljs-selector-tag">i</span> out<span class="hljs-selector-class">.mp4</span> -vn -ar <span class="hljs-number">44100</span> -ac <span class="hljs-number">2</span> -f s16le out<span class="hljs-selector-class">.pcm</span><br><br>播放PCM<br>ffplay -ar <span class="hljs-number">44100</span> -ac <span class="hljs-number">2</span> -f s16le -<span class="hljs-selector-tag">i</span> out<span class="hljs-selector-class">.pcm</span><br><br>PCM转WAV<br>ffmpeg -f s16be -ar <span class="hljs-number">8000</span> -ac <span class="hljs-number">2</span> -acodec pcm_s16be -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.raw</span> output.wav<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>特效边框+底板视频，生成yuv视频<br>ffmpeg -i a3.mp4 -stream_loop -<span class="hljs-number">1</span> -i partPlay_color_video_12.mp4 -stream_loop -<span class="hljs-number">1</span> -i partPlay_gray_video_12.mp4 -filter_complex [<span class="hljs-number">1</span>:v][<span class="hljs-number">2</span>:v]alphamerge[vTheme];[<span class="hljs-number">0</span>:v][vTheme]overlay=(W-w)<span class="hljs-regexp">/2:(H-h)/</span><span class="hljs-number">2</span> -an -c:v rawvideo -pixel_format yuv420p -t <span class="hljs-number">100</span> -y outTest.yuv<br><br><span class="hljs-regexp">//</span>播放这个视频<br>ffplay -s <span class="hljs-number">1280</span>x720 outTest.yuv<br></code></pre></td></tr></table></figure><h2 id="音频设置采样率，和声道数"><a href="#音频设置采样率，和声道数" class="headerlink" title="音频设置采样率，和声道数"></a>音频设置采样率，和声道数</h2><p>原始音频信息，采样率44100 Hz，双声道stereo</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Duration</span>: <span class="hljs-number">00</span>:<span class="hljs-number">11</span>:<span class="hljs-number">23</span>.<span class="hljs-number">60</span>, start: <span class="hljs-number">0</span>.<span class="hljs-number">025057</span>, bitrate: <span class="hljs-number">128</span> kb/s<br><span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">0</span>: Audio: mp3, <span class="hljs-number">44100</span> Hz, stereo, fltp, <span class="hljs-number">128</span> kb/s<br></code></pre></td></tr></table></figure><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs tap">ffmpeg -i C:\Users\Administrator\Desktop\materials\蕊希.mp3 -ac<span class="hljs-number"> 1 </span>-ar<span class="hljs-number"> 48000 </span>-y test.mp3<br><br>其中：<br>-ac<span class="hljs-number"> 1 </span>设置声道数为1<br>-ar<span class="hljs-number"> 48000 </span>设置采样率为48000Hz<br></code></pre></td></tr></table></figure><p>转码后的音频，采样率48000 Hz，单声道mono</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Duration</span>: <span class="hljs-number">00</span>:<span class="hljs-number">11</span>:<span class="hljs-number">23</span>.<span class="hljs-number">59</span>, start: <span class="hljs-number">0</span>.<span class="hljs-number">023021</span>, bitrate: <span class="hljs-number">64</span> kb/s<br><span class="hljs-attribute">Stream</span> #<span class="hljs-number">0</span>:<span class="hljs-number">0</span>: Audio: mp3, <span class="hljs-number">48000</span> Hz, mono, fltp, <span class="hljs-number">64</span> kb/s<br></code></pre></td></tr></table></figure><h2 id="volume-和-vol-调大调小音视频的音量"><a href="#volume-和-vol-调大调小音视频的音量" class="headerlink" title="volume 和 -vol 调大调小音视频的音量"></a>volume 和 -vol 调大调小音视频的音量</h2><h3 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//音量翻倍，写在滤镜里，例如</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">1</span><span class="hljs-selector-class">.wav</span> -af volume=<span class="hljs-number">2</span> -y <span class="hljs-number">2</span>.wav<br></code></pre></td></tr></table></figure><h3 id="vol"><a href="#vol" class="headerlink" title="vol"></a>vol</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//音量翻倍，不写在滤镜中，例如</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">1</span><span class="hljs-selector-class">.wav</span> -vol <span class="hljs-number">2000</span> -y <span class="hljs-number">2</span>.wav<br></code></pre></td></tr></table></figure><h2 id="为视频添加关键帧，可以解决播放器无法SeekTo到关键帧的问题"><a href="#为视频添加关键帧，可以解决播放器无法SeekTo到关键帧的问题" class="headerlink" title="为视频添加关键帧，可以解决播放器无法SeekTo到关键帧的问题"></a>为视频添加关键帧，可以解决播放器无法SeekTo到关键帧的问题</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//每隔10帧设置一个关键帧，如果是30帧的视频，则代表每秒3个关键帧</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">2</span><span class="hljs-selector-class">.mp4</span> -c:v libx264 -x264opts keyint=<span class="hljs-number">10</span> -y keyint10<span class="hljs-selector-class">.mp4</span><br><br><span class="hljs-comment">//每帧都是关键帧</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">2</span><span class="hljs-selector-class">.mp4</span> -c:v libx264 -x264opts keyint=<span class="hljs-number">1</span> -y keyint11<span class="hljs-selector-class">.mp4</span><br><br><span class="hljs-comment">//每秒一个关键帧</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">2</span><span class="hljs-selector-class">.mp4</span> -c:v libx264 -x264opts keyint=<span class="hljs-number">30</span> -y keyint12<span class="hljs-selector-class">.mp4</span><br><br><br><br>-<span class="hljs-selector-tag">i</span> <span class="hljs-number">2</span><span class="hljs-selector-class">.mp4</span><br>输入文件<br><br>-c:v libx264<br>编码器使用libx264<br><br>-x264opts keyint=<span class="hljs-number">10</span><br>视频文件每隔 <span class="hljs-number">10</span>帧设置一个关键帧<br><br>-y keyint10<span class="hljs-selector-class">.mp4</span><br>输出文件<br></code></pre></td></tr></table></figure><h2 id="视频的旋转rotate"><a href="#视频的旋转rotate" class="headerlink" title="视频的旋转rotate"></a>视频的旋转rotate</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Rotate video <span class="hljs-keyword">by</span> <span class="hljs-keyword">an</span> arbitrary angle expressed <span class="hljs-keyword">in</span> radians.<br><br>The <span class="hljs-built_in">filter</span> accepts <span class="hljs-keyword">the</span> following options:<br><br>A description <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> optional parameters follows.<br><br>angle, <span class="hljs-keyword">a</span><br>Set <span class="hljs-keyword">an</span> expression <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> angle <span class="hljs-keyword">by</span> which <span class="hljs-built_in">to</span> rotate <span class="hljs-keyword">the</span> input video clockwise, expressed <span class="hljs-keyword">as</span> <span class="hljs-keyword">a</span> <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> radians. A negative <span class="hljs-built_in">value</span> will <span class="hljs-built_in">result</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">a</span> counter-clockwise rotation. By default <span class="hljs-keyword">it</span> is <span class="hljs-built_in">set</span> <span class="hljs-built_in">to</span> <span class="hljs-string">&quot;0&quot;</span>.<br><br>This expression is evaluated <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> frame.<br><br>out_w, ow<br>Set <span class="hljs-keyword">the</span> output width expression, default <span class="hljs-built_in">value</span> is <span class="hljs-string">&quot;iw&quot;</span>. This expression is evaluated just once during configuration.<br><br>out_h, oh<br>Set <span class="hljs-keyword">the</span> output height expression, default <span class="hljs-built_in">value</span> is <span class="hljs-string">&quot;ih&quot;</span>. This expression is evaluated just once during configuration.<br><br>bilinear<br>Enable bilinear interpolation <span class="hljs-keyword">if</span> <span class="hljs-built_in">set</span> <span class="hljs-built_in">to</span> <span class="hljs-number">1</span>, <span class="hljs-keyword">a</span> <span class="hljs-built_in">value</span> <span class="hljs-keyword">of</span> <span class="hljs-number">0</span> disables <span class="hljs-keyword">it</span>. Default <span class="hljs-built_in">value</span> is <span class="hljs-number">1.</span><br><br>fillcolor, c<br>Set <span class="hljs-keyword">the</span> color used <span class="hljs-built_in">to</span> fill <span class="hljs-keyword">the</span> output area <span class="hljs-keyword">not</span> covered <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> rotated image. For <span class="hljs-keyword">the</span> general syntax <span class="hljs-keyword">of</span> this option, check <span class="hljs-keyword">the</span> (ffmpeg-utils)<span class="hljs-string">&quot;Color&quot;</span> section <span class="hljs-keyword">in</span> <span class="hljs-keyword">the</span> ffmpeg-utils manual. If <span class="hljs-keyword">the</span> special <span class="hljs-built_in">value</span> <span class="hljs-string">&quot;none&quot;</span> is selected <span class="hljs-keyword">then</span> no background is printed (useful <span class="hljs-keyword">for</span> example <span class="hljs-keyword">if</span> <span class="hljs-keyword">the</span> background is never shown).<br><br>Default <span class="hljs-built_in">value</span> is <span class="hljs-string">&quot;black&quot;</span>.<br><br>The expressions <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> angle <span class="hljs-keyword">and</span> <span class="hljs-keyword">the</span> output size can contain <span class="hljs-keyword">the</span> following constants <span class="hljs-keyword">and</span> functions:<br><br>n<br>sequential <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> input frame, starting <span class="hljs-built_in">from</span> <span class="hljs-number">0.</span> It is always NAN <span class="hljs-keyword">before</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> frame is filtered.<br><br>t<br><span class="hljs-built_in">time</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">seconds</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> input frame, <span class="hljs-keyword">it</span> is <span class="hljs-built_in">set</span> <span class="hljs-built_in">to</span> <span class="hljs-number">0</span> when <span class="hljs-keyword">the</span> <span class="hljs-built_in">filter</span> is configured. It is always NAN <span class="hljs-keyword">before</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> frame is filtered.<br><br>hsub<br>vsub<br>horizontal <span class="hljs-keyword">and</span> vertical chroma subsample values. For example <span class="hljs-keyword">for</span> <span class="hljs-keyword">the</span> pixel <span class="hljs-built_in">format</span> <span class="hljs-string">&quot;yuv422p&quot;</span> hsub is <span class="hljs-number">2</span> <span class="hljs-keyword">and</span> vsub is <span class="hljs-number">1.</span><br><br>in_w, iw<br>in_h, ih<br><span class="hljs-keyword">the</span> input video width <span class="hljs-keyword">and</span> height<br><br>out_w, ow<br>out_h, oh<br><span class="hljs-keyword">the</span> output width <span class="hljs-keyword">and</span> height, that is <span class="hljs-keyword">the</span> size <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> padded area <span class="hljs-keyword">as</span> specified <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> width <span class="hljs-keyword">and</span> height expressions<br><br>rotw(<span class="hljs-keyword">a</span>)<br>roth(<span class="hljs-keyword">a</span>)<br><span class="hljs-keyword">the</span> minimal width/height required <span class="hljs-keyword">for</span> completely containing <span class="hljs-keyword">the</span> input video rotated <span class="hljs-keyword">by</span> <span class="hljs-keyword">a</span> radians.<br><br>These are only available when computing <span class="hljs-keyword">the</span> out_w <span class="hljs-keyword">and</span> out_h expressions.<br></code></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">//<span class="hljs-built_in">T</span>为旋转一周的时长，如果为视频的时长，则旋转一圈，正好可以播放完<br>ffmpeg -i <span class="hljs-symbol">a3</span>.<span class="hljs-symbol">mp4</span> -vf rotate=<span class="hljs-built_in">PI</span>*<span class="hljs-number">2</span>/<span class="hljs-built_in">T</span>*<span class="hljs-built_in">t</span> rotate8.<span class="hljs-symbol">mp4</span><br></code></pre></td></tr></table></figure><p>rotate的第一个参数angle的单位是弧度<br>1°&#x3D;π&#x2F;180<br>360°&#x3D;2π</p><h3 id="例如将视频旋转90°，注意此种方式，并没有改变水平尺寸"><a href="#例如将视频旋转90°，注意此种方式，并没有改变水平尺寸" class="headerlink" title="例如将视频旋转90°，注意此种方式，并没有改变水平尺寸"></a>例如将视频旋转90°，注意此种方式，并没有改变水平尺寸</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ffmpeg -i a3.mp4 -vf <span class="hljs-built_in">rotate</span>=<span class="hljs-literal">PI</span>/<span class="hljs-number">2</span> rotate9.mp4<br></code></pre></td></tr></table></figure><h2 id="视频的翻转vflip、hflip，旋转rotate、转置transpose"><a href="#视频的翻转vflip、hflip，旋转rotate、转置transpose" class="headerlink" title="视频的翻转vflip、hflip，旋转rotate、转置transpose"></a>视频的翻转vflip、hflip，旋转rotate、转置transpose</h2><h3 id="翻转hflip"><a href="#翻转hflip" class="headerlink" title="翻转hflip"></a>翻转hflip</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//水平翻转</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> fan<span class="hljs-selector-class">.jpg</span> -vf hflip -y hflip.png<br></code></pre></td></tr></table></figure><h3 id="旋转rotate"><a href="#旋转rotate" class="headerlink" title="旋转rotate"></a>旋转rotate</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//旋转60°，是带有黑底的。图片的原始宽高并没有改变</span><br>ffmpeg -i fan.jpg -vf <span class="hljs-built_in">rotate</span>=<span class="hljs-literal">PI</span>/<span class="hljs-number">3</span> -y rotate60.png<br></code></pre></td></tr></table></figure><h3 id="转置transpose"><a href="#转置transpose" class="headerlink" title="转置transpose"></a>转置transpose</h3><p><img src="https://img-blog.csdnimg.cn/20190702211143610.png"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-comment">//逆时针旋转90°</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> fan<span class="hljs-selector-class">.jpg</span> -vf transpose=<span class="hljs-number">2</span> -y transpose2<span class="hljs-selector-class">.png</span><br><span class="hljs-comment">//逆时针旋转90°，然后垂直翻转</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> fan<span class="hljs-selector-class">.jpg</span> -vf transpose=<span class="hljs-number">0</span> -y transpose0.png<br></code></pre></td></tr></table></figure><h2 id="视频的旋转rotate升级版，rotate，alphamerge"><a href="#视频的旋转rotate升级版，rotate，alphamerge" class="headerlink" title="视频的旋转rotate升级版，rotate，alphamerge"></a>视频的旋转rotate升级版，rotate，alphamerge</h2><h3 id="给视频加上mask后，旋转，并叠加在另一个视频上"><a href="#给视频加上mask后，旋转，并叠加在另一个视频上" class="headerlink" title="给视频加上mask后，旋转，并叠加在另一个视频上"></a>给视频加上mask后，旋转，并叠加在另一个视频上</h3><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs prolog">//方案<span class="hljs-number">1</span> （有黑底）<br><br>ffmpeg -loop <span class="hljs-number">1</span> -i 圆形.png -i maskBase.mp4 -i a3.mp4 -filter_complex [<span class="hljs-number">0</span>:v]alphaextract[vMaskAlpha];[<span class="hljs-number">1</span>:v][vMaskAlpha]alphamerge[vTop];[vTop]rotate=<span class="hljs-symbol">PI</span>*<span class="hljs-number">2</span>/<span class="hljs-number">10</span>*t[vRotate];[<span class="hljs-number">2</span>:v][vRotate]overlay=(<span class="hljs-symbol">W</span>-w)/<span class="hljs-number">2</span>:(<span class="hljs-symbol">H</span>-h)/<span class="hljs-number">2</span> -y maskRotateOverlay.mp4<br><br>// 方案二：分成两步<br>// <span class="hljs-number">1.</span>视频加上<span class="hljs-symbol">Mask</span>以后，并且旋转<br>// mask和底部视频尺寸要一致，时长也要一致，所以加上了-loop <span class="hljs-number">1</span><br>ffmpeg -loop <span class="hljs-number">1</span> -i 圆形.png -i maskBase.mp4  -filter_complex [<span class="hljs-number">0</span>:v]alphaextract[vMaskAlpha];[<span class="hljs-number">1</span>:v][vMaskAlpha]alphamerge[vTop];[vTop]rotate=<span class="hljs-symbol">PI</span>*<span class="hljs-number">2</span>/<span class="hljs-number">10</span>*t[vRotate];color=c=black:s=<span class="hljs-number">648</span>x648[vBg];[vBg][vRotate]overlay -t <span class="hljs-number">10</span> -y maskRotate.mp4<br>// <span class="hljs-number">2.</span>去掉黑底，并且overlay<br>ffmpeg -i a3.mp4 -i maskRotate.mp4 -filter_complex [<span class="hljs-number">1</span>]split[m][a];[a]geq=<span class="hljs-string">&#x27;if(gt(lum(X,Y),50),255,0)&#x27;</span>,hue=s=<span class="hljs-number">0</span>[al];[m][al]alphamerge[ovr];[<span class="hljs-number">0</span>][ovr]overlay=(<span class="hljs-symbol">W</span>-w)/<span class="hljs-number">2</span>:(<span class="hljs-symbol">H</span>-h)/<span class="hljs-number">2</span> -y maskRotateOverlay2.mp4<br>// 不够完美，黑色去掉的有点多了，有好的方案在改吧<br><br>// 方案三：最终方案<br>// 在方案一的基础上给rotate加一个参数c=none<br>ffmpeg -loop <span class="hljs-number">1</span> -i 圆形.png -i maskBase.mp4 -i a3.mp4 -filter_complex [<span class="hljs-number">0</span>:v]alphaextract[vMaskAlpha];[<span class="hljs-number">1</span>:v][vMaskAlpha]alphamerge[vTop];[vTop]rotate=<span class="hljs-symbol">PI</span>*<span class="hljs-number">2</span>/<span class="hljs-number">10</span>*t:c=none[vRotate];[<span class="hljs-number">2</span>:v][vRotate]overlay=(<span class="hljs-symbol">W</span>-w)/<span class="hljs-number">2</span>:(<span class="hljs-symbol">H</span>-h)/<span class="hljs-number">2</span> -y maskRotateOverlay33.mp4<br><br>// 方案四：如果顶部是一个方形的视频<br>// 可以看到就像扑克牌一样，一帧帧的铺开，所以要用圆形来旋转，即使加上eof_action=pass，也只是最后播放完成后，顶层视频帧一起消失<br>ffmpeg -i maskBase.mp4 -i a3.mp4 -filter_complex [<span class="hljs-number">0</span>:v]format=bgra,rotate=<span class="hljs-string">&#x27;PI*2/10*t:ow=hypot(iw,ih):oh=ow:c=none&#x27;</span>[vRotate];[<span class="hljs-number">1</span>:v][vRotate]overlay=(<span class="hljs-symbol">W</span>-w)/<span class="hljs-number">2</span>:(<span class="hljs-symbol">H</span>-h)/<span class="hljs-number">2</span> -t <span class="hljs-number">3</span> -y maskRotateOverlay55.mp4<br><br><br>// 最终方案，核心，c=<span class="hljs-number">0x00000000</span> 给一个透明色即可<br>ffmpeg -loop <span class="hljs-number">1</span> -i <span class="hljs-number">1567495070237.</span>bmp -i a3.mp4 -filter_complex [<span class="hljs-number">0</span>:v]format=bgra,rotate=<span class="hljs-string">&#x27;PI*2/10*t:ow=hypot(iw,ih):oh=ow:c=0x00000000&#x27;</span>[vRotate];[<span class="hljs-number">1</span>:v][vRotate]overlay=(<span class="hljs-symbol">W</span>-w)/<span class="hljs-number">2</span>:(<span class="hljs-symbol">H</span>-h)/<span class="hljs-number">2</span> -t <span class="hljs-number">3</span> -y noBlackPad.mp4<br></code></pre></td></tr></table></figure><h2 id="为视频设置透明度的几种方案"><a href="#为视频设置透明度的几种方案" class="headerlink" title="为视频设置透明度的几种方案"></a>为视频设置透明度的几种方案</h2><h3 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h3><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">ffmpeg -i a2.mp4 -i a3.mp4 -filter_complex <span class="hljs-comment">[0:v]</span>format=yuva444p,colorchannelmixer=aa=0.5<span class="hljs-comment">[valpha]</span>;<span class="hljs-comment">[1:v]</span><span class="hljs-comment">[valpha]</span>overlay=(W-w)/2:(H-h)/2 -ss 0 -t 5  -y overlay4.mp4<br></code></pre></td></tr></table></figure><h3 id="方案二：-对图片有效，经过测试"><a href="#方案二：-对图片有效，经过测试" class="headerlink" title="方案二： 对图片有效，经过测试"></a>方案二： 对图片有效，经过测试</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">ffmpeg -i in4.png -i a3.mp4 -filter_complex [<span class="hljs-number">0</span><span class="hljs-symbol">:v</span>]geq=a=<span class="hljs-string">&#x27;122&#x27;</span><span class="hljs-symbol">:lum=<span class="hljs-string">&#x27;lum(X,Y)&#x27;</span></span><span class="hljs-symbol">:cb=<span class="hljs-string">&#x27;cb(X,Y)&#x27;</span></span><span class="hljs-symbol">:cr=<span class="hljs-string">&#x27;cr(X,Y)&#x27;</span></span>[topV];[<span class="hljs-number">1</span><span class="hljs-symbol">:v</span>][topV]overlay=(W-w)/<span class="hljs-number">2</span><span class="hljs-symbol">:</span>(H-h)/<span class="hljs-number">2</span> -ss <span class="hljs-number">0</span> -t <span class="hljs-number">5</span> -y overlay3.mp4<br></code></pre></td></tr></table></figure><h3 id="方案三：同方案二，只是先将视频转换成一张张帧序列然后再使用方案二"><a href="#方案三：同方案二，只是先将视频转换成一张张帧序列然后再使用方案二" class="headerlink" title="方案三：同方案二，只是先将视频转换成一张张帧序列然后再使用方案二"></a>方案三：同方案二，只是先将视频转换成一张张帧序列然后再使用方案二</h3><p>此处经过测试，同样在ffmpeg 4.13下。Windows，Android，iOS 只有IOS下可以对视频进行geq，所以其他平台只能先转换成图片序列，然后再做geq</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">//此处经过测试，同样在ffmpeg <span class="hljs-number">4.13</span>下。<span class="hljs-title class_">Windows</span>，<span class="hljs-title class_">Android</span>，iOS 只有<span class="hljs-title class_">IOS</span>下可以对视频进行geq<br>ffmpeg -i a2.mp4 -i a3.mp4 -filter_complex [<span class="hljs-number">0</span><span class="hljs-symbol">:v</span>]geq=a=<span class="hljs-string">&#x27;122&#x27;</span><span class="hljs-symbol">:lum=<span class="hljs-string">&#x27;lum(X,Y)&#x27;</span></span><span class="hljs-symbol">:cb=<span class="hljs-string">&#x27;cb(X,Y)&#x27;</span></span><span class="hljs-symbol">:cr=<span class="hljs-string">&#x27;cr(X,Y)&#x27;</span></span>[topV];[<span class="hljs-number">1</span><span class="hljs-symbol">:v</span>][topV]overlay=(W-w)/<span class="hljs-number">2</span><span class="hljs-symbol">:</span>(H-h)/<span class="hljs-number">2</span> -ss <span class="hljs-number">0</span> -t <span class="hljs-number">5</span> -y overlay2.mp4<br></code></pre></td></tr></table></figure><h2 id="视频添加个黑色的遮罩"><a href="#视频添加个黑色的遮罩" class="headerlink" title="视频添加个黑色的遮罩"></a>视频添加个黑色的遮罩</h2><h3 id="数值越大越不透明"><a href="#数值越大越不透明" class="headerlink" title="数值越大越不透明"></a>数值越大越不透明</h3><p>color命令可以新建一个颜色图层，然后使用overlay叠加在视频上</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i out3.mp4 -filter_complex color=s=<span class="hljs-number">1000</span>x1000:c=black@.<span class="hljs-number">3</span>[vc];[<span class="hljs-number">0</span>:v][vc]overlay[out] -ss <span class="hljs-number">0</span> -to <span class="hljs-number">10</span> -map<span class="hljs-meta"> [out] -y ou4.mp4</span><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i <span class="hljs-number">123</span>.mov -filter_complex color=s=<span class="hljs-number">1000</span>x1000:c=black@.<span class="hljs-number">9</span>[vc];[<span class="hljs-number">0</span>:v][vc]overlay[out] -ss <span class="hljs-number">0</span> -to <span class="hljs-number">10</span> -map<span class="hljs-meta"> [out] -y ou4.mp4</span><br></code></pre></td></tr></table></figure><h2 id="视频与图片互转，视频转gif，单张图片合成视频，提取封面，单帧"><a href="#视频与图片互转，视频转gif，单张图片合成视频，提取封面，单帧" class="headerlink" title="视频与图片互转，视频转gif，单张图片合成视频，提取封面，单帧"></a>视频与图片互转，视频转gif，单张图片合成视频，提取封面，单帧</h2><h3 id="视频转gif"><a href="#视频转gif" class="headerlink" title="视频转gif"></a>视频转gif</h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs excel">视频转gif<br>ffmpeg -i out.<span class="hljs-symbol">mp4</span> -ss <span class="hljs-symbol">00:00</span><span class="hljs-symbol">:00</span> -<span class="hljs-built_in">t</span> <span class="hljs-number">10</span> out.gif<br><span class="hljs-built_in">t</span>的格式<br>-<span class="hljs-built_in">t</span>  <span class="hljs-number">1.1</span><br>-<span class="hljs-built_in">t</span> <span class="hljs-symbol">00:00</span><span class="hljs-symbol">:01</span><br>-r 帧率每秒的帧数，数值越大越流畅<br></code></pre></td></tr></table></figure><h3 id="视频中提取任意一帧图片"><a href="#视频中提取任意一帧图片" class="headerlink" title="视频中提取任意一帧图片"></a>视频中提取任意一帧图片</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> test<span class="hljs-selector-class">.asf</span> -y -f  image2  -ss <span class="hljs-number">00</span>:<span class="hljs-number">01</span>:<span class="hljs-number">00</span> -vframes <span class="hljs-number">1</span>  test1<span class="hljs-selector-class">.jpg</span><br>or<br>ffmpeg -<span class="hljs-selector-tag">i</span> test<span class="hljs-selector-class">.asf</span> -y -f  image2  -ss <span class="hljs-number">60</span> -vframes <span class="hljs-number">1</span>  test1<span class="hljs-selector-class">.jpg</span><br><span class="hljs-comment">//png格式不会压缩</span><br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">1</span><span class="hljs-selector-class">.avi</span> -f image2 -ss <span class="hljs-number">2</span> -vframes <span class="hljs-number">1</span> test1.png<br></code></pre></td></tr></table></figure><h3 id="视频转图片"><a href="#视频转图片" class="headerlink" title="视频转图片"></a>视频转图片</h3><p>视频转图片，-r 帧率每秒钟转化1张，image2为image协议的第二版</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -i <span class="hljs-number">2</span>.mp4 -r <span class="hljs-number">1</span> -f image2 image-%d.jpg<br></code></pre></td></tr></table></figure><p>图片转视频<br>注意：png需要特殊处理，如下<br>图片转视频，jpg例子<br>从一个文件序列 img-1.jpeg, img-2.jpeg, …,创建视频，帧率为10:</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sas">ffmpeg -framerate 10 -i img-<span class="hljs-title function_">%d</span>.jpeg <span class="hljs-keyword">out</span>.mkv<br>ffmpeg -framerate 30 -i image-<span class="hljs-title function_">%d</span>.jpg -y <span class="hljs-keyword">out</span>.mp4<br><br>//png图片的合成，如果没有特殊加背景，则背景是黑色的。<br>ffmpeg -framerate 30 -i image-<span class="hljs-title function_">%d</span>.png -c:v libx264 -pix_fmt yuv420p -y out3.mp4<br><br>类似上例，但开始的数字是100，即索引是从100开始计数:<br>ffmpeg -framerate 10 -start_number 100 -i <span class="hljs-string">&#x27;img-%d.jpeg&#x27;</span> <span class="hljs-keyword">out</span>.mkv<br><br>读取<span class="hljs-string">&quot;*.png&quot;</span> 以通配符模式处理，这将包含所有<span class="hljs-string">&quot;.png&quot;</span>结尾的文件:<br>ffmpeg -framerate 10 -pattern_type glob -i <span class="hljs-string">&quot;*.png&quot;</span> <span class="hljs-keyword">out</span>.mkv<br></code></pre></td></tr></table></figure><p>单张图片合成视频</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs tap">//单张图片合成视频，这里需要用到-loop<span class="hljs-number"> 1 </span>开启循环，和-t<span class="hljs-number"> 10 </span>设置为10秒<br>ffmpeg -r<span class="hljs-number"> 1 </span>-f image2 -loop<span class="hljs-number"> 1 </span>-i 1.png  -t<span class="hljs-number"> 10 </span>out.mp4 -y<br></code></pre></td></tr></table></figure><p>单张图片生成视频，通过滤镜完成</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">ffmpeg -i 1.png -filter_complex color=s=500x500:c=black,trim=0:5<span class="hljs-comment">[vbg]</span>;<span class="hljs-comment">[0:v]</span>scale=500x500<span class="hljs-comment">[sv]</span>;<span class="hljs-comment">[vbg]</span><span class="hljs-comment">[sv]</span>overlay<span class="hljs-comment">[vout]</span> -map <span class="hljs-comment">[vout]</span> -y 1.mp4<br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs inform7">ffmpeg -i 1.jpg -filter_complex color=s=720x1280:c=black<span class="hljs-comment">[vbg]</span>;<span class="hljs-comment">[0:v]</span>scale=720x1280<span class="hljs-comment">[sv]</span>;<span class="hljs-comment">[vbg]</span><span class="hljs-comment">[sv]</span>overlay<span class="hljs-comment">[vout]</span> -map <span class="hljs-comment">[vout]</span> -ss 0 -to 10 -y 1.mp4<br></code></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs inform7">ffmpeg <br>-i <br>1.png <br>-filter_complex <br>color=s=500x500:c=black,trim=0:5<span class="hljs-comment">[vbg]</span>;<br><span class="hljs-comment">[0:v]</span>scale=500x500<span class="hljs-comment">[sv]</span>;<br><span class="hljs-comment">[vbg]</span><span class="hljs-comment">[sv]</span>overlay<span class="hljs-comment">[vout]</span> <br>-map <br><span class="hljs-comment">[vout]</span> <br>-y <br>1.mp4<br></code></pre></td></tr></table></figure><h2 id="为视频添加一个循环播放的背景音乐（混声）"><a href="#为视频添加一个循环播放的背景音乐（混声）" class="headerlink" title="为视频添加一个循环播放的背景音乐（混声）"></a>为视频添加一个循环播放的背景音乐（混声）</h2><h3 id="方案1（不推荐）（混声）"><a href="#方案1（不推荐）（混声）" class="headerlink" title="方案1（不推荐）（混声）"></a>方案1（不推荐）（混声）</h3><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">ffmpeg -i E:\<span class="hljs-number">1</span>\subtitle\out3.mp4 -i E:\<span class="hljs-number">1</span>\subtitle\music3D.wav -filter_complex [<span class="hljs-number">1</span>:a]aloop=<span class="hljs-keyword">loop</span>=-<span class="hljs-number">1</span>:size=<span class="hljs-number">2e+09</span>[<span class="hljs-keyword">out</span>];[<span class="hljs-keyword">out</span>][<span class="hljs-number">0</span>:a]amix -ss <span class="hljs-number">0</span> -t <span class="hljs-number">60</span> -y <span class="hljs-keyword">out</span>.mp4<br></code></pre></td></tr></table></figure><ul><li>-i E:\1\subtitle\out3.mp4 &#x2F;&#x2F;输入视频，最好选一个大于一分钟的尝试</li><li>-i E:\1\subtitle\music3D.wav &#x2F;&#x2F;输入背景音，最好短一点，方便测试是否循环</li><li>-filter_complex &#x2F;&#x2F;滤镜</li><li>[1:a]aloop&#x3D;loop&#x3D;-1:size&#x3D;2e+09[out]; &#x2F;&#x2F;将背景音无限循环</li><li>[out][0:a]amix &#x2F;&#x2F;将背景音和视频中的音频混合</li><li>-ss 0 -t 60 &#x2F;&#x2F;裁剪总时长，裁剪到60秒</li><li>-y out.mp4 &#x2F;&#x2F;输出</li></ul><h3 id="方案2（推荐）（混声）"><a href="#方案2（推荐）（混声）" class="headerlink" title="方案2（推荐）（混声）"></a>方案2（推荐）（混声）</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.mp4</span> -stream_loop -<span class="hljs-number">1</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">audio</span><span class="hljs-selector-class">.wav</span> -filter_complex <span class="hljs-selector-attr">[0:a]</span><span class="hljs-selector-attr">[1:a]</span>amix -t <span class="hljs-number">60</span> -y out.mp4<br></code></pre></td></tr></table></figure><p>其中</p><ul><li>-stream_loop -1 -i audio.wav</li><li>-stream_loop -1 参数-1代表循环输入源</li><li>[0:a][1:a]amix 将0和1号的音频流进行混合</li><li>-t 60 裁剪60秒</li></ul><h3 id="方案3（推荐）（音频替换）"><a href="#方案3（推荐）（音频替换）" class="headerlink" title="方案3（推荐）（音频替换）"></a>方案3（推荐）（音频替换）</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -an -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.mp4</span> -stream_loop -<span class="hljs-number">1</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">audio</span><span class="hljs-selector-class">.wav</span> -t <span class="hljs-number">60</span> -y out2.mp4<br></code></pre></td></tr></table></figure><p>其中</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">-an -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.mp4</span> 代表消除视频中的音频<br></code></pre></td></tr></table></figure><h3 id="方案4（推荐）（音频替换，优化加快合成速度）"><a href="#方案4（推荐）（音频替换，优化加快合成速度）" class="headerlink" title="方案4（推荐）（音频替换，优化加快合成速度）"></a>方案4（推荐）（音频替换，优化加快合成速度）</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -an -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.mp4</span> -stream_loop -<span class="hljs-number">1</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">audio</span><span class="hljs-selector-class">.wav</span> -c:v copy -t <span class="hljs-number">60</span> -y out.mp4<br></code></pre></td></tr></table></figure><ul><li>-c:v copy 对视频流进行复制，不需要重新编解码（前提是输入流和输出流一致），速度极快</li></ul><p>这里音频必须编码的原因在于，输入源是一个wav的音频，而最后输出MP4文件中需要一个aac的音频，所以必须重新编码，否则会报错。</p><h3 id="方案5（原视频无音轨的情况）"><a href="#方案5（原视频无音轨的情况）" class="headerlink" title="方案5（原视频无音轨的情况）"></a>方案5（原视频无音轨的情况）</h3><p>为无音轨的视频添加一个循环的背景音乐<br>原视频无音轨的情况下不需要混声，直接导入两个源文件（源视频，背景音）</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> video_no_audio<span class="hljs-selector-class">.mp4</span> -stream_loop -<span class="hljs-number">1</span> -<span class="hljs-selector-tag">i</span> 世界这么大<span class="hljs-selector-class">.wav</span> -ss <span class="hljs-number">0</span> -t <span class="hljs-number">30</span> -y out.mp4<br></code></pre></td></tr></table></figure><h2 id="drawtext在视频上添加文字"><a href="#drawtext在视频上添加文字" class="headerlink" title="drawtext在视频上添加文字"></a>drawtext在视频上添加文字</h2><p><a href="http://ffmpeg.org/ffmpeg-filters.html#drawtext-1">官方文档drawtext</a></p><p>默认值</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">默认字体 Sans<br>默认颜色 <span class="hljs-keyword">black</span><br>默认字体大小 <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>最简单的demo，全部使用默认<br>字符中间有空格，最外层需要双引号引用</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> a3<span class="hljs-selector-class">.mp4</span> -vf drawtext=<span class="hljs-string">&quot;text=test test&quot;</span> -y out1.mp4<br></code></pre></td></tr></table></figure><p>绘制位置，字体大小100，背景色blue</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> a3<span class="hljs-selector-class">.mp4</span> -vf drawtext=<span class="hljs-string">&quot;text=test test:x=100:y=100:fontsize=100:fontcolor=white:box=1:boxcolor=blue&quot;</span> -y out2.mp4<br></code></pre></td></tr></table></figure><h3 id="中心区域绘制文字"><a href="#中心区域绘制文字" class="headerlink" title="中心区域绘制文字"></a>中心区域绘制文字</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> a3<span class="hljs-selector-class">.mp4</span> -vf drawtext=<span class="hljs-string">&quot;fontsize=100:fontcolor=white:text=&#x27;hello world&#x27;:x=(w-text_w)/2:y=(h-text_h)/2&quot;</span> -y out3.mp4<br></code></pre></td></tr></table></figure><h2 id="setpts，atempo视频音频加减速"><a href="#setpts，atempo视频音频加减速" class="headerlink" title="setpts，atempo视频音频加减速"></a>setpts，atempo视频音频加减速</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs stylus">视频加速<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">1</span><span class="hljs-selector-class">.mp4</span> -vf <span class="hljs-string">&quot;setpts=0.5*PTS&quot;</span> <span class="hljs-number">1</span>jiasu<span class="hljs-selector-class">.mp4</span><br>视频减速<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">2</span><span class="hljs-selector-class">.mp4</span> -vf <span class="hljs-string">&quot;setpts=2.0*PTS&quot;</span> <span class="hljs-number">2</span>jiansu<span class="hljs-selector-class">.mp4</span><br><br>音频加速<br><span class="hljs-string">&quot;atempo&quot;</span>滤镜对音频速度调整限制在<span class="hljs-number">0.5</span> 到 <span class="hljs-number">2.0</span> 之间，（即半速或倍速）<br><span class="hljs-number">2</span>倍速<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">1</span>jiasu<span class="hljs-selector-class">.mp4</span> -af <span class="hljs-string">&quot;atempo=2.0&quot;</span> <span class="hljs-number">1</span>quanbujiasu<span class="hljs-selector-class">.mp4</span><br><span class="hljs-number">4</span>倍速<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">1</span>jiasu<span class="hljs-selector-class">.mp4</span> -af <span class="hljs-string">&quot;atempo=2.0,atempo=2.0&quot;</span> <span class="hljs-number">1</span>quanbujiasu<span class="hljs-selector-class">.mp4</span><br><br>使用更复杂的滤镜，可以同时加速视频和音频：<br>ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-number">1</span><span class="hljs-selector-class">.mp4</span> -filter_complex <span class="hljs-string">&quot;[0:v]setpts=0.5*PTS[v];[0:a]atempo=2.0[a]&quot;</span> -map <span class="hljs-string">&quot;[v]&quot;</span> -map <span class="hljs-string">&quot;[a]&quot;</span> <span class="hljs-number">11</span>quanbu.mp4<br></code></pre></td></tr></table></figure><h2 id="混音（混声）命令"><a href="#混音（混声）命令" class="headerlink" title="混音（混声）命令"></a>混音（混声）命令</h2><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">inputs<br>The <span class="hljs-built_in">number</span> <span class="hljs-keyword">of</span> inputs. If unspecified, <span class="hljs-keyword">it</span> defaults <span class="hljs-built_in">to</span> <span class="hljs-number">2.</span>//输入的数量，如果没有指明，默认为<span class="hljs-number">2.</span><br> <br>duration<br>How <span class="hljs-built_in">to</span> determine <span class="hljs-keyword">the</span> <span class="hljs-keyword">end</span>-<span class="hljs-keyword">of</span>-stream<span class="hljs-comment">.//决定了流的结束</span><br> <br>longest<br>The duration <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> longest input. (default<span class="hljs-comment">)//最长输入的持续时间</span><br>shortest<br>The duration <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> shortest input<span class="hljs-comment">.//最短输入的持续时间</span><br><span class="hljs-keyword">first</span><br>The duration <span class="hljs-keyword">of</span> <span class="hljs-keyword">the</span> <span class="hljs-keyword">first</span> input<span class="hljs-comment">.//第一个输入的持续时间</span><br> <br>dropout_transition<br>The transition <span class="hljs-built_in">time</span>, <span class="hljs-keyword">in</span> <span class="hljs-built_in">seconds</span>, <span class="hljs-keyword">for</span> volume renormalization when <span class="hljs-keyword">an</span> input stream <span class="hljs-keyword">ends</span>. The default <span class="hljs-built_in">value</span> is <span class="hljs-number">2</span> <span class="hljs-built_in">seconds</span>.<span class="hljs-comment"></span><br><span class="hljs-comment">//指一个输入流结束时音量从正常到无声渐止效果，默认为2秒</span><br></code></pre></td></tr></table></figure><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">ffmpeg -i <span class="hljs-title class_">INPUT1</span> -i <span class="hljs-title class_">INPUT2</span> -i <span class="hljs-title class_">INPUT3</span> -filter_complex amix=inputs=<span class="hljs-number">3</span><span class="hljs-symbol">:duration=first</span><span class="hljs-symbol">:dropout_transition=</span><span class="hljs-number">3</span> <span class="hljs-title class_">OUTPUT</span><br></code></pre></td></tr></table></figure><h2 id="快速将视频转换为小而清晰的-GIF"><a href="#快速将视频转换为小而清晰的-GIF" class="headerlink" title="快速将视频转换为小而清晰的 GIF"></a>快速将视频转换为小而清晰的 GIF</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ffmpeg -an -skip_frame nokey -i 输入文件 -vf scale=导出分辨率<span class="hljs-symbol">:flags=fast_bilinear</span>,palettegen=max_colors=色彩数量<span class="hljs-symbol">:stats_mode=diff</span> 色板文件<br><span class="hljs-variable">$ </span>ffmpeg -an -i 输入文件 -i 色板文件 -r 输出文件帧率 -lavfi <span class="hljs-string">&quot;framestep=原视频帧率/输出文件帧率*变速速率,setpts=PTS/变速速率,scale=导出分辨率:flags=lanczos [x]; [x][1:v] paletteuse=dither=bayer&quot;</span> 输出文件<br></code></pre></td></tr></table></figure><p>此脚本比较复杂，需要将汉字部分按下表进行填写替换：</p><table><thead><tr><th>参数名</th><th>填写示例</th><th>说明</th></tr></thead><tbody><tr><td>输入文件</td><td><code>input.mp4</code></td><td>输入视频文件的路径</td></tr><tr><td>导出分辨率</td><td><code>320:240</code></td><td>长和宽必须都是2的倍数</td></tr><tr><td>色彩数量</td><td><code>128</code></td><td>可接受的值为<code>[4, 256]</code>；值越大，色彩越保真，但输出的文件体积也越大；</td></tr><tr><td>色板文件</td><td><code>palette.png</code></td><td><code>GIF</code>调色板文件。在第一行生成，并第二行使用到</td></tr><tr><td>视频帧率</td><td><code>60</code></td><td>输入的视频的帧率</td></tr><tr><td>输出文件帧率</td><td><code>10</code></td><td>输出的<code>GIF</code>的帧率</td></tr><tr><td>变速速率</td><td><code>1.0</code></td><td>如果不需要变速，填写<code>1.0</code>；二倍速则填写<code>2.0</code>，依此类推</td></tr><tr><td>输出文件</td><td><code>output.gif</code></td><td>输出<code>GIF</code>文件的路径</td></tr></tbody></table><hr><h2 id="光流法补帧"><a href="#光流法补帧" class="headerlink" title="光流法补帧"></a>光流法补帧</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">$ ffmpeg -i <span class="hljs-keyword">input</span>.mp4 -<span class="hljs-keyword">filter</span>:v &quot;minterpolate=&#x27;fps=60:mi_mode=mci:mc_mode=aobmc:vsbmc=1&#x27;&quot; optical_flow.mp4<br></code></pre></td></tr></table></figure><p><code>60</code>为目标帧率。</p><p>速度较慢，效果可能没有<code>Premiere Pro</code>的光流法好。</p><hr><h2 id="降低视频抖动"><a href="#降低视频抖动" class="headerlink" title="降低视频抖动"></a>降低视频抖动</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -vf vidstabdetect=shakiness=<span class="hljs-number">10</span>:result=<span class="hljs-string">&quot;mytransforms.trf&quot;</span> -f null -<br>$ ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.mp4</span> -vf vidstabtransform=smoothing=<span class="hljs-number">30</span>:input=<span class="hljs-string">&quot;mytransforms.trf&quot;</span>,unsharp=<span class="hljs-number">5</span>:<span class="hljs-number">5</span>:<span class="hljs-number">0.8</span>:<span class="hljs-number">3</span>:<span class="hljs-number">3</span>:<span class="hljs-number">0.4</span>  stabilized.mp4<br></code></pre></td></tr></table></figure><p>此操作需要两行：第一行分析视频<code>input.mp4</code>的内容，并将结果保存至<code>mytransforms.trf</code>；第二行生成稳定后的视频<code>stabilized.mp4</code>。</p><p>速度较慢，且效果不如<code>Google Photos</code>和<code>Premiere Pro</code>好。</p><hr><h2 id="获取媒体文件属性"><a href="#获取媒体文件属性" class="headerlink" title="获取媒体文件属性"></a>获取媒体文件属性</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">$ ffprobe -v <span class="hljs-built_in">error</span> -show_format -show_streams <span class="hljs-built_in">input</span>.mp4<br></code></pre></td></tr></table></figure><p>上面将返回媒体文件的所有属性。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ ffprobe -v quiet -select_streams V:0 -show_entries <span class="hljs-attribute">stream</span>=width,height,r_frame_rate,bit_rate -of <span class="hljs-attribute">csv</span>=p=0:sv=fail -i input.mp4<br></code></pre></td></tr></table></figure><p>有时只需要媒体文件中的特定几项信息，可以通过类似这样的方式指定。（这条脚本将返回视频流的宽、高、帧率、比特率，中间以逗号分隔，如<code>1920,1080,30/1,11895227</code>）</p><hr><h2 id="压缩音频为无损-FLAC"><a href="#压缩音频为无损-FLAC" class="headerlink" title="压缩音频为无损 FLAC"></a>压缩音频为无损 FLAC</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.wav</span> -c:<span class="hljs-selector-tag">a</span> flac -compression_level <span class="hljs-number">12</span> output.flac<br></code></pre></td></tr></table></figure><hr><h2 id="压缩音频为有损-Opus"><a href="#压缩音频为有损-Opus" class="headerlink" title="压缩音频为有损 Opus"></a>压缩音频为有损 Opus</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">$ ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">input</span><span class="hljs-selector-class">.wav</span> -c:<span class="hljs-selector-tag">a</span> libopus -<span class="hljs-selector-tag">b</span>:<span class="hljs-selector-tag">a</span> <span class="hljs-number">128</span>k output.ogg<br></code></pre></td></tr></table></figure><p><code>128k</code>为比特率。</p><p><code>Opus</code>可能是目前压缩率最佳的音频编码器，在极低的比特率下也能提供优秀的音质，且大部分软件都兼容此格式。</p><h2 id="从一堆ts文件生成m3u8文件的脚本"><a href="#从一堆ts文件生成m3u8文件的脚本" class="headerlink" title="从一堆ts文件生成m3u8文件的脚本"></a>从一堆ts文件生成m3u8文件的脚本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>echo &#x27;#EXTM3U&#x27;<br>echo &#x27;#EXT-X-VERSION:3&#x27;<br>echo &#x27;#EXT-X-MEDIA-SEQUENCE:1&#x27;<br><br>maxDuration=0<br><br>while read f; do<br>duration=&quot;$(ffprobe -v error -select_streams v:0 -show_entries stream=duration -of default=noprint_wrappers=1:nokey=1 &quot;$f&quot; |  grep -E &#x27;^[0-9]+(\.[0-9]+)?$&#x27; | head -n1)&quot;<br>echo &quot;#EXTINF:$duration,&quot;<br>echo $f<br><br>if [ `echo &quot;$duration &gt; $maxDuration&quot; | bc` -eq 1 ]; then<br>maxDuration=&quot;$duration&quot;<br>fi<br>done<br><br>echo &#x27;#EXT-X-ENDLIST&#x27;<br>echo &quot;#EXT-X-TARGETDURATION:$maxDuration&quot;<br></code></pre></td></tr></table></figure><h4 id="依赖："><a href="#依赖：" class="headerlink" title="依赖："></a>依赖：</h4><ul><li><code>ffprobe</code>命令，可通过安装<code>ffmpeg</code>软件包得到。</li><li><code>bc</code>命令，可通过安装<code>bc</code>软件包得到。</li></ul><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># 在Debian上安装依赖</span><br>sudo apt <span class="hljs-keyword">install</span> ffmpeg bc<br></code></pre></td></tr></table></figure><h4 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> -O gen_ts_m3u8.sh https://vkceyugu.cdn.bspapp.com/VKCEYUGU-cc8cf08f-<span class="hljs-number">49</span>f5-<span class="hljs-number">4</span>fc5-<span class="hljs-number">83</span>c3-ed2a683704d4/<span class="hljs-number">4</span>db7c4a8-<span class="hljs-number">9131</span>-<span class="hljs-number">4771</span>-<span class="hljs-number">9</span>d36-<span class="hljs-number">71</span>a2b30ca35a.sh<br><span class="hljs-attribute">chmod</span> +x gen_ts_m3u8.sh<br><span class="hljs-attribute">ls</span> *.ts | ./gen_ts_m3u8.sh | tee main.m3u8<br></code></pre></td></tr></table></figure><h2 id="使用GPU加速"><a href="#使用GPU加速" class="headerlink" title="使用GPU加速"></a>使用GPU加速</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ffmpeg -hwaccels</span><br></code></pre></td></tr></table></figure><p>如下</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> version <span class="hljs-number">4</span>.<span class="hljs-number">2</span>.<span class="hljs-number">4</span>-<span class="hljs-number">1</span>ubuntu0.<span class="hljs-number">1</span> Copyright (c) <span class="hljs-number">2000</span>-<span class="hljs-number">2020</span> the FFmpeg developers<br>  <span class="hljs-attribute">built</span> with gcc <span class="hljs-number">9</span> (Ubuntu <span class="hljs-number">9</span>.<span class="hljs-number">3</span>.<span class="hljs-number">0</span>-<span class="hljs-number">10</span>ubuntu2)<br>  <span class="hljs-attribute">configuration</span>: --prefix=/usr --extra-version=<span class="hljs-number">1</span>ubuntu0.<span class="hljs-number">1</span> --toolchain=hardened --libdir=/usr/lib/x86_64-linux-gnu --incdir=/usr/include/x86_64-linux-gnu --arch=amd64 --enable-gpl --disable-stripping --enable-avresample --disable-filter=resample --enable-avisynth --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librsvg --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opencl --enable-opengl --enable-sdl2 --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-nvenc --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared<br>  <span class="hljs-attribute">libavutil</span>      <span class="hljs-number">56</span>. <span class="hljs-number">31</span>.<span class="hljs-number">100</span> / <span class="hljs-number">56</span>. <span class="hljs-number">31</span>.<span class="hljs-number">100</span><br>  <span class="hljs-attribute">libavcodec</span>     <span class="hljs-number">58</span>. <span class="hljs-number">54</span>.<span class="hljs-number">100</span> / <span class="hljs-number">58</span>. <span class="hljs-number">54</span>.<span class="hljs-number">100</span><br>  <span class="hljs-attribute">libavformat</span>    <span class="hljs-number">58</span>. <span class="hljs-number">29</span>.<span class="hljs-number">100</span> / <span class="hljs-number">58</span>. <span class="hljs-number">29</span>.<span class="hljs-number">100</span><br>  <span class="hljs-attribute">libavdevice</span>    <span class="hljs-number">58</span>.  <span class="hljs-number">8</span>.<span class="hljs-number">100</span> / <span class="hljs-number">58</span>.  <span class="hljs-number">8</span>.<span class="hljs-number">100</span><br>  <span class="hljs-attribute">libavfilter</span>     <span class="hljs-number">7</span>. <span class="hljs-number">57</span>.<span class="hljs-number">100</span> /  <span class="hljs-number">7</span>. <span class="hljs-number">57</span>.<span class="hljs-number">100</span><br>  <span class="hljs-attribute">libavresample</span>   <span class="hljs-number">4</span>.  <span class="hljs-number">0</span>.  <span class="hljs-number">0</span> /  <span class="hljs-number">4</span>.  <span class="hljs-number">0</span>.  <span class="hljs-number">0</span><br>  <span class="hljs-attribute">libswscale</span>      <span class="hljs-number">5</span>.  <span class="hljs-number">5</span>.<span class="hljs-number">100</span> /  <span class="hljs-number">5</span>.  <span class="hljs-number">5</span>.<span class="hljs-number">100</span><br>  <span class="hljs-attribute">libswresample</span>   <span class="hljs-number">3</span>.  <span class="hljs-number">5</span>.<span class="hljs-number">100</span> /  <span class="hljs-number">3</span>.  <span class="hljs-number">5</span>.<span class="hljs-number">100</span><br>  <span class="hljs-attribute">libpostproc</span>    <span class="hljs-number">55</span>.  <span class="hljs-number">5</span>.<span class="hljs-number">100</span> / <span class="hljs-number">55</span>.  <span class="hljs-number">5</span>.<span class="hljs-number">100</span><br><span class="hljs-attribute">Hardware</span> acceleration methods:<br><span class="hljs-attribute">vdpau</span><br><span class="hljs-attribute">cuda</span><br><span class="hljs-attribute">vaapi</span><br><span class="hljs-attribute">drm</span><br><span class="hljs-attribute">opencl</span><br><span class="hljs-attribute">cuvid</span><br></code></pre></td></tr></table></figure><h3 id="测试命令"><a href="#测试命令" class="headerlink" title="测试命令"></a>测试命令</h3><p>将当前目录下的0.mp4转成00.mp4</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -hwaccel cuvid -c:v h264_cuvid -i <span class="hljs-number">0</span>.mp4 -c:v h264_nvenc -y <span class="hljs-number">00</span>.mp4<br></code></pre></td></tr></table></figure><p>将当前目录下的0.mp4转成00.mp4，并指定输出帧率为15（-r 15），比特率为500k（-b 500k）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -hwaccel cuvid -c:v h264_cuvid -i <span class="hljs-number">0</span>.mp4 -c:v h264_nvenc -r <span class="hljs-number">15</span> -b <span class="hljs-number">500</span>k -y <span class="hljs-number">00</span>.mp4<br><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -hwaccel cuvid -c:v h264_cuvid -i &lt;input&gt; -c:v h264_nvenc -b:v <span class="hljs-number">2048</span>k -vf scale_npp=<span class="hljs-number">1280</span>:-<span class="hljs-number">1</span> -y &lt;output&gt;<br></code></pre></td></tr></table></figure><ul><li><p>hwaccel cuvid：指定使用cuvid硬件加速</p></li><li><p>c:v h264_cuvid：使用h264_cuvid进行视频解码</p></li><li><p>c:v h264_nvenc：使用h264_nvenc进行视频编码</p></li><li><p>vf scale_npp&#x3D;1280:-1：指定输出视频的宽高，注意，这里和软解码时使用的-vf scale&#x3D;x:x不一样</p></li></ul><h3 id="多颗显卡命令"><a href="#多颗显卡命令" class="headerlink" title="多颗显卡命令"></a>多颗显卡命令</h3><p>GPU转码效率测试</p><blockquote><p>在配有两颗Intel-E5-2630v3 CPU和两块Nvidia Tesla M4显卡的服务器上，进行h264视频转码测试，成绩如下：</p></blockquote><p>GPU转码平均耗时：8s<br>CPU转码平均耗时：25s</p><blockquote><p>并行转码时，CPU软转的效率有所提高，3个转码任务并行时32颗核心全被占满，此时的成绩</p></blockquote><p>GPU转码平均耗时：8s<br>CPU转码平均耗时：18s</p><p>不难看出，并行时GPU的转码速度并没有提高，可见一颗GPU同时只能执行一个转码任务。那么，如果服务器上插有多块显卡，ffmpeg是否会使用多颗GPU进行并行转码呢？<br>很遗憾，答案是否。<br>ffmpeg并不具备自动向不同GPU分配转码任务的能力，但经过一番调查后，发现可以通过-hwaccel_device参数指定转码任务使用的GPU！</p><blockquote><p>向不同GPU提交转码任务</p></blockquote><p><strong>显卡0</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -hwaccel cuvid -hwaccel_device <span class="hljs-number">0</span> -c:v h264_cuvid -i &lt;input&gt; -c:v h264_nvenc -b:v <span class="hljs-number">2048</span>k -vf scale_npp=<span class="hljs-number">1280</span>:-<span class="hljs-number">1</span> -y &lt;output&gt;<br></code></pre></td></tr></table></figure><p><strong>显卡1</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ffmpeg</span> -hwaccel cuvid -hwaccel_device <span class="hljs-number">1</span> -c:v h264_cuvid -i &lt;input&gt; -c:v h264_nvenc -b:v <span class="hljs-number">2048</span>k -vf scale_npp=<span class="hljs-number">1280</span>:-<span class="hljs-number">1</span> -y &lt;output&gt;<br></code></pre></td></tr></table></figure><blockquote><p>hw accel_device N：指定某颗GPU执行转码任务，N为数字</p></blockquote><p>Linux下稍微麻烦一点儿，具体可参考：<a href="https://www.jianshu.com/p/59da3d350488">https://www.jianshu.com/p/59da3d350488</a></p><h3 id="AMD-GPU"><a href="#AMD-GPU" class="headerlink" title="AMD GPU"></a>AMD GPU</h3><p>AMD的GPU不需要额外下载东西，只要把ffmpeg编译好就能用。Windows版的ffmpeg官网提供了编译好的版本，因此Windows用户无需过多操心这个了，Linux如有需要，请参考：</p><p><a href="https://stackoverflow.com/questions/56933969/how-to-run-ffmpeg-in-gpuamd">https://stackoverflow.com/questions/56933969/how-to-run-ffmpeg-in-gpuamd</a></p><h3 id="命令-2"><a href="#命令-2" class="headerlink" title="命令"></a>命令</h3><p>将a.mp4转成b.mp4</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> .\<span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.mp4</span> -c:v h264_amf .\<span class="hljs-selector-tag">b</span>.mp4<br></code></pre></td></tr></table></figure><h1 id="ffprobe"><a href="#ffprobe" class="headerlink" title="ffprobe"></a>ffprobe</h1><p>获取视频总帧数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ffprobe -v error -count_frames -select_streams v:0 -show_entries stream=nb_read_frames -of default=nokey=1:noprint_wrappers=1 input.mp4<br></code></pre></td></tr></table></figure><blockquote><p>输出6000。 在本例中，6000的输出是指读取帧的数量。因为整个文件必须解码，命令可能需要一段时间才能完成，具体取决于具体的输入文件大小。</p></blockquote><p>选项的含义</p><ul><li>-v error：这隐藏了“info”输出(版本信息等)，使解析更容易。</li><li>-count_frames：计算每个流的帧数，并在相应的流部分中报告。</li><li>-select_streams v:0 ：仅选择视频流。</li><li>-show_entries stream &#x3D; nb_read_frames ：只显示读取的帧数。</li><li>-of default &#x3D; nokey &#x3D; 1：noprint_wrappers &#x3D; 1 ：将输出格式(也称为“writer”)设置为默认值，不打印每个字段的键(nokey &#x3D; 1)，不打印节头和页脚(noprint_wrappers &#x3D; 1)。</li></ul><h1 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h1><p>ot玩转直播流：使用SRS搭建推流服务器；使用SRS+ffmpeg中转推流；OBS推流到自建服务器；使用ffmpeg把直播流复制到多个网站: <a href="https://hu60.cn/q.php/bbs.topic.102309.html">https://hu60.cn/q.php/bbs.topic.102309.html</a><br>官方文档： <a href="http://ffmpeg.org/ffmpeg.html">http://ffmpeg.org/ffmpeg.html</a><br>入门教程：<a href="https://ruanyifeng.com/blog/2020/01/ffmpeg.html">https://ruanyifeng.com/blog/2020/01/ffmpeg.html</a><br>FFMPEG最全教程： <a href="https://cloud.tencent.com/developer/article/1773248">https://cloud.tencent.com/developer/article/1773248</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git commit 使用及规范</title>
    <link href="/2022/04/26/git%20commit%20%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%A7%84%E8%8C%83/"/>
    <url>/2022/04/26/git%20commit%20%E4%BD%BF%E7%94%A8%E5%8F%8A%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<h2 id="git-commit-使用说明"><a href="#git-commit-使用说明" class="headerlink" title="git commit 使用说明"></a>git commit 使用说明</h2><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1 概述"></a>1 概述</h3><p>git提交推荐使用命令行工具，请严格遵循提交格式。</p><h3 id="2-提交格式"><a href="#2-提交格式" class="headerlink" title="2 提交格式"></a>2 提交格式</h3><p>在您<code>git add</code>后，推荐执行<code>git commit</code>进行提交，如无特殊描述信息要添加，也可以<code>git commit -m &lt;mess&gt;</code>进行提交。</p><p>要求提交格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>(<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>): <span class="hljs-tag">&lt;<span class="hljs-name">subject</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BLANK</span> <span class="hljs-attr">LINE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">BLANK</span> <span class="hljs-attr">LINE</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">footer</span>&gt;</span><br></code></pre></td></tr></table></figure><p>type表示提交类别，scope表示修改范围，subject表示标题行， body表示主体描述内容。</p><h4 id="2-1-type说明"><a href="#2-1-type说明" class="headerlink" title="2.1 type说明"></a>2.1 type说明</h4><p>type在commit的是否必须存在。</p><ul><li>feat: 添加新特性</li><li>fix: 修复bug</li><li>docs: 仅仅修改了文档</li><li>style: 仅仅修改了空格、格式缩进、逗号等等，不改变代码逻辑</li><li>refactor: 代码重构，没有加新功能或者修复bug</li><li>perf: 优化相关，比如提升性能、体验</li><li>test: 增加测试用例</li><li>chore: 改变构建流程、或者增加依赖库、工具等</li><li>revert: 回滚到上一个版本</li></ul><h4 id="2-2-scope说明"><a href="#2-2-scope说明" class="headerlink" title="2.2 scope说明"></a>2.2 scope说明</h4><p>非必填（建议填写），scope用于说明 commit 影响的范围，建议填写影响的功能模块。</p><p>如果你的修改影响了不止一个<code>scope</code>，你可以使用<code>*</code>代替。</p><h4 id="2-3-subject说明"><a href="#2-3-subject说明" class="headerlink" title="2.3 subject说明"></a>2.3 subject说明</h4><p>必填， commit 目的的简短描述，不超过50个字符。</p><ul><li>以动词开头，使用第一人称现在时，比如<code>change</code>，而不是<code>changed</code>或<code>changes</code></li><li>第一个字母小写</li><li>结尾不加句号</li></ul><h4 id="2-4-body说明"><a href="#2-4-body说明" class="headerlink" title="2.4 body说明"></a>2.4 body说明</h4><p>非必填（建议填写），可描述当前修改的行为详细信息或修改的目的。</p><h4 id="2-5-footer说明"><a href="#2-5-footer说明" class="headerlink" title="2.5 footer说明"></a>2.5 footer说明</h4><p>非必填，一般用于描述BREAKING CHANGE，在项目开发中一般不需要填写，组件研发的工程需要填写。</p><p>格式：以<code>BREAKING CHANGE</code>开头，后面是对变动的描述、以及变动理由和迁移方法。</p><h3 id="3-提交方式"><a href="#3-提交方式" class="headerlink" title="3 提交方式"></a>3 提交方式</h3><p>如上2所示格式，本质上是改变文件 <u><em>.git&#x2F;COMMIT_EDITMSG</em></u> 中的文本，实际提交过程如下（推荐命令行提交）：</p><h4 id="3-2-cmd（notepad）"><a href="#3-2-cmd（notepad）" class="headerlink" title="3.2 cmd（notepad）"></a>3.2 cmd（notepad）</h4><p>window系统下默认git编辑工具是vim，如无相关基础，建议使用window默认的文本编辑器（这里不赘述vim相关编辑方法）。</p><p>修改git默认文本编辑器： <code>git config core.editor notepad</code></p><p>修改后执行<code>git commit</code>,会弹出文本编辑器。</p><p>我们要按照规定的格式在注释前加入要提交的commit信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">feat(人员新增): 增加人员批量导入<br><br>- 增加批量报盘功能<br>- 增加人员报盘后结果查询功能<br>- 修改人员新增布局<br></code></pre></td></tr></table></figure><p>然后保存并关闭，会提示如下信息：</p><blockquote><p>[master 756c07e] feat(人员新增): 增加人员批量导入<br> 1 file changed, 2 insertions(+)</p></blockquote><p>在push完成后，gitlab的commit列表中会有如下信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/16146226-56531e99792ad355.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>commit.png</p><h4 id="3-2-shell（GNU-nano）提交方式"><a href="#3-2-shell（GNU-nano）提交方式" class="headerlink" title="3.2 shell（GNU nano）提交方式"></a>3.2 shell（GNU nano）提交方式</h4><p>在您执行<code>git commit</code>后，命令行会有如下显示：</p><blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">projectRoot<span class="hljs-regexp">/.git/</span>COMMIT_EDITMSG<br></code></pre></td></tr></table></figure><p># 请为您的变更输入提交说明。以 ‘#’ 开始的行将被忽略，而一个空的提交<br> # 说明将会终止提交。<br> #<br> # 位于分支 master<br> # 您的分支与上游分支 ‘origin&#x2F;master’ 一致。<br> #<br> # 要提交的变更：<br> #       修改：     CHANGELOG.md<br> #<br> # 未跟踪的文件:<br> #       .idea&#x2F;<br> #</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">[</span> 已读取 <span class="hljs-number">13</span> 行 <span class="hljs-punctuation">]</span><br></code></pre></td></tr></table></figure><p>^G 求助      ^O 写入      ^W 搜索      ^K 剪切文字  ^J 对齐      ^C 游标位置<br> ^X 离开      ^R 读档      ^\ 替换      ^U 还原剪切  ^T 拼写检查  ^_ 跳行</p></blockquote><p>如上所示，我们要按照规定的格式在注释前加入要提交的commit信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">feat(人员新增): 增加人员批量导入<br><br>- 增加批量报盘功能<br>- 增加人员报盘后结果查询功能<br>- 修改人员新增布局<br></code></pre></td></tr></table></figure><p>输入完成后，根据快捷键提示，按<code>ctrl + O</code>，然后出现要修改的MSG文件名，按回车键。此时提示如下：</p><blockquote><p>[ 已写入 19 行 ]</p></blockquote><p>最后按<code>ctrl + X</code>提交完成，提示如下：</p><blockquote><p>[master 756c07e] feat(人员新增): 增加人员批量导入<br> 1 file changed, 2 insertions(+)</p></blockquote><p>在push完成后，gitlab的commit列表中会有如下信息：</p><p><img src="https://upload-images.jianshu.io/upload_images/16146226-56531e99792ad355.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>原文地址 ： <a href="https://www.jianshu.com/p/ff4f98695c2c">https://www.jianshu.com/p/ff4f98695c2c</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>LInux shell之(for in 用法总结)</title>
    <link href="/2022/04/24/LInux%20shell%E4%B9%8B(for%20in%20%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93)/"/>
    <url>/2022/04/24/LInux%20shell%E4%B9%8B(for%20in%20%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93)/</url>
    
    <content type="html"><![CDATA[<p>一、语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> 变量名  <span class="hljs-keyword">in</span>  列表<br>  <span class="hljs-keyword">do</span><br>     程序段(<span class="hljs-built_in">command</span>)<br>  <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>注意1：是变量名而不是$变量！</p><p>注意2：列表可以做文章！</p><p>二、应用</p><p>第一类：数字性循环–&gt;seq在in后面的应用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash  </span><br><span class="hljs-comment">#也是产生等差数列--&gt;默认是1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">seq</span> 1 10)  <span class="hljs-comment">#产生的是一个字符串，默认IFS是以空格隔开！</span><br>  <span class="hljs-keyword">do</span>   <br>    <span class="hljs-built_in">echo</span> $(<span class="hljs-built_in">expr</span> <span class="hljs-variable">$i</span> \* 3 + 1);  <span class="hljs-comment">#主要是复习:expr乘法的特殊用法！--&gt;空格隔开</span><br>  <span class="hljs-keyword">done</span>   <br></code></pre></td></tr></table></figure><p>补充：产生[1,10]的自然数–&gt;{}在in后面的应用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">total=<span class="hljs-number">0</span> <span class="hljs-comment">#全局变量</span><br><span class="hljs-keyword">for</span> i in &#123;<span class="hljs-number">1</span>.<span class="hljs-number">.100</span>&#125; <span class="hljs-comment">#&quot;..&quot;表示连续，默认也是IFS为空格隔开</span><br>  <span class="hljs-keyword">do</span><br>    ((total+=i))<br>  done<br><span class="hljs-keyword">echo</span> -e <span class="hljs-string">&quot;total is:$&#123;total&#125;&quot;</span><br><br><span class="hljs-comment">#多行注释</span><br>&lt;&lt;COMMENR<br><span class="hljs-keyword">for</span> i in mysql_&#123;<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">12</span>&#125;sql <span class="hljs-comment">#多个文件</span><br>  <span class="hljs-keyword">do</span> <br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$i</span><br>    samtools view -c <span class="hljs-variable">$i</span> <br>  done<br>COMMENT<br></code></pre></td></tr></table></figure><p>第二类：字符性循环</p><p>最原始的</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#使用列表for循环显示周一到周日对应的英文--&gt;学习日期的英文</span><br><span class="hljs-keyword">for</span> day <span class="hljs-keyword">in</span> Monday Tuesday Wednesday Thursday Friday Saturday Sunday <br>  <span class="hljs-keyword">do</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$day</span>&quot;</span><br>  <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>变量的类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash  </span><br>list=<span class="hljs-string">&quot;Linux Java C++ Python&quot;</span>  <br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$list</span>  <br>  <span class="hljs-keyword">do</span>  <br>    <span class="hljs-built_in">echo</span> -e <span class="hljs-string">&quot;Language is <span class="hljs-variable">$&#123;i&#125;</span>&quot;</span>   <br>  <span class="hljs-keyword">done</span>  <br></code></pre></td></tr></table></figure><p>cat在in后面的应用–&gt;逐行读取文件的内容(默认是IFS)，所以不是逐行打印！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">cat</span> 日志颜色.sh) <span class="hljs-comment">#注意:pwd当前目录下的文件</span><br> <span class="hljs-keyword">do</span> <br>   <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span><br> <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>思考：如果想逐行原样输出！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># reading content from a file</span><br><br>file=<span class="hljs-string">&quot;日志文件.sh&quot;</span><br><span class="hljs-comment">#将这个语句加入到脚本中，告诉bash shell在数据值中忽略空格和制表,使其只能识别换行符!</span><br>IFS=$<span class="hljs-string">&#x27;\n&#x27;</span><br><span class="hljs-keyword">for</span> std <span class="hljs-keyword">in</span> $(<span class="hljs-built_in">cat</span> <span class="hljs-variable">$file</span>)<br>  <span class="hljs-keyword">do</span><br>     <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$std</span>&quot;</span><br>  <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>说明：IFS的一些说明！</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bash </span><span class="hljs-keyword">shell会将下列字符当作字段分隔符：空格、制表符、换行符</span><br><span class="hljs-keyword"></span><br>说明：如果在<span class="hljs-keyword">shell在数据中看到这些字符中的任意一个，它就会假定这表明了列表中一个新数据字段的开始！</span><br><span class="hljs-keyword"></span>参考的最佳安全实践：在改变IFS之前保存原来的IFS值，之后再恢复它。<br></code></pre></td></tr></table></figure><p><a href="https://zhuanlan.zhihu.com/p/36513249">https://zhuanlan.zhihu.com/p/36513249</a></p><p>保证了：在脚本的后续操作中使用的是IFS的默认值</p><p>实现：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">IFS.OLD=<span class="hljs-variable">$IFS</span>          <span class="hljs-comment">#默认的IFS的数值--&gt;也是环境变量！</span><br>IFS=<span class="hljs-variable">$</span><span class="hljs-string">&#x27;\n&#x27;</span>             <span class="hljs-comment">#自定义的IFS数值</span><br>&lt;在代码中使用新的IFS值&gt; <span class="hljs-comment">#待使用自定义IFS的部分！</span><br>IFS=<span class="hljs-variable">$IFS</span>.OLD          <span class="hljs-comment">#恢复默认的IFS</span><br></code></pre></td></tr></table></figure><p>第三类：路径查找</p><p>ls在in后面的命令是–&gt;读取当前pwd下的文件(广义上)！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash  </span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">ls</span>`;  <span class="hljs-comment">#ls可以结合统配符应用！</span><br>  <span class="hljs-keyword">do</span>   <br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$i</span> is file name\! ;  <span class="hljs-comment">#注意:\的应用！</span><br>  <span class="hljs-keyword">done</span>   <br></code></pre></td></tr></table></figure><p> 用通配符读取目录(无命令)</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-keyword">for</span> <span class="hljs-built_in">file</span> <span class="hljs-keyword">in</span> ~/*;  <span class="hljs-comment">#一级目录下的内容--&gt;并不递归显示！ </span><br>  do  <br>     echo $<span class="hljs-built_in">file</span> <span class="hljs-keyword">is</span> <span class="hljs-built_in">file</span> path \! ;  <span class="hljs-comment">#$&#123;file&#125;代表的是文件的全路径</span><br>  done <br></code></pre></td></tr></table></figure><p>通过脚本传参</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#回忆1：统计脚本参数的个数</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;argument number are <span class="hljs-variable">$#</span>&quot;</span>！<br><span class="hljs-comment">#回忆2：参数的内容--&gt;此处可以换成$@来测试！</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;the input is $*&quot;</span><br><span class="hljs-comment">#循环执行</span><br><span class="hljs-keyword">for</span> argument <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;$*&quot;</span>;<br>  <span class="hljs-keyword">do</span><br>      <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$argument</span> &quot;</span><br>  <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>IFS：内部字段分隔符</p><p>需求如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment">#遍历一个文件中用冒号分隔的值：--&gt;特殊文件--&gt;/etc/passwd文件等！</span><br><span class="hljs-attr">IFS</span>=：<br><span class="hljs-comment">#如果要指定多个IFS字符，只要将它们在赋值行串起来就行。</span><br><span class="hljs-attr">IFS</span>=$<span class="hljs-string">&#x27;\n&#x27;</span>:<span class="hljs-comment">;&quot;</span><br></code></pre></td></tr></table></figure><p>总结：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">#（1）从变量读取列表</span><br><br><span class="hljs-meta"># 将一系列的值都集中存储在一个变量中，然后需要遍历变量中的整个列表</span><br><br><span class="hljs-meta">#（2）从命令读取值</span><br><span class="hljs-meta">#有两种方式可以将命令输出赋值给变量：</span><br><br><span class="hljs-meta"># （1）反引号字符（`）</span><br><br><span class="hljs-meta"># （2）$()格式 </span><br></code></pre></td></tr></table></figure><p>补充：在列表构成上分多种情景，如数字列表、字符串列表、命令列表、脚本传参列表等！</p><p>数组遍历</p><p>遍历数组时，使用哪种方式取决于数组中元素的分布情况。</p><p>定义如下两个数组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#下标连续</span><br>arr1=(a b c d e)<br><span class="hljs-comment">#下标不连续</span><br>arr2=([2]=<span class="hljs-string">&quot;a b&quot;</span> [5]=<span class="hljs-string">&quot;c&quot;</span> [8]=4 [10]=<span class="hljs-string">&quot;csdn&quot;</span>)<br>1.<span class="hljs-keyword">for</span>，适用于数组下标连续的情况，如果数组下标不连续会得不到完整的结果。<br><br><span class="hljs-keyword">for</span> ((i=0;i&lt;<span class="hljs-variable">$&#123;#arr1[@]&#125;</span>;i++))<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;arr1[$i]&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>2.for…in，无论下标是否连续都可以，有两种方式，一种是直接遍历数组中的元素，一种是通过遍历数组下标获取数组元素。</p><p>#直接遍历数组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;arr1[@]&#125;</span>&quot;</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$value</span><br><span class="hljs-keyword">done</span><br><span class="hljs-comment">#通过遍历下标获取数组元素</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;!arr1[@]&#125;</span><br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;arr1[$i]&#125;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><ol start="3"><li>while，适用于数组下标连续的情况，如果数组下标不连续会得不到完整的结果。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">i=0<br><span class="hljs-keyword">while</span> [ <span class="hljs-variable">$i</span> -lt <span class="hljs-variable">$&#123;#arr1[@]&#125;</span> ]<br><span class="hljs-keyword">do</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-variable">$&#123;arr1[$i]&#125;</span><br>    <span class="hljs-built_in">let</span> i++<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>除了下标问题外，关于@与*在使用时也要注意，并不是完全等价，并且在被双引号包围时的解析有时也略有不同。</p><p>对于第一种遍历方式，$</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux下tar, tar.gz, xz，unzip，bzip2文件解压方法</title>
    <link href="/2022/04/24/Linux%E4%B8%8Btar,%20tar.gz,%20xz%EF%BC%8Cunzip%EF%BC%8Cbzip2%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E6%96%B9%E6%B3%95/"/>
    <url>/2022/04/24/Linux%E4%B8%8Btar,%20tar.gz,%20xz%EF%BC%8Cunzip%EF%BC%8Cbzip2%E6%96%87%E4%BB%B6%E8%A7%A3%E5%8E%8B%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">tar -zxvf filename</span><br></code></pre></td></tr></table></figure><ul><li>z 一般处理.gz文件</li><li>x 解压 c压缩</li><li>v 显示执行过程</li><li>f 指定备份文件</li></ul><p>压缩tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zcvf dest.tar.gz ./ori/*  # 压缩一个目录<br></code></pre></td></tr></table></figure><p>压缩包含隐藏文件</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">tar -zcvf  <span class="hljs-keyword">back</span>.tar.gz .[!.]* *<br></code></pre></td></tr></table></figure><blockquote><p>tar czvf test.tar.gz * 压缩当前文件夹下非[隐藏文件]的文件; tar czvf test.tar.gz .[!.]* 压缩当前文件夹下[隐藏文件]排除两个[隐藏文件]夹”.”和“..”</p></blockquote><p>先创建tar包最后删除</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">tar -cvzf  <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> <span class="hljs-selector-tag">a</span> <span class="hljs-attr">--remove-files</span><br></code></pre></td></tr></table></figure><p>解压tar.gz</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf origin.tar.gz<br>tar -zxvf origin.tar.gz -C /home 设置解压目录<br></code></pre></td></tr></table></figure><h2 id="xz"><a href="#xz" class="headerlink" title="xz"></a>xz</h2><p>解压.xz文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">xz -dk node-v14.15.1-linux-x64.tar.xz #将.xz解压为.tar<br>tar -xvf node-v14.15.1-linux-x64.tar # 将.tar解压为普通文件<br>tar -xvf node-v14.15.1-linux-x64.tar.xz<br></code></pre></td></tr></table></figure><ul><li>d 解压.xz文件</li><li>k 保留原文件（如果不想保留，可以去掉k）</li></ul><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs diff">xz -help<br><br>用法:xz[选项]…[文件]…<br>压缩或解压.xz格式的文件。<br><span class="hljs-deletion">-z，——compress 压缩</span><br><span class="hljs-deletion">-d，——decompress, --uncompress 解压</span><br><span class="hljs-deletion">-t，——test 测试压缩文件的完整性</span><br><span class="hljs-deletion">-l，——list 列出关于.xz文件的列表信息</span><br><span class="hljs-deletion">-k，——keep 保留(不要删除)输入文件</span><br><span class="hljs-deletion">-f，——force 强制重写输出文件和(de)压缩链接</span><br><span class="hljs-deletion">-c，——stdout，——to-stdout 写入标准输出，不要删除输入文件</span><br><span class="hljs-deletion">-0 …-9 压缩预设;默认是6;在使用7-9之前，请考虑压缩机和减压器的内存使用情况!</span><br><span class="hljs-deletion">-e，——extreme 极端尝试提高压缩比使用更多的CPU时间; 不影响解压内存要求</span><br><span class="hljs-deletion">-T，——threads=NUM使用最多的NUM线程;默认值为1;设置为0 使用任意多的处理器内核</span><br><span class="hljs-deletion">-q，——quiet 安静压制警告;指定两次也可以抑制错误</span><br><span class="hljs-deletion">-v，——verbose 啰嗦;如果要更详细，请指定两次</span><br><span class="hljs-deletion">-h，——help 帮助显示此简短的帮助和退出</span><br><span class="hljs-deletion">-H，——long-help 显示long help(同时列出高级选项)</span><br><span class="hljs-deletion">-V，——version 版本显示版本号并退出</span><br></code></pre></td></tr></table></figure><p>没有文件时，或文件为-时，读取标准输入。</p><h2 id="unzip"><a href="#unzip" class="headerlink" title="unzip"></a>unzip</h2><p>1、把文件解压到当前目录下</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">unzip <span class="hljs-keyword">test</span>.<span class="hljs-keyword">zip</span><br></code></pre></td></tr></table></figure><p>2、如果要把文件解压到指定的目录下，需要用到-d参数。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">unzip -<span class="hljs-keyword">d</span> /temp <span class="hljs-keyword">test</span>.<span class="hljs-keyword">zip</span><br></code></pre></td></tr></table></figure><p>3、解压的时候，有时候不想覆盖已经存在的文件，那么可以加上-n参数</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">unzip -<span class="hljs-keyword">n</span> <span class="hljs-keyword">test</span>.<span class="hljs-keyword">zip</span><br>unzip -<span class="hljs-keyword">n</span> -<span class="hljs-keyword">d</span> /temp <span class="hljs-keyword">test</span>.<span class="hljs-keyword">zip</span><br></code></pre></td></tr></table></figure><p>4、只看一下zip压缩包中包含哪些文件，不进行解压缩</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">unzip -<span class="hljs-keyword">l</span> <span class="hljs-keyword">test</span>.<span class="hljs-keyword">zip</span><br></code></pre></td></tr></table></figure><p>5、查看显示的文件列表还包含压缩比率</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">unzip -v <span class="hljs-keyword">test</span>.<span class="hljs-keyword">zip</span><br></code></pre></td></tr></table></figure><p>6、检查zip文件是否损坏</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">unzip -t <span class="hljs-keyword">test</span>.<span class="hljs-keyword">zip</span><br></code></pre></td></tr></table></figure><p>7、将压缩文件test.zip在指定目录tmp下解压缩，如果已有相同的文件存在，要求unzip命令覆盖原先的文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">unzip -o test.zip -d <span class="hljs-regexp">/tmp/</span><br></code></pre></td></tr></table></figure><h2 id="bzip2"><a href="#bzip2" class="headerlink" title="bzip2"></a>bzip2</h2><p>安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> bzip2<br></code></pre></td></tr></table></figure><p>压缩</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bzip2 </span>filename<br><span class="hljs-keyword">bzip2 </span>-z filename<br><span class="hljs-keyword">bzip2 </span>-z <span class="hljs-keyword">backup.tar</span><br></code></pre></td></tr></table></figure><blockquote><p>重要：bzip2 默认会在压缩及解压缩文件时删除输入文件（原文件），要保留输入文件，使用-k或者–keep选项。此外，-f或者–force标志会强制让 bzip2 覆盖已有的输出文件</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bzip2 </span>-zk filename<br><span class="hljs-keyword">bzip2 </span>-zk <span class="hljs-keyword">backup.tar</span><br></code></pre></td></tr></table></figure><blockquote><p>你也可以设置块的大小，从 100k 到 900k，分别使用-1或者–fast到-9或者–best：</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bzip2 </span>-<span class="hljs-built_in">k1</span>  Etcher-linux-x64.AppImage<br>ls -<span class="hljs-keyword">lh </span> Etcher-linux-x64.AppImage.<span class="hljs-keyword">bz2 </span><br><span class="hljs-keyword">bzip2 </span>-k9  Etcher-linux-x64.AppImage <br><span class="hljs-keyword">bzip2 </span>-kf9  Etcher-linux-x64.AppImage <br>ls -<span class="hljs-keyword">lh </span>Etcher-linux-x64.AppImage.<span class="hljs-keyword">bz2 </span><br></code></pre></td></tr></table></figure><p>解压</p><blockquote><p>要解压缩.bz2文件，确保使用-d或者–decompress选项：</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">bzip2 </span>-d filename.<span class="hljs-keyword">bz2</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：这个文件必须是.bz2的扩展名，上面的命令才能使用。</p></blockquote><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bzip2 -vd Etcher-linux-x64<span class="hljs-selector-class">.AppImage</span><span class="hljs-selector-class">.bz2</span> <br>bzip2 -vfd Etcher-linux-x64<span class="hljs-selector-class">.AppImage</span><span class="hljs-selector-class">.bz2</span> <br>ls -l Etcher-linux-x64<span class="hljs-selector-class">.AppImage</span> <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Golang Mutex互斥锁</title>
    <link href="/2022/04/24/Golang%20Mutex%E4%BA%92%E6%96%A5%E9%94%81/"/>
    <url>/2022/04/24/Golang%20Mutex%E4%BA%92%E6%96%A5%E9%94%81/</url>
    
    <content type="html"><![CDATA[<h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>其中Mutex为互斥锁，Lock()加锁，Unlock()解锁，使用Lock()加锁后，便不能再次对其进行加锁，直到利用Unlock()解锁对其解锁后，才能再次加锁．适用于读写不确定场景，即读写次数没有明显的区别，并且只允许只有一个读或者写的场景，所以该锁叶叫做全局锁．</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;errors&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> MyMap <span class="hljs-keyword">struct</span> &#123;<br>mp <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br>mutex *sync.Mutex<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyMap)</span></span> Get(key <span class="hljs-type">string</span>) (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br>this.mutex.Lock()<br>i, ok := this.mp[key]<br>this.mutex.Unlock()<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span> i, errors.New(<span class="hljs-string">&quot;不存在&quot;</span>)<br>&#125;<br><span class="hljs-keyword">return</span> i, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyMap)</span></span> Set(key <span class="hljs-type">string</span>, v <span class="hljs-type">int</span>) &#123;<br>this.mutex.Lock()<br><span class="hljs-keyword">defer</span> this.mutex.Unlock()<br>this.mp[key] = v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyMap)</span></span> Display() &#123;<br>this.mutex.Lock()<br><span class="hljs-keyword">defer</span> this.mutex.Unlock()<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> this.mp &#123;<br>fmt.Println(k, <span class="hljs-string">&quot;=&quot;</span>, v)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SetValue</span><span class="hljs-params">(m *MyMap)</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-type">rune</span><br>a = <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>m.Set(<span class="hljs-type">string</span>(a+<span class="hljs-type">rune</span>(i)), i)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>m := &amp;MyMap&#123;mp: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>), mutex: <span class="hljs-built_in">new</span>(sync.Mutex)&#125;<br><span class="hljs-keyword">go</span> SetValue(m) <span class="hljs-comment">/*启动一个线程向 map 写入值*/</span><br><span class="hljs-keyword">go</span> m.Display() <span class="hljs-comment">/*启动一个线程读取 map 的值*/</span><br><span class="hljs-keyword">var</span> str <span class="hljs-type">string</span> <span class="hljs-comment">/*这里主要是等待线程结束*/</span><br>fmt.Scan(&amp;str)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><p>读写锁即是针对于读写操作的互斥锁。它与普通的互斥锁最大的不同就是，它可以分别针对读操作和写操作进行锁定和解锁操作。读写锁遵循的访问控制规则与互斥锁有所不同。</p><p>在读写锁管辖的范围内，它允许任意个读操作的同时进行。但是，在同一时刻，它只允许有一个写操作在进行。并且，在某一个写操作被进行的过程中，读操作的进行也是不被允许的。</p><p>也就是说，读写锁控制下的多个写操作之间都是互斥的，并且写操作与读操作之间也都是互斥的。但是，多个读操作之间却不存在互斥关系。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;errors&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-keyword">type</span> MyMap <span class="hljs-keyword">struct</span> &#123;<br>mp    <span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span><br>mutex *sync.RWMutex<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyMap)</span></span> Get(key <span class="hljs-type">string</span>) (<span class="hljs-type">int</span>, <span class="hljs-type">error</span>) &#123;<br>this.mutex.RLock()<br>i, ok := this.mp[key]<br>this.mutex.RUnlock()<br><span class="hljs-keyword">if</span> !ok &#123;<br><br><span class="hljs-keyword">return</span> i, errors.New(<span class="hljs-string">&quot;不存在&quot;</span>)<br><br>&#125;<br><span class="hljs-keyword">return</span> i, <span class="hljs-literal">nil</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyMap)</span></span> Set(key <span class="hljs-type">string</span>, v <span class="hljs-type">int</span>) &#123;<br>this.mutex.RLock()<br><span class="hljs-keyword">defer</span> this.mutex.RUnlock()<br>this.mp[key] = v<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(this *MyMap)</span></span> Display() &#123;<br>this.mutex.RLock()<br><span class="hljs-keyword">defer</span> this.mutex.RUnlock()<br><span class="hljs-keyword">for</span> k, v := <span class="hljs-keyword">range</span> this.mp &#123;<br>fmt.Println(k, <span class="hljs-string">&quot;=&quot;</span>, v)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">SetValue</span><span class="hljs-params">(m *MyMap)</span></span> &#123;<br><span class="hljs-keyword">var</span> a <span class="hljs-type">rune</span><br>a = <span class="hljs-string">&#x27;a&#x27;</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>m.Set(<span class="hljs-type">string</span>(a+<span class="hljs-type">rune</span>(i)), i)<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>m := &amp;MyMap&#123;mp: <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-type">int</span>), mutex: <span class="hljs-built_in">new</span>(sync.RWMutex)&#125;<br><span class="hljs-keyword">go</span> SetValue(m) <span class="hljs-comment">/*启动一个线程向 map 写入值*/</span><br><span class="hljs-keyword">go</span> m.Display() <span class="hljs-comment">/*启动一个线程读取 map 的值*/</span><br><span class="hljs-keyword">var</span> str <span class="hljs-type">string</span> <span class="hljs-comment">/*这里主要是等待线程结束*/</span><br>fmt.Scan(&amp;str)<br>&#125;<br></code></pre></td></tr></table></figure><p>读写锁小例子</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs stylus">package <span class="hljs-selector-tag">main</span><br><br>import (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;sync&quot;</span><br><span class="hljs-string">&quot;time&quot;</span><br>)<br><br>func <span class="hljs-selector-tag">main</span>() &#123;<br><span class="hljs-selector-tag">var</span> lock sync<span class="hljs-selector-class">.RWMutex</span><br>go <span class="hljs-built_in">read</span>(&amp;lock)<br>go <span class="hljs-built_in">read</span>(&amp;lock)<br>go <span class="hljs-built_in">write</span>(&amp;lock)<br><span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Sleep</span>(<span class="hljs-number">25000000</span>)<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;end&quot;</span>)<br>&#125;<br><br>func <span class="hljs-built_in">read</span>(lock *sync.RWMutex) &#123;<br>lock<span class="hljs-selector-class">.RLock</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;reading&quot;</span>)<br><span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Sleep</span>(<span class="hljs-number">5000</span>)<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;read end&quot;</span>)<br>lock<span class="hljs-selector-class">.RUnlock</span>()<br>&#125;<br><br>func <span class="hljs-built_in">write</span>(lock *sync.RWMutex) &#123;<br><span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Sleep</span>(<span class="hljs-number">1000</span>) <span class="hljs-comment">//保证先让读拿到锁, 如果没有就会随机，不过应该先过read一般会先read.</span><br>lock<span class="hljs-selector-class">.Lock</span>()<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;writing&quot;</span>)<br><span class="hljs-selector-tag">time</span><span class="hljs-selector-class">.Sleep</span>(<span class="hljs-number">5000</span>)<br>fmt<span class="hljs-selector-class">.Println</span>(<span class="hljs-string">&quot;write end&quot;</span>)<br>lock<span class="hljs-selector-class">.Unlock</span>()<br>&#125;<br><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;结果</p><p>reading</p><p>reading</p><p>read end</p><p>read end</p><p>writing</p><p>write end</p><p>end</p><h1 id="map并发读写报错"><a href="#map并发读写报错" class="headerlink" title="map并发读写报错"></a>map并发读写报错</h1><p>相似的报错：fatal error: concurrent map writes</p><p>原因1：加解锁异常<br>代码写的不严谨，加锁后未解锁，未形成单次闭环<br>解决：形成闭环，有加得必须有解</p><p>原因2：加解锁代码看起来貌似正常<br>实际上是加锁内部的代码加了个寂寞，map操作不在锁的范围内，和外部的代码在使用的<br>(共同读写的)还是相同的map（同地址），锁未起实际作用</p><p>解决：对map数据进行转移不使用旧map，在加锁与解锁之间生成新的map，<br>将数据转移至新map(或其它数据结构)再返回新map</p><p>或</p><p>调整代码位置即可</p><p>原因3：锁未加完全</p><p>只给写map的goroutine实施了加解锁，而读goroutine方面没有；<br>或<br>只给读map的goroutine实施了加解锁，而写goroutine方面没有；<br>或<br>未加锁</p><p>原因4：对该map加的不是同一把锁</p><p>举例：对于某map，读map有2个goroutine，写map有2个goroutine，这四个依次编号为1,2,3,4，前3个使用mu1，最后一个使用mu2，就会造成该报错。</p><p>温馨提示：<br>同一把锁可以作用多个map，但同一个map不能有两把锁操作。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php中日期函数date与gmdate在获取日期上的区别</title>
    <link href="/2022/04/23/php%E4%B8%AD%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0date%E4%B8%8Egmdate%E5%9C%A8%E8%8E%B7%E5%8F%96%E6%97%A5%E6%9C%9F%E4%B8%8A%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <url>/2022/04/23/php%E4%B8%AD%E6%97%A5%E6%9C%9F%E5%87%BD%E6%95%B0date%E4%B8%8Egmdate%E5%9C%A8%E8%8E%B7%E5%8F%96%E6%97%A5%E6%9C%9F%E4%B8%8A%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>php中的二个日期格式化函数：date()和gmdate()。</p><p>date – 格式化一个本地时间／日期<br>gmdate – 格式化一个 GMT&#x2F;UTC 日期／时间，返回的是格林威治标准时（GMT）。</p><p>假如，现在所在的时区是+8，那么服务器运行以下脚本返回的时间应该为：<br>当前时间假定是2013-03-14 12:15:27</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">echo</span> date(&#x27;Y-m-d H:i:s&#x27;, time()); 输出为：<span class="hljs-number">2013</span>-<span class="hljs-number">03</span>-<span class="hljs-number">14</span> <span class="hljs-number">12</span>:<span class="hljs-number">15</span>:<span class="hljs-number">27</span><br><span class="hljs-attribute">echo</span> gmdate(&#x27;Y-m-d H:i:s&#x27;, time()); 输出为：<span class="hljs-number">2013</span>-<span class="hljs-number">03</span>-<span class="hljs-number">14</span> <span class="hljs-number">04</span>:<span class="hljs-number">15</span>:<span class="hljs-number">27</span><br></code></pre></td></tr></table></figure><p>以上是在Linux+Apache下运行PHP所得的结果。</p><p>在Windows下运行，则2个函数返回都是：2013-03-14 04:15:27。</p><p>基于兼容性的考虑，我们需要统一使用gmdate，并手工设置当前时区，改进后的写法如下：</p><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">echo gmdate(&#x27;Y-m-d H<span class="hljs-symbol">:i</span><span class="hljs-symbol">:s</span>&#x27;, time() + <span class="hljs-number">3600</span> * 8);<br></code></pre></td></tr></table></figure><p>有了以上的代码，不管在Linux+Apache下还是Windows下都得到了正确的结果，这样写的另一个好处在于：网站用户只要设置所在的时区，程序自动根据用户设置的时区进行时间计算，数据库中信息发布时间只存当前的time()所生成的时间，那么在中国+8时区看到的发布时间是：2013-03-14 12:15:27，那么在欧洲+2时区用户看到这个信息的发布时间是：2013-03-14 06:15:27，这样信息的时间就全部对应正确了。</p><p>参考地址：<a href="https://www.cnblogs.com/kaka666/p/9744538.html">https://www.cnblogs.com/kaka666/p/9744538.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP导出CSV</title>
    <link href="/2022/04/21/PHP%E5%AF%BC%E5%87%BACSV/"/>
    <url>/2022/04/21/PHP%E5%AF%BC%E5%87%BACSV/</url>
    
    <content type="html"><![CDATA[<p>文档待整理，暂时写这么点</p><h1 id="涉及函数"><a href="#涉及函数" class="headerlink" title="涉及函数"></a>涉及函数</h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">fopen</span><br><span class="hljs-built_in">fputs</span><br>fputcsv<br></code></pre></td></tr></table></figure><h1 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">$header = [<span class="hljs-string">&#x27;第一列&#x27;</span>, <span class="hljs-string">&#x27;第二列&#x27;</span>, <span class="hljs-string">&#x27;第三列&#x27;</span>];<br>$row = [<span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;two&#x27;</span>, <span class="hljs-string">&#x27;three&#x27;</span>];<br>$fp = fopen(<span class="hljs-string">&#x27;./example.csv&#x27;</span>, <span class="hljs-string">&#x27;w+&#x27;</span>);<br>fputs(<span class="hljs-keyword">chr</span>(<span class="hljs-number">239</span>) . <span class="hljs-keyword">chr</span>(<span class="hljs-number">187</span>) . <span class="hljs-keyword">chr</span>(<span class="hljs-number">191</span>)); <span class="hljs-regexp">//</span> 添加utf-<span class="hljs-number">8</span> bom头<br>fputcsv($fp, $row);<br></code></pre></td></tr></table></figure><p>如果不想使用<code>fputcsv</code>函数，可以直接使用<code>,</code>分割拼接数组，但是要注意每一列的逗号应该被处理，否则可能会不能对齐</p><h1 id="浏览器下载"><a href="#浏览器下载" class="headerlink" title="浏览器下载"></a>浏览器下载</h1><p>响应如下头部</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: application/vnd.ms-excel&#x27;</span>); <span class="hljs-comment">// 文件格式</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: charset=utf-8&#x27;</span>); <span class="hljs-comment">// 文件编码</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Disposition: attachment; filenaeme=&#x27;</span>. <span class="hljs-variable">$filename</span>); <span class="hljs-comment">// 文件名</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-Type: application/octet-stream&#x27;</span>); <span class="hljs-comment">// 二进制流</span><br><span class="hljs-comment">// header(&quot;Accept-Ranges:bytes&quot;);// 表明范围单位为字节，可不写</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Pragma: no-cache&quot;</span>); <span class="hljs-comment">// 禁止缓存</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Expires: 0&quot;</span>);<span class="hljs-comment">// 有效期时间</span><br></code></pre></td></tr></table></figure><p>实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$fp</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;./example.csv&#x27;</span>, <span class="hljs-string">&#x27;w+&#x27;</span>);<br><span class="hljs-variable">$count</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$max</span> = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-variable">$query</span>-&gt;<span class="hljs-title function_ invoke__">fetch</span>()) &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$count</span> &gt; <span class="hljs-variable">$max</span>) &#123;<br><span class="hljs-title function_ invoke__">ob_flush</span>();<br><span class="hljs-title function_ invoke__">flush</span>();<br><span class="hljs-variable">$count</span> = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-variable">$count</span>++;<br><span class="hljs-title function_ invoke__">fputcsv</span>(<span class="hljs-variable">$fp</span>, <span class="hljs-variable">$row</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$row</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp</span>);<br></code></pre></td></tr></table></figure><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p>如果没有写入bom头，则使用Microsoft Excel打开有可能乱码，如果你使用windows,可以将csv以记事本方式打开保存时选择编码为utf-8 bom，你也可以进行转码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;\t&quot;</span>.iconv(<span class="hljs-string">&#x27;utf-8&#x27;</span>, <span class="hljs-string">&#x27;gb2312//ignore&#x27;</span>, <span class="hljs-variable">$v</span>);  <span class="hljs-regexp">//</span> gbk 也可以（建议）<br></code></pre></td></tr></table></figure><p>前面加了\t，这样对于长数字，不会被显示为科学计数法，也可以对应一些特殊字符问题，如果是时间格式，不要在末尾加\t，否则不可筛选</p><p><strong>转码函数还有例如</strong>：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">mb<span class="hljs-emphasis">_convert_encoding</span><br><span class="hljs-emphasis">mb_convert_</span>variables<br></code></pre></td></tr></table></figure><h1 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h1><p>BOM（Byte Order Mark），字节顺序标记，出现在文本文件头部，Unicode编码标准中用于标识文件是采用哪种格式的编码。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">0xEF</span> <span class="hljs-number">0xBB</span> <span class="hljs-number">0xBF</span><br></code></pre></td></tr></table></figure><p>移除BOM</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">$BOM = <span class="hljs-built_in">chr</span>(<span class="hljs-number">239</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">187</span>).<span class="hljs-built_in">chr</span>(<span class="hljs-number">191</span>)<span class="hljs-comment">;</span><br><span class="hljs-keyword">return</span> str_replace($BOM,”,$contents)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>检查是否有BOM</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">return</span> substr($string,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>) == pack(<span class="hljs-string">&quot;CCC&quot;</span>,<span class="hljs-number">0</span>xef,<span class="hljs-number">0</span>xbb,<span class="hljs-number">0</span>xbf);<br></code></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>PHP文件头BOM头问题  <a href="https://www.cnblogs.com/wt645631686/p/6868826.html">https://www.cnblogs.com/wt645631686/p/6868826.html</a><br>在 PHP 中使用 BOM 将字符串编码为 UTF-8 <a href="https://www.itbaoku.cn/post/1743835/do">https://www.itbaoku.cn/post/1743835/do</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SVN使用笔记</title>
    <link href="/2022/04/07/SVN%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2022/04/07/SVN%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>svnadmin create .</p><p>svn [–username 用户名 –password 密码] checkout <url> <name><br>checkout代码 svn co svn:&#x2F;&#x2F;svnbucket.com&#x2F;xxx&#x2F;xxx<br>更新代码 svn up<br>提交代码 svn commit -m “提交描述”<br>添加新文件到版本库 svn add filename<br>添加当前目录下所有php文件 svn add <em>.php<br>递归添加当前目录下的所有新文件 svn add . –no-ignore –force<br>查看指定文件的所有log svn log test.php<br>查看指定版本号的log svn svn log -r 100<br>撤销本地文件的修改（还没提交的） svn revert test.php svn revert -r 目录名<br>撤销目录下所有本地修改 svn revert –recursive 目录名<br>查看当前工作区的所有改动 svn diff<br>查看当前工作区test.php文件与最新版本的差异 svn diff test.php<br>指定版本号比较差异 svn diff -r 200:201 test.php<br>查看当前工作区和版本301中bin目录的差异 svn diff -r 301 bin<br>查看当前工作区的状态 svn status<br>查看svn信息 svn info<br>查看文件列表，可以指定-r查看，查看指定版本号的文件列表 svn ls svn ls -r 100<br>显示文件的每一行最后是谁修改的（出了BUG，经常用来查这段代码是谁改的） svn blame filename.php<br>查看指定版本的文件内容，不加版本号就是查看最新版本的 svn cat test.py -r 2<br>清理 svn cleanup<br>若想创建了一个文件夹，并且把它加入版本控制，但忽略文件夹中的所有文件的内容 svn mkdir spool svn propset svn:ignore ‘</em>‘ spool svn ci -m ‘Adding “spool” and ignoring its contents.’<br>若想创建一个文件夹，但不加入版本控制，即忽略这个文件夹 svn mkdir spool svn propset svn:ignore ‘spool’ . svn ci -m ‘Ignoring a directory called “spool”.’<br>切换当前项目到指定分支。服务器上更新新版本我们经常就用这个命令来把当前代码切换到新的分支 svn switch svn:&#x2F;&#x2F;svnbucket.com&#x2F;test&#x2F;branches&#x2F;online1.0<br>重定向仓库地址到新地址 svn switch –relocate 原svn地址 新svn地址<br>创建分支，从主干创建一个分支保存到branches&#x2F;online1.0 svn cp -m “描述内容” <a href="http://svnbucket.com/repos/trunk">http://svnbucket.com/repos/trunk</a> <a href="http://svnbucket.com/repos/branches/online1.0">http://svnbucket.com/repos/branches/online1.0</a><br>合并主干上的最新代码到分支上 cd branches&#x2F;online1.0 svn merge <a href="http://svnbucket.com/repos/trunk">http://svnbucket.com/repos/trunk</a><br>分支合并到主干 svn merge –reintegrate <a href="http://svnbucket.com/repos/branches/online1.0">http://svnbucket.com/repos/branches/online1.0</a><br>删除分支 svn rm <a href="http://svnbucket.com/repos/branches/online1.0">http://svnbucket.com/repos/branches/online1.0</a><br>查看SVN帮助 svn help<br>查看指定命令的帮助信息 svn help commit<br>参考： <a href="https://easydoc.net/s/78711005/uSJD1CDg/33195524">https://easydoc.net/s/78711005/uSJD1CDg/33195524</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker部署LNMP运行MaxPHP</title>
    <link href="/2022/04/06/Docker%E9%83%A8%E7%BD%B2LNMP%E8%BF%90%E8%A1%8CMaxPHP/"/>
    <url>/2022/04/06/Docker%E9%83%A8%E7%BD%B2LNMP%E8%BF%90%E8%A1%8CMaxPHP/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul><li>linux[腾讯云ubuntu20.04]</li></ul><p><strong>也可以手动安装docker</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> docker.io<br></code></pre></td></tr></table></figure><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>lnmp指的是linux，nginx，mysql，php。 MaxPHP是运行在php的cli模式下的框架，所以不需要安装fpm。下面介绍docker安装lnmp的一些步骤，来运行MaxPHP类似的框架，这里软件均选择最新版本</p><blockquote><p>为了多个容器可以通信，需要新建一个网桥</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker<span class="hljs-built_in"> network </span>create -d<span class="hljs-built_in"> bridge </span>lnmp<br></code></pre></td></tr></table></figure><h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull nginx<br></code></pre></td></tr></table></figure><p>拉取镜像后使用下面的命令运行容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -itd --name nginx -v /www:/www -p 80:80 -p 443:443 --network lnmp &lt;镜像id&gt;<br></code></pre></td></tr></table></figure><p>这里我做了http和https默认两个端口的映射，下面是我的网站配置文件，具体需要代理的主机需要使用下面的命令查看</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker network inspect lnmp</span><br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span><br>&#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br>    <span class="hljs-attribute">server_name</span> 1kmb.com www.1kmb.com;<br>    <span class="hljs-attribute">index</span> index.php index.html index.htm default.php default.htm default.html;<br>    <span class="hljs-attribute">root</span> /www/wwwroot/1kmb.com.main/public;<br>    <span class="hljs-section">location</span> / &#123;<br>      <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>      <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>      <span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span> ) &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:9999;<br>      &#125;<br>    &#125;<br>    <span class="hljs-comment">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span><br>    <span class="hljs-comment">#error_page 404/404.html;</span><br>    <span class="hljs-comment">#limit_conn perserver 50;</span><br>    <span class="hljs-comment">#limit_conn perip 15;</span><br>    <span class="hljs-comment">#limit_rate 256k;</span><br>    <span class="hljs-comment">#HTTP_TO_HTTPS_START</span><br>    <br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$host</span> !<span class="hljs-regexp">~ &quot;www&quot;)</span> &#123;<br>      <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(/.*)$</span> https://www.<span class="hljs-variable">$host</span><span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>    &#125;<br>    <br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$server_port</span> !<span class="hljs-regexp">~ 443)</span>&#123;<br>        <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(/.*)$</span> https://<span class="hljs-variable">$host</span><span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>    &#125;<br>    <span class="hljs-comment">#HTTP_TO_HTTPS_END</span><br>    <span class="hljs-attribute">ssl_certificate</span>    /www/server/panel/vhost/cert/1kmb.com.main/fullchain.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span>    /www/server/panel/vhost/cert/1kmb.com.main/privkey.pem;<br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span> EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">10m</span>;<br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">10m</span>;<br>    <span class="hljs-attribute">add_header</span> Strict-Transport-Security <span class="hljs-string">&quot;max-age=31536000&quot;</span>;<br>    <span class="hljs-attribute">error_page</span> <span class="hljs-number">497</span>  https://<span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br><br>    <span class="hljs-comment">#SSL-END</span><br>    <br>    <span class="hljs-comment">#ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span><br>    <span class="hljs-comment">#error_page 404 /404.html;</span><br>    <span class="hljs-comment">#error_page 502 /502.html;</span><br>    <span class="hljs-comment">#ERROR-PAGE-END</span><br>    <br>    <span class="hljs-comment">#PHP-INFO-START  PHP引用配置，可以注释或修改</span><br>    <span class="hljs-comment"># include enable-php-00.conf;</span><br>    <span class="hljs-comment">#PHP-INFO-END</span><br>    <br>    <span class="hljs-comment">#REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效</span><br>    <span class="hljs-comment"># include /www/server/panel/vhost/rewrite/1kmb.com.main.conf;</span><br>    <span class="hljs-comment">#REWRITE-END</span><br>    <br>    <span class="hljs-comment">#禁止访问的文件或目录</span><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span><br>    &#123;<br>        <span class="hljs-attribute">return</span> <span class="hljs-number">404</span>;<br>    &#125;<br>    <br>    <span class="hljs-comment">#一键申请SSL证书验证目录相关设置</span><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ \.well-known</span>&#123;<br>        <span class="hljs-attribute">allow</span> all;<br>    &#125;<br>    <br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br>    &#123;<br>        <span class="hljs-attribute">expires</span>      <span class="hljs-number">30d</span>;<br>        <span class="hljs-attribute">error_log</span> /dev/null;<br>        <span class="hljs-attribute">access_log</span> /dev/null;<br>    &#125;<br>    <br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ .*\.(js|css)?$</span><br>    &#123;<br>        <span class="hljs-attribute">expires</span>      <span class="hljs-number">12h</span>;<br>        <span class="hljs-attribute">error_log</span> /dev/null;<br>        <span class="hljs-attribute">access_log</span> /dev/null; <br>    &#125;<br>    <span class="hljs-attribute">access_log</span>  /www/wwwlogs/1kmb.com.main.log;<br>    <span class="hljs-attribute">error_log</span>  /www/wwwlogs/1kmb.com.main.<span class="hljs-literal">error</span>.log;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>  <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl;<br>  <span class="hljs-attribute">server_name</span> ws.1kmb.com;<br>  <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:8787;<br>    <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>    <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>    <span class="hljs-attribute">proxy_set_header</span>   Sec-Websocket-Version <span class="hljs-number">13</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>    <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-variable">$connection_upgrade</span>;<br>  &#125;<br>    <span class="hljs-attribute">ssl_certificate</span>    /www/wwwroot/7328958_ws.1kmb.com.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span>    /www/wwwroot/7328958_ws.1kmb.com.key;<br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span> EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">ssl_session_cache</span> shared:SSL:<span class="hljs-number">10m</span>;<br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">10m</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我开启了websocket服务，所以配置了$connection_upgrade变量，配置方法如下</p><h2 id="配置-“-connection-upgrade”-变量"><a href="#配置-“-connection-upgrade”-变量" class="headerlink" title="配置 “$connection_upgrade” 变量"></a>配置 “$connection_upgrade” 变量</h2><p>连接升级通常与 WebSockets 结合使用。 在 nginx 中，我们可以根据 <code>$http_upgrade</code> 变量将 HTTP 连接升级为 WebSocket 连接。</p><p>我们可以使用 <strong>map</strong> 块在 nginx 中定义连接和 http 升级之间的依赖关系：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">map</span> <span class="hljs-variable">$http_upgrade</span> <span class="hljs-variable">$connection_upgrade</span> &#123;  <br>    <span class="hljs-attribute">default</span> upgrade;<br>    &#x27;&#x27;      close;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果 Upgrade 标头设置为 ‘’，此 <strong>map</strong> 块告诉 nginx 正确设置相关的 Connection 标头来关闭连接。</p><p>将 map 块放入 nginx 配置的 http 块中。 nginx 配置的默认文件路径是 <strong>&#x2F;etc&#x2F;nginx&#x2F;nginx.conf</strong> 。</p><p>这是一个使用定义 $connection_upgrade 变量的 map 块的 nginx 配置示例。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-literal">user</span> www-data<span class="hljs-comment">;  </span><br>worker_processes <span class="hljs-literal">auto</span><span class="hljs-comment">;  </span><br>pid /run/nginx.pid<span class="hljs-comment">;</span><br><br>events &#123;  <br>        multi_accept       <span class="hljs-literal">on</span><span class="hljs-comment">;</span><br>        worker_connections <span class="hljs-number">65535</span><span class="hljs-comment">;</span><br>&#125;<br><br>http &#123;  <br>sendfile <span class="hljs-literal">on</span><span class="hljs-comment">;</span><br>tcp_nopush <span class="hljs-literal">on</span><span class="hljs-comment">;</span><br>tcp_nodelay <span class="hljs-literal">on</span><span class="hljs-comment">;</span><br>…<br><br><span class="hljs-comment"># Connection header for WebSocket reverse proxy</span><br>map <span class="hljs-variable">$http_upgrade</span> <span class="hljs-variable">$connection_upgrade</span> &#123;<br>    default upgrade<span class="hljs-comment">;</span><br>    <span class="hljs-string">&#x27;&#x27;</span>      close<span class="hljs-comment">;</span><br>&#125;<br><span class="hljs-comment"># further configurations …</span><br>&#125;<br></code></pre></td></tr></table></figure><p>保存更新的 nginx 配置文件。 然后，使用 nginx -t 再次检查配置文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo nginx -t<br><br>nginx: the configuration file /etc/nginx/nginx.conf syntax is ok  <br>nginx: configuration file /etc/nginx/nginx.conf <span class="hljs-built_in">test</span> is successful  <br></code></pre></td></tr></table></figure><p>如果配置文件出错导致容器不能启动，则可以使用下面命令拷贝配置文件到容器外部修改后再拷贝进去</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir">docker cp /nginx.conf &lt;容器id&gt;<span class="hljs-symbol">:/etc/nginx/nginx</span>.conf<br></code></pre></td></tr></table></figure><h3 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull php<br></code></pre></td></tr></table></figure><p>运行容器</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">docker <span class="hljs-keyword">run</span><span class="language-bash"> -itd --name php81 --network lnmp -v /www:/www &lt;容器<span class="hljs-built_in">id</span>&gt;</span><br></code></pre></td></tr></table></figure><p>添加pcntl（maxphp的切面实现使用了子进程扫描），redis，pdo，pdo_mysql扩展，从官网下载对应版本的源码包，解压后进入ext目录的对应扩展目录，执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">phpize<br>.<span class="hljs-regexp">/configure --enable-pcntl --with-php-config=/u</span>sr<span class="hljs-regexp">/local/</span>php-config <br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>然后将扩展添加到配置文件中，配置文件可以通过php –ini查看</p><p>如果出现下面的报错</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>openssl/ssl.h: No such file or directory<br></code></pre></td></tr></table></figure><p>就执行下下面的命令</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt-get <span class="hljs-keyword">install </span>openssl<br>sudo apt-get <span class="hljs-keyword">install </span>libssl-dev <span class="hljs-keyword">build-essential </span>zlibc zlib-<span class="hljs-keyword">bin </span>libidn11-dev libidn11<br></code></pre></td></tr></table></figure><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull mysql</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -itd --name mysql -p 3306:3306 -e <span class="hljs-attribute">MYSQL_ROOT_PASSWORD</span>=root &lt;容器id&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>回车和换行</title>
    <link href="/2022/03/13/%E5%9B%9E%E8%BD%A6%E5%92%8C%E6%8D%A2%E8%A1%8C/"/>
    <url>/2022/03/13/%E5%9B%9E%E8%BD%A6%E5%92%8C%E6%8D%A2%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-string">&#x27;\r&#x27;</span>是回车，前者使光标到行首，（carriage <span class="hljs-keyword">return</span>）<br><span class="hljs-string">&#x27;\n&#x27;</span>是换行，后者使光标下移一格，（line feed）<br></code></pre></td></tr></table></figure><p>对于换行这个动作，unix下一般只有一个0x0A表示换行(“\n”），windows下一般都是0x0D和0x0A两个字符(“\r\n”)，苹果机(MAC OS系统)则采用回车符CR表示下一行(\r)Unix系统里，每行结尾只有“&lt;换行&gt;”，即“\n”；Windows系统里面，每行结尾是“&lt;回车&gt;&lt;换行&gt;”，即“\r\n”；Mac系统里，每行结尾是“&lt;回车&gt;”,即“\r”。</p><p>windows采用回车+换行CR&#x2F;LF表示下一行,即^M$（$不是换行符的表示，换行符没有表示出来，$是文本结束EOF的表示）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>htop使用详解</title>
    <link href="/2022/03/12/htop%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/03/12/htop%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p><strong>一．Htop的使用简介</strong></p><p>大家可能对top监控软件比较熟悉，今天我为大家介绍另外一个监控软件Htop，姑且称之为top的增强版，相比top其有着很多自身的优势。如下：</p><ul><li>两者相比起来，top比较繁琐</li><li>默认支持图形界面的鼠标操作</li><li>可以横向或纵向滚动浏览进程列表，以便看到所有的进程和完整的命令行</li><li>杀进程时不需要输入进程号等</li></ul><p><strong>二．软件的获取与安装</strong></p><p>Htop的安装，既可以通过源码包编译安装，也可以配置好yum源后网络下载安装</p><p><strong>2.1源码安装</strong></p><p>  在htop的项目官方网站上：<a href="http://sourceforge.net/projects/htop/%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%8D%B3%E5%8F%AF">http://sourceforge.net/projects/htop/直接下载即可</a></p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210952_604.png" alt="Linux htop工具使用详解"></p><p>由于我已经安装过了，因此大家看个以上每个编译过程后面都会^c，是不执行此行操作Ctrl+c取消的，此处只是告知如何编译安装的，各人的环境不同，可能编译过程中会出现错误，根据错误，解决后即可。</p><p><strong>2.2 yum和rpm包安装</strong></p><p>个人推荐yum安装，能够自动的解决软件包依赖关系，安装即可。</p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210952_198.png" alt="Linux htop工具使用详解"></p><p><strong>三．Htop的使用</strong></p><p>安装完成后，命令行中直接敲击htop命令，即可进入htop的界面</p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210952_64.png" alt="Linux htop工具使用详解"></p><p>各项从上至下分别说明如下：</p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210953_803.png" alt="Linux htop工具使用详解"></p><p>左边部分从上至下，分别为，cpu、内存、交换分区的使用情况，右边部分为：Tasks为进程总数，当前运行的进程数、Load average为系统1分钟，5分钟，10分钟的平均负载情况、Uptime为系统运行的时间。</p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210953_984.png" alt="Linux htop工具使用详解"></p><p>以上各项分别为：</p><ul><li>PID：进行的标识号</li><li>USER：运行此进程的用户</li><li>PRI：进程的优先级</li><li>NI：进程的优先级别值，默认的为0，可以进行调整</li><li>VIRT：进程占用的虚拟内存值</li><li>RES：进程占用的物理内存值</li><li>SHR：进程占用的共享内存值</li><li>S：进程的运行状况，R表示正在运行、S表示休眠，等待唤醒、Z表示僵死状态</li><li>%CPU：该进程占用的CPU使用率</li><li>%MEM：该进程占用的物理内存和总内存的百分比</li><li>TIME+：该进程启动后占用的总的CPU时间</li><li>COMMAND：进程启动的启动命令名称</li></ul><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210953_292.png" alt="Linux htop工具使用详解"></p><p><strong>F1：显示帮助信息</strong></p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210954_995.png" alt="Linux htop工具使用详解"></p><table><thead><tr><th>h, ?</th><th>F1</th><th>查看htop使用说明</th></tr></thead><tbody><tr><td>S</td><td>F2</td><td>htop 设定</td></tr><tr><td>&#x2F;</td><td>F3</td><td>搜索进程</td></tr><tr><td>\</td><td>F4</td><td>增量进程过滤器</td></tr><tr><td>t</td><td>F5</td><td>显示树形结构</td></tr><tr><td>&lt;, &gt;</td><td>F6</td><td>选择排序方式</td></tr><tr><td>[</td><td>F7</td><td>可减少nice值可以提高对应进程的优先级</td></tr><tr><td>]</td><td>F8</td><td>可增加nice值，降低对应进程的优先级</td></tr><tr><td>k</td><td>F9</td><td>可对进程传递信号</td></tr><tr><td>q</td><td>F10</td><td>结束htop</td></tr><tr><td>u</td><td>只显示一个给定的用户的过程</td><td></td></tr><tr><td>U</td><td>取消标记所有的进程</td><td></td></tr><tr><td>H</td><td>显示或隐藏用户线程</td><td></td></tr><tr><td>K</td><td>显示或隐藏内核线程</td><td></td></tr><tr><td>F</td><td>跟踪进程</td><td></td></tr><tr><td>P</td><td>按CPU 使用排序</td><td></td></tr><tr><td>M</td><td>按内存使用排序</td><td></td></tr><tr><td>T</td><td>按Time+ 使用排序</td><td></td></tr><tr><td>l</td><td>显示进程打开的文件</td><td></td></tr><tr><td>I</td><td>倒转排序顺序</td><td></td></tr><tr><td>s</td><td>选择某进程，按s:用strace追踪进程的系统调用</td><td></td></tr></tbody></table><p><strong>F2 Htop设定</strong></p><p>鼠标点击Setup或者按下F2 之后进入htop 设定的页面，</p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210954_435.png" alt="Linux htop工具使用详解"></p><p>Setup 选项下的：</p><p><strong>1.Meters</strong></p><p>设定顶端的 显示信息，分为左右两侧，Left column 表示左侧的显示的信息，Right column表示右侧显示的信息，如果要新加选项，可以选择Available meters添加，F5新增到上方左侧，F6新增到上方右侧。Left column和Right column下面的选项，可以选定信息的显示方式，有LED、Bar(进度条)、Text(文本模式)，可以根据个人喜好进行设置</p><p><strong>2. Display options</strong></p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210955_617.png" alt="Linux htop工具使用详解"></p><p>选择要显示的内容，按空格 x表示显示，选择完后，按F10保存</p><p><strong>3.Colors</strong></p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210955_510.png" alt="Linux htop工具使用详解"></p><p>设定界面以什么颜色来显示，个人认为用处不大，各人喜好不同，假如我们选择Black on White后显示效果如下</p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210955_77.png" alt="Linux htop工具使用详解"></p><p><strong>4.Colums</strong></p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210955_60.png" alt="Linux htop工具使用详解"></p><p>作用是增加或取消要显示的各项内容，选择后F7(向上移动)、F8(向下移动)、F9(取消显示、F10(保存更改))此处增加了PPID、PGRP，根据各人需求，显示那些信息。</p><p><strong>F3 搜索进程</strong></p><p>在界面下按F3或直接输入”&#x2F;”就可以直接进入搜索模式，是按照进程名进行搜索的。例如</p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210956_380.png" alt="Linux htop工具使用详解"></p><p>搜索到的进程会用设定的颜色标记出来，方便查看</p><p><strong>F4：过滤器</strong></p><p>相当于模糊查找，不区分大小写，下方输入要搜索的内容后，则界面只显示搜索到的内容，更加方便查看，例如：</p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210956_321.png" alt="Linux htop工具使用详解"></p><p><strong>F5:以树形方式显示</strong></p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210956_876.png" alt="Linux htop工具使用详解"></p><p><strong>F6：排序方式</strong></p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210956_8.png" alt="Linux htop工具使用详解"></p><p>按下F6后会跳转至上图界面，让您选择以什么方式进行排序,在Sort by下选择您要以什么来排序</p><p><strong>F7,F8：调整进程nice值</strong></p><p>F7表示减小nice值(增大优先级),F8增大nice值(减小优先级)，选择某一进程，按F7或F8来增大或减小nice值，nice值范围为-20-19，此处我把apache的nice值调整到了19</p><p><img src="http://static.open-open.com/lib/uploadImg/20141203/20141203210957_254.png" alt="Linux htop工具使用详解"></p><p><strong>F9：杀死进程</strong></p><p>选择某一进程按F9即可杀死此进程，很方便</p><p>F10:退出htop</p><p><strong>四．结束</strong></p><p>以上就是htop的基本用法，感谢您的观看，相信大家能够感觉到Htop比top的优势。如果有什么错误之处，麻烦留言告知，方便下次更改，谢谢。</p><p>参考文档<br><a href="https://blog.csdn.net/freeking101/article/details/79173903">https://blog.csdn.net/freeking101/article/details/79173903</a><br><a href="http://www.open-open.com/lib/view/open1417612210323.html">http://www.open-open.com/lib/view/open1417612210323.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>缓存穿透、缓存击穿、缓存雪崩区别和解决方案</title>
    <link href="/2022/03/08/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2022/03/08/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><ul><li>遭受攻击大量随机生成的key访问，或是真正访问但数据库就是没数据</li><li>上线前没有进行老数据缓存预加载，大量老数据请求去查询数据库</li><li>热点key失效，对热点key的并发访问大</li><li>缓存失效，过期时间设置相同同一时间有大量key失效</li><li>缓存挂掉，直接查数据库</li></ul><h1 id="缓存处理流程"><a href="#缓存处理流程" class="headerlink" title="缓存处理流程"></a>缓存处理流程</h1><p>前台请求，后台先从缓存中取数据，取到直接返回结果，取不到时从数据库中取，数据库取到更新缓存，并返回结果，数据库也没取到，那直接返回空结果。</p><h1 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h1><h2 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h2><p>缓存穿透是指缓存和数据库中都没有的数据，而用户不断发起请求，如发起为id为“-1”的数据或id为特别大不存在的数据。当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p><blockquote><p>这里需要注意和缓存击穿的区别，缓存击穿，是指一个key非常热点，在不停的扛着大并发，大并发集中对这一个点进行访问，当这个key在失效的瞬间，持续的大并发就穿破缓存，直接请求数据库，就像在一个屏障上凿开了一个洞。</p></blockquote><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><ul><li>接口层增加校验，如用户鉴权校验，id做基础校验，id&lt;&#x3D;0的直接拦截；</li><li>从缓存取不到的数据，在数据库中也没有取到，这时也可以将key-value对写为key-null，缓存有效时间可以设置短点，如30秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个id暴力攻击<br><img src="/images/20220309/e03a5cbbc97c3bc08bbf058c48e135c2.jpeg"></li></ul><p>但是这种方法会存在两个问题：</p><ol><li>如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键；</li><li>即使对空值设置了过期时间，还是会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</li></ol><ul><li>布隆过滤器</li></ul><p>布隆过滤器是一种数据结构，垃圾网站和正常网站加起来全世界据统计也有几十亿个。网警要过滤这些垃圾网站，总不能到数据库里面一个一个去比较吧，这就可以使用布隆过滤器。假设我们存储一亿个垃圾网站地址。</p><p>可以先有一亿个二进制比特，然后网警用八个不同的随机数产生器（F1,F2, …,F8） 产生八个信息指纹（f1, f2, …, f8）。接下来用一个随机数产生器 G 把这八个信息指纹映射到 1 到1亿中的八个自然数 g1, g2, …,g8。最后把这八个位置的二进制全部设置为一。过程如下</p><p><img src="/images/20220309/4b34d93de755a0861d1e554e5c3e71ac.jpeg"><br>有一天网警查到了一个可疑的网站，想判断一下是否是XX网站，首先将可疑网站通过哈希映射到1亿个比特数组上的8个点。如果8个点的其中有一个点不为1，则可以判断该元素一定不存在集合中。</p><p>那这个布隆过滤器是如何解决redis中的缓存穿透呢？很简单首先也是对所有可能查询的参数以hash形式存储，当用户想要查询的时候，使用布隆过滤器发现不在集合中，就直接丢弃，不再对持久层查询。</p><p><img src="/images/20220309/4ab5c394716489101c445ec56504ee1f.jpeg"></p><h1 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h1><h2 id="描述：-1"><a href="#描述：-1" class="headerlink" title="描述："></a>描述：</h2><p>缓存击穿是指缓存中没有但数据库中有的数据（一般是缓存时间到期），这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力</p><h2 id="解决方案：-1"><a href="#解决方案：-1" class="headerlink" title="解决方案："></a>解决方案：</h2><ul><li>设置热点数据永远不过期</li><li>加互斥锁</li></ul><h1 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h1><h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p>缓存雪崩是指缓存中数据大批量到过期时间或者缓存层出现错误，大量查询到达存储层，而查询数据量巨大，引起数据库压力过大甚至down机。和缓存击穿不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。</p><p><img src="/images/20220309/3eeb41d79bd255c85ef61aedf0052315.jpeg"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li><p>缓存数据的过期时间设置随机，防止同一时间大量数据过期现象发生。</p></li><li><p>如果缓存数据库是分布式部署，将热点数据均匀分布在不同搞得缓存数据库中。</p></li><li><p>设置热点数据永远不过期。</p></li><li><p>redis高可用<br>这个思想的含义是，既然redis有可能挂掉，那我多增设几台redis，这样一台挂掉之后其他的还可以继续工作，其实就是搭建的集群。</p></li><li><p>限流降级<br>这个解决方案的思想是，在缓存失效后，通过加锁或者队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p></li><li><p>数据预热<br>数据加热的含义就是在正式部署之前，我先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p></li></ul><p>参考文章：<a href="https://blog.csdn.net/kongtiao5/article/details/82771694">https://blog.csdn.net/kongtiao5/article/details/82771694</a></p><p><a href="https://baijiahao.baidu.com/s?id=1655304940308056733&amp;wfr=spider&amp;for=pc">https://baijiahao.baidu.com/s?id=1655304940308056733&amp;wfr=spider&amp;for=pc</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一些SEO相关标签</title>
    <link href="/2022/03/06/%E4%B8%80%E4%BA%9BSEO%E7%9B%B8%E5%85%B3%E6%A0%87%E7%AD%BE/"/>
    <url>/2022/03/06/%E4%B8%80%E4%BA%9BSEO%E7%9B%B8%E5%85%B3%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="Normal"><a href="#Normal" class="headerlink" title="Normal"></a>Normal</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;link <span class="hljs-attribute">rel</span>=<span class="hljs-string">&quot;canonical&quot;</span> <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://music.163.com/&quot;</span>&gt;<br>&lt;meta <span class="hljs-attribute">name</span>=description <span class="hljs-attribute">content</span>=<span class="hljs-string">&quot;网易云音乐是一款专注于发现与分享的音乐产品，依托专业音乐人、DJ、好友推荐及社交功能，为用户打造全新的音乐生活。&quot;</span>&gt;<br>&lt;meta <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;keywords&quot;</span> <span class="hljs-attribute">content</span>=<span class="hljs-string">&quot;网易云音乐，音乐，播放器，网易，下载，播放，DJ，免费，明星，精选，歌单，识别音乐，收藏，分享音乐，音乐互动，高音质，320K，音乐社交，官网，music.163.com&quot;</span> /&gt;<br>&lt;meta <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;Author&quot;</span> <span class="hljs-attribute">contect</span>=<span class="hljs-string">&quot;CZQ&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h1 id="Robots"><a href="#Robots" class="headerlink" title="Robots"></a>Robots</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;meta name<span class="hljs-operator">=</span><span class="hljs-string">&quot;Robots&quot;</span> contect<span class="hljs-operator">=</span> <span class="hljs-string">&quot;all|none|index|noindex|follow|nofollow&quot;</span>&gt;<br></code></pre></td></tr></table></figure><ul><li>设定为all：文件将被检索，且页面上的链接可以被查询；</li><li>设定为none：文件将不被检索，且页面上的链接不可以被查询；</li><li>设定为index：文件将被检索；</li><li>设定为follow：页面上的链接可以被查询；</li><li>设定为noindex：文件将不被检索，但页面上的链接可以被查询；</li><li>设定为nofollow：文件将不被检索，页面上的链接可以被查询</li></ul><h1 id="Open-Graph-Protocol"><a href="#Open-Graph-Protocol" class="headerlink" title="Open Graph Protocol"></a>Open Graph Protocol</h1><p> <code>og</code>是一种新的HTTP头部标记，作用是让网页成为一个“富媒体对象”。用了<code>Meta Property=og</code>标签，就是同意了其他网站可以引用本网页内容，目前这种协议被很多<code>SNS</code>网站采用。也就是所谓的富媒体对象。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;meta property<span class="hljs-operator">=</span><span class="hljs-string">&quot;og:title&quot;</span> content<span class="hljs-operator">=</span><span class="hljs-string">&quot;网易云音乐&quot;</span> /&gt;<br>&lt;meta property<span class="hljs-operator">=</span><span class="hljs-string">&quot;og:type&quot;</span> content<span class="hljs-operator">=</span><span class="hljs-string">&quot;website&quot;</span> /&gt;<br>&lt;meta property<span class="hljs-operator">=</span><span class="hljs-string">&quot;og:image&quot;</span> content<span class="hljs-operator">=</span><span class="hljs-string">&quot;http://p3.music.126.net/tBTNafgjNnTL1KlZMt7lVA==/18885211718935735.jpg&quot;</span> /&gt;<br>&lt;meta property<span class="hljs-operator">=</span><span class="hljs-string">&quot;og:url&quot;</span> content<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://music.163.com/&quot;</span> /&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Supervisor使用详解</title>
    <link href="/2022/03/06/Supervisor%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
    <url>/2022/03/06/Supervisor%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="一、supervisor简介"><a href="#一、supervisor简介" class="headerlink" title="一、supervisor简介"></a>一、supervisor简介</h2><p>Supervisor是用Python开发的一套通用的进程管理程序，能将一个普通的命令行进程变为后台daemon，并监控进程状态，异常退出时能自动重启。它是通过fork&#x2F;exec的方式把这些被管理的进程当作supervisor的子进程来启动，这样只要在supervisor的配置文件中，把要管理的进程的可执行文件的路径写进去即可。也实现当子进程挂掉的时候，父进程可以准确获取子进程挂掉的信息的，可以选择是否自己启动和报警。supervisor还提供了一个功能，可以为supervisord或者每个子进程，设置一个非root的user，这个user就可以管理它对应的进程。</p><p><em>注：本文以centos7为例，supervisor版本3.4.0。</em></p><h2 id="二、supervisor安装"><a href="#二、supervisor安装" class="headerlink" title="二、supervisor安装"></a>二、supervisor安装</h2><ol><li><p>配置好yum源后，可以直接安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">yum install supervisor<br></code></pre></td></tr></table></figure></li><li><p>Debian&#x2F;Ubuntu可通过apt安装</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp">apt-<span class="hljs-keyword">get</span> install supervisor<br></code></pre></td></tr></table></figure></li><li><p>pip安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">pip install supervisor<br></code></pre></td></tr></table></figure></li><li><p>easy_install安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs undefined">easy_install supervisor<br></code></pre></td></tr></table></figure></li></ol><h2 id="三、supervisor使用"><a href="#三、supervisor使用" class="headerlink" title="三、supervisor使用"></a>三、supervisor使用</h2><h5 id="supervisor配置文件：-etc-supervisord-conf"><a href="#supervisor配置文件：-etc-supervisord-conf" class="headerlink" title="supervisor配置文件：/etc/supervisord.conf"></a>supervisor配置文件：<code>/etc/supervisord.conf</code></h5><p><em>注：supervisor的配置文件默认是不全的，不过在大部分默认的情况下，上面说的基本功能已经满足。</em></p><h5 id="子进程配置文件路径：-etc-supervisord-d"><a href="#子进程配置文件路径：-etc-supervisord-d" class="headerlink" title="子进程配置文件路径：/etc/supervisord.d/"></a>子进程配置文件路径：<code>/etc/supervisord.d/</code></h5><p><em>注：默认子进程配置文件为ini格式，可在supervisor主配置文件中修改。</em></p><h2 id="四、配置文件说明"><a href="#四、配置文件说明" class="headerlink" title="四、配置文件说明"></a>四、配置文件说明</h2><h4 id="supervisor-conf配置文件说明："><a href="#supervisor-conf配置文件说明：" class="headerlink" title="supervisor.conf配置文件说明："></a>supervisor.conf配置文件说明：</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp">[unix_http_server]<br>file=/tmp/supervisor.sock   ;UNIX socket 文件，supervisorctl 会使用<br>;chmod=<span class="hljs-number">0700</span>                 ;socket文件的mode，默认是<span class="hljs-number">0700</span><br>;chown=nobody:nogroup       ;socket文件的owner，格式：uid:gid<br> <br>;[inet_http_server]         ;HTTP服务器，提供web管理界面<br>;port=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">9001</span>        ;Web管理后台运行的IP和端口，如果开放到公网，需要注意安全性<br>;username=user              ;登录管理后台的用户名<br>;password=<span class="hljs-number">123</span>               ;登录管理后台的密码<br> <br>[supervisord]<br>logfile=/tmp/supervisord.log ;日志文件，默认是 $CWD/supervisord.log<br>logfile_maxbytes=<span class="hljs-number">50</span>MB        ;日志文件大小，超出会rotate，默认 <span class="hljs-number">50</span>MB，如果设成<span class="hljs-number">0</span>，表示不限制大小<br>logfile_backups=<span class="hljs-number">10</span>           ;日志文件保留备份数量默认<span class="hljs-number">10</span>，设为<span class="hljs-number">0</span>表示不备份<br>loglevel=info                ;日志级别，默认info，其它: debug,warn,trace<br>pidfile=/tmp/supervisord.pid ;pid 文件<br>nodaemon=<span class="hljs-literal">false</span>               ;是否在前台启动，默认是<span class="hljs-literal">false</span>，即以 daemon 的方式启动<br>minfds=<span class="hljs-number">1024</span>                  ;可以打开的文件描述符的最小值，默认 <span class="hljs-number">1024</span><br>minprocs=<span class="hljs-number">200</span>                 ;可以打开的进程数的最小值，默认 <span class="hljs-number">200</span><br> <br>[supervisorctl]<br>serverurl=unix:<span class="hljs-comment">///tmp/supervisor.sock ;通过UNIX socket连接supervisord，路径与unix_http_server部分的file一致</span><br>;serverurl=http:<span class="hljs-comment">//127.0.0.1:9001 ; 通过HTTP的方式连接supervisord</span><br> <br>; [program:xx]是被管理的进程配置参数，xx是进程的名称<br>[program:xx]<br>command=/opt/apache-tomcat<span class="hljs-number">-8.0</span><span class="hljs-number">.35</span>/bin/catalina.sh run  ; 程序启动命令<br>autostart=<span class="hljs-literal">true</span>       ; 在supervisord启动的时候也自动启动<br>startsecs=<span class="hljs-number">10</span>         ; 启动<span class="hljs-number">10</span>秒后没有异常退出，就表示进程正常启动了，默认为<span class="hljs-number">1</span>秒<br>autorestart=<span class="hljs-literal">true</span>     ; 程序退出后自动重启,可选值：[unexpected,<span class="hljs-literal">true</span>,<span class="hljs-literal">false</span>]，默认为unexpected，表示进程意外杀死后才重启<br>startretries=<span class="hljs-number">3</span>       ; 启动失败自动重试次数，默认是<span class="hljs-number">3</span><br>user=tomcat          ; 用哪个用户启动进程，默认是root<br>priority=<span class="hljs-number">999</span>         ; 进程启动优先级，默认<span class="hljs-number">999</span>，值小的优先启动<br>redirect_stderr=<span class="hljs-literal">true</span> ; 把stderr重定向到stdout，默认<span class="hljs-literal">false</span><br>stdout_logfile_maxbytes=<span class="hljs-number">20</span>MB  ; stdout 日志文件大小，默认<span class="hljs-number">50</span>MB<br>stdout_logfile_backups = <span class="hljs-number">20</span>   ; stdout 日志文件备份数，默认是<span class="hljs-number">10</span><br>; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）<br>stdout_logfile=/opt/apache-tomcat<span class="hljs-number">-8.0</span><span class="hljs-number">.35</span>/logs/catalina.out<br>stopasgroup=<span class="hljs-literal">false</span>     ;默认为<span class="hljs-literal">false</span>,进程被杀死时，是否向这个进程组发送stop信号，包括子进程<br>killasgroup=<span class="hljs-literal">false</span>     ;默认为<span class="hljs-literal">false</span>，向进程组发送kill信号，包括子进程<br> <br>;包含其它配置文件<br>[include]<br>files = relative/directory<span class="hljs-comment">/*.ini    ;可以指定一个或多个以.ini结束的配置文件</span><br></code></pre></td></tr></table></figure><h4 id="子进程配置文件说明："><a href="#子进程配置文件说明：" class="headerlink" title="子进程配置文件说明："></a>子进程配置文件说明：</h4><p>给需要管理的子进程(程序)编写一个配置文件，放在<code>/etc/supervisor.d/</code>目录下，以<code>.ini</code>作为扩展名（每个进程的配置文件都可以单独分拆也可以把相关的脚本放一起）。如任意定义一个和脚本相关的项目名称的选项组（&#x2F;etc&#x2F;supervisord.d&#x2F;test.conf）：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-comment">#项目名</span><br>[<span class="hljs-symbol">program:</span>blog]<br><span class="hljs-comment">#脚本目录</span><br>directory=<span class="hljs-regexp">/opt/bin</span><br><span class="hljs-comment">#脚本执行命令</span><br>command=<span class="hljs-regexp">/usr/bin</span><span class="hljs-regexp">/python /opt</span><span class="hljs-regexp">/bin/test</span>.py<br><br><span class="hljs-comment">#supervisor启动的时候是否随着同时启动，默认True</span><br>autostart=<span class="hljs-literal">true</span><br><span class="hljs-comment">#当程序exit的时候，这个program不会自动重启,默认unexpected，设置子进程挂掉后自动重启的情况，有三个选项，false,unexpected和true。如果为false的时候，无论什么情况下，都不会被重新启动，如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的</span><br>autorestart=<span class="hljs-literal">false</span><br><span class="hljs-comment">#这个选项是子进程启动多少秒之后，此时状态如果是running，则我们认为启动成功了。默认值为1</span><br>startsecs=<span class="hljs-number">1</span><br><br><span class="hljs-comment">#脚本运行的用户身份 </span><br>user = test<br><br><span class="hljs-comment">#日志输出 </span><br>stderr_logfile=<span class="hljs-regexp">/tmp/blog</span>_stderr.log <br>stdout_logfile=<span class="hljs-regexp">/tmp/blog</span>_stdout.log <br><span class="hljs-comment">#把stderr重定向到stdout，默认 false</span><br>redirect_stderr = <span class="hljs-literal">true</span><br><span class="hljs-comment">#stdout日志文件大小，默认 50MB</span><br>stdout_logfile_maxbytes = 20MB<br><span class="hljs-comment">#stdout日志文件备份数</span><br>stdout_logfile_backups = <span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><h5 id="子进程配置示例："><a href="#子进程配置示例：" class="headerlink" title="子进程配置示例："></a>子进程配置示例：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#说明同上</span><br>[program:<span class="hljs-built_in">test</span>] <br>directory=/opt/bin <br><span class="hljs-built_in">command</span>=/opt/bin/test<br>autostart=<span class="hljs-literal">true</span> <br>autorestart=<span class="hljs-literal">false</span> <br>stderr_logfile=/tmp/test_stderr.log <br>stdout_logfile=/tmp/test_stdout.log <br><span class="hljs-comment">#user = test  </span><br></code></pre></td></tr></table></figure><h2 id="五、supervisor命令说明"><a href="#五、supervisor命令说明" class="headerlink" title="五、supervisor命令说明"></a>五、supervisor命令说明</h2><h5 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">supervisorctl status        <span class="hljs-comment">//查看所有进程的状态</span><br>supervisorctl stop es       <span class="hljs-comment">//停止es</span><br>supervisorctl start es      <span class="hljs-comment">//启动es</span><br>supervisorctl restart       <span class="hljs-comment">//重启es</span><br>supervisorctl update        <span class="hljs-comment">//配置文件修改后使用该命令加载新的配置</span><br>supervisorctl reload        <span class="hljs-comment">//重新启动配置中的所有程序</span><br></code></pre></td></tr></table></figure><p>注：把<code>es</code>换成<code>all</code>可以管理配置中的所有进程。直接输入<code>supervisorctl</code>进入supervisorctl的shell交互界面，此时上面的命令不带supervisorctl可直接使用。</p><h5 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h5><p>使用supervisor进程管理命令之前先启动supervisord，否则程序报错。<br> 使用命令<code>supervisord -c /etc/supervisord.conf</code>启动。<br> 若是centos7：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">systemctl start supervisord.service     <span class="hljs-comment">//启动supervisor并加载默认配置文件</span><br>systemctl enable supervisord.service    <span class="hljs-comment">//将supervisor加入开机启动项</span><br></code></pre></td></tr></table></figure><h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><ol><li>unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;supervisor.sock no such file<br> 问题描述：安装好supervisor没有开启服务直接使用supervisorctl报的错<br> 解决办法：<code>supervisord -c /etc/supervisord.conf</code></li><li>command中指定的进程已经起来，但supervisor还不断重启<br> 问题描述：command中启动方式为后台启动，导致识别不到pid，然后不断重启，这里使用的是elasticsearch，command指定的是<code>$path/bin/elasticsearch -d</code><br> 解决办法：supervisor无法检测后台启动进程的pid，而supervisor本身就是后台启动守护进程，因此不用担心这个</li><li>启动了多个supervisord服务，导致无法正常关闭服务<br> 问题描述：在运行<code>supervisord -c /etc/supervisord.conf</code>之前，直接运行过<code>supervisord -c /etc/supervisord.d/xx.conf</code>导致有些进程被多个superviord管理，无法正常关闭进程。<br> 解决办法：使用<code>ps -fe | grep supervisord</code>查看所有启动过的supervisord服务，kill相关的进程。</li></ol><h5 id="更多信息请移步Supervisor官网：http-supervisord-org"><a href="#更多信息请移步Supervisor官网：http-supervisord-org" class="headerlink" title="更多信息请移步Supervisor官网：http://supervisord.org"></a>更多信息请移步Supervisor官网：<a href="https://links.jianshu.com/go?to=http://supervisord.org">http://supervisord.org</a></h5><p>来源： <a href="https://www.jianshu.com/p/0b9054b33db3">Supervisor使用详解 - 简书 (jianshu.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>安装Ubuntu后另外磁盘出现只读的解决办法</title>
    <link href="/2022/02/12/%E5%AE%89%E8%A3%85Ubuntu%E5%90%8E%E5%8F%A6%E5%A4%96%E7%A3%81%E7%9B%98%E5%87%BA%E7%8E%B0%E5%8F%AA%E8%AF%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <url>/2022/02/12/%E5%AE%89%E8%A3%85Ubuntu%E5%90%8E%E5%8F%A6%E5%A4%96%E7%A3%81%E7%9B%98%E5%87%BA%E7%8E%B0%E5%8F%AA%E8%AF%BB%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>mount<br>blkid<br>sudo ntfsfix &#x2F;dev&#x2F;sdb1<br>mount -a</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="卸载硬盘："><a href="#卸载硬盘：" class="headerlink" title="卸载硬盘："></a>卸载硬盘：</h3><p>chen@ilaptop:&#x2F;$ sudo umount &#x2F;dev&#x2F;sdb1</p><h3 id="读写挂载硬盘"><a href="#读写挂载硬盘" class="headerlink" title="读写挂载硬盘"></a>读写挂载硬盘</h3><p>chen@ilaptop:&#x2F;$ sudo mount -o rw &#x2F;dev&#x2F;sdb1</p><p>参考：<a href="https://jakting.com/archives/ubuntu-rw-windows-files.html">https://jakting.com/archives/ubuntu-rw-windows-files.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RabbitMQ安装</title>
    <link href="/2022/01/23/RabbitMQ%E5%AE%89%E8%A3%85/"/>
    <url>/2022/01/23/RabbitMQ%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker安装RabbitMQ"><a href="#Docker安装RabbitMQ" class="headerlink" title="Docker安装RabbitMQ"></a>Docker安装RabbitMQ</h1><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker pull rabbitmq:management  #management标签的含义是下载的镜像包含manage模块。包含web管理页面。<br></code></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -dit --name myrabbitmq -e <span class="hljs-attribute">RABBITMQ_DEFAULT_USER</span>=admin -e <span class="hljs-attribute">RABBITMQ_DEFAULT_PASS</span>=admin -p 15672:15672 -p 5672:5672 rabbitmq:management<br></code></pre></td></tr></table></figure><p><code> -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin</code>指定<code>manage</code>模块的用户名和密码，我执行完后是报错的，也可以完全省略参数。<br>如果不指定默认用户名密码，系统会有默认用户名密码：<code>guest </code> <code>guest</code><br>所以，可以用下面命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --hostname my-rabbit --name rabbit -p 15672:15672 -p 5673:5672 rabbitmq:management<br></code></pre></td></tr></table></figure><p>现在可以通过访问<a href="http://linuxip:15672，访问web界面，这里的用户名和密码默认都是guest。">http://linuxip:15672，访问web界面，这里的用户名和密码默认都是guest。</a></p><h2 id="如果访问失败，可能是没有开启manage模块。"><a href="#如果访问失败，可能是没有开启manage模块。" class="headerlink" title="如果访问失败，可能是没有开启manage模块。"></a>如果访问失败，可能是没有开启manage模块。</h2><p>通过<code>docker ps -a</code>查看部署的<code>mq</code>容器<code>id</code>，在通过 <code>docker exec -it 容器id /bin/bssh</code> 进入容器内部在<br>运行：<code>rabbitmq-plugins enable rabbitmq_management</code>，执行完毕后重新访问web界面即可。</p><p>原文地址：<a href="https://www.cnblogs.com/chenxizhaolu/p/15145488.html">docker安装rabbitmq - chenxizhaolu - 博客园 (cnblogs.com)</a></p><h1 id="Ubuntu18-04安装RabbitMQ"><a href="#Ubuntu18-04安装RabbitMQ" class="headerlink" title="Ubuntu18.04安装RabbitMQ"></a>Ubuntu18.04安装RabbitMQ</h1><h2 id="安装erlang"><a href="#安装erlang" class="headerlink" title="安装erlang"></a>安装erlang</h2><p>由于<code>rabbitMq</code>需要<code>erlang</code>语言的支持，在安装r<code>abbitMq</code>之前需要安装<code>erlang</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install erlang-nox<br></code></pre></td></tr></table></figure><h2 id="安装Rabbitmq"><a href="#安装Rabbitmq" class="headerlink" title="安装Rabbitmq"></a>安装Rabbitmq</h2><p>更新源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br></code></pre></td></tr></table></figure><p>安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install rabbitmq-server<br></code></pre></td></tr></table></figure><p>启动、停止、重启、状态<code>RabbitMQ</code>命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo rabbitmq-server start <br>sudo rabbitmq-server stop<br>sudo rabbitmq-server restart<br>sudo rabbitmqctl status<br></code></pre></td></tr></table></figure><h2 id="添加admin，并赋予administrator权限"><a href="#添加admin，并赋予administrator权限" class="headerlink" title="添加admin，并赋予administrator权限"></a>添加admin，并赋予administrator权限</h2><p>添加admin用户，密码设置为admin。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sudo rabbitmqctl add_user  admin  admin  <br></code></pre></td></tr></table></figure><p>赋予权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sudo rabbitmqctl set_user_tags admin administrator <br></code></pre></td></tr></table></figure><p>赋予virtual host中所有资源的配置、写、读权限以便管理其中的资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">sudo rabbitmqctl  set_permissions -p / admin <span class="hljs-string">&#x27;.*&#x27;</span> <span class="hljs-string">&#x27;.*&#x27;</span> <span class="hljs-string">&#x27;.*&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="Web管理器连接"><a href="#Web管理器连接" class="headerlink" title="Web管理器连接"></a>Web管理器连接</h2><p>浏览器访问<a href="http://192.168.3.45:15672/">http://192.168.1.42:15672</a></p><p><a href="https://img-blog.csdn.net/20180610200515165"><img src="https://img-blog.csdn.net/20180610200515165" alt="img"></a></p><p>使用刚刚创建的admin就可以登录，密码也为admin</p><p> 原文地址：<a href="https://www.cnblogs.com/ellisonzhang/p/15102942.html">Ubuntu18.04安装RabbitMQ - Ellisonzhang - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>RBAC权限系统分析、设计与实现</title>
    <link href="/2022/01/05/RBAC%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E3%80%81%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/"/>
    <url>/2022/01/05/RBAC%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F%E5%88%86%E6%9E%90%E3%80%81%E8%AE%BE%E8%AE%A1%E4%B8%8E%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<p>转载请备注来源： <a href="https://shuwoom.com/?p=3041">《RBAC权限系统分析、设计与实现》</a> | <a href="http://shuwoom.com/">shuwoom.com</a></p><p>最近，因为项目上需要设计实现一个权限管理模块，所以专门整理总结了RBAC的一些知识。</p><p>目前，使用最普遍的权限管理模型正是RBAC（Role-Based Access Control）模型，这篇文章也主要是介绍基于RBAC的权限管理系统，我会从RBAC是什么、如何设计RBAC两部分来介绍。</p><h1 id="一、RBAC是什么"><a href="#一、RBAC是什么" class="headerlink" title="一、RBAC是什么"></a>一、RBAC是什么</h1><h2 id="1、RBAC模型概述"><a href="#1、RBAC模型概述" class="headerlink" title="1、RBAC模型概述"></a>1、RBAC模型概述</h2><p>RBAC模型（Role-Based Access Control：基于角色的访问控制）模型是20世纪90年代研究出来的一种新模型，但其实在20世纪70年代的多用户计算时期，这种思想就已经被提出来，直到20世纪90年代中后期，RBAC才在研究团体中得到一些重视，并先后提出了许多类型的RBAC模型。其中以美国George Mason大学信息安全技术实验室（LIST）提出的<a href="https://www.profsandhu.com/infs767/infs767fall03/lecture01-2.pdf">RBAC96</a>模型最具有代表，并得到了普遍的公认。</p><p>RBAC认为权限授权的过程可以抽象地概括为：Who是否可以对What进行How的访问操作，并对这个逻辑表达式进行判断是否为True的求解过程，也即是将权限问题转换为What、How的问题，Who、What、How构成了访问权限三元组，具体的理论可以参考RBAC96的论文，这里我们就不做详细的展开介绍，大家有个印象即可。</p><h2 id="2、RBAC的组成"><a href="#2、RBAC的组成" class="headerlink" title="2、RBAC的组成"></a>2、RBAC的组成</h2><p>在RBAC模型里面，有3个基础组成部分，分别是：用户、角色和权限。</p><p>RBAC通过定义角色的权限，并对用户授予某个角色从而来控制用户的权限，实现了用户和权限的逻辑分离（区别于ACL模型），极大地方便了权限的管理</p><p>下面在讲解之前，先介绍一些名词：</p><ul><li>User（用户）：每个用户都有唯一的UID识别，并被授予不同的角色</li><li>Role（角色）：不同角色具有不同的权限</li><li>Permission（权限）：访问权限</li><li>用户-角色映射：用户和角色之间的映射关系</li><li>角色-权限映射：角色和权限之间的映射</li></ul><p>它们之间的关系如下图所示：</p><p><img src="https://shuwoom.com/wp-content/uploads/2019/04/rbacrole-based-access-control-1.png" alt="img"></p><p>例如下图，管理员和普通用户被授予不同的权限，普通用户只能去修改和查看个人信息，而不能创建创建用户和冻结用户，而管理员由于被授 予所有权限，所以可以做所有操作。</p><p>例如下图，管理员和普通用户被授予不同的权限，普通用户只能去修改和查看个人信息，而不能创建创建用户和冻结用户，而管理员由于被授予所有权限，所以可以做所有操作。</p><p><img src="https://shuwoom.com/wp-content/uploads/2019/04/rbac-demo.png" alt="rbac说明图"></p><h2 id="3、RBAC支持的安全原则"><a href="#3、RBAC支持的安全原则" class="headerlink" title="3、RBAC支持的安全原则"></a>3、RBAC支持的安全原则</h2><p>RBAC支持三个著名的安全原则：最小权限原则、责任分离原则和数据抽象原则</p><ul><li>最小权限原则：RBAC可以将角色配置成其完成任务所需的最小权限集合</li><li>责任分离原则：可以通过调用相互独立互斥的角色来共同完成敏感的任务，例如要求一个计账员和财务管理员共同参与统一过账操作</li><li>数据抽象原则：可以通过权限的抽象来体现，例如财务操作用借款、存款等抽象权限，而不是使用典型的读、写、执行权限</li></ul><h2 id="4、RBAC的优缺点"><a href="#4、RBAC的优缺点" class="headerlink" title="4、RBAC的优缺点"></a>4、RBAC的优缺点</h2><p>（1）优点：</p><ul><li>简化了用户和权限的关系</li><li>易扩展、易维护</li></ul><p>（2）缺点：</p><ul><li>RBAC模型没有提供操作顺序的控制机制，这一缺陷使得RBAC模型很难适应哪些对操作次序有严格要求的系统</li></ul><h2 id="5、RBAC的3种模型"><a href="#5、RBAC的3种模型" class="headerlink" title="5、RBAC的3种模型"></a>5、RBAC的3种模型</h2><h3 id="（1）RBAC0"><a href="#（1）RBAC0" class="headerlink" title="（1）RBAC0"></a>（1）RBAC0</h3><p>RBAC0，是最简单、最原始的实现方式，也是其他RBAC模型的基础。</p><p><img src="https://shuwoom.oss-cn-beijing.aliyuncs.com/rbac0.png" alt="rbac0模型图"></p><p>在该模型中，用户和角色之间可以是多对多的关系，即一个用户在不同场景下是可以有不同的角色，例如：项目经理也可能是组长也可能是架构师。同时每个角色都至少有一个权限。这种模型下，用户和权限被分离独立开来，使得权限的授权认证更加灵活。</p><h3 id="（2）RBAC1"><a href="#（2）RBAC1" class="headerlink" title="（2）RBAC1"></a>（2）RBAC1</h3><p>基于RBAC0模型，引入了角色间的继承关系，即角色上有了上下级的区别。</p><p><img src="https://shuwoom.oss-cn-beijing.aliyuncs.com/rbac1.png" alt="rbac1模型图"></p><p>角色间的继承关系可分为一般继承关系和受限继承关系。一般继承关系仅要求角色继承关系是一个绝对偏序关系，允许角色间的多继承。而受限继承关系则进一步要求角色继承关系是一个树结构，实现角色间的单继承。</p><p>这种模型适合于角色之间层次分明，可以给角色分组分层。</p><h3 id="（3）RBAC2"><a href="#（3）RBAC2" class="headerlink" title="（3）RBAC2"></a>（3）RBAC2</h3><p>RBAC2，基于RBAC0模型的基础上，进行了角色的访问控制。</p><p><img src="https://shuwoom.oss-cn-beijing.aliyuncs.com/rbac2.png" alt="rbac2模型图"></p><p>RBAC2中的一个基本限制是互斥角色的限制，互斥角色是指各自权限可以互相制约的两个角色。对于这类角色一个用户在某一次活动中只能被分配其中的一个角色，不能同时获得两个角色的使用权。</p><p>该模型有以下几种约束：</p><ul><li>互斥角色 ：同一用户只能分配到一组互斥角色集合中至多一个角色，支持责任分离的原则。互斥角色是指各自权限互相制约的两个角色。对于这类角色一个用户在某一次活动中只能被分配其中的一个角色，不能同时获得两个角色的使用权。常举的例子：在审计活动中，一个角色不能同时被指派给会计角色和审计员角色。</li><li>基数约束 ：一个角色被分配的用户数量受限；一个用户可拥有的角色数目受限；同样一个角色对应的访问权限数目也应受限，以控制高级权限在系统中的分配。例如公司的领导人有限的；</li><li>先决条件角色 ：可以分配角色给用户仅当该用户已经是另一角色的成员；对应的可以分配访问权限给角色，仅当该角色已经拥有另一种访问权限。指要想获得较高的权限，要首先拥有低一级的权限。就像我们生活中，国家主席是从副主席中选举的一样。</li><li>运行时互斥 ：例如，允许一个用户具有两个角色的成员资格，但在运行中不可同时激活这两个角色。</li></ul><h1 id="二、如何设计RBAC"><a href="#二、如何设计RBAC" class="headerlink" title="二、如何设计RBAC"></a>二、如何设计RBAC</h1><p>这一节，我会介绍设计基于RBAC模型的权限系统的功能模块组成、流程以及数据库的设计。</p><h2 id="1、RBAC的功能模块"><a href="#1、RBAC的功能模块" class="headerlink" title="1、RBAC的功能模块"></a>1、RBAC的功能模块</h2><p><img src="https://shuwoom.oss-cn-beijing.aliyuncs.com/RBAC%E6%A8%A1%E5%9D%97%E5%8A%9F%E8%83%BD.png" alt="rbac功能模块"></p><h2 id="2、RBAC执行流程"><a href="#2、RBAC执行流程" class="headerlink" title="2、RBAC执行流程"></a>2、RBAC执行流程</h2><p><img src="https://shuwoom.oss-cn-beijing.aliyuncs.com/RBAC%E6%B5%81%E7%A8%8B.png" alt="rbac执行流程"></p><h2 id="3、RBAC数据库设计"><a href="#3、RBAC数据库设计" class="headerlink" title="3、RBAC数据库设计"></a>3、RBAC数据库设计</h2><p><img src="https://shuwoom.oss-cn-beijing.aliyuncs.com/rbac%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1.png" alt="rbac数据库设计"></p><p>转载请备注来源： <a href="https://shuwoom.com/?p=3041">《RBAC权限系统分析、设计与实现》</a> | <a href="http://shuwoom.com/">shuwoom.com ﻿</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>定个目标</title>
    <link href="/2022/01/02/%E5%AE%9A%E4%B8%AA%E7%9B%AE%E6%A0%87/"/>
    <url>/2022/01/02/%E5%AE%9A%E4%B8%AA%E7%9B%AE%E6%A0%87/</url>
    
    <content type="html"><![CDATA[<ul><li>TCP&#x2F;UDP协议， socket 通信，熟练使用workman，swoole，swoft等rpc框架</li><li>精通PHP，熟悉golang语言，</li><li>熟悉html，css，javascript，会nodejs，vue,reactor,flutter。</li><li>mysql， 以及SQL优化，熟悉索引应用和优化，独立设计数据库、数据表，</li><li>nosql，mongodb， redis，memcache缓存。熟悉后端缓存技术、了解缓存使用场景，高并发、高性能服务系统设计经验及能力，熟悉大规模集群系统的开发</li><li>常用Linux，shell命令编写，熟悉云、容器使用</li><li>精通LNMP架构，熟悉http 协议，RestFul API开发，熟悉tp，laravel，yii主流框架。</li><li>熟练使用svn，git，Hg版本管理工具，</li><li>良好的书写习惯，注释，设计模式，编写高质量的，整洁简单，可维护性的代码，遵循公司研发规范，产品技术文档的整理</li><li>分析和快速排查定位解决线上问题，保障系统功能的稳定性，优化现有系统，提升运作性能</li><li>主导&#x2F;参与项目的架构设计、技术选型、架构原型实现以及服务端核心模块的开发，与各技术人员紧密合作，完成工作任务</li><li>有个人博客，个人开源项目，有个人独立完成项目。</li><li>乐于持续学习，乐观开朗，抗压性强，良好的沟通能力和合作精神，自我驱动力强，有强烈的事业心和责任感</li></ul><p>‌极光推送，信鸽<br>curlopt_resolve  <a href="https://curl.se/libcurl/c/CURLOPT_RESOLVE.html">https://curl.se/libcurl/c/CURLOPT_RESOLVE.html</a><br>kafka&#x2F;redis<br>ribbitmq<br>grant revoke  flush previliges<br>防火墙，udp<br>seespeed<br>socket<br>pthread<br>openwrt<br>transactionxa<br>sql临时表<br>with as<br>游标查询<br>script放到body前，可以用async或者defer module<br>find_in_set field ,field,coalesce<br>bom头<br>廖雪峰官方网站<br>c malloc memset<br>sysbench<br>supervisor<br>webman<br>zabbix<br>trivial<br>QPS大于1000不要用redis的乐观锁watch<br>线程锁<br>多台机器用分布式锁，结合lua<br>10w QPS REDIS web容易挂。全量复制，部分复制，<br>redis主从 &gt; redis哨兵 &gt; redis 集群<br>数据槽<br>redis水平扩容1000个，每个10w。高可用集群<br>silent 沉默的，不说话的，<br>多字段唯一索引<br>redis休眠<br>发布消息得到锁<br>看门狗<br>需虚数和复数<br>二叉树红黑树<br>异或<br>hadoop<br>用ob_flush 导出大数据，边导出边下载。<br>算法导论<br>workman webman<br>count字段忽略空值，count(*&#x2F;1)不忽略<br>error_log<br>记忆犹新的问题，遇到问题，团队协作解决。<br>c函数内要返回的参数要用static<br>overflow-wrap: anywhere<br>throttling 使窒息，掐死<br>inner join无需关心顺序，数据库自动选<br>show processlist<br>awkward尴尬的<br>cringe<br>not in里面不能有null<br>延迟boot函数的执行，当从容器中取实例的时候才会boot<br>mutex 互斥锁<br>routine 正常顺序，常规<br>a&#x3D;(a+1)%2<br>0.1互换<br>external<br>set @name&#x3D;1<br>select @@sql_mode<br>selecr @name<br>show variables like ‘%sql_mode%’<br>seized<br>database 可以order by null<br>coalesce<br>sql添加排序列<br>dummy<br>table-cell<br>portable<br>curl_multi_init<br>源码安装php后扩展不能用php -m看<br>ctrl shift c 快速选中元素<br>‘123’[1]<br>怎么搭建邮件服务器，自己zabbix监视<br>countif<br>linux防火墙<br>malloc realloc<br>server alias<br>closest<br>er图，关系图<br>表定义，建表语句，<br>业务流程<br>grant on all tables<br>“transaction” in document.body.style<br>toggleClass<br>beautifulSoup<br>watchdog<br>ABCDE类人才<br>正则表达式断言<br>多路复用<br>size_t<br>pcntl<br>php ctype扩展</p><p>属性选择器<br>nethogs<br>erp<br>云原生<br>github1s<br>catchsegv gdb objdump<br>redis可读可写只维护一个<br>ldcx<br>sql top命令<br>nothing else matters</p><p>slice底层结构<br>%#v打印结构体<br>map实现原理，结构体json<br>闭包递归<br>defer ，单元测试，压力测试<br>函数内部函数被外部变量引用，就形成了闭包<br>数据结构算法<br>方法集<br>vega<br>切面编程<br>git推送到指定分支<br>redisgeo<br>splpriorityqueue<br>dcat<br>imagick<br>vuepress</p><p>mail docker<br>机翼构造<br>toml<br>yaml<br>状态转换图<br>猪油，蒜蓉，猴菇米稀<br>screenfetch<br>phpstream<br>领悟驱动设计<br>微服务架构设计模式<br>泛型三大特征，模板编程，类型安全，值类型计算<br>退出多层使用label<br>modstart<br>fastadmin<br>l5 repository<br>eolinker<br>nginx-lua<br>注册回调<br>分布式事务锁<br>令牌桶，雪花算法<br>下载分页，限流，登录控制器<br>ipv6访问要给ip加上中括号，例如[::1]:8199<br>imagemagic 和ffmpeg<br>二进制安全<br>redis egeo<br>trtc<br>flink spark<br>ps aft<br>risk指令集，<br>directly直接的<br>code .可以在当前目录打开vscode<br>寻址路由，数据链路，分片，序列码，封装，拥塞控制，错误检验和矫正，数据重发，重组<br>osi七层模型<br>range断点续传<br> 304<br>hybrid app electron crodova<br>以太网 tcp udp http http2 http<br>hsla颜色 backdrop-filter<br>urban dictionary<br>dart，kotlin<br>domdocument对象 php<br>domxpath<br>file对象可以用slice切块<br>auth rbac<br>php 花括号访问字符串是按照字节算，和golang一致<br>信号量<br>mail<br>think-scout<br>软考<br>if判断把几率大的放前面<br>shell<br>js模板语法使用模板字符，${a} 使用变量，方法，函数的立即调用模式!，对象的属性，用反引号括字符串<br>css媒体查询<br>substitute中匹配换行<br>正则\z Z b B </p><p>sql的group by 用法<br>canvas flex布局 cropper<br>escapeshellarg<br>使用箭头函数 不使用use ，按作用域隐式绑定<br>虾滑鱼滑<br>tmpwatch<br>awk<br>grep -q<br>export<br>substring(from to)<br>多行结果拼接<br>sql的case when<br>substring<br>substr<br>for xml path<br>preg_quote<br>阿帕奇location用正则断言匹配，rewritecond用!来匹配非<br>$GLOBALS为一个超全局数组，数组内包含所有全局变量<br>es6解构赋值<br>realpath<br>array_intersect_key<br>array_walk_recursive<br>command  key(end())<br> filter_vars<br> pjax<br>正则Ui和.*?非贪婪<br>in 会全表扫描，exists<br>join数据量小的放前面<br>whereOr  exist<br>chroot<br>phpize<br>getopt<br>后向引用<br> whoami<br>flutter<br>dig<br>limit不同当order字段全部相同的时候会导致排序不同<br>存储桶<br>codelf<br>正则表达式的(aaa|bbb)<br>substitute可以使用反斜线来换行<br>机—电<br>php – python — c<br>stat head<br>crontab<br>du -sh<br>正则u修饰<br>realpath<br>nth-child odd 背景颜色 代码块<br>sql extract函数<br>preg_quote<br>xhr.readyState xhr.setRequestHeader() 在open后<br>date back to<br>css动画的infinite可以无限循环<br>mysql分布式事务xa<br>concat concat_ws 可以用在and后<br>mb_ereg_replace<br>zh.osdn.net<br>jq的stop可以停止当前的动画<br>menual.51yip.com<br>pdo持久链<br>linux的find命令<br>css的behavior属性<br>ssi模块<br>pwd -P<br>骏马金龙<br>hadoop<br>take a rain check<br>area标签<br>distinct on<br>查看特定文件大小，总<br>pygame<br>存储过程<br>replaceall不要用，用replace(&#x2F;&#x2F;g)<br>array_reduce<br>jemeter ant  jenkins<br>waf<br>匿名函数接收回调传递给函<br>csp<br>preg_quote<br>posix_kill<br>file函数<br>涉及浮点数的要用bcmath<br>dump自动生成provider和command的缓存文件<br>fpm用tcp不要用unix 极端情况可能不行<br>strtok<br>流程图<br>memset<br>psql的having中可以用count()统计<br>vim ctrl v和 v<br>declare xxx cursor for (select )游标查询<br>js轮播图和点击滚动到顶部<br>vim分屏<br>判断是否是真实图片可以用getimagesize<br>diff<br>logrotate<br>sql round<br>《编码》</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP yield ，生成器，迭代器，聚合迭代器，协程</title>
    <link href="/2021/12/26/PHP%20yield%20%EF%BC%8C%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%8C%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%8C%E8%81%9A%E5%90%88%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%8C%E5%8D%8F%E7%A8%8B/"/>
    <url>/2021/12/26/PHP%20yield%20%EF%BC%8C%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%8C%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%8C%E8%81%9A%E5%90%88%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%8C%E5%8D%8F%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h1><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$data</span> = (<span class="hljs-keyword">yield</span> <span class="hljs-variable">$express</span>);<br></code></pre></td></tr></table></figure><blockquote><p>yield 的左边是一个赋值语句，右边可以是值（也可是表达式） 。而yield 会先执行右边的表达式，并把值$value送到生成器外面。当生成器收到值后，会执行yield左边的语句，赋值给$data.</p></blockquote><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$generator</span> = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;first&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> PHP_EOL;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);<br>    <span class="hljs-variable">$b</span> = <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;second&#x27;</span>;<br>    <span class="hljs-keyword">echo</span> PHP_EOL;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$b</span>);<br>    <span class="hljs-variable">$c</span> = <span class="hljs-keyword">yield</span>;<br>    <span class="hljs-keyword">echo</span> PHP_EOL;<span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$c</span>);<br>&#125;)();<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$generator</span>-&gt;<span class="hljs-title function_ invoke__">current</span>();<br><span class="hljs-variable">$generator</span>-&gt;<span class="hljs-title function_ invoke__">next</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$generator</span>-&gt;<span class="hljs-title function_ invoke__">current</span>();<br><span class="hljs-variable">$generator</span>-&gt;<span class="hljs-title function_ invoke__">next</span>();<br><span class="hljs-variable">$generator</span>-&gt;<span class="hljs-title function_ invoke__">send</span>(<span class="hljs-string">&#x27;third&#x27;</span>);<br></code></pre></td></tr></table></figure><p>php7之前需要(yield 123)</p><ul><li>执行$generator-&gt;current(); 会执行第一个yield, 然后暂停</li><li>当执行$generator-&gt;next()或者$generator-&gt;send(null); 会往下执行直到第二个yield</li><li>当执行$generator-&gt;send(‘third’); 时候，yield实际是send的值, 将yield的值赋值给$a，所以代码中的$c为third，并且会执行下面的语句, 执行下一个yield，此时再调用$generator-&gt;current() 就是下一个yield</li><li>当生成器全部迭代完毕可以调用$generator-&gt;getReturn() 获取返回值</li><li>调用$generator-&gt;next()会到达下一个yield</li><li>第一次直接send() 会导致yield弹出值丢失</li><li>yield from 左边不能有接收，因为没有意义，但是可以嵌套</li><li>$c[] &#x3D; yield ‘name’ &#x3D;&gt; ‘zhangsan’ 支持这样的写法</li><li>当$gen迭代器被创建的时候一个rewind()方法已经被隐式调用，rewind执行会导致第一个yield被执行且忽略返回值</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$g</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>   <span class="hljs-keyword">yield</span> <span class="hljs-number">1</span>;<br>   <span class="hljs-keyword">yield</span> <span class="hljs-number">2</span>;<br>&#125;;<br><br><span class="hljs-variable">$g</span> = <span class="hljs-variable">$g</span>();<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$g</span>-&gt;<span class="hljs-title function_ invoke__">send</span>(<span class="hljs-string">&#x27;test&#x27;</span>)); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure><blockquote><p>yield from 是一个强大且不可缺少的语法，如果只有 yield 那么就只是有了生成器，有了 yield from 那就有了一根强大的“针”——穿过一个个 生成器，按照call stack 把一个个生成器串了起来。 调用方法用 call_user_func()，调用 生成器用 yield from .</p></blockquote><p>yield from: <a href="https://segmentfault.com/a/1190000022754223">https://segmentfault.com/a/1190000022754223</a></p><h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$logger</span> = (<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$fd</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;./log.log&#x27;</span>, <span class="hljs-string">&#x27;a+&#x27;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fd</span>, <span class="hljs-keyword">yield</span>);<br>    &#125;<br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fd</span>);<br>&#125;)();<br><br><span class="hljs-variable">$logger</span>-&gt;<span class="hljs-title function_ invoke__">send</span>(<span class="hljs-string">&#x27;test&#x27;</span>. PHP_EOL);<br></code></pre></td></tr></table></figure><p>ZH-CN : <a href="https://www.laruence.com/2015/05/28/3038.html">https://www.laruence.com/2015/05/28/3038.html</a><br>EN-US： <a href="https://www.npopov.com/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html">https://www.npopov.com/2012/12/22/Cooperative-multitasking-using-coroutines-in-PHP.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker学习笔记</title>
    <link href="/2021/12/12/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/12/12/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><ul><li><p>官方文档地址:<a href="https://www.docker.com/get-started">https://www.docker.com/get-started</a></p></li><li><p>中文参考手册:<a href="https://docker_practice.gitee.io/zh-cn/">https://docker_practice.gitee.io/zh-cn/</a></p></li></ul><hr><h2 id="1-什么是-Docker"><a href="#1-什么是-Docker" class="headerlink" title="1.什么是 Docker"></a>1.什么是 Docker</h2><h3 id="1-1-官方定义"><a href="#1-1-官方定义" class="headerlink" title="1.1 官方定义"></a>1.1 官方定义</h3><ul><li>最新官网首页</li></ul><p><img src="/images/20211212/image-20201220213306128.png" alt="image-20201220213306128"></p><p><img src="/images/20211212/image-20201220214210994.png" alt="image-20201220214210994"></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.官方介绍</span><br><span class="hljs-bullet">-</span> We have a complete container solution for you - no matter who you are and where you are on your containerization journey.<br><span class="hljs-bullet">-</span> 翻译: 我们为你提供了一个完整的容器解决方案,不管你是谁,不管你在哪,你都可以开始容器的的旅程。<br><span class="hljs-bullet">-</span> 官方定义: docker是一个容器技术。<br></code></pre></td></tr></table></figure><h3 id="1-2-Docker的起源"><a href="#1-2-Docker的起源" class="headerlink" title="1.2 Docker的起源"></a>1.2 Docker的起源</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown">Docker 最初是 dotCloud 公司创始人 Solomon Hykes 在法国期间发起的一个公司内部项目，它是基于 dotCloud 公司多年云服务技术的一次革新，并于 2013 年 3 月以 Apache 2.0 授权协议开源，主要项目代码在 GitHub 上进行维护。Docker 项目后来还加入了 Linux 基金会，并成立推动 开放容器联盟（OCI）。<br><br>Docker 自开源后受到广泛的关注和讨论，至今其 GitHub 项目 已经超过 5 万 7 千个星标和一万多个 fork。甚至由于 Docker 项目的火爆，在 2013 年底，dotCloud 公司决定改名为 Docker。Docker 最初是在 Ubuntu 12.04 上开发实现的；Red Hat 则从 RHEL 6.5 开始对 Docker 进行支持；Google 也在其 PaaS 产品中广泛应用 Docker。<br><br>Docker 使用 Google 公司推出的 Go 语言 进行开发实现，基于 Linux 内核的 cgroup，namespace，以及 OverlayFS 类的 Union FS 等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。由于隔离的进程独立于宿主和其它的隔离的进程，因此也称其为容器。<br></code></pre></td></tr></table></figure><h2 id="2-为什么是Docker"><a href="#2-为什么是Docker" class="headerlink" title="2.为什么是Docker"></a>2.为什么是Docker</h2><ul><li><p><code>在开发的时候，在本机测试环境可以跑，生产环境跑不起来</code></p><p>这里我们拿java Web应用程序举例，我们一个java Web应用程序涉及很多东西，比如jdk、tomcat、mysql等软件环境。当这些其中某一项版本不一致的时候，可能就会导致应用程序跑不起来这种情况。Docker则将程序以及使用软件环境直接打包在一起，无论在那个机器上保证了环境一致。</p><p><strong>优势1:  一致的运行环境,更轻松的迁移</strong></p></li><li><p><code>服务器自己的程序挂了，结果发现是别人程序出了问题把内存吃完了，自己程序因为内存不够就挂了</code></p><p>这种也是一种比较常见的情况，如果你的程序重要性不是特别高的话，公司基本上不可能让你的程序独享一台服务器的，这时候你的服务器就会跟公司其他人的程序共享一台服务器，所以不可避免地就会受到其他程序的干扰，导致自己的程序出现问题。Docker就很好解决了环境隔离的问题，别人程序不会影响到自己的程序。</p><p><strong>优势2：对进程进行封装隔离,容器与容器之间互不影响,更高效的利用系统资源</strong></p></li><li><p><code>公司要弄一个活动，可能会有大量的流量进来，公司需要再多部署几十台服务器</code></p><p>在没有Docker的情况下，要在几天内部署几十台服务器，这对运维来说是一件非常折磨人的事，而且每台服务器的环境还不一定一样，就会出现各种问题，最后部署地头皮发麻。用Docker的话，我只需要将程序打包到镜像，你要多少台服务，我就给力跑多少容器，极大地提高了部署效率。</p><p><strong>优势3: 通过镜像复制N多个环境一致容器</strong></p></li></ul><hr><h2 id="3-Docker和虚拟机区别"><a href="#3-Docker和虚拟机区别" class="headerlink" title="3.Docker和虚拟机区别"></a>3.Docker和虚拟机区别</h2><blockquote><p>关于Docker与虚拟机的区别，我在网上找到的一张图，非常直观形象地展示出来，话不多说，直接上图。</p></blockquote><p><img src="/images/20211212/image-20201220222456675.png" alt="image-20201220222456675"></p><p><code>比较上面两张图，我们发现虚拟机是携带操作系统，本身很小的应用程序却因为携带了操作系统而变得非常大，很笨重</code>。Docker是不携带操作系统的，所以Docker的应用就非常的轻巧。另外在调用宿主机的CPU、磁盘等等这些资源的时候，拿内存举例，虚拟机是利用Hypervisor去虚拟化内存，整个调用过程是虚拟内存-&gt;虚拟物理内存-&gt;真正物理内存，但是Docker是利用Docker Engine去调用宿主的的资源，这时候过程是虚拟内存-&gt;真正物理内存。</p><table><thead><tr><th></th><th>传统虚拟机</th><th>Docker容器</th></tr></thead><tbody><tr><td>磁盘占用</td><td>几个GB到几十个GB左右</td><td>几十MB到几百MB左右</td></tr><tr><td>CPU内存占用</td><td>虚拟操作系统非常占用CPU和内存</td><td>Docker引擎占用极低</td></tr><tr><td>启动速度</td><td>（从开机到运行项目）几分钟</td><td>（从开启容器到运行项目）几秒</td></tr><tr><td>安装管理</td><td>需要专门的运维技术</td><td>安装、管理方便</td></tr><tr><td>应用部署</td><td>每次部署都费时费力</td><td>从第二次部署开始轻松简捷</td></tr><tr><td>耦合性</td><td>多个应用服务安装到一起，容易互相影响</td><td>每个应用服务一个容器，达成隔离</td></tr><tr><td>系统依赖</td><td>无</td><td>需求相同或相似的内核，目前推荐是Linux</td></tr></tbody></table><hr><h2 id="4-Docker的安装"><a href="#4-Docker的安装" class="headerlink" title="4.Docker的安装"></a>4.Docker的安装</h2><h3 id="4-1-安装docker-centos7-x"><a href="#4-1-安装docker-centos7-x" class="headerlink" title="4.1 安装docker(centos7.x)"></a>4.1 安装docker(centos7.x)</h3><ul><li><p>卸载原始docker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-engine<br></code></pre></td></tr></table></figure></li><li><p>安装docker依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo yum install -y yum-utils \</span><br><span class="language-bash">  device-mapper-persistent-data \</span><br><span class="language-bash">  lvm2</span><br></code></pre></td></tr></table></figure></li><li><p>设置docker的yum源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure></li><li><p>安装最新版的docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo yum install docker-ce docker-ce-cli containerd.io<br></code></pre></td></tr></table></figure></li><li><p>指定版本安装docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ yum list docker-ce --showduplicates | <span class="hljs-built_in">sort</span> -r<br>$ sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io<br>$ sudo yum install docker-ce-18.09.5-3.el7 docker-ce-cli-18.09.5-3.el7 containerd.io<br></code></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo systemctl <span class="hljs-built_in">enable</span> docker<br>$ sudo systemctl start docker<br></code></pre></td></tr></table></figure></li><li><p>关闭docker</p></li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo systemctl stop docker<br></code></pre></td></tr></table></figure><ul><li><p>测试docker安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo docker run hello-world<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-2-bash安装-通用所有平台"><a href="#4-2-bash安装-通用所有平台" class="headerlink" title="4.2 bash安装(通用所有平台)"></a>4.2 bash安装(通用所有平台)</h3><ul><li><p>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装，另外可以通过 <code>--mirror</code> 选项使用国内源进行安装：执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker 的稳定(stable)版本安装在系统中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ curl -fsSL get.docker.com -o get-docker.sh<br>$ sudo sh get-docker.sh --mirror Aliyun<br></code></pre></td></tr></table></figure></li><li><p>启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo systemctl <span class="hljs-built_in">enable</span> docker<br>$ sudo systemctl start docker<br></code></pre></td></tr></table></figure></li><li><p>创建docker用户组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo groupadd docker<br></code></pre></td></tr></table></figure></li><li><p>将当前用户加入docker组</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo usermod -aG docker <span class="hljs-variable">$USER</span><br></code></pre></td></tr></table></figure></li><li><p>测试docker安装是否正确</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ docker run hello-world<br></code></pre></td></tr></table></figure></li></ul><h2 id="5-Docker-的核心架构"><a href="#5-Docker-的核心架构" class="headerlink" title="5.Docker 的核心架构"></a>5.Docker 的核心架构</h2><p><img src="/images/20211212/image-20200404111908085-0291323.png" alt="image-20200404111908085"></p><ul><li><code>镜像:</code> 一个镜像代表一个应用环境,他是一个只读的文件,如 mysql镜像,tomcat镜像,nginx镜像等</li><li><code>容器:</code> 镜像每次运行之后就是产生一个容器,就是正在运行的镜像,特点就是可读可写</li><li><code>仓库:</code>用来存放镜像的位置,类似于maven仓库,也是镜像下载和上传的位置</li><li><code>dockerFile:</code>docker生成镜像配置文件,用来书写自定义镜像的一些配置</li><li><code>tar:</code>一个对镜像打包的文件,日后可以还原成镜像</li></ul><h2 id="6-Docker-配置阿里镜像加速服务"><a href="#6-Docker-配置阿里镜像加速服务" class="headerlink" title="6. Docker 配置阿里镜像加速服务"></a>6. Docker 配置阿里镜像加速服务</h2><h3 id="6-1-docker-运行流程"><a href="#6-1-docker-运行流程" class="headerlink" title="6.1 docker 运行流程"></a>6.1 docker 运行流程</h3><p><img src="/images/20211212/image-20200404120356784.png" alt="image-20200404120356784"></p><h3 id="6-2-docker配置阿里云镜像加速"><a href="#6-2-docker配置阿里云镜像加速" class="headerlink" title="6.2 docker配置阿里云镜像加速"></a>6.2 docker配置阿里云镜像加速</h3><ul><li><code>访问阿里云登录自己账号查看docker镜像加速服务</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mkdir -p /etc/docker<br>sudo tee /etc/docker/daemon.json &lt;&lt;EOF<br>&#123;<br>  &quot;registry-mirrors&quot;: [&quot;https://lz2nib3q.mirror.aliyuncs.com&quot;]<br>&#125;<br>EOF<br>sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><ul><li><code>验证docker的镜像加速是否生效</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker info<br>..........<br>    127.0.0.0/8<br>   Registry Mirrors:<br>    &#x27;https://lz2nib3q.mirror.aliyuncs.com/&#x27;<br>   Live Restore Enabled: false<br>   Product License: Community Engine<br></code></pre></td></tr></table></figure><hr><h2 id="7-Docker的入门应用"><a href="#7-Docker的入门应用" class="headerlink" title="7.Docker的入门应用"></a>7.Docker的入门应用</h2><h3 id="7-1-docker-的第一个程序"><a href="#7-1-docker-的第一个程序" class="headerlink" title="7.1 docker 的第一个程序"></a>7.1 docker 的第一个程序</h3><blockquote><p>docker  run hello-world</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ~]# docker run hello-world<br><br>Hello from Docker!<br>This message shows that your installation appears to be working correctly.<br><br>To generate this message, Docker took the following steps:<br> 1. The Docker client contacted the Docker daemon.<br> 2. The Docker daemon pulled the &quot;hello-world&quot; image from the Docker Hub.<br>    (amd64)<br> 3. The Docker daemon created a new container from that image which runs the<br>    executable that produces the output you are currently reading.<br> 4. The Docker daemon streamed that output to the Docker client, which sent it<br>    to your terminal.<br><br>To try something more ambitious, you can run an Ubuntu container with:<br><span class="hljs-meta prompt_"> $ </span><span class="language-bash">docker run -it ubuntu bash</span><br><br>Share images, automate workflows, and more with a free Docker ID:<br> https://hub.docker.com/<br><br>For more examples and ideas, visit:<br> https://docs.docker.com/get-started/<br></code></pre></td></tr></table></figure><hr><h2 id="8-常用命令"><a href="#8-常用命令" class="headerlink" title="8.常用命令"></a>8.常用命令</h2><h3 id="6-1-辅助命令"><a href="#6-1-辅助命令" class="headerlink" title="6.1 辅助命令"></a>6.1 辅助命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.安装完成辅助命令</span><br><span class="hljs-code">docker version--------------------------查看docker的信息</span><br><span class="hljs-code">docker info--------------------------查看更详细的信息</span><br><span class="hljs-code">docker --help--------------------------帮助命令</span><br></code></pre></td></tr></table></figure><h3 id="6-2-Images-镜像命令"><a href="#6-2-Images-镜像命令" class="headerlink" title="6.2 Images 镜像命令"></a>6.2 Images 镜像命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.查看本机中所有镜像</span><br><span class="hljs-code">docker images--------------------------列出本地所有镜像</span><br><span class="hljs-code">-a列出所有镜像（包含中间映像层）</span><br><span class="hljs-code">  -q只显示镜像id</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.搜索镜像</span><br><span class="hljs-code">docker search [options] 镜像名-------------------去dockerhub上查询当前镜像</span><br><span class="hljs-code">-s 指定值列出收藏数不少于指定值的镜像</span><br><span class="hljs-code">  --no-trunc  显示完整的镜像信息</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.从仓库下载镜像</span><br><span class="hljs-code">docker pull 镜像名[:TAG|@DIGEST]----------------- 下载镜像</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.删除镜像</span><br><span class="hljs-code">docker rmi 镜像名--------------------------  删除镜像</span><br><span class="hljs-code">-f强制删除</span><br></code></pre></td></tr></table></figure><h3 id="6-3-Contrainer-容器命令"><a href="#6-3-Contrainer-容器命令" class="headerlink" title="6.3 Contrainer 容器命令"></a>6.3 Contrainer 容器命令</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.运行容器</span><br><span class="hljs-code">docker run 镜像名--------------------------镜像名新建并启动容器</span><br><span class="hljs-code">    --name 别名为容器起一个名字</span><br><span class="hljs-code">    -d启动守护式容器（在后台启动容器）</span><br><span class="hljs-code">    -p 映射端口号：原始端口号 指定端口号启动</span><br><span class="hljs-code"></span><br><span class="hljs-code">例：docker run -it --name myTomcat -p 8888:8080 tomcat</span><br><span class="hljs-code">    docker run -d --name myTomcat -P tomcat</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.查看运行的容器</span><br><span class="hljs-code">docker ps--------------------------列出所有正在运行的容器</span><br><span class="hljs-code">-a正在运行的和历史运行过的容器</span><br><span class="hljs-code">-q静默模式，只显示容器编号</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.停止|关闭|重启容器</span><br><span class="hljs-code">docker start   容器名字或者容器id  --------------- 开启容器</span><br><span class="hljs-code">docker restart 容器名或者容器id    --------------- 重启容器</span><br><span class="hljs-code">docker stop  容器名或者容器id     ------------------ 正常停止容器运行</span><br><span class="hljs-code">docker kill  容器名或者容器id      ------------------ 立即停止容器运行</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.删除容器</span><br><span class="hljs-code">docker rm -f 容器id和容器名     </span><br><span class="hljs-code">docker rm -f $(docker ps -aq)--------------------------删除所有容器</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 5.查看容器内进程</span><br><span class="hljs-code">docker top 容器id或者容器名 ------------------ 查看容器内的进程</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 6.查看查看容器内部细节</span><br><span class="hljs-code">docker inspect 容器id ------------------ 查看容器内部细节</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 7.查看容器的运行日志</span><br><span class="hljs-code">docker logs [OPTIONS] 容器id或容器名------------------ 查看容器日志</span><br><span class="hljs-code">    -t 加入时间戳</span><br><span class="hljs-code">    -f 跟随最新的日志打印</span><br><span class="hljs-code">    --tail  数字显示最后多少条</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 8.进入容器内部</span><br><span class="hljs-code">docker exec [options] 容器id 容器内命令 ------------------ 进入容器执行命令</span><br><span class="hljs-code">-i以交互模式运行容器，通常与-t一起使用</span><br><span class="hljs-code">    -t分配一个伪终端    shell窗口   bash </span><br><span class="hljs-code"></span><br><span class="hljs-section"># 9.容器和宿主机之间复制文件</span><br><span class="hljs-code">docker cp 文件|目录 容器id:容器路径           -----------------   将宿主机复制到容器内部</span><br><span class="hljs-code">docker cp 容器id:容器内资源路径 宿主机目录路径  -----------------   将容器内资源拷贝到主机上</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 10.数据卷(volum)实现与宿主机共享目录</span><br><span class="hljs-code">docker run -v 宿主机的路径|任意别名:/容器内的路径 镜像名</span><br><span class="hljs-code">注意: </span><br><span class="hljs-code">1.如果是宿主机路径必须是绝对路径,宿主机目录会覆盖容器内目录内容</span><br><span class="hljs-code">2.如果是别名则会在docker运行容器时自动在宿主机中创建一个目录,并将容器目录文件复制到宿主机中</span><br><span class="hljs-code">3.如果宿主机是windows,则映射目录例如`-v /d/max:/home/mnt` 其中/d/max表示d盘的max目录</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 11.打包镜像</span><br><span class="hljs-code">docker save 镜像名 -o  名称.tar</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 12.载入镜像</span><br><span class="hljs-code">docker load -i   名称.tar</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 13.容器打包成新的镜像</span><br><span class="hljs-code">  docker commit -m &quot;描述信息&quot; -a &quot;作者信息&quot;   （容器id或者名称）打包的镜像名称:标签</span><br></code></pre></td></tr></table></figure><hr><h2 id="7-docker的镜像原理"><a href="#7-docker的镜像原理" class="headerlink" title="7.docker的镜像原理"></a>7.docker的镜像原理</h2><h3 id="7-1-镜像是什么？"><a href="#7-1-镜像是什么？" class="headerlink" title="7.1 镜像是什么？"></a>7.1 镜像是什么？</h3><blockquote><p>镜像是一种轻量级的，可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时所需的库、环境变量和配置文件。</p></blockquote><h3 id="7-2-为什么一个镜像会那么大？"><a href="#7-2-为什么一个镜像会那么大？" class="headerlink" title="7.2 为什么一个镜像会那么大？"></a>7.2 为什么一个镜像会那么大？</h3><p><img src="/images/20211212/image-20200404142950068.png" alt="image-20200404142950068"></p><p><code>镜像就是花卷</code></p><ul><li><p>UnionFS（联合文件系统）:</p><p>Union文件系统是一种分层，轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。Union文件系统是Docker镜像的基础。这种文件系统特性:就是一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录 。</p></li></ul><p></p><h3 id="7-3-Docker镜像原理"><a href="#7-3-Docker镜像原理" class="headerlink" title="7.3 Docker镜像原理"></a>7.3 Docker镜像原理</h3><blockquote><p><code>docker的镜像实际是由一层一层的文件系统组成。</code></p></blockquote><ul><li><p>bootfs（boot file system）主要包含bootloader和kernel，bootloader主要是引导加载kernel，Linux刚启动时会加载bootfs文件系统。在docker镜像的最底层就是bootfs。这一层与Linux&#x2F;Unix 系统是一样的，包含boot加载器（bootloader）和内核（kernel）。当boot加载完,后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时会卸载bootfs。</p></li><li><p>rootfs（root file system），在bootfs之上，包含的就是典型的linux系统中的&#x2F;dev，&#x2F;proc，&#x2F;bin，&#x2F;etc等标准的目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu&#x2F;CentOS等等。</p></li><li><p>我们平时安装进虚拟机的centos都有1到几个GB，为什么docker这里才200MB？对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令，工具，和程序库就可以了，因为底层直接使用Host的Kernal，自己只需要提供rootfs就行了。由此可见不同的linux发行版，他们的bootfs是一致的，rootfs会有差别。因此不同的发行版可以共用bootfs。</p></li></ul><p><img src="/images/20211212/1567585172(1).jpg"></p><h3 id="7-4-为什么docker镜像要采用这种分层结构呢"><a href="#7-4-为什么docker镜像要采用这种分层结构呢" class="headerlink" title="7.4 为什么docker镜像要采用这种分层结构呢?"></a>7.4 为什么docker镜像要采用这种分层结构呢?</h3><blockquote><p><code>最大的一个好处就是资源共享</code></p></blockquote><ul><li>比如：有多个镜像都是从相同的base镜像构建而来的，那么宿主机只需在磁盘中保存一份base镜像。同时内存中也只需要加载一份base镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。Docker镜像都是只读的。当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称为容器层，容器层之下都叫镜像层。</li></ul><hr><h2 id="8-Docker安装常用服务"><a href="#8-Docker安装常用服务" class="headerlink" title="8.Docker安装常用服务"></a>8.Docker安装常用服务</h2><h3 id="8-1-安装mysql"><a href="#8-1-安装mysql" class="headerlink" title="8.1 安装mysql"></a>8.1 安装mysql</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.拉取mysql镜像到本地</span><br><span class="hljs-code">docker pull mysql:tag (tag不加默认最新版本)</span><br><span class="hljs-code"></span><br><span class="hljs-code"># 2.运行mysql服务</span><br><span class="hljs-code">docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -d mysql:tag    --没有暴露外部端口外部不能连接</span><br><span class="hljs-code">docker run --name mysql -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d  mysql:tag  --没有暴露外部端口</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.进入mysql容器</span><br><span class="hljs-code">docker exec -it 容器名称|容器id bash</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.外部查看mysql日志</span><br><span class="hljs-code">docker logs 容器名称|容器id</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 5.使用自定义配置参数</span><br><span class="hljs-code">docker run --name mysql -v /root/mysql/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -d mysql:tag</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 6.将容器数据位置与宿主机位置挂载保证数据安全</span><br><span class="hljs-code">docker run --name mysql -v /root/mysql/data:/var/lib/mysql -v /root/mysql/conf.d:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root -p 3306:3306 -d mysql:tag</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 7.通过其他客户端访问 如在window系统|macos系统使用客户端工具访问</span><br><span class="hljs-code"></span><br><span class="hljs-code"># 8.将mysql数据库备份为sql文件</span><br><span class="hljs-code">docker exec mysql|容器id sh -c &#x27;exec mysqldump --all-databases -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &gt; /root/all-databases.sql  --导出全部数据</span><br><span class="hljs-code">docker exec mysql sh -c &#x27;exec mysqldump --databases 库表 -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &gt; /root/all-databases.sql  --导出指定库数据</span><br><span class="hljs-code">docker exec mysql sh -c &#x27;exec mysqldump --no-data --databases 库表 -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &gt; /root/all-databases.sql  --导出指定库数据不要数据</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 9.执行sql文件到mysql中</span><br><span class="hljs-code">docker exec -i mysql sh -c &#x27;exec mysql -uroot -p&quot;$MYSQL_ROOT_PASSWORD&quot;&#x27; &lt; /root/xxx.sql</span><br></code></pre></td></tr></table></figure><h3 id="8-2-安装Redis服务"><a href="#8-2-安装Redis服务" class="headerlink" title="8.2 安装Redis服务"></a>8.2 安装Redis服务</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.在docker hub搜索redis镜像</span><br><span class="hljs-code">docker search redis</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.拉取redis镜像到本地</span><br><span class="hljs-code">docker pull redis</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.启动redis服务运行容器</span><br><span class="hljs-code">docker run --name redis -d redis:tag (没有暴露外部端口)</span><br><span class="hljs-code">docker run --name redis -p 6379:6379 -d redis:tag (暴露外部宿主机端口为6379进行连接) </span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.查看启动日志</span><br><span class="hljs-code">docker logs -t -f 容器id|容器名称</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 5.进入容器内部查看</span><br><span class="hljs-code">docker exec -it 容器id|名称 bash  </span><br><span class="hljs-code"></span><br><span class="hljs-section"># 6.加载外部自定义配置启动redis容器</span><br><span class="hljs-code">默认情况下redis官方镜像中没有redis.conf配置文件 需要去官网下载指定版本的配置文件</span><br><span class="hljs-code">1. wget http://download.redis.io/releases/redis-5.0.8.tar.gz  下载官方安装包</span><br><span class="hljs-code">2. 将官方安装包中配置文件进行复制到宿主机指定目录中如 /root/redis/redis.conf文件</span><br><span class="hljs-code">3. 修改需要自定义的配置</span><br><span class="hljs-code"> bind 0.0.0.0 开启远程权限</span><br><span class="hljs-code"> appenonly yes 开启aof持久化</span><br><span class="hljs-code">4. 加载配置启动</span><br><span class="hljs-code">docker run --name redis -v /root/redis:/usr/local/etc/redis -p 6379:6379 -d redis redis-server /usr/local/etc/redis/redis.conf  </span><br><span class="hljs-code"></span><br><span class="hljs-section"># 7.将数据目录挂在到本地保证数据安全</span><br><span class="hljs-code">docker run --name redis -v /root/redis/data:/data -v /root/redis/redis.conf:/usr/local/etc/redis/redis.conf -p 6379:6379 -d redis redis-server /usr/local/etc/redis/redis.conf  </span><br></code></pre></td></tr></table></figure><h3 id="8-3-安装Nginx"><a href="#8-3-安装Nginx" class="headerlink" title="8.3 安装Nginx"></a>8.3 安装Nginx</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.在docker hub搜索nginx</span><br><span class="hljs-code">docker search nginx</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.拉取nginx镜像到本地</span><br><span class="hljs-code">[root@localhost ~]# docker pull nginx</span><br><span class="hljs-code">    Using default tag: latest</span><br><span class="hljs-code">    latest: Pulling from library/nginx</span><br><span class="hljs-code">    afb6ec6fdc1c: Pull complete </span><br><span class="hljs-code">    b90c53a0b692: Pull complete </span><br><span class="hljs-code">    11fa52a0fdc0: Pull complete </span><br><span class="hljs-code">    Digest: sha256:30dfa439718a17baafefadf16c5e7c9d0a1cde97b4fd84f63b69e13513be7097</span><br><span class="hljs-code">    Status: Downloaded newer image for nginx:latest</span><br><span class="hljs-code">    docker.io/library/nginx:latest</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.启动nginx容器</span><br><span class="hljs-code">docker run -p 80:80 --name nginx01 -d nginx</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.进入容器</span><br><span class="hljs-code">docker exec -it nginx01 /bin/bash</span><br><span class="hljs-code">查找目录:  whereis nginx</span><br><span class="hljs-code">配置文件:  /etc/nginx/nginx.conf</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 5.复制配置文件到宿主机</span><br><span class="hljs-code">docker cp nginx01(容器id|容器名称):/etc/nginx/nginx.conf 宿主机名录</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 6.挂在nginx配置以及html到宿主机外部</span><br><span class="hljs-code">docker run --name nginx02 -v /root/nginx/nginx.conf:/etc/nginx/nginx.conf -v /root/nginx/html:/usr/share/nginx/html -p 80:80 -d nginx</span><br></code></pre></td></tr></table></figure><hr><h3 id="8-4-安装Tomcat"><a href="#8-4-安装Tomcat" class="headerlink" title="8.4 安装Tomcat"></a>8.4 安装Tomcat</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.在docker hub搜索tomcat</span><br><span class="hljs-code">docker search tomcat</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.下载tomcat镜像</span><br><span class="hljs-code">docker pull tomcat</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.运行tomcat镜像</span><br><span class="hljs-code">docker run -p 8080:8080 -d --name mytomcat tomcat</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.进入tomcat容器</span><br><span class="hljs-code">docker exec -it mytomcat /bin/bash</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 5.将webapps目录挂载在外部</span><br><span class="hljs-code">docker run -p 8080:8080 -v /root/webapps:/usr/local/tomcat/webapps -d --name mytomcat tomcat</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><hr><h3 id="8-5-安装MongoDB数据库"><a href="#8-5-安装MongoDB数据库" class="headerlink" title="8.5 安装MongoDB数据库"></a>8.5 安装MongoDB数据库</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.运行mongDB</span><br><span class="hljs-code">docker run -d -p 27017:27017 --name mymongo mongo  ---无须权限</span><br><span class="hljs-code">docker logs -f mymongo --查看mongo运行日志</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.进入mongodb容器</span><br><span class="hljs-code">docker exec -it mymongo /bin/bash</span><br><span class="hljs-code">直接执行mongo命令进行操作</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.常见具有权限的容器</span><br><span class="hljs-code">docker run --name  mymongo  -p 27017:27017  -d mongo --auth</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.进入容器配置用户名密码</span><br><span class="hljs-code">mongo</span><br><span class="hljs-code">use admin 选择admin库</span><br><span class="hljs-code">db.createUser(&#123;user:&quot;root&quot;,pwd:&quot;root&quot;,roles:[&#123;role:&#x27;root&#x27;,db:&#x27;admin&#x27;&#125;]&#125;)   //创建用户,此用户创建成功,则后续操作都需要用户认证</span><br><span class="hljs-code">exit</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 5.将mongoDB中数据目录映射到宿主机中</span><br><span class="hljs-code">docker run -d -p 27017:27017 -v /root/mongo/data:/data/db --name mymongo mongo </span><br></code></pre></td></tr></table></figure><h3 id="8-6-安装ElasticSearch"><a href="#8-6-安装ElasticSearch" class="headerlink" title="8.6 安装ElasticSearch"></a>8.6 安装ElasticSearch</h3><ul><li><code>注意:</code><strong>调高JVM线程数限制数量</strong></li></ul><h4 id="0-拉取镜像运行elasticsearch"><a href="#0-拉取镜像运行elasticsearch" class="headerlink" title="0.拉取镜像运行elasticsearch"></a>0.拉取镜像运行elasticsearch</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.dockerhub 拉取镜像</span><br><span class="hljs-code">docker pull elasticsearch:6.4.2</span><br><span class="hljs-code"># 2.查看docker镜像</span><br><span class="hljs-code">docker images</span><br><span class="hljs-code"># 3.运行docker镜像</span><br><span class="hljs-code">docker run -p 9200:9200 -p 9300:9300 elasticsearch:6.4.2</span><br></code></pre></td></tr></table></figure><ul><li>启动出现如下错误</li><li><img src="/images/20211212/image-20200602184321790.png" alt="image-20200602184321790"></li></ul><h4 id="1-预先配置"><a href="#1-预先配置" class="headerlink" title="1. 预先配置"></a>1. 预先配置</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.在centos虚拟机中，修改配置sysctl.conf</span><br><span class="hljs-code">vim /etc/sysctl.conf</span><br><span class="hljs-code"># 2.加入如下配置</span><br><span class="hljs-code">vm.max_map_count=262144 </span><br><span class="hljs-code"># 3.启用配置</span><br><span class="hljs-code">sysctl -p</span><br><span class="hljs-code">注：这一步是为了防止启动容器时，报出如下错误：</span><br><span class="hljs-code">bootstrap checks failed max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</span><br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><h4 id="2-启动EleasticSearch容器"><a href="#2-启动EleasticSearch容器" class="headerlink" title="2.启动EleasticSearch容器"></a>2.启动EleasticSearch容器</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 0.复制容器中data目录到宿主机中</span><br><span class="hljs-code">docker cp 容器id:/usr/share/share/elasticsearch/data /root/es</span><br><span class="hljs-code"># 1.运行ES容器 指定jvm内存大小并指定ik分词器位置</span><br><span class="hljs-code">docker run -d --name es -p 9200:9200 -p 9300:9300 -e ES_JAVA_OPTS=&quot;-Xms128m -Xmx128m&quot; -v /root/es/plugins:/usr/share/elasticsearch/plugins -v /root/es/data:/usr/share/elasticsearch/data elasticsearch:6.4.2</span><br></code></pre></td></tr></table></figure><h4 id="3-安装IK分词器"><a href="#3-安装IK分词器" class="headerlink" title="3.安装IK分词器"></a>3.安装IK分词器</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.下载对应版本的IK分词器</span><br><span class="hljs-code">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v6.4.2/elasticsearch-analysis-ik-6.4.2.zip</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.解压到plugins文件夹中</span><br><span class="hljs-code">yum install -y unzip</span><br><span class="hljs-code">unzip -d ik elasticsearch-analysis-ik-6.4.2.zip</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 3.添加自定义扩展词和停用词</span><br><span class="hljs-code">cd plugins/elasticsearch/config</span><br><span class="hljs-code">vim IKAnalyzer.cfg.xml</span><br><span class="hljs-code">&lt;properties&gt;</span><br><span class="hljs-code">&lt;comment&gt;IK Analyzer 扩展配置&lt;/comment&gt;</span><br><span class="hljs-code">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="hljs-code">&lt;entry key=&quot;ext_dict&quot;&gt;ext_dict.dic&lt;/entry&gt;</span><br><span class="hljs-code">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="hljs-code">&lt;entry key=&quot;ext_stopwords&quot;&gt;ext_stopwords.dic&lt;/entry&gt;</span><br><span class="hljs-code">&lt;/properties&gt;</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 4.在ik分词器目录下config目录中创建ext<span class="hljs-emphasis">_dict.dic文件   编码一定要为UTF-8才能生效</span></span><br><span class="hljs-emphasis"><span class="hljs-section">vim ext_</span>dict.dic 加入扩展词即可</span><br><span class="hljs-section"># 5. 在ik分词器目录下config目录中创建ext<span class="hljs-emphasis">_stopword.dic文件 </span></span><br><span class="hljs-emphasis"><span class="hljs-section">vim ext_</span>stopwords.dic 加入停用词即可</span><br><br><span class="hljs-section"># 6.重启容器生效</span><br><span class="hljs-code">docker restart 容器id</span><br><span class="hljs-code"># 7.将此容器提交成为一个新的镜像</span><br><span class="hljs-code">docker commit -a=&quot;xiaochen&quot; -m=&quot;es with IKAnalyzer&quot; 容器id xiaochen/elasticsearch:6.4.2</span><br></code></pre></td></tr></table></figure><h4 id="4-安装Kibana"><a href="#4-安装Kibana" class="headerlink" title="4. 安装Kibana"></a>4. 安装Kibana</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.下载kibana镜像到本地</span><br><span class="hljs-code">docker pull kibana:6.4.2</span><br><span class="hljs-code"></span><br><span class="hljs-section"># 2.启动kibana容器</span><br><span class="hljs-code">docker run -d --name kibana -e ELASTICSEARCH_URL=http://10.15.0.3:9200 -p 5601:5601 kibana:6.4.2</span><br></code></pre></td></tr></table></figure><hr><h2 id="10-Docker中出现如下错误解决方案"><a href="#10-Docker中出现如下错误解决方案" class="headerlink" title="10.Docker中出现如下错误解决方案"></a>10.Docker中出现如下错误解决方案</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell">[<span class="hljs-type">root</span>@<span class="hljs-type">localhost</span> ~]<span class="hljs-comment"># docker search mysql 或者 docker pull 这些命令无法使用</span><br>Error response from daemon: Get https://index.docker.io/v1/search?q=mysql&amp;n=<span class="hljs-number">25</span>: x509: certificate has expired or is not yet valid<br></code></pre></td></tr></table></figure><p><img src="/images/20211212/image-20200602183429286.png" alt="image-20200602183429286"></p><ul><li>注意:<strong>这个错误的原因在于是系统的时间和docker hub时间不一致,需要做系统时间与网络时间同步</strong></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.安装时间同步</span><br><span class="hljs-code">sudo yum -y install ntp ntpdate</span><br><span class="hljs-code"># 2.同步时间</span><br><span class="hljs-code">sudo ntpdate cn.pool.ntp.org</span><br><span class="hljs-code"># 3.查看本机时间</span><br><span class="hljs-code">date</span><br><span class="hljs-code"># 4.从新测试</span><br></code></pre></td></tr></table></figure><p><img src="/images/20211212/image-20200602183718623.png" alt="image-20200602183718623"></p><h2 id="9-Dockerfile"><a href="#9-Dockerfile" class="headerlink" title="9.Dockerfile"></a>9.Dockerfile</h2><h3 id="9-1-什么是Dockerfile"><a href="#9-1-什么是Dockerfile" class="headerlink" title="9.1 什么是Dockerfile"></a>9.1 什么是Dockerfile</h3><p>Dockerfile可以认为是<strong>Docker镜像的描述文件，是由一系列命令和参数构成的脚本</strong>。主要作用是<strong>用来构建docker镜像的构建文件</strong>。</p><p><img src="/images/20211212/image-20200404111908085.png" alt="image-20200404111908085"></p><ul><li><strong>通过架构图可以看出通过DockerFile可以直接构建镜像</strong></li></ul><h3 id="9-2-Dockerfile解析过程"><a href="#9-2-Dockerfile解析过程" class="headerlink" title="9.2 Dockerfile解析过程"></a>9.2 Dockerfile解析过程</h3><p><img src="/images/20211212/image-20200603181253804.png" alt="image-20200603181253804"></p><h3 id="9-3-Dockerfile的保留命令"><a href="#9-3-Dockerfile的保留命令" class="headerlink" title="9.3 Dockerfile的保留命令"></a>9.3 Dockerfile的保留命令</h3><p>官方说明:<a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><table><thead><tr><th>保留字</th><th>作用</th></tr></thead><tbody><tr><td><strong>FROM</strong></td><td><strong>当前镜像是基于哪个镜像的</strong> <code>第一个指令必须是FROM</code></td></tr><tr><td>MAINTAINER</td><td>镜像维护者的姓名和邮箱地址</td></tr><tr><td><strong>RUN</strong></td><td><strong>构建镜像时需要运行的指令</strong></td></tr><tr><td><strong>EXPOSE</strong></td><td><strong>当前容器对外暴露出的端口号</strong></td></tr><tr><td><strong>WORKDIR</strong></td><td><strong>指定在创建容器后，终端默认登录进来的工作目录，一个落脚点</strong></td></tr><tr><td><strong>ENV</strong></td><td><strong>用来在构建镜像过程中设置环境变量</strong></td></tr><tr><td><strong>ADD</strong></td><td><strong>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar包</strong></td></tr><tr><td><strong>COPY</strong></td><td><strong>类似于ADD，拷贝文件和目录到镜像中<br/>将从构建上下文目录中&lt;原路径&gt;的文件&#x2F;目录复制到新的一层的镜像内的&lt;目标路径&gt;位置</strong></td></tr><tr><td><strong>VOLUME</strong></td><td><strong>容器数据卷，用于数据保存和持久化工作</strong></td></tr><tr><td><strong>CMD</strong></td><td><strong>指定一个容器启动时要运行的命令<br/>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</strong></td></tr><tr><td><strong>ENTRYPOINT</strong></td><td><strong>指定一个容器启动时要运行的命令<br/>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及其参数</strong></td></tr></tbody></table><h4 id="9-3-1-FROM-命令"><a href="#9-3-1-FROM-命令" class="headerlink" title="9.3.1 FROM 命令"></a>9.3.1 FROM 命令</h4><ul><li><p>基于那个镜像进行构建新的镜像,在构建时会自动从docker hub拉取base镜像 必须作为Dockerfile的第一个指令出现</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span>  &lt;image&gt;<br><span class="hljs-keyword">FROM</span>  &lt;image&gt;[:&lt;tag&gt;]     使用版本不写为latest<br><span class="hljs-keyword">FROM</span>  &lt;image&gt;[@&lt;digest&gt;]  使用摘要<br></code></pre></td></tr></table></figure></li></ul><h4 id="9-3-2-MAINTAINER-命令"><a href="#9-3-2-MAINTAINER-命令" class="headerlink" title="9.3.2 MAINTAINER  命令"></a>9.3.2 MAINTAINER  命令</h4><ul><li><p>镜像维护者的姓名和邮箱地址[废弃]</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">MAINTAINER</span> &lt;name&gt;<br></code></pre></td></tr></table></figure></li></ul><h4 id="9-3-3-RUN-命令"><a href="#9-3-3-RUN-命令" class="headerlink" title="9.3.3 RUN 命令"></a>9.3.3 RUN 命令</h4><ul><li><p>RUN指令将在当前映像之上的新层中执行任何命令并提交结果。生成的提交映像将用于Dockerfile中的下一步</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">RUN</span><span class="language-bash"> &lt;<span class="hljs-built_in">command</span>&gt; (shell form, the <span class="hljs-built_in">command</span> is run <span class="hljs-keyword">in</span> a shell, <span class="hljs-built_in">which</span> by default is /bin/sh -c on Linux or cmd /S /C on Windows)</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">echo</span> hello</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>] (<span class="hljs-built_in">exec</span> form)</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> [<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;echo hello&quot;</span>]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="9-3-4-EXPOSE-命令"><a href="#9-3-4-EXPOSE-命令" class="headerlink" title="9.3.4 EXPOSE 命令"></a>9.3.4 EXPOSE 命令</h4><ul><li><p>用来指定构建的镜像在运行为容器时对外暴露的端口</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span>/tcp  如果没有显示指定则默认暴露都是tcp<br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span>/udp<br></code></pre></td></tr></table></figure></li></ul><h4 id="9-3-5-CMD-命令"><a href="#9-3-5-CMD-命令" class="headerlink" title="9.3.5 CMD 命令"></a>9.3.5 CMD 命令</h4><ul><li><p>用来为启动的容器指定执行的命令,在Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</p></li><li><p>注意: <strong>Dockerfile中只能有一条CMD指令。如果列出多个命令，则只有最后一个命令才会生效。</strong></p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>,<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>] (<span class="hljs-built_in">exec</span> form, this is the preferred form)</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>] (as default parameters to ENTRYPOINT)</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2 (shell form)</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="9-3-6-WORKDIR-命令"><a href="#9-3-6-WORKDIR-命令" class="headerlink" title="9.3.6 WORKDIR 命令"></a>9.3.6 WORKDIR 命令</h4><ul><li><p>用来为Dockerfile中的任何RUN、CMD、ENTRYPOINT、COPY和ADD指令设置工作目录。如果WORKDIR不存在，即使它没有在任何后续Dockerfile指令中使用，它也将被创建。</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /path/to/workdir</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /a</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> b</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> c</span><br>`注意:<span class="hljs-keyword">WORKDIR</span><span class="language-bash">指令可以在Dockerfile中多次使用。如果提供了相对路径，则该路径将与先前WORKDIR指令的路径相对`</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="9-3-7-ENV-命令"><a href="#9-3-7-ENV-命令" class="headerlink" title="9.3.7 ENV 命令"></a>9.3.7 ENV 命令</h4><ul><li><p>用来为构建镜像设置环境变量。这个值将出现在构建阶段中所有后续指令的环境中。</p></li><li><p>语法：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ENV</span> &lt;key&gt; &lt;value&gt;<br><span class="hljs-keyword">ENV</span> &lt;key&gt;=&lt;value&gt; ...<br></code></pre></td></tr></table></figure></li></ul><h4 id="9-3-8-ADD-命令"><a href="#9-3-8-ADD-命令" class="headerlink" title="9.3.8 ADD 命令"></a>9.3.8 ADD 命令</h4><ul><li><p>用来从context上下文复制新文件、目录或远程文件url，并将它们添加到位于指定路径的映像文件系统中。</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ADD</span><span class="language-bash"> hom* /mydir/       通配符添加多个文件</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> hom?.txt /mydir/   通配符添加</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> test.txt relativeDir/  可以指定相对路径</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> test.txt /absoluteDir/ 也可以指定绝对路径</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> url </span><br></code></pre></td></tr></table></figure></li></ul><h4 id="9-3-9-COPY-命令"><a href="#9-3-9-COPY-命令" class="headerlink" title="9.3.9 COPY 命令"></a>9.3.9 COPY 命令</h4><ul><li><p>用来将context目录中指定文件复制到镜像的指定目录中</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">COPY</span><span class="language-bash"> src dest</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> [<span class="hljs-string">&quot;&lt;src&gt;&quot;</span>,... <span class="hljs-string">&quot;&lt;dest&gt;&quot;</span>]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="9-3-10-VOLUME-命令"><a href="#9-3-10-VOLUME-命令" class="headerlink" title="9.3.10 VOLUME 命令"></a>9.3.10 VOLUME 命令</h4><ul><li><p>用来定义容器运行时可以挂在到宿主机的目录</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">VOLUME</span><span class="language-bash"> [<span class="hljs-string">&quot;/data&quot;</span>]</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="9-3-11-ENTRYPOINT命令"><a href="#9-3-11-ENTRYPOINT命令" class="headerlink" title="9.3.11 ENTRYPOINT命令"></a>9.3.11 ENTRYPOINT命令</h4><ul><li><p>用来指定容器启动时执行命令和CMD类似</p></li><li><p>语法:</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">  [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>]<br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2</span><br></code></pre></td></tr></table></figure><p>ENTRYPOINT指令，往往用于设置容器启动后的<strong>第一个命令</strong>，这对一个容器来说往往是固定的。<br>CMD指令，往往用于设置容器启动的第一个命令的<strong>默认参数</strong>，这对一个容器来说可以是变化的。</p></li></ul><h4 id="9-3-11-ENTRYPOINT命令-1"><a href="#9-3-11-ENTRYPOINT命令-1" class="headerlink" title="9.3.11 ENTRYPOINT命令"></a>9.3.11 ENTRYPOINT命令</h4><h3 id="9-4-Dockerfile构建springboot项目部署"><a href="#9-4-Dockerfile构建springboot项目部署" class="headerlink" title="9.4 Dockerfile构建springboot项目部署"></a>9.4 Dockerfile构建springboot项目部署</h3><h5 id="1-准备springboot可运行项目"><a href="#1-准备springboot可运行项目" class="headerlink" title="1.准备springboot可运行项目"></a>1.准备springboot可运行项目</h5><p><img src="/images/20211212/image-20200605172151266.png" alt="image-20200605172151266"></p><h5 id="2-将可运行项目放入linux虚拟机中"><a href="#2-将可运行项目放入linux虚拟机中" class="headerlink" title="2.将可运行项目放入linux虚拟机中"></a>2.将可运行项目放入linux虚拟机中</h5><p><img src="/images/20211212/image-20200605172340380.png" alt="image-20200605172340380"></p><h5 id="3-编写Dockerfile"><a href="#3-编写Dockerfile" class="headerlink" title="3.编写Dockerfile"></a>3.编写Dockerfile</h5><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> openjdk:<span class="hljs-number">8</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /ems</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> ems.jar /ems</span><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8989</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="hljs-string">&quot;java&quot;</span>,<span class="hljs-string">&quot;-jar&quot;</span>]</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;ems.jar&quot;</span>]</span><br></code></pre></td></tr></table></figure><h5 id="4-构建镜像"><a href="#4-构建镜像" class="headerlink" title="4.构建镜像"></a>4.构建镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ems]# docker build -t ems .<br></code></pre></td></tr></table></figure><h5 id="5-运行镜像"><a href="#5-运行镜像" class="headerlink" title="5.运行镜像"></a>5.运行镜像</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost ems]# docker run -p 8989:8989 ems<br></code></pre></td></tr></table></figure><h5 id="6-访问项目"><a href="#6-访问项目" class="headerlink" title="6.访问项目"></a>6.访问项目</h5><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">http://10.15.0.8:8989/ems/login.html<br></code></pre></td></tr></table></figure><p><img src="/images/20211212/image-20200605173141636.png" alt="image-20200605173141636"></p><hr><h2 id="10-高级网络配置"><a href="#10-高级网络配置" class="headerlink" title="10.高级网络配置"></a>10.高级网络配置</h2><h3 id="10-1-说明"><a href="#10-1-说明" class="headerlink" title="10.1 说明"></a>10.1 说明</h3><p>当 Docker 启动时，会自动在主机上创建一个 <code>docker0</code> 虚拟网桥，实际上是 Linux 的一个 bridge，可以理解为一个软件交换机。它会在挂载到它的网口之间进行转发。</p><p>同时，Docker 随机分配一个本地未占用的私有网段（在 <a href="https://tools.ietf.org/html/rfc1918">RFC1918</a> 中定义）中的一个地址给 <code>docker0</code> 接口。比如典型的 <code>172.17.42.1</code>，掩码为 <code>255.255.0.0</code>。此后启动的容器内的网口也会自动分配一个同一网段（<code>172.17.0.0/16</code>）的地址。</p><p>当创建一个 Docker 容器的时候，同时会创建了一对 <code>veth pair</code> 接口（当数据包发送到一个接口时，另外一个接口也可以收到相同的数据包）。这对接口一端在容器内，即 <code>eth0</code>；另一端在本地并被挂载到 <code>docker0</code> 网桥，名称以 <code>veth</code> 开头（例如 <code>vethAQI2QT</code>）。通过这种方式，主机可以跟容器通信，容器之间也可以相互通信。Docker 就创建了在主机和所有容器之间一个虚拟共享网络。</p><p><img src="/images/20211212/image-20201125105847896.png" alt="image-20201125105847896"></p><h3 id="10-2-查看网络信息"><a href="#10-2-查看网络信息" class="headerlink" title="10.2 查看网络信息"></a>10.2 查看网络信息</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># docker network ls</span><br></code></pre></td></tr></table></figure><h3 id="10-3-创建一个网桥"><a href="#10-3-创建一个网桥" class="headerlink" title="10.3 创建一个网桥"></a>10.3 创建一个网桥</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># docker network create -d bridge 网桥名称</span><br></code></pre></td></tr></table></figure><h3 id="10-4-删除一个网桥"><a href="#10-4-删除一个网桥" class="headerlink" title="10.4 删除一个网桥"></a>10.4 删除一个网桥</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># docker network rm 网桥名称</span><br></code></pre></td></tr></table></figure><h3 id="10-5-容器之前使用网络通信"><a href="#10-5-容器之前使用网络通信" class="headerlink" title="10.5 容器之前使用网络通信"></a>10.5 容器之前使用网络通信</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.查询当前网络配置</span><br><span class="hljs-bullet">-</span> docker network ls<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">NETWORK ID          NAME                DRIVER              SCOPE<br>8e424e5936b7        bridge              bridge              local<br>17d974db02da        docker_gwbridge     bridge              local<br>d6c326e433f7        host                host                local<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 2.创建桥接网络</span><br><span class="hljs-bullet">-</span> docker network create -d bridge info<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos ~]# docker network create -d bridge info<br>6e4aaebff79b1df43a064e0e8fdab08f52d64ce34db78dd5184ce7aaaf550a2f<br>[root@centos ~]# docker network ls<br>NETWORK ID          NAME                DRIVER              SCOPE<br>8e424e5936b7        bridge              bridge              local<br>17d974db02da        docker_gwbridge     bridge              local<br>d6c326e433f7        host                host                local<br>6e4aaebff79b        info                bridge              local<br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 3.启动容器指定使用网桥</span><br><span class="hljs-bullet">-</span> docker run -d -p 8890:80 --name nginx001 --network info nginx <br><span class="hljs-bullet">-</span> docker run -d -p 8891:80 --name nginx002 --network info nginx <br><span class="hljs-code">`注意:一旦指定网桥后--name指定名字就是主机名,多个容器指定在同一个网桥时,可以在任意一个容器中使用主机名与容器进行互通`</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos ~]# docker run -d -p 8890:80 --name nginx001 --network info nginx <br>c315bcc94e9ddaa36eb6c6f16ca51592b1ac8bf1ecfe9d8f01d892f3f10825fe<br>[root@centos ~]# docker run -d -p 8891:80 --name nginx002 --network info nginx<br>f8682db35dd7fb4395f90edb38df7cad71bbfaba71b6a4c6e2a3a525cb73c2a5<br>[root@centos ~]# docker ps<br>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES<br>f8682db35dd7        nginx               &quot;/docker-entrypoint.…&quot;   3 seconds ago       Up 2 seconds        0.0.0.0:8891-&gt;80/tcp   nginx002<br>c315bcc94e9d        nginx               &quot;/docker-entrypoint.…&quot;   7 minutes ago       Up 7 minutes        0.0.0.0:8890-&gt;80/tcp   nginx001<br>b63169d43792        mysql:5.7.19        &quot;docker-entrypoint.s…&quot;   7 minutes ago       Up 7 minutes        3306/tcp               mysql_mysql.1.s75qe5kkpwwttyf0wrjvd2cda<br>[root@centos ~]# docker exec -it f8682db35dd7 /bin/bash<br>root@f8682db35dd7:/# curl http://nginx001<br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;Welcome to nginx!&lt;/title&gt;<br>.....<br></code></pre></td></tr></table></figure><hr><h2 id="11-高级数据卷配置"><a href="#11-高级数据卷配置" class="headerlink" title="11.高级数据卷配置"></a>11.高级数据卷配置</h2><h3 id="11-1-说明"><a href="#11-1-说明" class="headerlink" title="11.1 说明"></a>11.1 说明</h3><p><code>数据卷</code> 是一个可供一个或多个容器使用的特殊目录，它绕过 UFS，可以提供很多有用的特性：</p><ul><li><code>数据卷</code> 可以在容器之间共享和重用</li><li>对 <code>数据卷</code> 的修改会立马生效</li><li>对 <code>数据卷</code> 的更新，不会影响镜像</li><li><code>数据卷</code> 默认会一直存在，即使容器被删除</li></ul><blockquote><p>注意：<code>数据卷</code> 的使用，类似于 Linux 下对目录或文件进行 mount，镜像中的被指定为挂载点的目录中的文件会复制到数据卷中（仅数据卷为空时会复制）。</p></blockquote><h3 id="11-2-创建数据卷"><a href="#11-2-创建数据卷" class="headerlink" title="11.2 创建数据卷"></a>11.2 创建数据卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos ~]# docker volume create my-vol<br>my-vol<br></code></pre></td></tr></table></figure><h3 id="11-3-查看数据卷"><a href="#11-3-查看数据卷" class="headerlink" title="11.3 查看数据卷"></a>11.3 查看数据卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos ~]# docker volume inspect my-vol       <br>[<br>    &#123;<br>        &quot;CreatedAt&quot;: &quot;2020-11-25T11:43:56+08:00&quot;,<br>        &quot;Driver&quot;: &quot;local&quot;,<br>        &quot;Labels&quot;: &#123;&#125;,<br>        &quot;Mountpoint&quot;: &quot;/var/lib/docker/volumes/my-vol/_data&quot;,<br>        &quot;Name&quot;: &quot;my-vol&quot;,<br>        &quot;Options&quot;: &#123;&#125;,<br>        &quot;Scope&quot;: &quot;local&quot;<br>    &#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="11-4-挂载数据卷"><a href="#11-4-挂载数据卷" class="headerlink" title="11.4 挂载数据卷"></a>11.4 挂载数据卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@centos ~]# docker run -d -P --name web  -v my-vol:/usr/share/nginx/html  nginx<br>[root@centos ~]# docker inspect web<br>&quot;Mounts&quot;: [<br>            &#123;<br>                &quot;Type&quot;: &quot;volume&quot;,<br>                &quot;Name&quot;: &quot;my-vol&quot;,<br>                &quot;Source&quot;: &quot;/var/lib/docker/volumes/my-vol/_data&quot;,<br>                &quot;Destination&quot;: &quot;/usr/share/nginx/html&quot;,<br>                &quot;Driver&quot;: &quot;local&quot;,<br>                &quot;Mode&quot;: &quot;z&quot;,<br>                &quot;RW&quot;: true,<br>                &quot;Propagation&quot;: &quot;&quot;<br>            &#125;<br>        ],<br></code></pre></td></tr></table></figure><h3 id="11-5-删除数据卷"><a href="#11-5-删除数据卷" class="headerlink" title="11.5 删除数据卷"></a>11.5 删除数据卷</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker volume rm my-vol<br></code></pre></td></tr></table></figure><hr><h2 id="12-Docker-Compose"><a href="#12-Docker-Compose" class="headerlink" title="12.Docker Compose"></a>12.Docker Compose</h2><h3 id="12-1-简介"><a href="#12-1-简介" class="headerlink" title="12.1 简介"></a>12.1 简介</h3><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 <code>OpenStack</code> 中的 <code>Heat</code> 十分类似。</p><p>其代码目前在 <a href="https://github.com/docker/compose">https://github.com/docker/compose</a> 上开源。</p><p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p><p>通过第一部分中的介绍，我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p><code>Compose</code> 中有两个重要的概念：</p><ul><li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li></ul><p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p><h3 id="12-2-安装与卸载"><a href="#12-2-安装与卸载" class="headerlink" title="12.2 安装与卸载"></a>12.2 安装与卸载</h3><h6 id="1-linux"><a href="#1-linux" class="headerlink" title="1.linux"></a>1.linux</h6><ul><li>在 Linux 上的也安装十分简单，从 官方 GitHub Release 处直接下载编译好的二进制文件即可。例如，在 Linux 64 位系统上直接下载对应的二进制包。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo curl -L https://github.com/docker/compose/releases/download/1.25.5/docker-compose-`<span class="hljs-built_in">uname</span> -s`-`<span class="hljs-built_in">uname</span> -m` &gt; /usr/local/bin/docker-compose<br>$ sudo <span class="hljs-built_in">chmod</span> +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure><h6 id="2-macos、window"><a href="#2-macos、window" class="headerlink" title="2.macos、window"></a>2.macos、window</h6><ul><li>Compose 可以通过 Python 的包管理工具 pip 进行安装，也可以直接下载编译好的二进制文件使用，甚至能够直接在 Docker 容器中运行。<code>Docker Desktop for Mac/Windows 自带 docker-compose 二进制文件，安装 Docker 之后可以直接使用</code>。</li></ul><h6 id="3-bash命令补全"><a href="#3-bash命令补全" class="headerlink" title="3.bash命令补全"></a>3.bash命令补全</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">curl -L https://raw.githubusercontent.com/docker/compose/1.25.5/contrib/completion/bash/docker-compose &gt; /etc/bash_completion.d/docker-compose</span><br></code></pre></td></tr></table></figure><h6 id="4-卸载"><a href="#4-卸载" class="headerlink" title="4.卸载"></a>4.卸载</h6><ul><li>如果是二进制包方式安装的，删除二进制文件即可。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">sudo <span class="hljs-built_in">rm</span> /usr/local/bin/docker-compose</span><br></code></pre></td></tr></table></figure><h6 id="5-测试安装成功"><a href="#5-测试安装成功" class="headerlink" title="5.测试安装成功"></a>5.测试安装成功</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">docker-compose --version</span><br> docker-compose version 1.25.5, build 4667896b<br></code></pre></td></tr></table></figure><h3 id="12-3-docker-compose使用"><a href="#12-3-docker-compose使用" class="headerlink" title="12.3 docker compose使用"></a>12.3 docker compose使用</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 1.相关概念</span><br></code></pre></td></tr></table></figure><p>首先介绍几个术语。</p><ul><li>服务 (<code>service</code>)：一个应用容器，实际上可以运行多个相同镜像的实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元。∂一个项目可以由多个服务（容器）关联而成，<code>Compose</code> 面向项目进行管理。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 2.场景</span><br></code></pre></td></tr></table></figure><p>最常见的项目是 web 网站，该项目应该包含 web 应用和缓存。</p><ul><li>springboot应用</li><li>mysql服务</li><li>redis服务</li><li>elasticsearch服务</li><li>…….</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 3.docker-compose模板</span><br><span class="hljs-bullet">-</span> 参考文档:https://docker<span class="hljs-emphasis">_practice.gitee.io/zh-cn/compose/compose_</span>file.html<br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3.0&quot;</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">mysqldb:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:5.7.19</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3306:3306&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/root/mysql/conf:/etc/mysql/conf.d</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/root/mysql/logs:/logs</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/root/mysql/data:/var/lib/mysql</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">MYSQL_ROOT_PASSWORD:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ems</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis:4.0.14</span><br>    <span class="hljs-attr">container_name:</span> <span class="hljs-string">redis</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;6379:6379&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">ems</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/root/redis/data:/data</span><br>    <span class="hljs-attr">command:</span> <span class="hljs-string">redis-server</span><br>    <br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">ems:</span><br></code></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-section"># 4.通过docker-compose运行一组容器</span><br><span class="hljs-bullet">-</span> 参考文档:https://docker<span class="hljs-emphasis">_practice.gitee.io/zh-cn/compose/commands.html</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@centos ~]<span class="hljs-comment"># docker-compose up    //前台启动一组服务</span><br>[root@centos ~]<span class="hljs-comment"># docker-compose up -d //后台启动一组服务</span><br></code></pre></td></tr></table></figure><hr><h3 id="12-4-docker-compose-模板文件"><a href="#12-4-docker-compose-模板文件" class="headerlink" title="12.4 docker-compose 模板文件"></a>12.4 docker-compose 模板文件</h3><p>模板文件是使用 <code>Compose</code> 的核心，涉及到的指令关键字也比较多。但大家不用担心，这里面大部分指令跟 <code>docker run</code> 相关参数的含义都是类似的。</p><p>默认的模板文件名称为 <code>docker-compose.yml</code>，格式为 YAML 格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">webapp:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">examples/web</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;/data&quot;</span><br></code></pre></td></tr></table></figure><p>注意每个服务都必须通过 <code>image</code> 指令指定镜像或 <code>build</code> 指令（需要 Dockerfile）等来自动构建生成镜像。</p><p>如果使用 <code>build</code> 指令，在 <code>Dockerfile</code> 中设置的选项(例如：<code>CMD</code>, <code>EXPOSE</code>, <code>VOLUME</code>, <code>ENV</code> 等) 将会自动被获取，无需在 <code>docker-compose.yml</code> 中重复设置。</p><p>下面分别介绍各个指令的用法。</p><h4 id="build"><a href="#build" class="headerlink" title="build"></a><code>build</code></h4><p>指定 <code>Dockerfile</code> 所在文件夹的路径（可以是绝对路径，或者相对 docker-compose.yml 文件的路径）。 <code>Compose</code> 将会利用它自动构建这个镜像，然后使用这个镜像。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br><br>  <span class="hljs-attr">webapp:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">./dir</span><br></code></pre></td></tr></table></figure><p>你也可以使用 <code>context</code> 指令指定 <code>Dockerfile</code> 所在文件夹的路径。</p><p>使用 <code>dockerfile</code> 指令指定 <code>Dockerfile</code> 文件名。</p><p>使用 <code>arg</code> 指令指定构建镜像时的变量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-attr">services:</span><br><br>  <span class="hljs-attr">webapp:</span><br>    <span class="hljs-attr">build:</span><br>      <span class="hljs-attr">context:</span> <span class="hljs-string">./dir</span><br>      <span class="hljs-attr">dockerfile:</span> <span class="hljs-string">Dockerfile-alternate</span><br>      <span class="hljs-attr">args:</span><br>        <span class="hljs-attr">buildno:</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="command"><a href="#command" class="headerlink" title="command"></a><code>command</code></h4><p>覆盖容器启动后默认执行的命令。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">command:</span> <span class="hljs-string">echo</span> <span class="hljs-string">&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><h4 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a><code>container_name</code></h4><p>指定容器名称。默认将会使用 <code>项目名称_服务名称_序号</code> 这样的格式。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">container_name:</span> <span class="hljs-string">docker-web-container</span><br></code></pre></td></tr></table></figure><blockquote><p>注意: 指定容器名称后，该服务将无法进行扩展（scale），因为 Docker 不允许多个容器具有相同的名称。</p></blockquote><h4 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a><code>depends_on</code></h4><p>解决容器的依赖、启动先后的问题。以下例子中会先启动 <code>redis</code> <code>db</code> 再启动 <code>web</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">web:</span><br>    <span class="hljs-attr">build:</span> <span class="hljs-string">.</span><br>    <span class="hljs-attr">depends_on:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">db</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">redis</span><br><br>  <span class="hljs-attr">redis:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">redis</span><br><br>  <span class="hljs-attr">db:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">postgres</span><br></code></pre></td></tr></table></figure><blockquote><p>注意：<code>web</code> 服务不会等待 <code>redis</code> <code>db</code> 「完全启动」之后才启动。</p></blockquote><h4 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a><code>env_file</code></h4><p>从文件中获取环境变量，可以为单独的文件路径或列表。</p><p>如果通过 <code>docker-compose -f FILE</code> 方式来指定 Compose 模板文件，则 <code>env_file</code> 中变量的路径会基于模板文件路径。</p><p>如果有变量名称与 <code>environment</code> 指令冲突，则按照惯例，以后者为准。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">env_file: .<span class="hljs-built_in">env</span><br><br>env_file:<br>  - ./common.env<br>  - ./apps/web.env<br>  - /opt/secrets.env<br></code></pre></td></tr></table></figure><p>环境变量文件中每一行必须符合格式，支持 <code>#</code> 开头的注释行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># common.env: Set development environment</span><br>PROG_ENV=development<br></code></pre></td></tr></table></figure><h4 id="environment"><a href="#environment" class="headerlink" title="environment"></a><code>environment</code></h4><p>设置环境变量。你可以使用数组或字典两种格式。</p><p>只给定名称的变量会自动获取运行 Compose 主机上对应变量的值，可以用来防止泄露不必要的数据。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">environment:</span><br>  <span class="hljs-attr">RACK_ENV:</span> <span class="hljs-string">development</span><br>  <span class="hljs-attr">SESSION_SECRET:</span><br><br><span class="hljs-attr">environment:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">RACK_ENV=development</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">SESSION_SECRET</span><br></code></pre></td></tr></table></figure><p>如果变量名称或者值中用到 <code>true|false，yes|no</code> 等表达 <a href="https://yaml.org/type/bool.html">布尔</a> 含义的词汇，最好放到引号里，避免 YAML 自动解析某些内容为对应的布尔语义。这些特定词汇，包括</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">y|Y|<span class="hljs-built_in">yes</span>|Yes|YES|n|N|no|No|NO|<span class="hljs-literal">true</span>|True|TRUE|<span class="hljs-literal">false</span>|False|FALSE|on|On|ON|off|Off|OFF<br></code></pre></td></tr></table></figure><h4 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a><code>healthcheck</code></h4><p>通过命令检查容器是否健康运行。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">healthcheck:</span><br>  <span class="hljs-attr">test:</span> [<span class="hljs-string">&quot;CMD&quot;</span>, <span class="hljs-string">&quot;curl&quot;</span>, <span class="hljs-string">&quot;-f&quot;</span>, <span class="hljs-string">&quot;http://localhost&quot;</span>]<br>  <span class="hljs-attr">interval:</span> <span class="hljs-string">1m30s</span><br>  <span class="hljs-attr">timeout:</span> <span class="hljs-string">10s</span><br>  <span class="hljs-attr">retries:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><h4 id="image"><a href="#image" class="headerlink" title="image"></a><code>image</code></h4><p>指定为镜像名称或镜像 ID。如果镜像在本地不存在，<code>Compose</code> 将会尝试拉取这个镜像。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">image:</span> <span class="hljs-string">ubuntu</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">orchardup/postgresql</span><br><span class="hljs-attr">image:</span> <span class="hljs-string">a4bc65fd</span><br></code></pre></td></tr></table></figure><h4 id="networks"><a href="#networks" class="headerlink" title="networks"></a><code>networks</code></h4><p>配置容器连接的网络。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><span class="hljs-attr">services:</span><br><br>  <span class="hljs-attr">some-service:</span><br>    <span class="hljs-attr">networks:</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">some-network</span><br>     <span class="hljs-bullet">-</span> <span class="hljs-string">other-network</span><br><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">some-network:</span><br>  <span class="hljs-attr">other-network:</span><br></code></pre></td></tr></table></figure><h4 id="ports"><a href="#ports" class="headerlink" title="ports"></a><code>ports</code></h4><p>暴露端口信息。</p><p>使用宿主端口：容器端口 <code>(HOST:CONTAINER)</code> 格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ports:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;3000&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;8000:8000&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;49100:22&quot;</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;127.0.0.1:8001:8001&quot;</span><br></code></pre></td></tr></table></figure><p><em>注意：当使用 <code>HOST:CONTAINER</code> 格式来映射端口时，如果你使用的容器端口小于 60 并且没放到引号里，可能会得到错误结果，因为 <code>YAML</code> 会自动解析 <code>xx:yy</code> 这种数字格式为 60 进制。为避免出现这种问题，建议数字串都采用引号包括起来的字符串格式。</em></p><h4 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a><code>sysctls</code></h4><p>配置容器内核参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sysctls:</span><br>  <span class="hljs-attr">net.core.somaxconn:</span> <span class="hljs-number">1024</span><br>  <span class="hljs-attr">net.ipv4.tcp_syncookies:</span> <span class="hljs-number">0</span><br><br><span class="hljs-attr">sysctls:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">net.core.somaxconn=1024</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">net.ipv4.tcp_syncookies=0</span><br></code></pre></td></tr></table></figure><h4 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a><code>ulimits</code></h4><p>指定容器的 ulimits 限制值。</p><p>例如，指定最大进程数为 65535，指定文件句柄数为 20000（软限制，应用可以随时修改，不能超过硬限制） 和 40000（系统硬限制，只能 root 用户提高）。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ulimits:</span><br>  <span class="hljs-attr">nproc:</span> <span class="hljs-number">65535</span><br>  <span class="hljs-attr">nofile:</span><br>    <span class="hljs-attr">soft:</span> <span class="hljs-number">20000</span><br>    <span class="hljs-attr">hard:</span> <span class="hljs-number">40000</span><br></code></pre></td></tr></table></figure><h4 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a><code>volumes</code></h4><p>数据卷所挂载路径设置。可以设置为宿主机路径(<code>HOST:CONTAINER</code>)或者数据卷名称(<code>VOLUME:CONTAINER</code>)，并且可以设置访问模式 （<code>HOST:CONTAINER:ro</code>）。</p><p>该指令中路径支持相对路径。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">volumes:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">/var/lib/mysql</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">cache/:/tmp/cache</span><br> <span class="hljs-bullet">-</span> <span class="hljs-string">~/configs:/etc/configs/:ro</span><br></code></pre></td></tr></table></figure><p>如果路径为数据卷名称，必须在文件中配置数据卷。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&quot;3&quot;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">my_src:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">mysql:8.0</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">mysql_data:/var/lib/mysql</span><br><br><span class="hljs-attr">volumes:</span><br>  <span class="hljs-attr">mysql_data:</span><br></code></pre></td></tr></table></figure><hr><h3 id="12-5-docker-compose-常用命令"><a href="#12-5-docker-compose-常用命令" class="headerlink" title="12.5 docker-compose 常用命令"></a>12.5 docker-compose 常用命令</h3><h5 id="1-命令对象与格式"><a href="#1-命令对象与格式" class="headerlink" title="1. 命令对象与格式"></a>1. 命令对象与格式</h5><p>对于 Compose 来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务或者容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会受到命令影响。</p><p>执行 <code>docker-compose [COMMAND] --help</code> 或者 <code>docker-compose help [COMMAND]</code> 可以查看具体某个命令的使用格式。</p><p><code>docker-compose</code> 命令的基本的使用格式是</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]<br></code></pre></td></tr></table></figure><h5 id="2-命令选项"><a href="#2-命令选项" class="headerlink" title="2. 命令选项"></a>2. 命令选项</h5><ul><li><code>-f, --file FILE</code> 指定使用的 Compose 模板文件，默认为 <code>docker-compose.yml</code>，可以多次指定。</li><li><code>-p, --project-name NAME</code> 指定项目名称，默认将使用所在目录名称作为项目名。</li><li><code>--x-networking</code> 使用 Docker 的可拔插网络后端特性</li><li><code>--x-network-driver DRIVER</code> 指定网络后端的驱动，默认为 <code>bridge</code></li><li><code>--verbose</code> 输出更多调试信息。</li><li><code>-v, --version</code> 打印版本并退出。</li></ul><h5 id="3-命令使用说明"><a href="#3-命令使用说明" class="headerlink" title="3.命令使用说明"></a>3.命令使用说明</h5><h5 id="up"><a href="#up" class="headerlink" title="up"></a><code>up</code></h5><p>格式为 <code>docker-compose up [options] [SERVICE...]</code>。</p><ul><li><p>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并关联服务相关容器的一系列操作。</p></li><li><p>链接的服务都将会被自动启动，除非已经处于运行状态。</p></li><li><p>可以说，大部分时候都可以直接通过该命令来启动一个项目。</p></li><li><p>默认情况，<code>docker-compose up</code> 启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便进行调试。</p></li><li><p>当通过 <code>Ctrl-C</code> 停止命令时，所有容器将会停止。</p></li><li><p>如果使用 <code>docker-compose up -d</code>，将会在后台启动并运行所有的容器。一般推荐生产环境下使用该选项。</p></li><li><p>默认情况，如果服务容器已经存在，<code>docker-compose up</code> 将会尝试停止容器，然后重新创建（保持使用 <code>volumes-from</code> 挂载的卷），以保证新启动的服务匹配 <code>docker-compose.yml</code> 文件的最新内容</p></li></ul><hr><h5 id="down"><a href="#down" class="headerlink" title="down"></a><code>down</code></h5><ul><li>此命令将会停止 <code>up</code> 命令所启动的容器，并移除网络</li></ul><hr><h5 id="exec"><a href="#exec" class="headerlink" title="exec"></a><code>exec</code></h5><ul><li>进入指定的容器。</li></ul><hr><h5 id="ps"><a href="#ps" class="headerlink" title="ps"></a><code>ps</code></h5><p>格式为 <code>docker-compose ps [options] [SERVICE...]</code>。</p><p>列出项目中目前的所有容器。</p><p>选项：</p><ul><li><code>-q</code> 只打印容器的 ID 信息。</li></ul><hr><h5 id="restart"><a href="#restart" class="headerlink" title="restart"></a><code>restart</code></h5><p>格式为 <code>docker-compose restart [options] [SERVICE...]</code>。</p><p>重启项目中的服务。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 指定重启前停止容器的超时（默认为 10 秒）。</li></ul><hr><h5 id="rm"><a href="#rm" class="headerlink" title="rm"></a><code>rm</code></h5><p>格式为 <code>docker-compose rm [options] [SERVICE...]</code>。</p><p>删除所有（停止状态的）服务容器。推荐先执行 <code>docker-compose stop</code> 命令来停止容器。</p><p>选项：</p><ul><li><code>-f, --force</code> 强制直接删除，包括非停止状态的容器。一般尽量不要使用该选项。</li><li><code>-v</code> 删除容器所挂载的数据卷。</li></ul><hr><h5 id="start"><a href="#start" class="headerlink" title="start"></a><code>start</code></h5><p>格式为 <code>docker-compose start [SERVICE...]</code>。</p><p>启动已经存在的服务容器。</p><hr><h5 id="stop"><a href="#stop" class="headerlink" title="stop"></a><code>stop</code></h5><p>格式为 <code>docker-compose stop [options] [SERVICE...]</code>。</p><p>停止已经处于运行状态的容器，但不删除它。通过 <code>docker-compose start</code> 可以再次启动这些容器。</p><p>选项：</p><ul><li><code>-t, --timeout TIMEOUT</code> 停止容器时候的超时（默认为 10 秒）。</li></ul><hr><h5 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h5><p>查看各个服务容器内运行的进程。</p><hr><h5 id="unpause"><a href="#unpause" class="headerlink" title="unpause"></a><code>unpause</code></h5><p>格式为 <code>docker-compose unpause [SERVICE...]</code>。</p><p>恢复处于暂停状态中的服务。</p><hr><h2 id="13-docker可视化工具"><a href="#13-docker可视化工具" class="headerlink" title="13.docker可视化工具"></a>13.docker可视化工具</h2><h4 id="13-1-安装Portainer"><a href="#13-1-安装Portainer" class="headerlink" title="13.1 安装Portainer"></a>13.1 安装Portainer</h4><p>官方安装说明：<a href="http://www.yunweipai.com/go?_=8fe4813824aHR0cHM6Ly93d3cucG9ydGFpbmVyLmlvL2luc3RhbGxhdGlvbi8=">https://www.portainer.io/installation/</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@ubuntu1804 ~]#docker pull  portainer/portainer<br><br>[root@ubuntu1804 ~]#docker volume create portainer_data<br>portainer_data<br>[root@ubuntu1804 ~]#docker run -d -p 8000:8000 -p 9000:9000 --name=portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer<br>20db26b67b791648c2ef6aee444a5226a9c897ebcf0160050e722dbf4a4906e3<br>[root@ubuntu1804 ~]#docker ps <br>CONTAINER ID        IMAGE                 COMMAND             CREATED             STATUS              PORTS                                            NAMES<br>20db26b67b79        portainer/portainer   &quot;/portainer&quot;        5 seconds ago       Up 4 seconds        0.0.0.0:8000-&gt;8000/tcp, 0.0.0.0:9000-&gt;9000/tcp   portainer<br></code></pre></td></tr></table></figure><h4 id="13-2-登录和使用Portainer"><a href="#13-2-登录和使用Portainer" class="headerlink" title="13.2 登录和使用Portainer"></a>13.2 登录和使用Portainer</h4><blockquote><p>用浏览器访问：<code>http://localhost:9000</code></p></blockquote><p><img src="/images/20211212/image-20201223231707738.png" alt="image-20201223231707738"></p><hr><h1 id="更换docker源"><a href="#更换docker源" class="headerlink" title="更换docker源"></a>更换docker源</h1><h2 id="国内镜像源总览"><a href="#国内镜像源总览" class="headerlink" title="国内镜像源总览"></a>国内镜像源总览</h2><table><thead><tr><th>名称</th><th>路径</th></tr></thead><tbody><tr><td>中国官方镜像</td><td><a href="https://registry.docker-cn.com/">https://registry.docker-cn.com</a></td></tr><tr><td>网易163镜像</td><td><a href="http://hub-mirror.c.163.com/">http://hub-mirror.c.163.com</a></td></tr><tr><td>中科大镜像</td><td><a href="https://docker.mirrors.ustc.edu.cn/">https://docker.mirrors.ustc.edu.cn</a></td></tr><tr><td>阿里云镜像</td><td>https:&#x2F;&#x2F;[xxx].mirror.aliyuncs.com</td></tr><tr><td>DaoCloud镜像</td><td>http:&#x2F;&#x2F;[xxx].m.daocloud.io</td></tr></tbody></table><h2 id="阿里云镜像源"><a href="#阿里云镜像源" class="headerlink" title="阿里云镜像源"></a>阿里云镜像源</h2><p>  访问：<a href="https://cr.console.aliyun.com/#/accelerator">https://cr.console.aliyun.com/#/accelerator</a></p><h2 id="DaoCloud镜像源"><a href="#DaoCloud镜像源" class="headerlink" title="DaoCloud镜像源"></a>DaoCloud镜像源</h2><p>  访问：<a href="https://www.daocloud.io/">https://www.daocloud.io/</a></p><h2 id="配置镜像源"><a href="#配置镜像源" class="headerlink" title="配置镜像源"></a>配置镜像源</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs awk">vi <span class="hljs-regexp">/etc/</span>docker/daemon.json<br><br><span class="hljs-comment"># 内容如下：</span><br>&#123;<br>  <span class="hljs-string">&quot;registry-mirrors&quot;</span>: [<br>    <span class="hljs-string">&quot;https://xx4bwyg2.mirror.aliyuncs.com&quot;</span>,<br>    <span class="hljs-string">&quot;http://f1361db2.m.daocloud.io&quot;</span>,<br>    <span class="hljs-string">&quot;https://registry.docker-cn.com&quot;</span>,<br>    <span class="hljs-string">&quot;http://hub-mirror.c.163.com&quot;</span>,<br>    <span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn&quot;</span><br>  ]<br>&#125;&#123;&#125;<br><br><span class="hljs-comment"># 退出并保存</span><br>:wq<br><br><span class="hljs-comment"># 使配置生效</span><br>systemctl daemon-reload<br><br><span class="hljs-comment"># 重启Docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure><h1 id="更换debian源"><a href="#更换debian源" class="headerlink" title="更换debian源"></a>更换debian源</h1><p>首先我们需要知道发行版本</p><ul><li>输入<code>uname -a</code>,可显示电脑以及操作系统的相关信息</li><li>输入<code>cat /etc/issue</code>, 显示的是发行版本信息</li><li>输入<code>cat /proc/version</code>,说明正在运行的内核版本。</li></ul><p>当然你可以直接使用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/etc/</span>apt/sources.list<br></code></pre></td></tr></table></figure><p>来查看，然后打开阿里云源复制相应源</p><p><a href="https://developer.aliyun.com/mirror/">https://developer.aliyun.com/mirror/</a></p><p>然后修改成下面的样子</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">echo <span class="hljs-string">&quot;deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib&quot;</span> &gt; <span class="hljs-regexp">/etc/</span>apt/sources.list<br>echo <span class="hljs-string">&quot;deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>apt/sources.list<br>echo <span class="hljs-string">&quot;deb http://mirrors.aliyun.com/debian-security/ bullseye-security main&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>apt/sources.list<br>echo <span class="hljs-string">&quot;deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>apt/sources.list<br>echo <span class="hljs-string">&quot;deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>apt/sources.list<br>echo <span class="hljs-string">&quot;deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>apt/sources.list<br>echo <span class="hljs-string">&quot;deb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>apt/sources.list<br>echo <span class="hljs-string">&quot;deb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib&quot;</span> &gt;&gt; <span class="hljs-regexp">/etc/</span>apt/sources.list<br></code></pre></td></tr></table></figure><p>贴入执行即可，你可以用()将命令括起来。</p><p>或者执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell">tee /etc/apt/sources.list &lt;&lt;-&#x27;ET&#x27;<br>deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib<br>deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib<br>deb http://mirrors.aliyun.com/debian-security/ bullseye-security main<br>deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main<br>deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib<br>deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib<br>deb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib<br>deb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib<br>ET<br></code></pre></td></tr></table></figure><p>你也可以直接复制到容器</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">docker cp <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list 容器id:/</span>etc<span class="hljs-regexp">/apt/</span>sources.list<br></code></pre></td></tr></table></figure><h1 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h1><p>容器是镜像运行后的一种状态，一个镜像可以创建多个容器，镜像是不可写的，一旦运行后成容器就变成可写的状态；容器也可以导出、导入。</p><h1 id="容器的命令选项"><a href="#容器的命令选项" class="headerlink" title="容器的命令选项"></a>容器的命令选项</h1><table><thead><tr><th align="left">选项</th><th align="left">描述</th><th></th></tr></thead><tbody><tr><td align="left">-i,–interactive</td><td align="left">交互式</td><td></td></tr><tr><td align="left">-t,–tty</td><td align="left">分配一个伪终端</td><td></td></tr><tr><td align="left">-d,–detach</td><td align="left">运行容器到后台</td><td></td></tr><tr><td align="left">-e,–env</td><td align="left">设置环境变量</td><td></td></tr><tr><td align="left">-p,–publish list</td><td align="left">发布容器端口到主机</td><td></td></tr><tr><td align="left">-P,–publish-all</td><td align="left">发布容器所有EXPOSE的端口到宿主机随机端口</td><td></td></tr><tr><td align="left">–name string</td><td align="left">指定容器名称</td><td></td></tr><tr><td align="left">-h,–hostname</td><td align="left">设置容器主机名</td><td></td></tr><tr><td align="left">–ip string</td><td align="left">指定容器IP,只能用于自定义网络</td><td></td></tr><tr><td align="left">–network</td><td align="left">连接容器到一个网络</td><td></td></tr><tr><td align="left">–mount mount</td><td align="left">将文件系统附加到容器</td><td></td></tr><tr><td align="left">-v ,–vloume list</td><td align="left">绑定挂载一个卷</td><td></td></tr><tr><td align="left">–restart string</td><td align="left">容器退出时重启策略，默认no,可选值[always</td><td>on-failure]</td></tr></tbody></table><p>例：<br>docker run -itd -e hello&#x3D;123 -e abc&#x3D;123 -p 88:80 –name&#x3D;nginx-v1 -h nginx-test –restart&#x3D;always nginx<br>解析：<br>-itd 交互、伪终端、后台运行<br>-e 环境变量<br>-p 宿主机的88端口映射容器的80端口<br>–name 定义容器名字为nginx-v1<br>-h 定义容器主机名为nginx-test<br>–restart&#x3D;always 当容器退出时，尝试重启，开机启动的意思<br>nginx 最后跟镜像名称</p><p>三、容器资源限制</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">-m,–memory</td><td align="left">容器可以使用的最大内存量</td></tr><tr><td align="left">–memory-swap</td><td align="left">允许交换到磁盘的内存量</td></tr><tr><td align="left">–memory-swappiness&#x3D;&lt;0-100&gt;</td><td align="left">容器使用SWAP分区的百分比</td></tr><tr><td align="left">–oom-lill-disable</td><td align="left">禁用OOM Killer</td></tr><tr><td align="left">–cpus</td><td align="left">可以使用的CPU数量</td></tr><tr><td align="left">–cpuset-cpus</td><td align="left">限制容器使用特定的CPU核心，如（0-3,0,1）</td></tr><tr><td align="left">–cpu-shares</td><td align="left">cpu共享（相对权重）</td></tr></tbody></table><p>例：<br>#docker run -d -m 512M nginx-v1<br>#docker run -d –cpus&#x3D;’1.5’ nginx<br>内存限额<br>允许容器最多使用500M内存和100M的Swap,并禁用OOM Killer:<br>docker run -d –name nginx03 –nemory&#x3D;”500m” –memory-swap&#x3D;”600m” –oom-kill-disable nginx<br>CPU限额：<br>允许容器最多使用一个半CPU<br>docker run -d –name nginx04 –cpus&#x3D;”1.5” nginx<br>允许容器最多使用50%的CPU<br>docker run -d –name nginx05 –cpus&#x3D;”0.5” nginx</p><p>查看docker容器占用宿主机资源<br>#docker stats nginx-v1<br><img src="https://s1.51cto.com/images/blog/201908/19/4c632d8989142643d5f03acf3adbd0dd.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="容器管理之--容器管理"><br>这样是交互式显示，不易来监控指标<br>#docker stats –help<br>#docker stats –no stream nginx-v1<br><img src="https://s1.51cto.com/images/blog/201908/19/418920b378e2821d56001207834c6c5e.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=" alt="容器管理之--容器管理"></p><p>四、管理容器的常用命令</p><table><thead><tr><th align="left">选项</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ls</td><td align="left">列出容器</td></tr><tr><td align="left">inspect</td><td align="left">查看一个或多个容器详细信息</td></tr><tr><td align="left">exec</td><td align="left">在运行容器中执行命令</td></tr><tr><td align="left">commit</td><td align="left">创建一个新镜像来自一个容器</td></tr><tr><td align="left">cp</td><td align="left">拷贝文件、文件夹到一个容器</td></tr><tr><td align="left">logs</td><td align="left">获取一个容器日志</td></tr><tr><td align="left">port</td><td align="left">列出或指定容器端口映射</td></tr><tr><td align="left">top</td><td align="left">显示一个容器运行的进程</td></tr><tr><td align="left">stats</td><td align="left">显示容器资源使用统计</td></tr><tr><td align="left">stop&#x2F;start&#x2F;restart</td><td align="left">停止&#x2F;启动一个或多个容器</td></tr><tr><td align="left">rm</td><td align="left">删除一个或多个容器</td></tr></tbody></table><p>查看容器中的目录<br>#docker exec id ls<br>进入容器<br>docker exec -it id bash</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux一些文件及用途</title>
    <link href="/2021/12/07/Linux%E4%B8%80%E4%BA%9B%E6%96%87%E4%BB%B6%E5%8F%8A%E7%94%A8%E9%80%94/"/>
    <url>/2021/12/07/Linux%E4%B8%80%E4%BA%9B%E6%96%87%E4%BB%B6%E5%8F%8A%E7%94%A8%E9%80%94/</url>
    
    <content type="html"><![CDATA[<h1 id="常用文件"><a href="#常用文件" class="headerlink" title="常用文件"></a>常用文件</h1><h2 id="x2F-etc-x2F-sysconfig-x2F-network-scripts-x2F-ifcfg-eth0-各参数的意思"><a href="#x2F-etc-x2F-sysconfig-x2F-network-scripts-x2F-ifcfg-eth0-各参数的意思" class="headerlink" title="&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0 各参数的意思"></a>&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eth0 各参数的意思</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">DEVICE</span>=eth0     <span class="hljs-comment">#网卡设备名称</span><br><br><span class="hljs-attr">ONBOOT</span>=<span class="hljs-literal">yes</span>      <span class="hljs-comment">#启动时是否激活 yes | no</span><br><br><span class="hljs-attr">BOOTPROTO</span>=static        <span class="hljs-comment">#协议类型</span><br><br><span class="hljs-attr">IPADDR</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">1.90</span>     <span class="hljs-comment">#网络IP地址</span><br><br><span class="hljs-attr">NETMASK</span>=<span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span>       <span class="hljs-comment">#网络子网地址</span><br><br><span class="hljs-attr">GATEWAY</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">1.1</span>     <span class="hljs-comment">#网关地址</span><br><br><span class="hljs-attr">BROADCAST</span>=<span class="hljs-number">192.168</span>.<span class="hljs-number">1.255</span>     <span class="hljs-comment">#广播地址</span><br><br><span class="hljs-attr">HWADDR</span>=<span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:FE:<span class="hljs-number">1</span>A:<span class="hljs-number">09</span>        <span class="hljs-comment">#网卡MAC地址</span><br><br><span class="hljs-attr">TYPE</span>=Ethernet       <span class="hljs-comment">#网卡类型为以太网</span><br></code></pre></td></tr></table></figure><h2 id="x2F-etc-x2F-sysconfig-x2F-i18n"><a href="#x2F-etc-x2F-sysconfig-x2F-i18n" class="headerlink" title="&#x2F;etc&#x2F;sysconfig&#x2F;i18n"></a>&#x2F;etc&#x2F;sysconfig&#x2F;i18n</h2><p>i18n是internationalization的缩写，意思指i和n之间有18个字母。&#x2F;etc&#x2F;sysconfig&#x2F;i18n里面存放着系统的区域语言设置，可以使linux系统支持国际化信息显示。就是支持多种字符集的转换，避免出现乱码。同一时间i18n只能是英文和一种选定的语言，例如英文+中文、英文+德文、英文+韩文等等。<br>使用locale [-a]查看系统当前locale环境变量</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>sysconfig/i18n 这里存放的是系统的区域语言设置<br>第一行 表明你当前系统的语言环境变量设置 ，这里是 zh_CN.GB18030<br>第二行 表明系统预置了那些语言支持 ，不在项目中的语言不能正常显示<br>第三行 定义控制台终端字体，你文本登录的时候显示的字体就是这个 latarcyrheb-sun16<br></code></pre></td></tr></table></figure><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs makefile">[root@localhost chengyao]<span class="hljs-comment"># locale  </span><br>LANG=zh_CN.GB18030  <br>LC_CTYPE=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_NUMERIC=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_TIME=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_COLLATE=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_MONETARY=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_MESSAGES=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_PAPER=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_NAME=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_ADDRESS=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_TELEPHONE=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_MEASUREMENT=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_IDENTIFICATION=<span class="hljs-string">&quot;zh_CN.GB18030&quot;</span>  <br>LC_ALL=  <br></code></pre></td></tr></table></figure><h2 id="x2F-etc-x2F-inittab"><a href="#x2F-etc-x2F-inittab" class="headerlink" title="&#x2F;etc&#x2F;inittab"></a>&#x2F;etc&#x2F;inittab</h2><p><a href="https://blog.csdn.net/localhostcom/article/details/78057132">https://blog.csdn.net/localhostcom/article/details/78057132</a></p><h2 id="netplan"><a href="#netplan" class="headerlink" title="netplan"></a>netplan</h2><p><a href="https://www.jianshu.com/p/174656635e74">https://www.jianshu.com/p/174656635e74</a></p><h2 id="发行版本"><a href="#发行版本" class="headerlink" title="发行版本"></a>发行版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat /etc/os-release # systemd<br></code></pre></td></tr></table></figure><p>比uname -a更全的信息</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>硬盘，分区</title>
    <link href="/2021/12/07/%E7%A1%AC%E7%9B%98%EF%BC%8C%E5%88%86%E5%8C%BA/"/>
    <url>/2021/12/07/%E7%A1%AC%E7%9B%98%EF%BC%8C%E5%88%86%E5%8C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="专用名词"><a href="#专用名词" class="headerlink" title="专用名词"></a>专用名词</h1><blockquote><p>机械硬盘</p></blockquote><ul><li><p><strong>主分区</strong>（min&#x3D;1，max&#x3D;4）——主分区也叫<a href="https://www.zhihu.com/search?q=%E5%BC%95%E5%AF%BC%E5%88%86%E5%8C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:121575655%7D">引导分区</a>，Windows系统一般需要安装在这个主分区中，这样才能保证开机自动进入系统。简单来说，主分区就是可以引导电脑开机读取文件的一个磁盘分区</p></li><li><p><strong>扩展分区</strong>（min&#x3D;0，max&#x3D;1）——扩展分区是一个概念，实际在硬盘中是看不到的，也无法直接使用扩展分区。除了主分区外，剩余的磁盘空间就是扩展分区了。当一块硬盘将所有容量都分给了主分区，那就没有扩展分区了，仅当主分区容量小于硬盘容量，剩下的空间就属于扩展分区了，扩展分区可以继续进行扩展切割分为多个<a href="https://www.zhihu.com/search?q=%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:121575655%7D">逻辑分区</a></p></li><li><p><strong>逻辑分区</strong>（min&#x3D;0，max&#x3D;n）——在扩展分区上面，可以创建多个逻辑分区</p></li><li><p>磁道：当磁盘旋转时，磁头若保持在一个位置上，则每个磁头都会在磁盘表面划出一个圆形轨迹，这些圆形轨迹就叫做磁道 （Track）。</p></li><li><p>柱面：在有多个盘片构成的盘组中，由不同盘片的面，但处于同一半径圆的多个磁道组成的一个圆柱面（Cylinder</p></li><li><p>扇区： 盘片上的每个磁道被等分为若干个弧段，这些弧段便是硬盘的扇区（Sector），每个扇区的大小为512Bytes。</p></li></ul><blockquote><p>1Bytes&#x3D;8bit</p></blockquote><p>MBR存放在硬盘的0号柱面0号磁道1号扇区，也就是硬盘的第一个扇区，共512个字节。</p><p>有446个Bytes用来存放Bootloader；</p><p>2个字节是MBR的有效标志，被称为Magic number，如果是55AA，则表示此MBR有效；</p><p>剩下的64个Bytes就是磁盘分区表了。</p><p><a href="https://www.zhihu.com/search?q=%E5%88%86%E5%8C%BA%E8%A1%A8&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:184729403%7D">分区表</a>只有64个Bytes，一个分区需要占用16个Bytes，如果不使用其他手段，一个硬盘只能被分成四个主分区，<strong>扩展分区</strong>就是为了解决这个情况出现。</p><p>假设我们的硬盘有500G，当分区表中已经有了3个分区了，这三个分区都是主分区，总共占用了300G</p><p>这时，如果你想充分使用剩下的200G空间（在实际中是不到200G的，<a href="https://www.zhihu.com/search?q=500G%E7%A1%AC%E7%9B%98&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:184729403%7D">500G硬盘</a>总共的可用空间大约在460G左右），并且觉得4个分区已经够用了，那就必须将剩下的那个主分区分成200G大小</p><p>如果你想要更多的分区，就不能将最后那200G空间分成是主分区了，因为一块硬盘只能有四个主分区，况且硬盘空间都分配完了，哪来空间给新分区？</p><p>怎么办呢？</p><p>这时，只要把剩下的200G空间分成扩展分区，就可以在这200G的空间上划分更多数量的分区。</p><hr><p>对MBR来讲扩展分区就是单个分区，实际上扩展分区的磁盘空间中可以切分成更多小分区，这些分区就是<a href="https://www.zhihu.com/search?q=%E9%80%BB%E8%BE%91%E5%88%86%E5%8C%BA&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:184729403%7D">逻辑分区</a>。</p><hr><p>至于<strong>动态分区</strong>，指的是一种可以自由的调节分区大小，而不用重启系统或者重写MBR分区表的技术，例如Linux下使用最广泛的LVM2技术。但是这是属于高级存储技术,负责加载系统引导文件的Bootloader是识别不了的，所以不能将系统引导文件放置在LVM2的逻辑卷上，否则系统是启动不来的。</p><p>参考： <a href="https://www.zhihu.com/question/20281689?sort=created">https://www.zhihu.com/question/20281689?sort=created</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>几个书签</title>
    <link href="/2021/12/05/%E5%87%A0%E4%B8%AA%E4%B9%A6%E7%AD%BE/"/>
    <url>/2021/12/05/%E5%87%A0%E4%B8%AA%E4%B9%A6%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[<h1 id="GoLang"><a href="#GoLang" class="headerlink" title="GoLang"></a>GoLang</h1><h2 id="内存逃逸"><a href="#内存逃逸" class="headerlink" title="内存逃逸"></a>内存逃逸</h2><ul><li><a href="https://www.cnblogs.com/linguoguo/p/10956685.html">https://www.cnblogs.com/linguoguo/p/10956685.html</a></li><li><a href="https://zhuanlan.zhihu.com/p/145468000">https://zhuanlan.zhihu.com/p/145468000</a></li><li><a href="https://blog.justwe.site/post/go-escape-heap/">https://blog.justwe.site/post/go-escape-heap/</a></li></ul><h2 id="GC"><a href="#GC" class="headerlink" title="GC"></a>GC</h2><ul><li><a href="https://blog.csdn.net/u010649766/article/details/80582153">https://blog.csdn.net/u010649766/article/details/80582153</a></li><li><a href="https://segmentfault.com/q/1010000010813711">https://segmentfault.com/q/1010000010813711</a></li><li><a href="https://segmentfault.com/a/1190000010753702?_ea=2426880">https://segmentfault.com/a/1190000010753702?_ea=2426880</a></li><li><a href="https://www.zhihu.com/question/65426766">https://www.zhihu.com/question/65426766</a></li><li><a href="https://www.golangtc.com/t/582be338b09ecc08ce0003b4">https://www.golangtc.com/t/582be338b09ecc08ce0003b4</a></li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><ul><li><a href="https://blog.csdn.net/u011957758/article/details/82846609">https://blog.csdn.net/u011957758/article/details/82846609</a></li><li><a href="https://blog.csdn.net/raoxiaoya/article/details/111469483">https://blog.csdn.net/raoxiaoya/article/details/111469483</a></li><li><a href="https://blog.csdn.net/zhounixing/article/details/107334087">https://blog.csdn.net/zhounixing/article/details/107334087</a></li><li><a href="https://www.modb.pro/db/226546">https://www.modb.pro/db/226546</a></li></ul><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ul><li><a href="https://www.codercto.com/a/72000.html">https://www.codercto.com/a/72000.html</a></li></ul><h2 id="GORM"><a href="#GORM" class="headerlink" title="GORM"></a>GORM</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/486959472">https://zhuanlan.zhihu.com/p/486959472</a></li></ul><h2 id="image处理"><a href="#image处理" class="headerlink" title="image处理"></a>image处理</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/387753099">https://zhuanlan.zhihu.com/p/387753099</a></li></ul><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><ul><li><a href="https://blog.csdn.net/weixin_45901764/article/details/121020888">https://blog.csdn.net/weixin_45901764/article/details/121020888</a></li></ul><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><ul><li><a href="https://blog.csdn.net/alwaysrun/article/details/107749174">https://blog.csdn.net/alwaysrun/article/details/107749174</a></li></ul><h2 id="runtime"><a href="#runtime" class="headerlink" title="runtime"></a>runtime</h2><ul><li><a href="https://blog.csdn.net/inthat/article/details/118531656">https://blog.csdn.net/inthat/article/details/118531656</a></li></ul><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/%40font-face">https://developer.mozilla.org/zh-CN/docs/Web/CSS/%40font-face</a></li><li><a href="https://www.itqaq.com/index/art/272.html">https://www.itqaq.com/index/art/272.html</a></li><li><a href="https://www.cnblogs.com/yuyangphpweibo/p/9044374.html">https://www.cnblogs.com/yuyangphpweibo/p/9044374.html</a></li><li><a href="https://www.php.net/manual/zh/book.dom.php">https://www.php.net/manual/zh/book.dom.php</a></li><li><a href="https://blog.csdn.net/xushiyu1996818/article/details/104298486">https://blog.csdn.net/xushiyu1996818/article/details/104298486</a></li><li><a href="https://www.cnblogs.com/pureLaw/p/14779725.html">https://www.cnblogs.com/pureLaw/p/14779725.html</a></li><li><a href="http://www.rbtree.cn/">http://www.rbtree.cn/</a></li><li><a href="https://www.w3cschool.cn/wkspring/j3181mm3.html">https://www.w3cschool.cn/wkspring/j3181mm3.html</a></li><li><a href="https://docs.mongodb.com/manual/reference/configuration-options/#security.authorization">https://docs.mongodb.com/manual/reference/configuration-options/#security.authorization</a></li><li><a href="https://blog.csdn.net/weidu01/article/details/105946606">https://blog.csdn.net/weidu01/article/details/105946606</a><br><a href="https://cloud.tencent.com/developer/article/1844735" title="Screen命令">Screen命令</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>自动化SQL注入工具 sqlmap 中文手册</title>
    <link href="/2021/12/05/%E8%87%AA%E5%8A%A8%E5%8C%96SQL%E6%B3%A8%E5%85%A5%E5%B7%A5%E5%85%B7%20sqlmap%20%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/"/>
    <url>/2021/12/05/%E8%87%AA%E5%8A%A8%E5%8C%96SQL%E6%B3%A8%E5%85%A5%E5%B7%A5%E5%85%B7%20sqlmap%20%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C/</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>sqlmap是一个开源的渗透测试工具，它可以自动化检测和利用SQL注入漏洞并接管数据库服务器。它有一个强大的检测引擎，许多适合于终极渗透测试的良好特性和众多的操作选项，从数据库指纹、数据获取到访问底层文件系统、执行操作系统命令。</p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>全面支持MySQL, Oracle, PostgreSQL, Microsoft SQL Server, Microsoft Access, IBM DB2, SQLite, Firebird, Sybase和SAP MaxDB数据库管理系统。</li><li>全面支持六种SQL注入技术:boolean-based盲注、time-based盲注、error-based、UNION查询、堆叠查询和带外查询。</li><li>通过提供DBMS凭证、IP地址、端口和数据库名，支持不通过SQL注入的直接连接数据库。</li><li>支持枚举用户、密码哈希、特权、角色、数据库、表和列。</li><li>自动识别密码哈希格式，支持基于字典的攻击破解。</li><li>支持完整转储数据库表，根据用户的选择转储一定范围内的条目或特定列。用户还可以选择只从每列中转储指定字符。</li><li>支持搜索特定的数据库名、表名，或跨表搜索特定的列名。这非常有用，例如，识别包含自定义应用程序凭证的表，其相关列名称可能包含name、pass等字符串。</li><li>支持通过数据库服务器所在的文件系统下载和上传任何文件，当数据库软件是MySQL, PostgreSQL或Microsoft SQL server时。</li><li>支持通过数据库服务器所在的操作系统执行任意命令并获取输出，当数据库软件为MySQL、PostgreSQL或Microsoft SQL server时。</li><li>支持在攻击者机器和数据库服务器所在操作系统之间建立带外有状态的TCP连接，这个通道根据用户的选择可以是交互式命令行、Meterpreter会话或图形用户界面(VNC)。</li><li>支持通过Metasploit的getsystem命令实现数据库进程的用户权限升级。</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="http://sqlmap.org/">sqlmap 官网下载</a></p><h2 id="支持"><a href="#支持" class="headerlink" title="支持"></a>支持</h2><p><strong>支持的操作系统：</strong></p><ul><li>Windows XP&#x2F;7&#x2F;8&#x2F;10</li><li>GNU&#x2F;Linux</li><li>MacOSX</li></ul><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><video width="800" height="500" controls="controls" src="https://www.whbwiki.com/wp-content/uploads/2021/02/bandicam-2021-02-26-10-32-12-179.mp4" style="margin: 0px; padding: 0px; box-sizing: border-box; width: 993px; max-width: 100%; text-align: center;"></video></p><p><strong>目标：</strong>攻击给定的URL(-u “<a href="http://192.168.1.250/?p=1&amp;forumaction=search%E2%80%9D)%EF%BC%8C">http://192.168.1.250/?p=1&amp;forumaction=search”)，</a> 获取数据库名(–dbs):</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">root@kali:~<span class="hljs-comment"># sqlmap -u &quot;http://192.168.1.250/?p=1&amp;forumaction=search&quot; --dbs</span><br><br>    sqlmap/<span class="hljs-number">1.0</span>-dev - automatic SQL injection and database takeover tool<br>    http://sqlmap.org<br><br>[!] legal disclaimer: Usage of sqlmap <span class="hljs-keyword">for</span> attacking targets without prior mutual consent is illegal. It is the end <span class="hljs-keyword">user</span>&#x27;s responsibility <span class="hljs-keyword">to</span> obey <span class="hljs-literal">all</span> applicable local, <span class="hljs-keyword">state</span> and federal laws. Developers assume <span class="hljs-keyword">no</span> liability and are not responsible <span class="hljs-keyword">for</span> <span class="hljs-literal">any</span> misuse or damage caused by this program<br><br>[*] starting at <span class="hljs-number">13</span>:<span class="hljs-number">11</span>:<span class="hljs-number">04</span><br></code></pre></td></tr></table></figure><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs sql">root<span class="hljs-variable">@kali</span>:<span class="hljs-operator">~</span># sqlmap <span class="hljs-operator">-</span>h<br>Usage: python sqlmap [options]<br><br>Options:<br>  <span class="hljs-operator">-</span>h, <span class="hljs-comment">--help            显示基本的帮助信息并退出</span><br>  <span class="hljs-operator">-</span>hh                   显示高级帮助信息并退出<br>  <span class="hljs-comment">--version             显示程序的版本号并退出</span><br>  <span class="hljs-operator">-</span>v VERBOSE            显示详细信息级别: <span class="hljs-number">0</span><span class="hljs-number">-6</span> (<span class="hljs-keyword">default</span> <span class="hljs-number">1</span>)<br><br>  Target:<br>    至少必须提供一个选项来指定目标<br><br>    <span class="hljs-operator">-</span>u URL, <span class="hljs-comment">--url=URL   目标URL (e.g. &quot;http://www.site.com/vuln.php?id=1&quot;)</span><br>    <span class="hljs-operator">-</span>g GOOGLEDORK       将Google dork结果作为目标URLs<br><br>  Request:<br>    这些选项用于指定如何连接到目标URL<br><br>    <span class="hljs-comment">--data=DATA         通过POST方法传送字符串</span><br>    <span class="hljs-comment">--cookie=COOKIE     指定HTTP Cookie值</span><br>    <span class="hljs-comment">--random-agent      随机选择HTTP User-Agent值</span><br>    <span class="hljs-comment">--proxy=PROXY       指定连接代理</span><br>    <span class="hljs-comment">--tor               使用Tor匿名网络</span><br>    <span class="hljs-comment">--check-tor         检查Tor网络是否可用</span><br><br>  Injection:<br>    这些选项可用于指定要测试的参数，提供自定义注入载荷和可选的伪造脚本<br><br>    <span class="hljs-operator">-</span>p TESTPARAMETER    Testable参数<br>    <span class="hljs-comment">--dbms=DBMS         强制指定后端DBMS类型</span><br><br>  Detection:<br>    这些选项可用于定制检测阶段<br><br>    <span class="hljs-comment">--level=LEVEL       Level of tests to perform (1-5, default 1)</span><br>    <span class="hljs-comment">--risk=RISK         Risk of tests to perform (0-3, default 1)</span><br><br>  Techniques:<br>    这项选项可用于优化特定的<span class="hljs-keyword">SQL</span>注入技巧<br><br>    <span class="hljs-comment">--technique=TECH    SQL injection techniques to use (default &quot;BEUSTQ&quot;)</span><br><br>  Enumeration:<br>    这些选项可用于枚举后端数据库管理系统中包含的信息、结构和数据表。此外，还可以运行自己的<span class="hljs-keyword">SQL</span>语句<br><br>    <span class="hljs-operator">-</span>a, <span class="hljs-comment">--all           获取所有信息</span><br>    <span class="hljs-operator">-</span>b, <span class="hljs-comment">--banner        获取DBMS banner</span><br>    <span class="hljs-comment">--current-user      获取DBMS当前用户</span><br>    <span class="hljs-comment">--current-db        获取DBMS当前数据库</span><br>    <span class="hljs-comment">--passwords         枚举DBMS用户口令哈希</span><br>    <span class="hljs-comment">--tables            枚举DBMS数据库表</span><br>    <span class="hljs-comment">--columns           枚举DBMS数据表的列</span><br>    <span class="hljs-comment">--schema            枚举DBMS schema</span><br>    <span class="hljs-comment">--dump              转储DBMS database table entries</span><br>    <span class="hljs-comment">--dump-all          转储所有DBMS databases tables entries</span><br>    <span class="hljs-operator">-</span>D DB               指定DBMS数据库<br>    <span class="hljs-operator">-</span>T TBL              指定DBMS数据表<br>    <span class="hljs-operator">-</span>C COL              指定DBMS数据表的列<br><br>  Operating <span class="hljs-keyword">system</span> access:<br>    这些选项可用于访问后端数据库管理系统所在的底层操作系统<br><br>    <span class="hljs-comment">--os-shell          启动交互式操作系统命令行</span><br>    <span class="hljs-comment">--os-pwn            启动OOB shell, Meterpreter or VNC</span><br><br>  General:<br>    这些选项可用于设置通用参数<br><br>    <span class="hljs-comment">--batch             不要求用户输入，使用默认值</span><br>    <span class="hljs-comment">--flush-session     对当前目标刷新会话文件</span><br><br>  Miscellaneous:<br>    <span class="hljs-comment">--wizard            适用于初学者的简单向导</span><br><br>[<span class="hljs-operator">!</span>] 完整的选项信息可使用<span class="hljs-string">&#x27;-hh&#x27;</span>获取<br><br>[<span class="hljs-operator">*</span>] shutting down <span class="hljs-keyword">at</span> <span class="hljs-number">15</span>:<span class="hljs-number">52</span>:<span class="hljs-number">48</span><br></code></pre></td></tr></table></figure><h2 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h2><ul><li>作者:Bernardo Damele Assumpcao Guimaraes, Miroslav Stampar</li><li>许可:GPLv2</li></ul><p>来源： <a href="https://www.whbwiki.com/1760.html">自动化SQL注入工具 sqlmap 中文手册 | 浅若清风 (whbwiki.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MongoDB学习笔记</title>
    <link href="/2021/11/28/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/28/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="优劣："><a href="#优劣：" class="headerlink" title="优劣："></a>优劣：</h1><p>高性能、易部署、易使用，存储数据非常方便。</p><p>不支持连表查询，不支持sql语句，不支持事务存储过程等，所以不适合存储数据间关系比较复杂的数据，一般主要是当做一个<strong>数据仓库</strong>来使用。</p><p><strong>适用于</strong>：日志系统，股票数据等。</p><p><strong>不适用于</strong>：电子商务系统等需要连多表查询的功能。</p><h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><h2 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h2><p><strong>文档</strong>是mongoDB中数据的<strong>基本单元</strong>，类似关系数据库的行， 多个键值对有序地放置在一起便是文档。 MongoDB 中以文档的方式存取记录，如一条记录格式如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">&#123; “username”:”Tom”, “age”:<span class="hljs-number">10</span> ,email:’abc@qq.com’,’sex’:男，键,值&#125;<br><br>&#123; &quot;username&quot;:<span class="hljs-string">&quot;Tom&quot;</span> , <span class="hljs-string">&quot;age&quot;</span> : <span class="hljs-string">&quot;10&quot;</span> &#125; <br><br>&#123;“Username”:”Tom”,”age”:<span class="hljs-number">10</span>&#125; <br><br>&#123;“Username”:”Tom” &#125; <br></code></pre></td></tr></table></figure><p>注意：</p><p>（1）以上是几个不同的文档，<strong>MongoDB****区分大小写的数据类型</strong>，第一个age字段是<strong>数字</strong>类型，第二个age是<strong>字符串</strong>类型。</p><p>（2）每一个文档尺寸不能超过<strong>16M</strong> </p><h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><p>集合就是一组文档，<strong>多个文档组成一个集合</strong>，集合类似于 mysql里面的表 。</p><p><strong>无模式</strong>是指，在<strong>同一个集合</strong>中可以包含<strong>不同格式的文档</strong>，如：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123;  <span class="hljs-string">&quot;Name&quot;</span> : &quot;<span class="hljs-type">Mongodb</span><span class="hljs-string">&quot; , &quot;</span><span class="hljs-keyword">Type</span><span class="hljs-string">&quot; : &quot;</span>Nosql<span class="hljs-string">&quot; &#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&#123;  &quot;</span>UserName<span class="hljs-string">&quot; : &quot;</span>Tom<span class="hljs-string">&quot; , &quot;</span>age<span class="hljs-string">&quot; : 20 , &quot;</span>Gender<span class="hljs-string">&quot; : &quot;</span>male<span class="hljs-string">&quot; &#125;</span><br></code></pre></td></tr></table></figure><p>以上两个文档可以放在同一个集合中。</p><p>在Mysql需要先建表再插入数据，</p><p><strong>模式自由</strong>（schema-free）：<strong>意思是集合里面没有行和列的概念</strong>，</p><p>注意：MongoDB中的<strong>集合不用创建</strong>、<strong>没有结构</strong>，所以可以放不同格式的文档。</p><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>多个集合可以组成数据库。一个mongoDB实例可以承载多个数据库，他们之间完全独立。 </p><p>Mongodb中的数据库和Mysql中的数据库概念类似，只是<strong>无需创建</strong>。</p><p>一个数据库中可以有多个集合。一个集合中可以有多个文档。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>单个文档最大16M, 32位系统上单个数据库最大2G</li></ol><h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>linux下启动mongo后使用mongo命令连接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mongodb:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">27017</span><br></code></pre></td></tr></table></figure><p>可以使用mongo –help查看帮助</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> 数据库<br></code></pre></td></tr></table></figure><p>如果不存在，则创建，否则切换。如果创建了没有做任何操作会自动删除。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">show</span> dbs<br></code></pre></td></tr></table></figure><p>查看数据库列表</p><h3 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">db.集合名.<span class="hljs-built_in">insert</span>(&#123;&#125;)<br></code></pre></td></tr></table></figure><p>集合隐式创建，所以可以直接使用， db表示当前数据库，也就是前面use的数据库，可以使用db命令查看当前数据库，添加命令如下</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.<span class="hljs-keyword">test</span>.insert(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;max&quot;</span>&#125;)<br></code></pre></td></tr></table></figure><blockquote><p> 数据类型是BSON, 支持的值更丰富</p></blockquote><p>在添加的数据中都有一个”_id”的键，值为对象类型</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">&#123; <span class="hljs-string">&quot;_id&quot;</span> : <span class="hljs-type">ObjectId</span>(<span class="hljs-string">&quot;61a365b5e2e6abe7dea43ac8&quot;</span>), <span class="hljs-string">&quot;name&quot;</span> : &quot;<span class="hljs-type">tet</span><span class="hljs-string">&quot; &#125;</span><br></code></pre></td></tr></table></figure><p>ObjectId类型： </p><p>每个文档都有一个_id字段，并且<strong>同一集合</strong>中的_id<strong>值唯一</strong>，该字段可以是<strong>任意类型</strong>的数据，默认是一个<strong>ObjectId</strong>对象。</p><p><strong>ObjectId</strong>对象<strong>对象数据组成：</strong>时间戳|机器码|PID|计数器， _id的键值我们可以自己输入，但是不能重复，重复会报错</p><blockquote><p> 使用js批量插入</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>db.<span class="hljs-property">test</span>.<span class="hljs-title function_">insert</span>(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;maxphp&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: i&#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="查看集合"><a href="#查看集合" class="headerlink" title="查看集合"></a>查看集合</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span><br></code></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">db.集合名<span class="hljs-string">.find</span><span class="hljs-params">()</span>       <span class="hljs-string">//</span> 查询所有<br>db.集合名<span class="hljs-string">.find</span><span class="hljs-params">(条件)</span>    <span class="hljs-string">//</span> 查询某条件下所有<br>db.集合名<span class="hljs-string">.findOne</span><span class="hljs-params">()</span>    <span class="hljs-string">//</span> 查询一个文档<br>db.集合名<span class="hljs-string">.findOne</span><span class="hljs-params">(条件)</span> <span class="hljs-string">//</span> 查询某条件下一个文档<br>db.集合名<span class="hljs-string">.find</span><span class="hljs-params">()</span><span class="hljs-string">.pretty</span><span class="hljs-params">()</span><br></code></pre></td></tr></table></figure><blockquote><p>可以使用操作符 $lt , $lte , $gt , $gte  ( &lt; , &lt;&#x3D; , &gt; , &gt;&#x3D; ), $ne ( &lt;&gt; ) ,$in , $nin , $or , $not, $mod (取模), $exists, $where</p></blockquote><p>例如</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.users</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">&quot;age&quot;</span>: &#123;<span class="hljs-string">&quot;$gt&quot;</span>: <span class="hljs-number">12</span>&#125;&#125;, &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-number">1</span>&#125;)  <span class="hljs-comment">// 只显示年龄大于12的用户名字</span><br>db<span class="hljs-selector-class">.users</span><span class="hljs-selector-class">.find</span>(&#123;<span class="hljs-string">&quot;age&quot;</span>: &#123;<span class="hljs-string">&quot;$gt&quot;</span>: <span class="hljs-number">12</span>&#125;&#125;, &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-number">0</span>&#125;)  <span class="hljs-comment">// 年龄大于12的用户，除了名字其他都显示</span><br>db<span class="hljs-selector-class">.users</span><span class="hljs-selector-class">.find</span>(&#123;&#125;, &#123;<span class="hljs-string">&quot;$lt&quot;</span>: <span class="hljs-number">1</span>&#125;)<br></code></pre></td></tr></table></figure><p><strong>排序</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.<span class="hljs-keyword">test</span>.find().<span class="hljs-keyword">sort</span>(&#123;<span class="hljs-string">&quot;age&quot;</span>: 1&#125;) <span class="hljs-comment">//根据年龄升序， -1为降序</span><br></code></pre></td></tr></table></figure><p><strong>限制</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.find</span>()<span class="hljs-selector-class">.limit</span>(<span class="hljs-number">3</span>)  <span class="hljs-comment">// 查询前3条</span><br>db<span class="hljs-selector-class">.test</span><span class="hljs-selector-class">.find</span>()<span class="hljs-selector-class">.skip</span>(<span class="hljs-number">3</span>)<span class="hljs-selector-class">.limit</span>(<span class="hljs-number">2</span>)  <span class="hljs-comment">// 查询偏移量为3的2个文档</span><br></code></pre></td></tr></table></figure><p><strong>count</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.<span class="hljs-keyword">test</span>.<span class="hljs-keyword">count</span>() <span class="hljs-comment">// 查询集合文档总数</span><br></code></pre></td></tr></table></figure><h3 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">db.集合名.remove(&#123;条件&#125;) <span class="hljs-regexp">//</span> 如果没有条件会删除所有<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">db<span class="hljs-selector-class">.users</span><span class="hljs-selector-class">.remove</span>(&#123;”age“: <span class="hljs-number">5</span>&#125;)  <span class="hljs-comment">// 删除用户中年龄等于5的文档</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">db.users.<span class="hljs-built_in">remove</span>(&#123;<span class="hljs-string">&quot;age&quot;</span>: &#123;<span class="hljs-string">&quot;<span class="hljs-variable">$gt</span>&quot;</span>: 8&#125;&#125;)<br></code></pre></td></tr></table></figure><h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.集合名.<span class="hljs-keyword">drop</span>()<br></code></pre></td></tr></table></figure><h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">use</span> 数据库<br><span class="hljs-keyword">db</span>.dropDatabase()<br></code></pre></td></tr></table></figure><h3 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h3><h4 id="直接修改"><a href="#直接修改" class="headerlink" title="直接修改"></a>直接修改</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.集合名.<span class="hljs-keyword">update</span>(条件，新文档, 是否新增, 是否修改多条)<br></code></pre></td></tr></table></figure><p><strong>是否新增</strong>：如果值是1（true）则没有满足条件的则添加。</p><p><strong>是否修改多条</strong>：若值是1（true），如果满足条件的有多个文档则都要修改</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">db.users.<span class="hljs-keyword">update</span>(&#123;&quot;age&quot;: <span class="hljs-number">3</span>&#125;, &#123;&quot;age&quot;: <span class="hljs-number">4</span>&#125;, <span class="hljs-keyword">true</span>, <span class="hljs-keyword">true</span>)<br></code></pre></td></tr></table></figure><blockquote><p>上面的修改会导致其他数据键值丢失，所以不推荐</p></blockquote><h4 id="使用修改器"><a href="#使用修改器" class="headerlink" title="使用修改器"></a>使用修改器</h4><p><strong>$inc</strong> : 加一个数字</p><p><strong>$set :</strong> 修改某一个字段,如果该字段不存在就增这个字段</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">db.集合名<span class="hljs-selector-class">.update</span>(&#123;条件&#125;, &#123;修改器名称: &#123;修改的键: 修改后的值&#125;&#125;)<br></code></pre></td></tr></table></figure><p>例如</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">db</span>.<span class="hljs-keyword">test</span>.<span class="hljs-keyword">update</span>(&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;maxphp&quot;</span>&#125;, &#123;<span class="hljs-string">&quot;$set&quot;</span>: &#123;<span class="hljs-string">&quot;age&quot;</span>: 14&#125;&#125;, true, true)  <span class="hljs-comment">// 将所有名字为maxphp的修改年龄为14</span><br><span class="hljs-keyword">db</span>.<span class="hljs-keyword">test</span>.<span class="hljs-keyword">update</span>(&#123;<span class="hljs-string">&quot;age&quot;</span>: 14&#125;, &#123;<span class="hljs-string">&quot;$inc&quot;</span>: &#123;<span class="hljs-string">&quot;age&quot;</span>: 100&#125;&#125;)  <span class="hljs-comment">// 将年龄为14的一个年龄增加100</span><br></code></pre></td></tr></table></figure><h3 id="帮助"><a href="#帮助" class="headerlink" title="帮助"></a>帮助</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">help</span>            <span class="hljs-comment">// 全局</span><br><span class="hljs-keyword">db</span>.<span class="hljs-keyword">help</span>()       <span class="hljs-comment">// 数据库相关帮助</span><br><span class="hljs-keyword">db</span>.集合名.<span class="hljs-keyword">help</span>() <span class="hljs-comment">// 集合相关帮助</span><br></code></pre></td></tr></table></figure><h1 id="用户管理（权限控制）"><a href="#用户管理（权限控制）" class="headerlink" title="用户管理（权限控制）"></a>用户管理（权限控制）</h1><p>在mongodb里面的用户是属于数据库的,每个数据库有自己的管理员，管理员登录后，只能操作所属的数据库。</p><p>注意：一般在admin数据库中创建的用户授予超级管理员权限，登录后可以操作任何的数据库。</p><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><p>注意：在开启权限管理控制时，一定先要创建一个超级管理员授予超级管理权限。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">use admin<br>db.create<span class="hljs-constructor">User(&#123;<span class="hljs-params">user</span>: <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-params">pwd</span>: <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-params">roles</span>: [&#123;<span class="hljs-params">role</span>: <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-params">db</span>: <span class="hljs-string">&quot;admin&quot;</span>&#125;]&#125;)</span>  <span class="hljs-comment">// 创建超级管理员</span><br><br><br>use php<br>db.create<span class="hljs-constructor">User(&#123;<span class="hljs-params">user</span>: <span class="hljs-string">&quot;phpadmin&quot;</span>, <span class="hljs-params">pwd</span>: <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-params">roles</span>: [&#123;<span class="hljs-params">role</span>: <span class="hljs-string">&quot;dbOwner&quot;</span>, <span class="hljs-params">db</span>: <span class="hljs-string">&quot;php&quot;</span>&#125;]&#125;)</span> <span class="hljs-comment">// 创建普通用户</span><br><br></code></pre></td></tr></table></figure><p>用户相关</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">show users <span class="hljs-regexp">//</span> 查看当前库的所有用户<br>db.dropUser(<span class="hljs-string">&quot;username&quot;</span>) <span class="hljs-regexp">//</span> 删除用户<br>db.updateUser(<span class="hljs-string">&quot;admin&quot;</span>, &#123;pwd: <span class="hljs-string">&quot;password&quot;</span>&#125;) <span class="hljs-regexp">//</span> 修改admin密码<br>ab.auth(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;pass&quot;</span>) <span class="hljs-regexp">//</span> 使用密码认证<br></code></pre></td></tr></table></figure><p>登录</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">mongo 数据库 -u 用户名 -<span class="hljs-selector-tag">p</span> 密码    <span class="hljs-comment">// 本地</span><br>mongo IP地址:端口/数据库名称 -u 用户名 -<span class="hljs-selector-tag">p</span> 密码  <span class="hljs-comment">// 远程</span><br></code></pre></td></tr></table></figure><h3 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h3><p>（1）数据库用户角色：read、readWrite; </p><p>（2）数据库管理角色：dbAdmin、<strong>dbOwner</strong>、userAdmin； </p><p>（3）集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</p><p>（4）备份恢复角色：backup、restore；</p><p>（5）所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、 dbAdminAnyDatabase </p><p>（6）超级用户角色：<strong>root</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go语言学习笔记</title>
    <link href="/2021/11/28/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/28/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="内置"><a href="#内置" class="headerlink" title="内置"></a>内置</h1><p>Go 语言拥有一些不需要进行导入操作就可以使用的内置函数。它们有时可以针对不同的类型进行操作，例如：len、cap 和 append，或必须用于系统级的操作，例如：panic。因此，它们需要直接获得编译器的支持。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-built_in">append</span>          -- 用来追加元素到数组、slice中,返回修改后的数组、slice<br><span class="hljs-built_in">close</span>           -- 主要用来关闭channel<br><span class="hljs-built_in">delete</span>            -- 从<span class="hljs-keyword">map</span>中删除key对应的value<br><span class="hljs-built_in">panic</span>            -- 停止常规的goroutine  （<span class="hljs-built_in">panic</span>和<span class="hljs-built_in">recover</span>：用来做错误处理）<br><span class="hljs-built_in">recover</span>         -- 允许程序定义goroutine的<span class="hljs-built_in">panic</span>动作<br><span class="hljs-built_in">real</span>            -- 返回<span class="hljs-built_in">complex</span>的实部   （<span class="hljs-built_in">complex</span>、<span class="hljs-built_in">real</span> <span class="hljs-built_in">imag</span>：用于创建和操作复数）<br><span class="hljs-built_in">imag</span>            -- 返回<span class="hljs-built_in">complex</span>的虚部<br><span class="hljs-built_in">make</span>            -- 用来分配内存，返回Type本身(只能应用于slice, <span class="hljs-keyword">map</span>, channel)<br><span class="hljs-built_in">new</span>                -- 用来分配内存，主要用来分配值类型，比如<span class="hljs-type">int</span>、<span class="hljs-keyword">struct</span>。返回指向Type的指针<br><span class="hljs-built_in">cap</span>                -- capacity是容量的意思，用于返回某个类型的最大容量（只能用于切片和 <span class="hljs-keyword">map</span>）<br><span class="hljs-built_in">copy</span>            -- 用于复制和连接slice，返回复制的数目<br><span class="hljs-built_in">len</span>                -- 来求长度，比如<span class="hljs-type">string</span>、array、slice、<span class="hljs-keyword">map</span>、channel ，返回长度<br><span class="hljs-built_in">print</span>、<span class="hljs-built_in">println</span>     -- 底层打印函数，在部署环境中建议使用 fmt 包<br></code></pre></td></tr></table></figure><h1 id="go-mod"><a href="#go-mod" class="headerlink" title="go mod"></a>go mod</h1><ul><li>go mod help 查看帮助</li><li>go mod init&lt;项目模块名称&gt;初始化模块，会在项目根目录下生成 go.mod 文件。</li><li>go mod tidy 根据 go.mod 文件来处理依赖关系。</li><li>go mod vendor 将依赖包复制到项目下的 vendor 目录。建议一些使用了被墙包的话可以这么处理，方便用户快速使用命令 go build -mod&#x3D;vendor 编译</li><li>go list -m all 显示依赖关系。go list -m -json all 显示详细依赖关系。</li><li>go mod download 下载依赖。参数是非必写的，path 是包的路径，version 是包的版本。</li></ul><h1 id="数组切片"><a href="#数组切片" class="headerlink" title="数组切片"></a>数组切片</h1><p>初始化数组的初始化有多种形式,</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs go">[<span class="hljs-number">5</span>] <span class="hljs-type">int</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;    <span class="hljs-comment">//长度为5的数组，其元素值依次为：1，2，3，4，5</span><br>[<span class="hljs-number">5</span>] <span class="hljs-type">int</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;          <span class="hljs-comment">//长度为5的数组，其元素值依次为：1，2，0，0，0 。在初始化时没有指定初值的元素将会赋值为其元素类型int的默认值0,string的默认值是&quot;&quot; </span><br>[...] <span class="hljs-type">int</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;  <span class="hljs-comment">//长度为5的数组，其长度是根据初始化时指定的元素个数决定的 </span><br>[<span class="hljs-number">5</span>] <span class="hljs-type">int</span> &#123; <span class="hljs-number">2</span>:<span class="hljs-number">1</span>,<span class="hljs-number">3</span>:<span class="hljs-number">2</span>,<span class="hljs-number">4</span>:<span class="hljs-number">3</span>&#125; <span class="hljs-comment">//长度为5的数组，key:value,其元素值依次为：0，0，1，2，3。在初始化时指定了2，3，4索引中对应的值：1，2，3 </span><br>[...] <span class="hljs-type">int</span> &#123;<span class="hljs-number">2</span>:<span class="hljs-number">1</span>,<span class="hljs-number">4</span>:<span class="hljs-number">3</span>&#125;    <span class="hljs-comment">//长度为5的数组，起元素值依次为：0，0，1，0，3。由于指定了最大索引4对应的值3，根据初始化的元素个数确定其长度为5赋值与使用</span><br></code></pre></td></tr></table></figure><p>数组的长度不可改变，在特定场景中这样的集合就不太适用，Go中提供了一种灵活，功能强悍的内置类型Slices切片(“动态数组”),与数组相比切片的长度是不固定的，可以追加元素，在追加时可能使切片的容量增大。切片中有两个概念：一是len长度，二是cap容量，长度是指已经被赋过值的最大下标+1，可通过内置函数len()获得。容量是指切片目前可容纳的最多元素个数，可通过内置函数cap()获得。切片是引用类型，因此在当传递切片时将引用同一指针，修改值将会影响其他的对象。</p><p>切片可以通过数组来初始化，也可以通过内置函数make()初始化 .初始化时len&#x3D;cap,在追加元素时如果容量cap不足时将按len的2倍扩容</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go">s :=[] <span class="hljs-type">int</span> &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span> &#125;           <span class="hljs-comment">//直接初始化切片，[]表示是切片类型，&#123;1,2,3&#125;初始化值依次是1,2,3.其cap=len=3</span><br>s := arr[:]                   <span class="hljs-comment">//初始化切片s,是数组arr的引用</span><br>s := arr[startIndex:endIndex] <span class="hljs-comment">//将arr中从下标startIndex到endIndex-1 下的元素创建为一个新的切片</span><br>s := arr[startIndex:]         <span class="hljs-comment">//缺省endIndex时将表示一直到arr的最后一个元素</span><br>s := arr[:endIndex]           <span class="hljs-comment">//缺省startIndex时将表示从arr的第一个元素开始</span><br>s1 := s[startIndex:endIndex]  <span class="hljs-comment">//通过切片s初始化切片s1</span><br>s :=<span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>,<span class="hljs-built_in">len</span>,<span class="hljs-built_in">cap</span>)       <span class="hljs-comment">//通过内置函数make()初始化切片s,[]int 标识为其元素类型为int的切片</span><br></code></pre></td></tr></table></figure><p><code>slice</code>可以从一个数组或一个已经存在的<code>slice</code>中再次声明。<code>slice</code>通过<code>array[i:j]</code>来获取，其中<code>i</code>是数组的开始位置，<code>j</code>是结束位置，但不包含<code>array[j]</code>，它的长度是<code>j-i</code>。</p><p>注意<code>slice</code>和数组在声明时的区别：声明数组时，方括号内写明了数组的长度或使用<code>...</code>自动计算长度，而声明<code>slice</code>时，方括号内没有任何字符</p><p>切片是引用类型，在使用时需要注意其操作：</p><ul><li><p>切片可以通过内置函数append(slice []Type,elems …Type)追加元素，elems可以是一排type类型的数据，也可以是slice,因为追加的一个一个的元素，因此如果将一个slice追加到另一个slice中需要带上”…”，这样才能表示是将slice中的元素依次追加到另一个slice中。另外在通过下标访问元素时下标不能超过len大小，如同数组的下标不能超出len范围一样。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">s</span> :=append(s,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br><span class="hljs-attribute">s</span> :=append(s,s1...)<br></code></pre></td></tr></table></figure></li><li><p><code>slice</code>的默认开始位置是0，<code>ar[:n]</code>等价于<code>ar[0:n]</code></p></li><li><p><code>slice</code>的第二个序列默认是数组的长度，<code>ar[n:]</code>等价于<code>ar[n:len(ar)]</code></p></li><li><p>如果从一个数组里面直接获取<code>slice</code>，可以这样<code>ar[:]</code>，因为默认第一个序列是0，第二个是数组的长度，即等价于<code>ar[0:len(ar)]</code></p></li></ul><p><code>slice</code>是引用类型，所以当引用改变其中元素的值时，其它的所有引用都会改变该值，例如上面的<code>aSlice</code>和<code>bSlice</code>，如果修改了<code>aSlice</code>中元素的值，那么<code>bSlice</code>相对应的值也会改变。</p><h3 id="go-get-和-go-get-u-的区别"><a href="#go-get-和-go-get-u-的区别" class="headerlink" title="go get 和 go get -u 的区别"></a>go get 和 go get -u 的区别</h3><p>如题，区别如下：<br>加上它可以利用网络来更新已有的代码包及其依赖包。如果已经下载过一个代码包，但是这个代码包又有更新了，那么这时候可以直接用 -u 标记来更新本地的对应的代码包。如果不加这个 -u 标记，执行 go get 一个已有的代码包，会发现命令什么都不执行。只有加了 -u 标记，命令会去执行 git pull 命令拉取最新的代码包的最新版本，下载并安装。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> x := <span class="hljs-number">0x12345678</span><br> p := unsafe.Pointer(&amp;x) <span class="hljs-comment">// *int -&gt; Pointer</span><br> n := (*[<span class="hljs-number">4</span>]<span class="hljs-type">byte</span>)(p) <span class="hljs-comment">// Pointer -&gt; *[4]byte</span><br> <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">len</span>(n); i++ &#123;<br> fmt.Printf(<span class="hljs-string">&quot;%X &quot;</span>, n[i])<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">78 </span><span class="hljs-number">56</span> <span class="hljs-number">34</span> <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>IEEE754 NAN  f!&#x3D;f</p><p>单引号字符常量表⽰ Unicode Code Point，⽀持 \uFFFF、\U7FFFFFFF、\xFF 格式。<br>对应 rune 类型，用for遍历是逐字节的for range遍历是字符</p><p>返回局部变量指针是安全的，编译器会根据需要将其分配在 GC Heap 上。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span> *<span class="hljs-type">int</span> &#123;<br> x := <span class="hljs-number">100</span><br> <span class="hljs-keyword">return</span> &amp;x <span class="hljs-comment">// 在堆上分配 x 内存。但在内联时，也可能直接分配在⺫标栈。</span><br>&#125;<br></code></pre></td></tr></table></figure><p>将 Pointer 转换成 uintptr，可变相实现指针运算。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br> d := <span class="hljs-keyword">struct</span> &#123;<br> s <span class="hljs-type">string</span><br> x <span class="hljs-type">int</span><br> &#125;&#123;<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">100</span>&#125;<br>p := <span class="hljs-type">uintptr</span>(unsafe.Pointer(&amp;d)) <span class="hljs-comment">// *struct -&gt; Pointer -&gt; uintptr</span><br> p += unsafe.Offsetof(d.x) <span class="hljs-comment">// uintptr + offset</span><br>  p2 := unsafe.Pointer(p) <span class="hljs-comment">// uintptr -&gt; Pointer</span><br> px := (*<span class="hljs-type">int</span>)(p2) <span class="hljs-comment">// Pointer -&gt; *int</span><br> *px = <span class="hljs-number">200</span> <span class="hljs-comment">// d.x = 200</span><br> fmt.Printf(<span class="hljs-string">&quot;%#v\n&quot;</span>, d)<br>&#125;<br></code></pre></td></tr></table></figure><p>输出：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">struct &#123; s <span class="hljs-keyword">string</span>; x <span class="hljs-keyword">int</span> &#125;&#123;s:<span class="hljs-string">&quot;abc&quot;</span>, x:<span class="hljs-number">200</span>&#125;<br></code></pre></td></tr></table></figure><p>注意：GC 把 uintptr 当成普通整数对象，它⽆法阻⽌ “关联” 对象被回收。</p><p>自定义类型</p><p>命名类型：bool、int、string<br>未命名类型： array、slice、map<br>目标类型是未命名类型会发生隐式转换否则必须显式转换，例如</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">type bigInt int64<br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> bigInt = <span class="hljs-number">12</span><br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> int64 = <span class="hljs-selector-tag">a</span> <span class="hljs-comment">//报错 var b int64 = int64(a) </span><br><br>type FooSlice <span class="hljs-selector-attr">[]</span>uint<br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> FooSlice = FooSlice&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;<br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">b</span> <span class="hljs-selector-attr">[]</span>uint = <span class="hljs-selector-tag">a</span>  <span class="hljs-comment">// 正常运行</span><br></code></pre></td></tr></table></figure><p>运算符  ^取反</p><h3 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus">func <span class="hljs-selector-tag">main</span>() &#123;<br>   <span class="hljs-selector-tag">var</span> v int64 = <span class="hljs-number">12</span>              <span class="hljs-comment">//默认10进制</span><br>   s2 := strconv<span class="hljs-selector-class">.FormatInt</span>(v, <span class="hljs-number">2</span>) <span class="hljs-comment">//10 转2进制</span><br>   fmt<span class="hljs-selector-class">.Printf</span>(<span class="hljs-string">&quot;%v\n&quot;</span>, s2)<br> <br>   s8 := strconv<span class="hljs-selector-class">.FormatInt</span>(v, <span class="hljs-number">8</span>)<br>   fmt<span class="hljs-selector-class">.Printf</span>(<span class="hljs-string">&quot;%v\n&quot;</span>, s8)<br> <br>   s10 := strconv<span class="hljs-selector-class">.FormatInt</span>(v, <span class="hljs-number">10</span>)<br>   fmt<span class="hljs-selector-class">.Printf</span>(<span class="hljs-string">&quot;%v\n&quot;</span>, s10)<br> <br>   s16 := strconv<span class="hljs-selector-class">.FormatInt</span>(v, <span class="hljs-number">16</span>) <span class="hljs-comment">//10 yo 16</span><br>   fmt<span class="hljs-selector-class">.Printf</span>(<span class="hljs-string">&quot;%v\n&quot;</span>, s16)<br> <br>   <span class="hljs-selector-tag">var</span> sv = <span class="hljs-string">&quot;11&quot;</span><br>   fmt<span class="hljs-selector-class">.Println</span>(strconv<span class="hljs-selector-class">.ParseInt</span>(sv, <span class="hljs-number">16</span>, <span class="hljs-number">32</span>)) <span class="hljs-comment">// 16 to 10</span><br>   fmt<span class="hljs-selector-class">.Println</span>(strconv<span class="hljs-selector-class">.ParseInt</span>(sv, <span class="hljs-number">10</span>, <span class="hljs-number">32</span>)) <span class="hljs-comment">// 10 to 10</span><br>   fmt<span class="hljs-selector-class">.Println</span>(strconv<span class="hljs-selector-class">.ParseInt</span>(sv, <span class="hljs-number">8</span>, <span class="hljs-number">32</span>))  <span class="hljs-comment">// 8 to 10</span><br>   fmt<span class="hljs-selector-class">.Println</span>(strconv<span class="hljs-selector-class">.ParseInt</span>(sv, <span class="hljs-number">2</span>, <span class="hljs-number">32</span>))  <span class="hljs-comment">// 2 to 10</span><br> <br>&#125;<br></code></pre></td></tr></table></figure><h1 id="编码url"><a href="#编码url" class="headerlink" title="编码url"></a>编码url</h1><h2 id="为什么需要编码和解码"><a href="#为什么需要编码和解码" class="headerlink" title="为什么需要编码和解码"></a>为什么需要编码和解码</h2><p>1.是因为当字符串数据以url的形式传递给web服务器时,字符串中是不允许出现空格和特殊字符的；<br>2.因为 url 对字符有限制，比如把一个邮箱放入 url，就需要使用 urlencode 函数，因为 url 中不能包含 @ 字符；<br>3.url转义其实也只是为了符合url的规范而已。因为在标准的url规范中中文和很多的字符是不允许出现在url中的。</p><h2 id="哪些字符是需要转化的呢？"><a href="#哪些字符是需要转化的呢？" class="headerlink" title="哪些字符是需要转化的呢？"></a>哪些字符是需要转化的呢？</h2><h3 id="1-ASCII-的控制字符"><a href="#1-ASCII-的控制字符" class="headerlink" title="1. ASCII 的控制字符"></a>1. ASCII 的控制字符</h3><p>这些字符都是不可打印的，自然需要进行转化。</p><h3 id="2-一些非ASCII字符"><a href="#2-一些非ASCII字符" class="headerlink" title="2. 一些非ASCII字符"></a>2. 一些非ASCII字符</h3><p>这些字符自然是非法的字符范围。转化也是理所当然的了。</p><h3 id="3-一些保留字符"><a href="#3-一些保留字符" class="headerlink" title="3. 一些保留字符"></a>3. 一些保留字符</h3><p>很明显最常见的就是“&amp;”了，这个如果出现在url中了，那你认为是url中的一个字符呢，还是特殊的参数分割用的呢？</p><h3 id="4-就是一些不安全的字符了。"><a href="#4-就是一些不安全的字符了。" class="headerlink" title="4. 就是一些不安全的字符了。"></a>4. 就是一些不安全的字符了。</h3><p>例如：空格。为了防止引起歧义，需要被转化为“+”。<br>明白了这些，也就知道了为什么需要转化了，而转化的规则也是很简单的。</p><p>按照每个字符对应的字符编码，不是符合我们范围的，统统的转化为%的形式也就是了。自然也是16进制的形式。</p><h3 id="5-和字符编码无关"><a href="#5-和字符编码无关" class="headerlink" title="5.和字符编码无关"></a>5.和字符编码无关</h3><p>通过urlencode的转化规则和目的，我们也很容易的看出，urleocode是基于字符编码的。同样的一个汉字，不同的编码类型，肯定对应不同的urleocode的串。gbk编码的有gbk的encode结果。<br>apache等服务器，接受到字符串后，可以进行decode，但是还是无法解决编码的问题。编码问题，还是需要靠约定或者字符编码的判断解决。<br>因此，urleocode只是为了url中一些非ascii字符，可以正确无误的被传输，至于使用哪种编码，就不是encode所关心和解决的问题了。<br>编码问题，不是urlencode所要解决的。</p><h2 id="golang之UrlEncode编码-x2F-UrlDecode解码"><a href="#golang之UrlEncode编码-x2F-UrlDecode解码" class="headerlink" title="golang之UrlEncode编码&#x2F;UrlDecode解码"></a>golang之UrlEncode编码&#x2F;UrlDecode解码</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs golang"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span>(<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;net/url&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>  &#123;<br>    <span class="hljs-keyword">var</span> urlStr <span class="hljs-type">string</span> = <span class="hljs-string">&quot;傻了吧:%:%@163&amp; .html.html&quot;</span><br>    escapeUrl := url.QueryEscape(urlStr)<br>    fmt.Println(<span class="hljs-string">&quot;编码:&quot;</span>,escapeUrl)<br><br>    enEscapeUrl, _ := url.QueryUnescape(escapeUrl)<br>    fmt.Println(<span class="hljs-string">&quot;解码:&quot;</span>,enEscapeUrl)<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>编码: %E5%82%BB%E4%BA%86%E5%90%A7%3A%25%3A%25%40163%26+.html.html<br>解码: 傻了吧:%:%@163&amp; .html.html</p><p>原文地址： <a href="https://www.cnblogs.com/haima/p/13442194.html">golang之UrlEncode编码&#x2F;UrlDecode解码</a></p><h1 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h1><p>Golang中的defer语句用于延迟函数的调用，每次 defer 都会把一个函数压入栈中，函数返回前再把延迟的函数取出并执行。Golang 中的 defer 可以帮助我们处理容易忽略的问题，如资源释放、连接关闭等。</p><p>关键字 return 不是一个原子操作，实际上 return 只代理汇编指令 ret，即将跳转程序执行。比如语句 return i，实际上分两步进行，即将 i 值存入栈中作为返回值，然后执行跳转，而 defer 的执行时机正是跳转前，所以说 defer 执行时还是有机会操作返回值的。</p><p>defer函数在return前执行</p><p>匿名返回值，返回字面量，不会被影响</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">foo</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>i := <span class="hljs-number">0</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i++<br>&#125;()<br><span class="hljs-keyword">return</span> i  <span class="hljs-comment">// 0 匿名返回值</span><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">gee</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>i := <span class="hljs-number">0</span><br><span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>i++<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span> <span class="hljs-comment">// 0 字面量</span><br>&#125;<br></code></pre></td></tr></table></figure><p>具名返回值，会被影响</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">func</span> bar() (<span class="hljs-built_in">result</span> <span class="hljs-type">int</span>) &#123;<br>defer <span class="hljs-keyword">func</span>() &#123;<br><span class="hljs-built_in">result</span>++<br>&#125;()<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">result</span> // <span class="hljs-number">1</span> 这里<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>或者<span class="hljs-built_in">result</span>都会返回<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="判断文件是否存在"><a href="#判断文件是否存在" class="headerlink" title="判断文件是否存在"></a>判断文件是否存在</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">FileExist</span><span class="hljs-params">(path <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">bool</span> &#123;<br>  _, err := os.Lstat(path)  <span class="hljs-comment">// Stat</span><br>  <span class="hljs-keyword">return</span> !os.IsNotExist(err)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><ul><li>(re)           numbered capturing group</li><li>(?P<name>re)   named &amp; numbered capturing group</li><li>(?:re)         non-capturing group</li><li>(?flags)       set flags within current group; non-capturing</li><li>(?flags:re)    set flags during re; non-capturing</li></ul><blockquote><p>Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z). The flags are:</p></blockquote><ul><li>i              case-insensitive (default false)</li><li>m              multi-line mode: ^ and $ match begin&#x2F;end line in addition to begin&#x2F;end text (default false)</li><li>s              let . match \</li><li>(default false)</li><li>U              ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false)</li></ul><p>例如不区分大小写</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">r := regexp.MustCompile(`(?i)CaSe`)<br></code></pre></td></tr></table></figure><h1 id="交换顺序"><a href="#交换顺序" class="headerlink" title="交换顺序"></a>交换顺序</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> := <span class="hljs-number">1</span><br><span class="hljs-selector-tag">b</span> := <span class="hljs-number">2</span><br><span class="hljs-selector-tag">a</span> ^= <span class="hljs-selector-tag">b</span><br><span class="hljs-selector-tag">b</span> ^= <span class="hljs-selector-tag">a</span><br><span class="hljs-selector-tag">a</span> ^= b<br></code></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">a</span> := <span class="hljs-number">1</span><br><span class="hljs-selector-tag">b</span> := <span class="hljs-number">2</span><br><span class="hljs-selector-tag">a</span>, <span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">b</span>, a<br></code></pre></td></tr></table></figure><h1 id="获取正在运行的函数名"><a href="#获取正在运行的函数名" class="headerlink" title="获取正在运行的函数名"></a>获取正在运行的函数名</h1><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">func getFuncName() <span class="hljs-built_in">string</span> &#123;<br><span class="hljs-keyword">pc</span>, _, _, _ := <span class="hljs-keyword">runtime</span>.Caller(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">runtime</span>.FuncForPC(<span class="hljs-keyword">pc</span>).Name()<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">getFuncName</span><span class="hljs-params">()</span></span><span class="hljs-type">string</span>&#123;<br>    pc := <span class="hljs-built_in">make</span>([]<span class="hljs-type">uintptr</span>,<span class="hljs-number">1</span>)<br>    runtime.Callers(<span class="hljs-number">2</span>,pc)<br>    f := runtime.FuncForPC(pc[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> f.Name()<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><blockquote><p>go &gt;&#x3D; 1.18</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Number <span class="hljs-keyword">interface</span> &#123;<br><span class="hljs-type">uint</span> | <span class="hljs-type">uint8</span> | <span class="hljs-type">uint16</span> | <span class="hljs-type">uint32</span> | <span class="hljs-type">uint64</span>  # 联合类型<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sum</span>[<span class="hljs-title">K</span> <span class="hljs-title">comparable</span>, <span class="hljs-title">V</span> <span class="hljs-title">Number</span>]<span class="hljs-params">(s <span class="hljs-keyword">map</span>[K]V)</span></span> (sum <span class="hljs-type">uint64</span>) &#123;<br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> s &#123;<br>sum += <span class="hljs-type">uint64</span>(value)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br>fmt.Println(sum[<span class="hljs-type">int</span>, <span class="hljs-type">uint64</span>](<span class="hljs-keyword">map</span>[<span class="hljs-type">int</span>]<span class="hljs-type">uint64</span>&#123;<span class="hljs-number">1</span>: <span class="hljs-number">1</span>, <span class="hljs-number">2</span>: <span class="hljs-number">3</span>&#125;))<br></code></pre></td></tr></table></figure><blockquote><p>为 K 类型参数指定类型约束 comparable。专门针对此类情况，comparable 在 Go 中预先声明了约束。它允许任何类型的值可以用作比较运算符 &#x3D;&#x3D; 和的操作数 !&#x3D;。Go 要求 map keys 具有可比性。所以声明 K as comparable 是必要的，这样你就可以 K 在 map 变量中用作键。它还确保调用代码对 map keys 使用允许的类型。</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go语言学习相关文档</title>
    <link href="/2021/11/28/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/"/>
    <url>/2021/11/28/Go%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://golang.google.cn/doc/">https://golang.google.cn/doc/</a></p><h2 id="TopGoer"><a href="#TopGoer" class="headerlink" title="TopGoer"></a>TopGoer</h2><p><a href="https://topgoer.com/">https://topgoer.com/</a></p><h2 id="GoLang-标准库"><a href="#GoLang-标准库" class="headerlink" title="GoLang 标准库"></a>GoLang 标准库</h2><p><a href="https://studygolang.com/pkgdoc">https://studygolang.com/pkgdoc</a>   [中文]<br><a href="https://pkg.go.dev/">https://pkg.go.dev/</a>      [官方]</p><h2 id="Go编程时光"><a href="#Go编程时光" class="headerlink" title="Go编程时光"></a>Go编程时光</h2><p><a href="https://golang.iswbm.com/index.html">https://golang.iswbm.com/index.html</a></p><h2 id="跟煎鱼学Go"><a href="#跟煎鱼学Go" class="headerlink" title="跟煎鱼学Go"></a>跟煎鱼学Go</h2><p><a href="https://eddycjy.gitbook.io/golang/">https://eddycjy.gitbook.io/golang/</a></p><h2 id="C语言中文网"><a href="#C语言中文网" class="headerlink" title="C语言中文网"></a>C语言中文网</h2><p><a href="http://c.biancheng.net/golang/">http://c.biancheng.net/golang/</a></p><h2 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h2><p>Go 普通指针类型、unsafe.Pointer、uintptr之间的关系<br><a href="https://www.cnblogs.com/-wenli/p/12682477.html">https://www.cnblogs.com/-wenli/p/12682477.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP实现Basic认证</title>
    <link href="/2021/11/27/PHP%E5%AE%9E%E7%8E%B0Basic%E8%AE%A4%E8%AF%81/"/>
    <url>/2021/11/27/PHP%E5%AE%9E%E7%8E%B0Basic%E8%AE%A4%E8%AF%81/</url>
    
    <content type="html"><![CDATA[<h2 id="如何认证"><a href="#如何认证" class="headerlink" title="如何认证"></a>如何认证</h2><p>对于需要basic认证的页面，我们可以让服务端响应一个</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">WWW-Authenticate</span><span class="hljs-punctuation">: </span>Basic<br></code></pre></td></tr></table></figure><p>的header头，并且返回响应码401，浏览器会自动弹出认证的窗口。</p><h2 id="客户端要做什么"><a href="#客户端要做什么" class="headerlink" title="客户端要做什么"></a>客户端要做什么</h2><blockquote><p>当你输入用户名和密码后，后面的请求都会添加下面这样的头部</p></blockquote><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">Authorization:</span> Basic dXNlcjpwYXNz<br></code></pre></td></tr></table></figure><p>其中basic后面的是base64编码的字符串，解码之后的内容是</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">user</span>:<span class="hljs-built_in">pass</span><br></code></pre></td></tr></table></figure><p>上面这样以用户名:密码组成的字符串</p><h2 id="服务端怎么实现"><a href="#服务端怎么实现" class="headerlink" title="服务端怎么实现"></a>服务端怎么实现</h2><p>看下面伪代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">process</span>(<span class="hljs-params">ServerRequestInterface <span class="hljs-variable">$request</span>, RequestHandlerInterface <span class="hljs-variable">$handler</span></span>): <span class="hljs-title">ResponseInterface</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(有Authorization头部) &#123;<br>        解析头部<br>        <span class="hljs-keyword">if</span> (匹配到用户) &#123;<br>            继续响应<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            响应WWW-Authenticate: Basic和<span class="hljs-number">401</span><br>        &#125;<br>    &#125;<br>    <br>    响应WWW-Authenticate: Basic和<span class="hljs-number">401</span>*/<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果你使用的是Apache,那么需要在配置文件中加入</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">SetEnvIf</span> Authorization .+ HTTP_AUTHORIZATION=<span class="hljs-variable">$0</span><br></code></pre></td></tr></table></figure><p>还可以查看官方提供的方案：<a href="https://www.php.net/manual/zh/features.http-auth.php">https://www.php.net/manual/zh/features.http-auth.php</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>19个例子学习Oracle</title>
    <link href="/2021/11/25/19%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%AD%A6%E4%B9%A0Oracle/"/>
    <url>/2021/11/25/19%E4%B8%AA%E4%BE%8B%E5%AD%90%E5%AD%A6%E4%B9%A0Oracle/</url>
    
    <content type="html"><![CDATA[<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--p1</span><br><span class="hljs-keyword">begin</span><br>dbms_output.put_line(<span class="hljs-string">&#x27;你好 世界&#x27;</span>);<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-comment">--p2 引入变量</span><br><span class="hljs-keyword">declare</span><br>    age number <span class="hljs-keyword">default</span> <span class="hljs-number">90</span>;<br>    height number :<span class="hljs-operator">=</span> <span class="hljs-number">175</span>;<br><span class="hljs-keyword">begin</span><br>    dbms_output.put_line(<span class="hljs-string">&#x27;年龄&#x27;</span><span class="hljs-operator">||</span>age<span class="hljs-operator">||</span><span class="hljs-string">&#x27;身高&#x27;</span><span class="hljs-operator">||</span>height);<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-comment">--p3 变量开始运算</span><br><span class="hljs-keyword">declare</span><br>    age number <span class="hljs-keyword">default</span> <span class="hljs-number">90</span>;<br>    height number :<span class="hljs-operator">=</span> <span class="hljs-number">175</span>;<br><span class="hljs-keyword">begin</span><br>    dbms_output.put_line(<span class="hljs-string">&#x27;年龄&#x27;</span><span class="hljs-operator">||</span>age<span class="hljs-operator">||</span><span class="hljs-string">&#x27;身高&#x27;</span><span class="hljs-operator">||</span>height);<br>    age :<span class="hljs-operator">=</span> age <span class="hljs-operator">+</span> <span class="hljs-number">20</span>;<br>    dbms_output.put_line(<span class="hljs-string">&#x27;20年后年龄&#x27;</span><span class="hljs-operator">||</span>age<span class="hljs-operator">||</span><span class="hljs-string">&#x27;岁&#x27;</span>);<br><span class="hljs-keyword">end</span>;<br><br><br><span class="hljs-comment">--p4 引入表达式</span><br><span class="hljs-keyword">declare</span><br>    age number <span class="hljs-keyword">default</span> <span class="hljs-number">90</span>;<br>    height number :<span class="hljs-operator">=</span> <span class="hljs-number">175</span>;<br><span class="hljs-keyword">begin</span><br>    if age<span class="hljs-operator">&gt;</span><span class="hljs-number">70</span> <span class="hljs-keyword">then</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;古稀之年&#x27;</span>);<br>    <span class="hljs-keyword">else</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;风华正茂&#x27;</span>);<br>    <span class="hljs-keyword">end</span> if;<br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-comment">--p5 流程控制</span><br><span class="hljs-keyword">declare</span><br>    age number <span class="hljs-keyword">default</span> <span class="hljs-number">90</span>;<br>    height number :<span class="hljs-operator">=</span> <span class="hljs-number">175</span>;<br>    gender <span class="hljs-type">char</span>(<span class="hljs-number">2</span>) :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;男&#x27;</span>;<br><span class="hljs-keyword">begin</span><br>    if gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">then</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;你可以和女性结婚&#x27;</span>);<br>    <span class="hljs-keyword">end</span> if;<br><br>    if height<span class="hljs-operator">&gt;</span><span class="hljs-number">170</span> <span class="hljs-keyword">then</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;可以打篮球&#x27;</span>);<br>    <span class="hljs-keyword">else</span> <br>        dbms_output.put_line(<span class="hljs-string">&#x27;可以踢足球&#x27;</span>);<br>    <span class="hljs-keyword">end</span> if;<br><br>    if age<span class="hljs-operator">&lt;</span><span class="hljs-number">20</span> <span class="hljs-keyword">then</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;年轻小伙&#x27;</span>);<br>    elsif age <span class="hljs-operator">&lt;=</span> <span class="hljs-number">50</span> <span class="hljs-keyword">then</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;年轻有为&#x27;</span>);<br>    elsif age <span class="hljs-operator">&lt;=</span><span class="hljs-number">70</span> <span class="hljs-keyword">then</span><br>        dbms_output.put_line(<span class="hljs-string">&#x27;安享天伦&#x27;</span>);<br>    <span class="hljs-keyword">else</span>  <br>        dbms_output.put_line(<span class="hljs-string">&#x27;佩服佩服&#x27;</span>);<br>    <span class="hljs-keyword">end</span> if;<br><br><span class="hljs-keyword">end</span>;<br><br><br><span class="hljs-comment">--p6 计算1-100的和</span><br><span class="hljs-keyword">declare</span><br>    i number :<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    total number :<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><span class="hljs-keyword">begin</span><br>    loop<br>        i :<span class="hljs-operator">=</span> i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br>        total :<span class="hljs-operator">=</span> total <span class="hljs-operator">+</span> i;<br><br>        if i<span class="hljs-operator">=</span><span class="hljs-number">100</span> <span class="hljs-keyword">then</span><br>            exit;<br>        <span class="hljs-keyword">end</span> if;<br>    <span class="hljs-keyword">end</span> loop;<br><br>    dbms_output.put_line(<span class="hljs-string">&#x27;总和&#x27;</span><span class="hljs-operator">||</span>total);<br><br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-comment">-- p7: 跳出loop的方法</span><br><span class="hljs-keyword">declare</span><br>    i number :<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    total number :<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><span class="hljs-keyword">begin</span><br>    loop<br>        i :<span class="hljs-operator">=</span> i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br>        total :<span class="hljs-operator">=</span> total <span class="hljs-operator">+</span> i;<br><br>        exit <span class="hljs-keyword">when</span> i<span class="hljs-operator">&gt;=</span><span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">end</span> loop;<br><br>    dbms_output.put_line(<span class="hljs-string">&#x27;总和&#x27;</span><span class="hljs-operator">||</span>total);<br><br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-comment">--p8 whlie循环</span><br><span class="hljs-keyword">declare</span><br>    i number :<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br>    total number :<span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><span class="hljs-keyword">begin</span><br><br>    while i<span class="hljs-operator">&lt;</span><span class="hljs-number">100</span> loop<br>        <br>        i :<span class="hljs-operator">=</span> i<span class="hljs-operator">+</span><span class="hljs-number">1</span>;<br>        total :<span class="hljs-operator">=</span> total <span class="hljs-operator">+</span> i;<br>        <br>    <span class="hljs-keyword">end</span> loop;<br><br>    dbms_output.put_line(<span class="hljs-string">&#x27;总和&#x27;</span><span class="hljs-operator">||</span>total);<br><br><span class="hljs-keyword">end</span>;<br><br><br><br><span class="hljs-comment">--p9 for 循环</span><br><span class="hljs-keyword">begin</span><br><br>    <span class="hljs-comment">--for 循环变量 in 起始值..结束值 loop</span><br>    <span class="hljs-comment">--xxxxx</span><br>    <span class="hljs-comment">--end loop;</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-number">1.</span><span class="hljs-number">.9</span> loop<br>    <br>        dbms_output.put_line(i);<br><br>    <span class="hljs-keyword">end</span> loop;<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> reverse <span class="hljs-number">1.</span><span class="hljs-number">.9</span> loop<br>    <br>        dbms_output.put_line(i);<br><br>    <span class="hljs-keyword">end</span> loop;<br><br><span class="hljs-keyword">end</span>;<br><br><br><br><span class="hljs-comment">--p10 没有返回值的&quot;函数&quot;</span><br><span class="hljs-comment">--做一个求面积的过程</span><br><span class="hljs-comment">--declare</span><br><span class="hljs-comment">--    area number;</span><br><span class="hljs-comment">--    procedure 过程名(参数名 类型,...) is</span><br><span class="hljs-comment">--    begin</span><br><span class="hljs-comment">--        主体</span><br><span class="hljs-comment">--    end;</span><br><span class="hljs-comment">--begin</span><br><span class="hljs-comment">--end;</span><br><br><span class="hljs-keyword">declare</span> <br>    area number;<br>    <span class="hljs-keyword">procedure</span> mian(a number,b number) <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">begin</span><br>    <br>        area :<span class="hljs-operator">=</span> a <span class="hljs-operator">*</span> b;<br>        dbms_output.put_line(a<span class="hljs-operator">||</span><span class="hljs-string">&#x27;乘&#x27;</span><span class="hljs-operator">||</span>b<span class="hljs-operator">||</span><span class="hljs-string">&#x27;的面积是&#x27;</span><span class="hljs-operator">||</span>area);<br>    <br>    <span class="hljs-keyword">end</span>;<br><span class="hljs-keyword">begin</span><br><br>    mian(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>);<br>    mian(<span class="hljs-number">6</span>,<span class="hljs-number">7</span>);<br>    mian(<span class="hljs-number">3</span>,<span class="hljs-number">7</span>);<br><br><span class="hljs-keyword">end</span>;<br><br><br><br><span class="hljs-comment">--p11 做一个求面积的函数</span><br><span class="hljs-comment">--declare</span><br><span class="hljs-comment">--    area number;</span><br><span class="hljs-comment">--    function 过程名(参数名 类型,...) return 类型 is</span><br><span class="hljs-comment">--    begin</span><br><span class="hljs-comment">--        主体</span><br><span class="hljs-comment">--    end;</span><br><span class="hljs-comment">--begin</span><br><span class="hljs-comment">--end;</span><br><br><span class="hljs-keyword">declare</span> <br>    area number;<br>    <span class="hljs-keyword">function</span> mian(a number,b number) <span class="hljs-keyword">return</span> number <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">begin</span><br>    <br>        area :<span class="hljs-operator">=</span> a <span class="hljs-operator">*</span> b;<br>        <br>        <span class="hljs-keyword">return</span> area;<br>    <br>    <span class="hljs-keyword">end</span>;<br><span class="hljs-keyword">begin</span><br><br>    dbms_output.put_line(mian(<span class="hljs-number">5</span>,<span class="hljs-number">4</span>));<br>    dbms_output.put_line(mian(<span class="hljs-number">3</span>,<span class="hljs-number">7</span>));<br>    dbms_output.put_line(mian(<span class="hljs-number">6</span>,<span class="hljs-number">9</span>));<br><br><span class="hljs-keyword">end</span>;<br><br><br><span class="hljs-comment">--p12 自定义变量类型 之记录类型</span><br><br><span class="hljs-keyword">declare</span><br>    <br>    type student <span class="hljs-keyword">is</span> record<br>    (<br>        sno <span class="hljs-type">char</span>(<span class="hljs-number">5</span>),<br>        name varchar2(<span class="hljs-number">10</span>),<br>        age number<br>    );<br><br>    lisi student;<br><br><span class="hljs-keyword">begin</span><br><br>    lisi.sno :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;s1008&#x27;</span>;<br>    lisi.name :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;李四&#x27;</span>;<br>    lisi.age :<span class="hljs-operator">=</span> <span class="hljs-number">19</span>;<br><br>    dbms_output.put_line(<span class="hljs-string">&#x27;我叫&#x27;</span><span class="hljs-operator">||</span>lisi.name<span class="hljs-operator">||</span><span class="hljs-string">&#x27;,我&#x27;</span><span class="hljs-operator">||</span>lisi.age<span class="hljs-operator">||</span><span class="hljs-string">&#x27;岁,学号是&#x27;</span><span class="hljs-operator">||</span>lisi.sno);<br><span class="hljs-keyword">end</span>;<br><br><br><br><br><span class="hljs-comment">--p13 自定义类型之集合类型</span><br><br><br><span class="hljs-keyword">declare</span> <br> type answer <span class="hljs-keyword">is</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">of</span> <span class="hljs-type">char</span>(<span class="hljs-number">2</span>);<br> ans answer :<span class="hljs-operator">=</span> answer(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>);<br><br><span class="hljs-keyword">begin</span><br><br>    dbms_output.put_line(<span class="hljs-string">&#x27;共有&#x27;</span><span class="hljs-operator">||</span>ans.<span class="hljs-built_in">count</span>()<span class="hljs-operator">||</span><span class="hljs-string">&#x27;答案,分别是:&#x27;</span>);<br>    dbms_output.put_line(ans(<span class="hljs-number">1</span>));<br>    dbms_output.put_line(ans(<span class="hljs-number">2</span>));<br>    dbms_output.put_line(ans(<span class="hljs-number">3</span>));<br>    dbms_output.put_line(ans(<span class="hljs-number">4</span>));<br><br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-comment">--p14 声明数据类型的第3个方法</span><br><br><span class="hljs-keyword">declare</span><br>    age number;<br>    变量名 另一个变量<span class="hljs-operator">%</span>type;<br><br>    age 表名.列名<span class="hljs-operator">%</span>type; <span class="hljs-comment">--声明和列一样的类型</span><br><br>    <span class="hljs-comment">--简化声明record类型</span><br>    变量名 表名<span class="hljs-operator">%</span>rowtype;<br><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">end</span>;<br><br><br><span class="hljs-comment">--p15 测试一下rowtype</span><br><br><span class="hljs-keyword">declare</span><br>    xg student<span class="hljs-operator">%</span>rowtype;<br><span class="hljs-keyword">begin</span><br><br>    xg.sno :<span class="hljs-operator">=</span> <span class="hljs-number">123</span>;<br>    xg.name :<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;小刚&#x27;</span>;<br><br>    dbms_output.put_line(xg.sno<span class="hljs-operator">||</span>xg.name);<br><br><span class="hljs-keyword">end</span>;<br><br><br><br><span class="hljs-comment">--p16 pl/sql操作数据库中的数据</span><br><span class="hljs-comment">--查询部门的名称及地区，及部门的总薪水与奖金</span><br><br><span class="hljs-keyword">declare</span> <br><br>    depart dept<span class="hljs-operator">%</span>rowtype;<br>    total_sal number;<br>    total_comm number;<br><br>    <span class="hljs-keyword">procedure</span> deptinfo(dno number)<br>    <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">select</span> dname,loc <span class="hljs-keyword">into</span> depart.dname,depart.loc <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span>dno;<br>        <span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(sal),<span class="hljs-built_in">sum</span>(comm) <span class="hljs-keyword">into</span> total_sal,total_comm <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span>dno;<br><br>        dbms_output.put_line(<span class="hljs-string">&#x27;部门名称：&#x27;</span><span class="hljs-operator">||</span>depart.dname<span class="hljs-operator">||</span><span class="hljs-string">&#x27;在&#x27;</span><span class="hljs-operator">||</span>depart.loc);<br>        dbms_output.put_line(<span class="hljs-string">&#x27;这个部门每月工资及奖金各是&#x27;</span><span class="hljs-operator">||</span>total_sal<span class="hljs-operator">||</span><span class="hljs-string">&#x27;和&#x27;</span><span class="hljs-operator">||</span>total_comm);<br>    <span class="hljs-keyword">end</span>;<br><br><span class="hljs-keyword">begin</span><br><br>    deptinfo(<span class="hljs-number">80</span>);<br>    deptinfo(<span class="hljs-number">30</span>); <br><span class="hljs-keyword">end</span>;<br><br><br><br><span class="hljs-comment">--p17 引入异常处理</span><br><br><span class="hljs-keyword">declare</span> <br><br>    depart dept<span class="hljs-operator">%</span>rowtype;<br>    total_sal number;<br>    total_comm number;<br><br>    <span class="hljs-keyword">procedure</span> deptinfo(dno number)<br>    <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">select</span> dname,loc <span class="hljs-keyword">into</span> depart.dname,depart.loc <span class="hljs-keyword">from</span> dept <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span>dno;<br>        <span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(sal),<span class="hljs-built_in">sum</span>(comm) <span class="hljs-keyword">into</span> total_sal,total_comm <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">where</span> deptno<span class="hljs-operator">=</span>dno;<br><br>        dbms_output.put_line(<span class="hljs-string">&#x27;部门名称：&#x27;</span><span class="hljs-operator">||</span>depart.dname<span class="hljs-operator">||</span><span class="hljs-string">&#x27;在&#x27;</span><span class="hljs-operator">||</span>depart.loc);<br>        dbms_output.put_line(<span class="hljs-string">&#x27;这个部门每月工资及奖金各是&#x27;</span><span class="hljs-operator">||</span>total_sal<span class="hljs-operator">||</span><span class="hljs-string">&#x27;和&#x27;</span><span class="hljs-operator">||</span>total_comm);<br>    <span class="hljs-keyword">end</span>;<br><br><span class="hljs-keyword">begin</span><br>    deptinfo(<span class="hljs-number">80</span>);<br>    deptinfo(<span class="hljs-number">30</span>);<br>exception<br>    <span class="hljs-keyword">when</span> NO_DATA_FOUND <span class="hljs-keyword">then</span><br>       dbms_output.put_line(<span class="hljs-string">&#x27;没有数据&#x27;</span>);<br>    <span class="hljs-keyword">when</span> others <span class="hljs-keyword">then</span><br>       dbms_output.put_line(<span class="hljs-string">&#x27;其他错误&#x27;</span>);<br><span class="hljs-keyword">end</span>;<br><br><br><br><span class="hljs-comment">--p18:递归过程或函数</span><br><span class="hljs-comment">--求1-&gt;N的和,N允许输入</span><br><br><span class="hljs-keyword">declare</span><br>    m number;<br>    total number;<br><br>    <span class="hljs-keyword">function</span> qiuhe(n number) <span class="hljs-keyword">return</span> number<br>    <span class="hljs-keyword">is</span><br>    <span class="hljs-keyword">begin</span><br><br>        if n<span class="hljs-operator">&gt;</span><span class="hljs-number">1</span> <span class="hljs-keyword">then</span><br>            <span class="hljs-keyword">return</span> n <span class="hljs-operator">+</span> qiuhe(n<span class="hljs-number">-1</span>);<br>        <span class="hljs-keyword">else</span> <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">end</span> if;<br><br>    <span class="hljs-keyword">end</span>;<br><br><span class="hljs-keyword">begin</span><br><br>    dbms_output.put_line(qiuhe(<span class="hljs-number">10</span>));<br><br><span class="hljs-keyword">end</span>;<br><br><span class="hljs-comment">--p19 存储过程/存储函数</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">function</span> qiuhe(n number) <span class="hljs-keyword">return</span> number<br><span class="hljs-keyword">is</span><br><span class="hljs-keyword">begin</span><br><br>    if n<span class="hljs-operator">&gt;</span><span class="hljs-number">1</span> <span class="hljs-keyword">then</span><br>        <span class="hljs-keyword">return</span> n <span class="hljs-operator">+</span> qiuhe(n<span class="hljs-number">-1</span>);<br>    <span class="hljs-keyword">else</span> <br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">end</span> if;<br><br><span class="hljs-keyword">end</span>;<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>堆栈数据的进出原则是什么</title>
    <link href="/2021/11/25/%E5%A0%86%E6%A0%88%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BF%9B%E5%87%BA%E5%8E%9F%E5%88%99%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <url>/2021/11/25/%E5%A0%86%E6%A0%88%E6%95%B0%E6%8D%AE%E7%9A%84%E8%BF%9B%E5%87%BA%E5%8E%9F%E5%88%99%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<h1 id="堆栈数据的进出原则是什么？"><a href="#堆栈数据的进出原则是什么？" class="headerlink" title="堆栈数据的进出原则是什么？"></a>堆栈数据的进出原则是什么？</h1><p>堆栈数据的进出原则是先进后出。</p><h1 id="栈堆的原理"><a href="#栈堆的原理" class="headerlink" title="栈堆的原理"></a>栈堆的原理</h1><p>栈区（stack）由操作系统自动分配释放 ，存放函数的参数值，局部变量的某值等等。其操作方式类似于数据结构中的栈。</p><p>堆区（heap）一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。注意它与数据结构中的堆是两回事，分配方式倒是类似于链表</p><p>栈的特点：栈是一种数据结构，它按照先进后出的原则存储数据，先进入的数据被压入栈底，最后的数据在栈顶，需要读数据的时候从栈顶开始弹出数据（最后一个数据被第一个读出来）。</p><p>栈是只能在某一端插入和删除的特殊线性表。用桶堆积物品，先堆进来的压在底下，随后一件一件往堆。取走时，只能从上面一件一件取。堆和取都在顶部进行，底部一般是不动的。</p><p>栈就是一种类似桶堆积物品的数据结构，进行删除和插入的一端称栈顶，另一堆称栈底。插入一般称为进栈（PUSH），删除则称为退栈（POP）。 栈也称为后进先出表（LIFO表）</p><p><img src="https://img.php.cn/upload/image/465/199/886/1634539512830561.png"></p><p>原文地址：<a href="https://www.php.cn/faq/483124.html">https://www.php.cn/faq/483124.html</a></p><p>更多推荐：<br><a href="https://www.cnblogs.com/mysticCoder/p/4921724.html">https://www.cnblogs.com/mysticCoder/p/4921724.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式高级用法</title>
    <link href="/2021/11/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/"/>
    <url>/2021/11/25/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%AB%98%E7%BA%A7%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h1><p>上一章分享了正式表达式的入门知识，以及单字符、多字符常用的匹配方法，对于工作维护过程中已经够用，但是有时候只使用基础知识来实现就会比较麻烦，如果使用高级用法就会比较方便很多。<br> 例如：匹配一个HTML文件中两个<code>&lt;B&gt;</code>标签中的文件。<br> 文本内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">This offer is not available to customers living in <span class="hljs-tag">&lt;<span class="hljs-name">B</span>&gt;</span>AK<span class="hljs-tag">&lt;/<span class="hljs-name">B</span>&gt;</span> and <span class="hljs-tag">&lt;<span class="hljs-name">B</span>&gt;</span>HI<span class="hljs-tag">&lt;/<span class="hljs-name">B</span>&gt;</span><br></code></pre></td></tr></table></figure><p>从上一章内容的知识可以想到的表达式可能如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">&lt;[Bb]&gt;.*&lt;/[Bb]&gt;<br></code></pre></td></tr></table></figure><p>但是这个表达式配置的结果是<code>AK&lt;/B&gt; and &lt;B&gt;HI</code>，而不是我们想要的<code>AK</code>和<code>HI</code>。</p><h1 id="懒惰型匹配"><a href="#懒惰型匹配" class="headerlink" title="懒惰型匹配"></a>懒惰型匹配</h1><blockquote><p>引子中的例子中的匹配方式是属于贪婪行为，就是尽可能多的匹配内容，像例子中第一个<B>和最后一个</B>中间都被匹配到了，而不管匹配内容中是否存在</B>。<br> 上一章中讲到的*和+、{m,}都是所谓的“贪婪型”的。在这一节中讲一下与“贪婪型”相反的“懒惰型”，就是匹配尽可能少的内容。</p></blockquote><p>实现很简单，就是在原有“贪婪型”元字符后面加上一个<code>?</code> 号，如下表格</p><table><thead><tr><th>贪婪型元字符</th><th>懒惰型元字符</th></tr></thead><tbody><tr><td>*</td><td>*？</td></tr><tr><td>+</td><td>+？</td></tr><tr><td>{m,}</td><td>{m,}?</td></tr></tbody></table><h1 id="位置匹配"><a href="#位置匹配" class="headerlink" title="位置匹配"></a>位置匹配</h1><blockquote><p>在现实的系统中一般表达位置的地方就是一个单词的开头以及结尾或者一个字符串的开头或者结尾。<br> 注意这个边界只是一个位置，例如单词边界匹配的是<code>\w</code>和<code>\W</code>之间的一个位置</p></blockquote><table><thead><tr><th>元字符</th><th>说明</th><th>注意</th></tr></thead><tbody><tr><td>\b</td><td>单词边界，单词的开头或者单词的结尾</td><td>回退键的元字符是<code>[\b]</code></td></tr><tr><td>\B</td><td>表示非单词边界</td><td></td></tr><tr><td>^</td><td>字符串的开头位置</td><td>放在<code>[]</code>中表示取非操作</td></tr><tr><td>$</td><td>字符串结尾位置</td><td></td></tr></tbody></table><h2 id="扩展："><a href="#扩展：" class="headerlink" title="扩展："></a>扩展：</h2><ul><li>像egrep中也支持使用<code>\&lt;</code>匹配单词开头位置，使用<code>\&gt;</code>匹配单词结尾位置，但是支持这种元字符的编辑器比较少。</li><li>(?m)是一个分行匹配模式的记号，放在一个表达式的最前面，会改变字符串位置匹配的行为。<code>^</code>不仅匹配正常的字符串开头还匹配行分隔符（换行符）后面的开始位置；同样<code>$</code>不仅匹配正常的字符串结尾还匹配行分隔符（换行符）后面的结束位置；此用法只有部分正则表达式会支持</li></ul><table><thead><tr><th>选项</th><th>描述</th><th>支持平台</th></tr></thead><tbody><tr><td>(?d)</td><td>Unix中的行</td><td>java</td></tr><tr><td>(?i)</td><td>不区分大小写</td><td>PCRE  Perl  java</td></tr><tr><td>(?J)</td><td>允许重复的名字</td><td>PCRE*</td></tr><tr><td>(?m)</td><td>多行</td><td>PCRE  Perl  java</td></tr><tr><td>(?s)</td><td>单行</td><td>PCRE  Perl  java</td></tr><tr><td>(?u)</td><td>Unicode</td><td>java</td></tr><tr><td>(?U)</td><td>默认最短匹配，与懒惰型匹配类似</td><td>PCRE</td></tr><tr><td>(?x)</td><td>忽略空格和注释</td><td>PCRE Perl Java</td></tr><tr><td>(?-…)</td><td>复原或关闭选项</td><td>PCRE</td></tr></tbody></table><h1 id="捕获分组与后向引用"><a href="#捕获分组与后向引用" class="headerlink" title="捕获分组与后向引用"></a>捕获分组与后向引用</h1><p>前面的元字符都是对紧挨着前面的一个字符有效，例如表达式<code>the&#123;3&#125;</code>匹配<code>theee</code>字符串，假如我们想匹配连续三个<code>the</code>字符串怎么办呢，这就涉及到子表达式的概念。</p><h2 id="子表达式"><a href="#子表达式" class="headerlink" title="子表达式"></a>子表达式</h2><p>把一个表达式匹配的内容做为一个单独的元素嵌入到另外一个表达式中，那这个做为独立元素的表达式就是子表达式，需要使用<code>()</code>括起来。这个跟数学的表达式概念很类似。<br> 并且子表达与数学表达式还有一个类似的地方就是，正则表达式的子表达式也可以嵌套使用</p><blockquote><p>本节开头说的那个问题就可以使用子表达式来实现，<code>(the)&#123;3&#125;</code>就会匹配<code>thethethe</code>这个字符串。</p></blockquote><p>假如我们再加个条件：我们想匹配连续三个<code>the</code>或者连续三个<code>you</code>，怎么实现？这就是正则表达式的选择操作符，也叫或操作符了</p><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>&#96;</td><td>&#96;</td></tr></tbody></table><p>上面的问题就可以使用正则表达式<code>(the|you)&#123;3&#125;</code>来表示</p><h2 id="捕获分组与后向引用-1"><a href="#捕获分组与后向引用-1" class="headerlink" title="捕获分组与后向引用"></a>捕获分组与后向引用</h2><p>当一个模式的全部或者部分内容由<strong>一对括号括起来</strong>时，就对表达式进行了分组（其实就是放在<code>()</code>中的子表达式），并且把分组匹配到内容捕获并且临时存放在内存中。这就是捕获分组，可以在后面表达式中使用就叫后向引用，或者叫回溯引用。<br> 默认情况下，分组是从左到右依次排序从1编号，第一个分组就是1，第二个分组就是2等等。</p><blockquote><p>最开始的时候支持的编号范围是1到9，现在应该已经没有这种限制了。</p></blockquote><p>后向引用很简单就是一个<code>\</code>或者<code>$</code>后面跟相应编号即可。例如<code>\1</code>或者<code>$1</code>就表示引用第一个捕获分组。</p><h2 id="命名分组"><a href="#命名分组" class="headerlink" title="命名分组"></a>命名分组</h2><p>前面讲捕获分组都是通过位置编号来访问，在perl和python、.NET等语言中还支持对捕获分组命名。这样就比较容易理解</p><table><thead><tr><th>命名语法</th><th>描述</th></tr></thead><tbody><tr><td><code>(?&lt;name&gt;分组)</code></td><td>命名分组</td></tr><tr><td><code>(?P&lt;name&gt;分组)</code></td><td>python中的命名分组</td></tr><tr><td><code>\k&lt;name&gt;</code></td><td>Perl中引用命名分组</td></tr><tr><td><code>\k&#39;name&#39;</code></td><td>Perl中引用命名分组</td></tr><tr><td><code>\g&#123;name&#125;</code></td><td>Perl中引用命名分组</td></tr><tr><td><code>\k&#123;name&#125;</code></td><td>.NET中引用命名分组</td></tr><tr><td><code>(?P=name)</code></td><td>Python中引用命名分组</td></tr></tbody></table><p>例：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">preg_match</span><span class="hljs-params">(<span class="hljs-string">&#x27;/(?P&lt;name&gt;\d+)/&#x27;</span>, <span class="hljs-variable">$string</span>, <span class="hljs-variable">$matched</span>)</span></span><br></code></pre></td></tr></table></figure><p>如果匹配到，那么name的值就是\d+匹配到的值</p><h2 id="非捕获分组"><a href="#非捕获分组" class="headerlink" title="非捕获分组"></a>非捕获分组</h2><p>顾名思义，与捕获分组相反，就是不会将分组匹配的内容放在内存中。主要是为了提高性能。<br> 使用方法：在分组的开头加上<code>?:</code>，例如<code>(?:the)</code></p><blockquote><p>当把非捕获分组语法中的<code>:</code>换成<code>&gt;</code>时，就变成了原子分组（另一种非捕获分组），可以进一步提升性能。因为原子分组会将分组内部的回溯操作关闭。</p></blockquote><h2 id="环视"><a href="#环视" class="headerlink" title="环视"></a>环视</h2><p>环视是一种非捕获分组，它根据某个模式之前或者之后的内容要求匹配其他模式。环视也称为零宽度断言。</p><table><thead><tr><th>环视分类</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>(?&#x3D;分组)</td><td>正前瞻，匹配且要求紧随其后内容为分组匹配的内容</td><td><code>a(?=b)</code>,匹配<code>a</code>并且后面坚接着是<code>b</code>的字符串，可以匹配<code>abc</code>但是不匹配<code>acb</code></td></tr><tr><td>(?!分组)</td><td>反前瞻，即对正前瞻含义取反，匹配且要求紧随其后内容不为分组匹配的内容</td><td><code>a(?!b)</code>,匹配<code>a</code>并且后面坚接着不是<code>b</code>的字符串，可以匹配<code>acb</code>但是不匹配<code>abc</code></td></tr><tr><td>(?&lt;&#x3D;分组)</td><td>正后顾，即对正前瞻方向取反，匹配且要求紧挨着之前的内容为分组匹配的内容</td><td><code>(?&lt;=a)b)</code>,匹配<code>b</code>并且前面紧挨着是<code>a</code>的字符串，可以匹配<code>abc</code>但是不匹配<code>cbc</code></td></tr><tr><td>(?&lt;!分组)</td><td>反后顾，即对正后顾含义取反，匹配且要求紧挨着之前的内容不为分组匹配的内容</td><td><code>(?&lt;!a)b)</code>,匹配<code>b</code>并且前面紧挨着不是<code>a</code>的字符串，可以匹配<code>cbc</code>但是不匹配<code>abc</code></td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>《学习正则表达式》<br> 《正则表达式必知必会》</p><p>作者：itsenlin<br>链接：<a href="https://www.jianshu.com/p/c39e761860bb">https://www.jianshu.com/p/c39e761860bb</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP  fsockopen</title>
    <link href="/2021/11/21/PHP%20%20fsockopen/"/>
    <url>/2021/11/21/PHP%20%20fsockopen/</url>
    
    <content type="html"><![CDATA[<figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mel">fsockopen(<br>    <span class="hljs-keyword">string</span> $hostname,<br>    <span class="hljs-keyword">int</span> $port = <span class="hljs-number">-1</span>,<br>    <span class="hljs-keyword">int</span> &amp;amp;$errno = ?,<br>    <span class="hljs-keyword">string</span> &amp;amp;$errstr = ?,<br>    <span class="hljs-keyword">float</span> $timeout = ini_get(&amp;quot;default_socket_timeout&amp;quot;)<br>): resource<br></code></pre></td></tr></table></figure><p>初始化一个套接字连接到指定主机（<code>hostname</code>）。</p><p>PHP支持以下的套接字传输器类型列表 <a href="https://www.php.net/manual/zh/transports.php">所支持的套接字传输器（Socket Transports）列表</a>。也可以通过<a href="https://www.php.net/manual/zh/function.stream-get-transports.php">stream_get_transports()</a>来获取套接字传输器支持类型。</p><p>默认情况下将以阻塞模式开启套接字连接。当然你可以通过<a href="https://www.php.net/manual/zh/function.stream-set-blocking.php">stream_set_blocking()</a>将它转换到非阻塞模式。</p><p><a href="https://www.php.net/manual/zh/function.stream-socket-client.php">stream_socket_client()</a>与之非常相似，而且提供了更加丰富的参数设置，包括非阻塞模式和提供上下文的的设置。</p><h3 id="参数-¶"><a href="#参数-¶" class="headerlink" title="参数 ¶"></a>参数<a href="https://www.php.net/manual/zh/function.fsockopen.php#refsect1-function.fsockopen-parameters"> ¶</a></h3><ul><li><p><code>hostname</code></p><p>如果安装了<a href="https://www.php.net/manual/zh/openssl.installation.php">OpenSSL</a>，那么你也许应该在你的主机名地址前面添加访问协议<code>ssl://</code>或者是<code>tls://</code>，从而可以使用基于TCP&#x2F;IP协议的SSL或者TLS的客户端连接到远程主机。</p></li><li><p><code>port</code></p><p>端口号。如果对该参数传一个-1，则表示不使用端口，例如<code>unix://</code>。</p></li><li><p><code>errno</code></p><p>如果传入了该参数，holds the system level error number that occurred in the system-level <code>connect()</code> call。如果<code>errno</code>的返回值为<code>0</code>，而且这个函数的返回值为**<code>false</code>**，那么这表明该错误发生在套接字连接（<code>connect()</code>）调用之前，导致连接失败的原因最大的可能是初始化套接字的时候发生了错误。</p></li><li><p><code>errstr</code></p><p>错误信息将以字符串的信息返回。</p></li><li><p><code>timeout</code></p><p>设置连接的时限，单位为秒。<strong>注意</strong>:注意：如果你要对建立在套接字基础上的读写操作设置操作时间设置连接时限，请使用<a href="https://www.php.net/manual/zh/function.stream-set-timeout.php">stream_set_timeout()</a>，**fsockopen()**的连接时限（<code>timeout</code>）的参数仅仅在套接字连接的时候生效。</p></li></ul><h3 id="返回值-¶"><a href="#返回值-¶" class="headerlink" title="返回值 ¶"></a>返回值<a href="https://www.php.net/manual/zh/function.fsockopen.php#refsect1-function.fsockopen-returnvalues"> ¶</a></h3><p>**fsockopen()<strong>将返回一个文件句柄，之后可以被其他文件类函数调用（例如：<a href="https://www.php.net/manual/zh/function.fgets.php">fgets()</a>，<a href="https://www.php.net/manual/zh/function.fgetss.php">fgetss()</a>，<a href="https://www.php.net/manual/zh/function.fwrite.php">fwrite()</a>，<a href="https://www.php.net/manual/zh/function.fclose.php">fclose()</a>还有<a href="https://www.php.net/manual/zh/function.feof.php">feof()</a>）。如果调用失败，将返回</strong><code>false</code>**。</p><h3 id="错误／异常-¶"><a href="#错误／异常-¶" class="headerlink" title="错误／异常 ¶"></a>错误／异常<a href="https://www.php.net/manual/zh/function.fsockopen.php#refsect1-function.fsockopen-errors"> ¶</a></h3><p>如果主机（<code>hostname</code>）不可访问，将会抛出一个警告级别（**<code>E_WARNING</code>**）的错误提示。</p><p>**示例 #1 *<em>fsockopen()*<em>的例子</em></em></p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-variable">&amp;lt</span>;?php<br>$fp = fsock<span class="hljs-meta">open</span>(<span class="hljs-variable">&amp;quot</span>;www.example.com<span class="hljs-variable">&amp;quot</span>;, 80, $errno, $errstr, 30);<br><span class="hljs-keyword">if</span> (!$fp) &#123;<br>    echo <span class="hljs-variable">&amp;quot</span>;$errstr ($errno)<span class="hljs-variable">&amp;lt</span>;br /<span class="hljs-variable">&amp;gt</span>;\n<span class="hljs-variable">&amp;quot</span>;;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    $<span class="hljs-keyword">out</span> = <span class="hljs-variable">&amp;quot</span>;GET / HTTP/1.1\r\n<span class="hljs-variable">&amp;quot</span>;;<br>    $<span class="hljs-keyword">out</span> .= <span class="hljs-variable">&amp;quot</span>;Host: www.example.com\r\n<span class="hljs-variable">&amp;quot</span>;;<br>    $<span class="hljs-keyword">out</span> .= <span class="hljs-variable">&amp;quot</span>;Connection: Close\r\n\r\n<span class="hljs-variable">&amp;quot</span>;;<br>    <span class="hljs-meta">fwrite</span>($fp, $<span class="hljs-keyword">out</span>);<br>    <span class="hljs-keyword">while</span> (!feof($fp)) &#123;<br>        echo fgets($fp, 128);<br>    &#125;<br>    <span class="hljs-meta">fclose</span>($fp);<br>&#125;<br>?<span class="hljs-variable">&amp;gt</span>;<br></code></pre></td></tr></table></figure><p><strong>示例 #2 使用UDP连接</strong></p><p>下面这个例子展示了怎么样在自己的机器上通过UDP套接字连接（端口号13）来检索日期和时间。</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-variable">&amp;lt</span>;?php<br>$fp = fsock<span class="hljs-meta">open</span>(<span class="hljs-variable">&amp;quot</span>;www.example.com<span class="hljs-variable">&amp;quot</span>;, 80, $errno, $errstr, 30);<br><span class="hljs-keyword">if</span> (!$fp) &#123;<br>    echo <span class="hljs-variable">&amp;quot</span>;$errstr ($errno)<span class="hljs-variable">&amp;lt</span>;br /<span class="hljs-variable">&amp;gt</span>;\n<span class="hljs-variable">&amp;quot</span>;;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    $<span class="hljs-keyword">out</span> = <span class="hljs-variable">&amp;quot</span>;GET / HTTP/1.1\r\n<span class="hljs-variable">&amp;quot</span>;;<br>    $<span class="hljs-keyword">out</span> .= <span class="hljs-variable">&amp;quot</span>;Host: www.example.com\r\n<span class="hljs-variable">&amp;quot</span>;;<br>    $<span class="hljs-keyword">out</span> .= <span class="hljs-variable">&amp;quot</span>;Connection: Close\r\n\r\n<span class="hljs-variable">&amp;quot</span>;;<br>    <span class="hljs-meta">fwrite</span>($fp, $<span class="hljs-keyword">out</span>);<br>    <span class="hljs-keyword">while</span> (!feof($fp)) &#123;<br>        echo fgets($fp, 128);<br>    &#125;<br>    <span class="hljs-meta">fclose</span>($fp);<br>&#125;<br>?<span class="hljs-variable">&amp;gt</span>;<br></code></pre></td></tr></table></figure><p>原文地址： <a href="https://www.php.net/manual/zh/function.fsockopen.php">https://www.php.net/manual/zh/function.fsockopen.php</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何使用Telnet</title>
    <link href="/2021/11/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Telnet/"/>
    <url>/2021/11/21/%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Telnet/</url>
    
    <content type="html"><![CDATA[<blockquote><p>退出telnet使用ctrl + ] 再 ctrl + d</p></blockquote><h1 id="发送HTTP请求"><a href="#发送HTTP请求" class="headerlink" title="发送HTTP请求"></a>发送HTTP请求</h1><h2 id="打开连接"><a href="#打开连接" class="headerlink" title="打开连接"></a>打开连接</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">telnet</span> chengyao.xyz <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h2 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">GET <span class="hljs-regexp">/ HTTP/</span><span class="hljs-number">1.1</span><br>Host: localhost<br>\r\n<br></code></pre></td></tr></table></figure><blockquote><p>这里的Host是必须的，否则会400</p></blockquote><p>发送<code>Content-Length</code> 头后服务端会等待输入相应长度的内容后才返回<br><code>POST</code> 提交的时候需要添加<code>Content-Type</code></p><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cheng</span>@DESKTOP-<span class="hljs-number">845</span>LJ9G:/mnt/c/Users/ChengYao$ telnet chengyao.xyz <span class="hljs-number">80</span><br><span class="hljs-attribute">Trying</span> <span class="hljs-number">1.14.70.42</span>...<br><span class="hljs-attribute">Connected</span> to chengyao.xyz.<br><span class="hljs-attribute">Escape</span> character is &#x27;^]&#x27;.<br><span class="hljs-attribute">GET</span> / HTTP/<span class="hljs-number">1</span>.<span class="hljs-number">1</span><br><span class="hljs-attribute">Host</span>: localhost<br><br><span class="hljs-attribute">HTTP</span>/<span class="hljs-number">1</span>.<span class="hljs-number">1</span> <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Server</span>: nginx<br><span class="hljs-attribute">Date</span>: Sun, <span class="hljs-number">21</span> Nov <span class="hljs-number">2021</span> <span class="hljs-number">07</span>:<span class="hljs-number">04</span>:<span class="hljs-number">56</span> GMT<br><span class="hljs-attribute">Content</span>-Type: text/html<br><span class="hljs-attribute">Content</span>-Length: <span class="hljs-number">1326</span><br><span class="hljs-attribute">Last</span>-Modified: Wed, <span class="hljs-number">26</span> Apr <span class="hljs-number">2017</span> <span class="hljs-number">08</span>:<span class="hljs-number">03</span>:<span class="hljs-number">47</span> GMT<br><span class="hljs-attribute">Connection</span>: keep-alive<br><span class="hljs-attribute">Vary</span>: Accept-Encoding<br><span class="hljs-attribute">ETag</span>: <span class="hljs-string">&quot;59005463-52e&quot;</span><br><span class="hljs-attribute">Accept</span>-Ranges: bytes<br><br><span class="hljs-section">&lt;!doctype html&gt;</span><br><span class="hljs-section">&lt;html&gt;</span><br><span class="hljs-section">&lt;head&gt;</span><br><span class="hljs-section">&lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>请求头</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">If</span>-Modified-Since<br><span class="hljs-keyword">If</span>-<span class="hljs-built_in">None</span>-Mathch<br><span class="hljs-string">``</span><span class="hljs-string">``</span><br><br>服务端响应<br></code></pre></td></tr></table></figure><p>ETag</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br>如果客户端没有过期，服务端不在发送，返回<span class="hljs-number">304</span>，而是从本地取<br><br>使用<span class="hljs-number">307</span>重定向可以保持数据，例如post提交到<span class="hljs-keyword">a</span>.php， <span class="hljs-keyword">a</span>.php重定向到<span class="hljs-keyword">b</span>.php，则可以用<span class="hljs-number">307</span>重定向<br><br># 连接SMTP服务器<br><br>```<span class="hljs-keyword">shell</span><br>telnet smtp.qq.<span class="hljs-keyword">com</span> <span class="hljs-number">25</span><br>Trying <span class="hljs-number">14.18</span>.<span class="hljs-number">175.202</span>...<br>Connected <span class="hljs-keyword">to</span> smtp.qq.<span class="hljs-keyword">com</span>.<br>Escape character <span class="hljs-keyword">is</span> <span class="hljs-string">&#x27;^]&#x27;</span>.<br><span class="hljs-number">220</span> newxmesmtplogicsvrsza9.qq.<span class="hljs-keyword">com</span> XMail Esmtp QQ Mail Server.<br>HELO localhost<br><span class="hljs-number">250</span>-newxmesmtplogicsvrsza5.qq.<span class="hljs-keyword">com</span>-<span class="hljs-number">9.22</span>.<span class="hljs-number">14.83</span>-<span class="hljs-number">79972670</span><br><span class="hljs-number">250</span>-SIZE <span class="hljs-number">73400320</span><br><span class="hljs-number">250</span> OK<br>AUTH LOGIN<br><span class="hljs-number">334</span> VXNlcm5hbWU6<br>OTg3ODYxNDY4QHFxLmNvb1==<br><span class="hljs-number">334</span> UGFzc3dvcmQ6<br>Y2xqYXB5aWJlRTd1mRiaA==<br><span class="hljs-number">235</span> Authentication successful<br>MAIL FROM: &lt;<span class="hljs-number">987861463</span>@qq.<span class="hljs-keyword">com</span>&gt;<br><span class="hljs-number">250</span> OK<br>RCPT TO: &lt;bigyao@<span class="hljs-number">139</span>.<span class="hljs-keyword">com</span>&gt;<br><span class="hljs-number">250</span> OK<br>DATA<br><span class="hljs-number">354</span> End data with <span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;LF&gt;</span>.<span class="hljs-symbol">&lt;CR&gt;</span><span class="hljs-symbol">&lt;LF&gt;</span>.<br>Dear, hello, thank you.<br>.<br><span class="hljs-number">250</span> OK: queued <span class="hljs-keyword">as</span>.<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式匹配次数</title>
    <link href="/2021/11/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E6%AC%A1%E6%95%B0/"/>
    <url>/2021/11/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D%E6%AC%A1%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>正则表达式里匹配次数的元字符有：<br>（一） <code>&#123;0,1&#125;</code>、<code>&#123;0,&#125;</code>、<code>&#123;1,&#125;</code>、<code>&#123;3&#125;</code> 逗号前面次数到逗号后面次数<br>（二） <code>?</code>、<code>??</code> 0次或1次<br>（三） <code>*</code> 0次以上，即0<del>n<br>（四） <code>+</code> 1次以上，即1</del>n</p><p>下面深入讲解下这几个元字符的意义：</p><h2 id="0-1-、-0-、-1-、-3-逗号前面次数到逗号后面次数"><a href="#0-1-、-0-、-1-、-3-逗号前面次数到逗号后面次数" class="headerlink" title="{0,1}、{0,}、{1,}、{3} 逗号前面次数到逗号后面次数"></a><code>&#123;0,1&#125;</code>、<code>&#123;0,&#125;</code>、<code>&#123;1,&#125;</code>、<code>&#123;3&#125;</code> 逗号前面次数到逗号后面次数</h2><p>上面列了几种都是<code>&#123;&#125;</code>用于表示次数时常见的写法。 </p><ul><li><code>&#123;0,1&#125;</code> 匹配0次或1次 </li><li><code>&#123;0,&#125;</code> 匹配0次以上，逗号后面为空表示无限次的意思 </li><li><code>&#123;1,&#125;</code> 匹配1次以上 </li><li><code>&#123;3&#125;</code> 匹配3次，它是<code>&#123;3,3&#125;</code>的简写形式</li></ul><p>需要注意的是，前面数字大于后面数字是会报错的</p><p>有时候会看到<code>[0-9]&#123;1&#125;</code>这样的写法，其实这样写也算是多余的，它等价<code>[0-9]</code>，正则里没有添加量词修饰的匹配都是按1次算。</p><h2 id="、-0次或1次"><a href="#、-0次或1次" class="headerlink" title="?、?? 0次或1次"></a><code>?</code>、<code>??</code> 0次或1次</h2><p><code>?</code> 匹配0次或1次，可以理解为<code>&#123;0,1&#125;</code>的简写，常见用法有： </p><ul><li><code>https?</code> 用于匹配<code>http</code>或<code>https</code> </li><li><code>(https?://)?</code> 用于匹配域名前缀<code>https?://</code>可有可无的情况。</li></ul><p>另外，需要了解的是，<code>?</code>是匹配优先的，这是什么意思呢？<br>所谓匹配优先，就是字面意思，能匹配我就先匹配。<br>下面举例说明一下：<br>源码：<code>www.zjmainstay.cn</code><br>正则：<code>^(www\.)?(.+)$</code><br>匹配结果是：分组1得到了<code>www.</code>，分组2得到了<code>zjmainstay.cn</code><br>从这里可以看出，对于<code>(www\.)?</code>部分的正则，它先进行了匹配，然后<code>.+</code>部分再匹配。<br>那么，如果我们想要把<code>www.</code>留给后面的<code>.+</code>去匹配怎么办？<br>我们需要找到一个非匹配优先的方法，对于非匹配优先，接触过<a href="http://www.zjmainstay.cn/deep-regexp#%E6%A6%82%E5%BF%B5%E4%B8%89%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F%E4%B8%8E%E9%9D%9E%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F">非贪婪模式</a>的读者可能马上想到非贪婪模式，不错，利用非贪婪模式可以解决这个问题：<br>正则：<code>^(www\.)*?(.+)$</code><br>当然，使用正则：<code>^(www\.)&#123;0,1&#125;?(.+)$</code>也是可以的，而且这个更接近原本的意思。<br>另外，很多人可能没见过，其实我们还能用：<code>^(www\.)??(.+)$</code>实现。这里的<code>??</code>是<code>?</code>的非匹配优先版本。</p><h2 id="0次以上，即0-n"><a href="#0次以上，即0-n" class="headerlink" title="* 0次以上，即0~n"></a><code>*</code> 0次以上，即0~n</h2><p><code>*</code> 0次或任意次，可以理解为<code>&#123;0,&#125;</code>的简写，常见用法有： </p><ul><li><code>.*</code> 贪婪模式，匹配优先，匹配除换行外的任意字符0次以上 </li><li><code>.*?</code> 非贪婪模式，非匹配优先，匹配除换行外的任意字符0次以上 </li><li><code>&amp;lt;a href=&amp;quot;/[^&amp;quot;]*&amp;quot;</code> 在<code>href=&amp;quot;/&amp;quot;</code>的双引号中间，匹配非<code>&amp;quot;</code>的字符0次以上</li></ul><p>大家可能发现，<code>.*?</code> 这里也有<code>?</code>，但是它已经脱离了前面对<code>?</code>介绍的0次或1次的范围，没错，只是为了让大家不至于混淆，我没有把它归入上面的<code>?</code>当中。<br>我们可以理解为，<code>?</code>只要跟本文所说的几个计次量词结合，就形成非贪婪模式。甚至，连<code>??</code>你都可以认为是结合后的0次或1次的非贪婪模式，反正也能解释通不是？</p><h2 id="1次以上，即1-n"><a href="#1次以上，即1-n" class="headerlink" title="+ 1次以上，即1~n"></a><code>+</code> 1次以上，即1~n</h2><p><code>+</code> 与 <code>*</code> 除了匹配次数意义上有所差别，常见用法都类似，它强调的是至少匹配1次以上，可以理解为<code>&#123;1,&#125;</code>的简写。 </p><ul><li><code>.+</code> 贪婪模式，匹配优先，匹配除换行外的任意字符1次以上 </li><li><code>.+?</code> 非贪婪模式，非匹配优先，匹配除换行外的任意字符1次以上 </li><li><code>&amp;lt;a href=&amp;quot;/[^&amp;quot;]+&amp;quot;</code> 在<code>href=&amp;quot;/&amp;quot;</code>的双引号中间，匹配非<code>&amp;quot;</code>的字符1次以上</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>量词本身使用时，都是贪婪模式匹配，而量词和<code>?</code>能结合成非贪婪模式匹配。<br>贪婪模式匹配就是尽可能多地匹配，非贪婪模式匹配就是尽可能少地匹配。</p><p>&gt; 原文地址： <a href="https://www.cnblogs.com/tsql/p/6386210.html">https://www.cnblogs.com/tsql/p/6386210.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>负载均衡笔记</title>
    <link href="/2021/11/20/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/20/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="常用负载均衡"><a href="#常用负载均衡" class="headerlink" title="常用负载均衡"></a>常用负载均衡</h1><h2 id="HTTP-重定向"><a href="#HTTP-重定向" class="headerlink" title="HTTP 重定向"></a><strong>HTTP</strong> <strong>重定向</strong></h2><p>对于HTTP 重定向，你一定不陌生，它可以将 HTTP 请求进行转移，在 Web 开发中我们经常会用它来完成自动跳转，比如用户登录成功后跳转到相应的管理页面。 这种重定向完全由HTTP 定义，并且由HTTP 代理和Web 服务器共同实现。很简单，当HTTP 代理（比如浏览器）向Web服务器请求某个URL后，Web 服务器可以通过HTTP 响应头信息中的Location 标记来返回一个新的URL，这意味着HTTP代理需要继续请求这个新的URL ，这便完成了自动跳转。当然，如果你自己写了一个 HTTP 代理，也可以不支持重定向，也就是对于Web 服务器返回的Location 标记视而不见，虽然这可能不符合HTTP 标准，但这完全取决于你的应用需要。 也正是因为HTTP 重定向具备了请求转移和自动跳转的本领，所以除了满足应用程序需要的各种自动跳转之外，它还可以用于实现负载均衡，以达到Web 扩展的目的。</p><h2 id="DNS-负载均衡"><a href="#DNS-负载均衡" class="headerlink" title="DNS 负载均衡"></a><strong>DNS</strong> <strong>负载均衡</strong></h2><p>我们知道，DNS负责提供域名解析服务，当我们访问某个站点时，实际上首先需要通过该站点域名的DNS服务器来获取域名指向的IP 地址，在这一过程中，DNS服务器完成了域名到IP 地址的映射，同样，这种映射也可以是一对多的，这时候，DNS 服务器便充当了负载均衡调度器（也称均衡器），它就像前面提到的重定向转移策略一样，将用户的请求分散到多台服务器上，但是它的实现机制完全不同。</p><h2 id="反向代理负载均衡"><a href="#反向代理负载均衡" class="headerlink" title="反向代理负载均衡"></a><strong>反向代理负载均衡</strong></h2><p>反向代理服务器的核心工作便是转发 HTTP 请求，因此它工作在 HTTP 层面，也就是 TCP 七层结构中的应用层（第七层），所以基于反向代理的负载均衡也称为七层负载均衡，实现它并不困难，目前几乎所有主流的 Web 服务器都热衷于支持基于反向代理的负载均衡，随后我们将进行Nginx反向代理负载均衡的实验</p><h2 id="IP-负载均衡"><a href="#IP-负载均衡" class="headerlink" title="IP 负载均衡"></a><strong>IP</strong> <strong>负载均衡</strong></h2><p>事实上，在数据链路层（第二层）、网络层（第三层）以及传输层（四层）都可以实现不同机制的负载均衡，但有所不同的是，这些负载均衡调度器的工作必须由Linux 内核来完成，因为我们希望网络数据包在从内核缓冲区进入进程用户地址空间之前，尽早地被转发到其他实际服务器上，没错，Linux 内核当然可以办得到，位于内核的Netfilter和IPVS可以解决问题，而用户空间的应用程序对此却束手无策。 另一方面，也正是因为可以将调度器工作在应用层以下，这些负载均衡系统可以支持更多的网络服务协议，比如FTP 、SMTP 、DNS ，以及流媒体和Vo I P 等应用。 </p><h1 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h1><p>&gt; 计算机集群简称集群是一种计算机系统， 它通过一组松散集成的计算机软件和&#x2F;或硬件连接起来高度紧密地协作完成计算工作。在某种意义上，他们可以被看作是一台计算机。集群系统中的单个计算机通常称为节点，通常通过局域网连接，但也有其它的可能连接方式。集群计算机通常用来改进单个计算机的计算速度和&#x2F;或可靠性。一般情况下集群计算机比单个计算机，比如工作站或超级计算机性能价格比要高得多。</p><h2 id="集群分类"><a href="#集群分类" class="headerlink" title="集群分类"></a>集群分类</h2><p>集群分为同构与异构两种，它们的区别在于：组成集群系统的计算机之间的体系结构是否相同。集群计算机按功能和结构可以分成以下几类: </p><h3 id="高可用性集群-High-availability-HA-clusters"><a href="#高可用性集群-High-availability-HA-clusters" class="headerlink" title="高可用性集群 (High-availability (HA) clusters)"></a><strong>高可用性集群</strong> (High-availability (HA) clusters)</h3><p>当集群中有某个节点失效的情况下，其上的任务会自动转移到其他正常的节点上。可以将集群中的某节点进行离线维护再上线，该过程并不影响整个集群的运行。</p><h3 id="负载均衡集群-Load-balancing-clusters"><a href="#负载均衡集群-Load-balancing-clusters" class="headerlink" title="负载均衡集群 (Load balancing clusters)"></a><strong>负载均衡集群</strong> (Load balancing clusters)</h3><p>负载均衡集群运行时，一般通过一个或者多个前端负载均衡器，将工作负载分发到后端的一组服务器上，从而达到整个系统的高性能和高可用性。这样的计算机集群有时也被称为服务器群（Server Farm）。 一般高可用性集群和负载均衡集群会使用类似的技术，或同时具有高可用性与负载均衡的特点。</p><p>Linux虚拟服务器（LVS）项目在Linux操作系统上提供了最常用的负载均衡软件。</p><h3 id="高性能计算集群-High-performance-HPC-clusters"><a href="#高性能计算集群-High-performance-HPC-clusters" class="headerlink" title="高性能计算集群 ( High-performance (HPC) clusters)"></a><strong>高性能计算集群</strong> ( High-performance (HPC) clusters)</h3><p>高性能计算集群采用将计算任务分配到集群的不同计算节点而提高计算能力，因而主要应用在科学计算领域。比较流行的HPC采用Linux操作系统和其它一些免费软件来完成并行运算。这一集群配置通常被称为Beowulf集群。这类集群通常运行特定的程序以发挥HPC cluster的并行能力。这类程序一般应用特定的运行库, 比如专为科学计算设计的MPI库。</p><p>HPC集群特别适合于在计算中各计算节点之间发生大量数据通讯的计算作业，比如一个节点的中间结果或影响到其它节点计算结果的情况。</p><h3 id="网格计算-Grid-computing"><a href="#网格计算-Grid-computing" class="headerlink" title="网格计算 (Grid computing)"></a><strong>网格计算</strong> (Grid computing)</h3><p>网格计算或网格集群是一种与集群计算非常相关的技术。网格与传统集群的主要差别是网格是连接一组相关并不信任的计算机，它的运作更像一个计算公共设施而不是一个独立的计算机。还有，网格通常比集群支持更多不同类型的计算机集合。</p><p>网格计算是针对有许多独立作业的工作任务作优化，在计算过程中作业间无需共享数据。网格主要服务于管理在独立执行工作的计算机间的作业分配。资源如存储可以被所有结点共享，但作业的中间结果不会影响在其他网格结点上作业的进展。</p><h2 id="基于LVS的负载均衡集群"><a href="#基于LVS的负载均衡集群" class="headerlink" title="基于LVS的负载均衡集群"></a>基于LVS的负载均衡集群</h2><h3 id="三种网络-x2F-工作模式"><a href="#三种网络-x2F-工作模式" class="headerlink" title="三种网络&#x2F;工作模式"></a>三种网络&#x2F;工作模式</h3><p>NAT、DR、TUN</p><h3 id="十个调度算法"><a href="#十个调度算法" class="headerlink" title="十个调度算法"></a>十个调度算法</h3><p>rr、wrr、lc、wlc、lblc、lblcr、dh、sh、sed、 nq</p><h3 id="集群系统的角色、结构"><a href="#集群系统的角色、结构" class="headerlink" title="集群系统的角色、结构"></a>集群系统的角色、结构</h3><p>Client: CIP</p><p>Router:GWIP</p><p>VirtualServer(VS): VIP</p><p>Director&#x2F;LoadBalancer(LB): DIP</p><p>RealServer(RS): RIP</p><h3 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h3><p>1.<strong>轮叫调度</strong>（Round Robin）(简称rr)</p><p>调度器通过“轮叫”调度算法将外部请求按顺序轮流分配到集群中的真实服务器上，它均等地对待每一台服务器，而不管服务器上实际的连接数和系统负载。</p><p>2.<strong>加权轮叫</strong>（Weighted Round Robin）（简称wrr)</p><p>调度器通过“加权轮叫”调度算法根据真实服务器的不同处理能力来调度访问请求。这样可以保证处理能力强的服务器能处理更多的访问流量。调度器可以自动问询真实服务器的负载情况，并动态地调整其权值。</p><p>3.<strong>最少链接</strong>（Least Connections）(LC)</p><p>调度器通过“最少连接”调度算法动态地将网络请求调度到已建立的链接数最少的服务器上。如果集群系统的真实服务器具有相近的系统性能，采用“最小连接”调度算法可以较好地均衡负载。</p><p>4.<strong>加权最少链接</strong>（Weighted Least Connections）(WLC)</p><p>在集群系统中的服务器性能差异较大的情况下，调度器采用“加权最少链接”调度算法优化负载均衡性能，具有较高权值的服务器将承受较大比例的活动连接负载。调度器可以自动问询真实服务器的负载情况，并动态地调整其权值。</p><p>5.<strong>基于局部性的最少链接</strong>（Locality-Based Least Connections）(LBLC)</p><p>“基于局部性的最少链接”调度算法是针对目标IP地址的负载均衡，目前主要用于Cache集群系统。该算法根据请求的目标IP地址找出该目标IP地址最近使用的服务器，若该服务器是可用的且没有超载，将请求发送到该服务器；若服务器不存在，或者该服务器超载且有服务器处于一半的工作负载，则用“最少链接” 的原则选出一个可用的服务器，将请求发送到该服务器。</p><p>6.<strong>带复制的基于局部性最少链接</strong>（Locality-Based Least Connections with Replication）(LBLCR)</p><p>“带复制的基于局部性最少链接”调度算法也是针对目标IP地址的负载均衡，目前主要用于Cache集群系统。它与LBLC算法的不同之处是它要维护从一个目标 IP地址到一组服务器的映射，而LBLC算法维护从一个目标IP地址到一台服务器的映射。该算法根据请求的目标IP地址找出该目标IP地址对应的服务器组，按“最小连接”原则从服务器组中选出一台服务器，若服务器没有超载，将请求发送到该服务器；若服务器超载，则按“最小连接”原则从这个集群中选出一台服务器，将该服务器加入到服务器组中，将请求发送到该服务器。同时，当该服务器组有一段时间没有被修改，将最忙的服务器从服务器组中删除，以降低复制的程度。</p><p>7.<strong>目标地址散列</strong>（Destination Hashing）(DH)</p><p>“目标地址散列”调度算法根据请求的目标IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的且未超载，将请求发送到该服务器，否则返回空。</p><p>8.<strong>源地址散列</strong>（Source Hashing）(SH)</p><p>“源地址散列”调度算法根据请求的源IP地址，作为散列键（Hash Key）从静态分配的散列表找出对应的服务器，若该服务器是可用的且未超载，将请求发送到该服务器，否则返回空。</p><ol start="9"><li><strong>最短的期望的延迟</strong>（Shortest Expected Delay Scheduling SED）(SED)</li></ol><p>基于wlc算法。这个必须举例来说了</p><p>ABC三台机器分别权重123 ，连接数也分别是123。那么如果使用WLC算法的话一个新请求进入时它可能会分给ABC中的任意一个。使用sed算法后会进行这样一个运算</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span>(<span class="hljs-number">1</span>+<span class="hljs-number">1</span>)/<span class="hljs-number">1</span><br><br><span class="hljs-attribute">B</span>(<span class="hljs-number">1</span>+<span class="hljs-number">2</span>)/<span class="hljs-number">2</span><br><br><span class="hljs-attribute">C</span>(<span class="hljs-number">1</span>+<span class="hljs-number">3</span>)/<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>根据运算结果，把连接交给C 。</p><p>10.<strong>最少队列调度</strong>（Never Queue Scheduling NQ）(NQ)</p><p>无需队列。如果有台 realserver的连接数＝0就直接分配过去，不需要在进行sed运算</p><h3 id="LVS配置流程框架"><a href="#LVS配置流程框架" class="headerlink" title="LVS配置流程框架"></a>LVS配置流程框架</h3><p>拓扑信息收集</p><p>Director端配置过程</p><p>RealServer端配置过程</p><p>测试过程</p><h3 id="LVS集群拓扑信息表"><a href="#LVS集群拓扑信息表" class="headerlink" title="LVS集群拓扑信息表"></a>LVS集群拓扑信息表</h3><p>角色：Client, Router, VS, RS</p><p>拓扑信息：CIP, GWIP, DIP, VIP, RIP,……</p><h3 id="IP规划："><a href="#IP规划：" class="headerlink" title="IP规划："></a>IP规划：</h3><p>Hostname       ip</p><p>VIP             192.168.1.250</p><p>MASTER        192.168.1.202</p><p>BACKUP        192.168.1.204</p><p>REALSERVER1     192.168.1.201</p><p>REALSERVER2     192.168.1.203</p><h3 id="配置LVS集群的过程"><a href="#配置LVS集群的过程" class="headerlink" title="配置LVS集群的过程"></a>配置LVS集群的过程</h3><p>确认内核支持ipvs</p><p>执行命令：modprobe -l | grep ipvs</p><p>确定集群架构、类型、角色&#x2F;成员、拓扑，确定各成员的网络配置参数。</p><p>网络环境的配置</p><p>专用网络设备：路由器&#x2F;防火墙&#x2F;交换机</p><p>集群各成员主机配置信息</p><p>使用ifconfig或者ip命令配置网络接口</p><p>在各个角色主机上跑tcpdump抓包，分析报文通径。这一方法通常用于分析LVS配置中的故障。</p><p>前端(FrontEnd)调度器Director的配置</p><p>NAT:</p><p>外网VIP配置，将作为对外公开的可访问接口</p><p>内网DIP配置，将作为后端RealServer的GWIP</p><p>内核IP转发参数设置</p><p>负载均衡服务、服务器及规则配置</p><p>基于ipvsadm脚本的方法</p><p>基于keepalived配置文件的方法</p><p>DR:</p><p>先在对外公开的可访问接口上配置DIP，然后在该接口上创建子接口配置VIP</p><p>内核参数设置</p><p>负载均衡服务、服务器及规则配置</p><p>基于ipvsadm脚本的方法</p><p>基于keepalived配置文件的方法</p><p>TUN:同DR，但要注意配置重点在隧道设备。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Golang标准库之strings</title>
    <link href="/2021/11/19/Golang%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bstrings/"/>
    <url>/2021/11/19/Golang%E6%A0%87%E5%87%86%E5%BA%93%E4%B9%8Bstrings/</url>
    
    <content type="html"><![CDATA[<p>&gt; package strings</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">import</span> &amp;quot;strings&amp;quot;<br></code></pre></td></tr></table></figure><p>strings包实现了用于操作字符的简单函数。</p><p>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#674">EqualFold</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">EqualFold(<span class="hljs-params">s</span>, <span class="hljs-params">t</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">bool</span><br></code></pre></td></tr></table></figure><p>判断两个utf-8编码字符串（将unicode大写、小写、标题三种格式字符视为相同）是否相同。</p><p>Example</p><h1 id="func-HasPrefix"><a href="#func-HasPrefix" class="headerlink" title="func HasPrefix"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#371">HasPrefix</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">HasPrefix(<span class="hljs-params">s</span>, <span class="hljs-params">prefix</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">bool</span><br></code></pre></td></tr></table></figure><p>判断s是否有前缀字符串prefix。</p><h1 id="func-HasSuffix"><a href="#func-HasSuffix" class="headerlink" title="func HasSuffix"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#376">HasSuffix</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">HasSuffix(<span class="hljs-params">s</span>, <span class="hljs-params">suffix</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">bool</span><br></code></pre></td></tr></table></figure><p>判断s是否有后缀字符串suffix。</p><h1 id="func-Contains"><a href="#func-Contains" class="headerlink" title="func Contains"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#112">Contains</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">Contains(<span class="hljs-params">s</span>, <span class="hljs-params">substr</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">bool</span><br></code></pre></td></tr></table></figure><p>判断字符串s是否包含子串substr。</p><p>Example</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h1 id="func-ContainsRune"><a href="#func-ContainsRune" class="headerlink" title="func ContainsRune"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#122">ContainsRune</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">ContainsRune(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">r</span> <span class="hljs-params">rune</span>)</span> <span class="hljs-built_in">bool</span><br></code></pre></td></tr></table></figure><p>判断字符串s是否包含utf-8码值r。</p><h1 id="func-ContainsAny"><a href="#func-ContainsAny" class="headerlink" title="func ContainsAny"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#117">ContainsAny</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">ContainsAny(<span class="hljs-params">s</span>, <span class="hljs-params">chars</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">bool</span><br></code></pre></td></tr></table></figure><p>判断字符串s是否包含字符串chars中的任一字符。</p><p>Example</p><h1 id="func-Count"><a href="#func-Count" class="headerlink" title="func Count"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#65">Count</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">Count(<span class="hljs-params">s</span>, <span class="hljs-params">sep</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><p>返回字符串s中有几个不重复的sep子串。</p><p>Example</p><h1 id="func-Index"><a href="#func-Index" class="headerlink" title="func Index"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#127">Index</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">Index(<span class="hljs-params">s</span>, <span class="hljs-params">sep</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><p>子串sep在字符串s中第一次出现的位置，不存在则返回-1。</p><p>Example</p><h1 id="func-IndexByte"><a href="#func-IndexByte" class="headerlink" title="func IndexByte"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings_decl.go?name=release#8">IndexByte</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">IndexByte(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">c</span> <span class="hljs-params">byte</span>)</span> <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><p>字符c在s中第一次出现的位置，不存在则返回-1。</p><h1 id="func-IndexRune"><a href="#func-IndexRune" class="headerlink" title="func IndexRune"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#190">IndexRune</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">IndexRune(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">r</span> <span class="hljs-params">rune</span>)</span> <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><p>unicode码值r在s中第一次出现的位置，不存在则返回-1。</p><p>Example</p><h1 id="func-IndexAny"><a href="#func-IndexAny" class="headerlink" title="func IndexAny"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#211">IndexAny</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">IndexAny(<span class="hljs-params">s</span>, <span class="hljs-params">chars</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><p>字符串chars中的任一utf-8码值在s中第一次出现的位置，如果不存在或者chars为空字符串则返回-1。</p><p>Example</p><h1 id="func-IndexFunc"><a href="#func-IndexFunc" class="headerlink" title="func IndexFunc"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#537">IndexFunc</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">IndexFunc(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">f</span> <span class="hljs-params">func</span>(<span class="hljs-params">rune</span>)</span> <span class="hljs-built_in">bool</span>) <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><p>s中第一个满足函数f的位置i（该处的utf-8码值r满足f(r)&#x3D;&#x3D;true），不存在则返回-1。</p><p>Example</p><h1 id="func-LastIndex"><a href="#func-LastIndex" class="headerlink" title="func LastIndex"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#164">LastIndex</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">LastIndex(<span class="hljs-params">s</span>, <span class="hljs-params">sep</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><p>子串sep在字符串s中最后一次出现的位置，不存在则返回-1。</p><p>Example</p><h1 id="func-LastIndexAny"><a href="#func-LastIndexAny" class="headerlink" title="func LastIndexAny"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#227">LastIndexAny</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">LastIndexAny(<span class="hljs-params">s</span>, <span class="hljs-params">chars</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><p>字符串chars中的任一utf-8码值在s中最后一次出现的位置，如不存在或者chars为空字符串则返回-1。</p><h1 id="func-LastIndexFunc"><a href="#func-LastIndexFunc" class="headerlink" title="func LastIndexFunc"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#543">LastIndexFunc</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">LastIndexFunc(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">f</span> <span class="hljs-params">func</span>(<span class="hljs-params">rune</span>)</span> <span class="hljs-built_in">bool</span>) <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><p>s中最后一个满足函数f的unicode码值的位置i，不存在则返回-1。</p><h1 id="func-Title"><a href="#func-Title" class="headerlink" title="func Title"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#489">Title</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Title</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>返回s中每个单词的首字母都改为标题格式的字符串拷贝。</p><p>BUG: Title用于划分单词的规则不能很好的处理Unicode标点符号。</p><p>Example</p><h1 id="func-ToLower"><a href="#func-ToLower" class="headerlink" title="func ToLower"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#437">ToLower</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ToLower</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>返回将所有字母都转为对应的小写版本的拷贝。</p><p>Example</p><h1 id="func-ToLowerSpecial"><a href="#func-ToLowerSpecial" class="headerlink" title="func ToLowerSpecial"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#450">ToLowerSpecial</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">ToLowerSpecial(<span class="hljs-params">_case</span> <span class="hljs-params">unicode</span>.SpecialCase, <span class="hljs-params">s</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>使用_case规定的字符映射，返回将所有字母都转为对应的小写版本的拷贝。</p><h1 id="func-ToUpper"><a href="#func-ToUpper" class="headerlink" title="func ToUpper"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#434">ToUpper</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ToUpper</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>返回将所有字母都转为对应的大写版本的拷贝。</p><p>Example</p><h1 id="func-ToUpperSpecial"><a href="#func-ToUpperSpecial" class="headerlink" title="func ToUpperSpecial"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#444">ToUpperSpecial</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">ToUpperSpecial(<span class="hljs-params">_case</span> <span class="hljs-params">unicode</span>.SpecialCase, <span class="hljs-params">s</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>使用_case规定的字符映射，返回将所有字母都转为对应的大写版本的拷贝。</p><h1 id="func-ToTitle"><a href="#func-ToTitle" class="headerlink" title="func ToTitle"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#440">ToTitle</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ToTitle</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>返回将所有字母都转为对应的标题版本的拷贝。</p><p>Example</p><h1 id="func-ToTitleSpecial"><a href="#func-ToTitleSpecial" class="headerlink" title="func ToTitleSpecial"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#456">ToTitleSpecial</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">ToTitleSpecial(<span class="hljs-params">_case</span> <span class="hljs-params">unicode</span>.SpecialCase, <span class="hljs-params">s</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>使用_case规定的字符映射，返回将所有字母都转为对应的标题版本的拷贝。</p><h1 id="func-Repeat"><a href="#func-Repeat" class="headerlink" title="func Repeat"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#424">Repeat</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">Repeat(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">count</span> <span class="hljs-params">int</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>返回count个s串联的字符串。</p><p>Example</p><h1 id="func-Replace"><a href="#func-Replace" class="headerlink" title="func Replace"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#638">Replace</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">Replace(<span class="hljs-params">s</span>, <span class="hljs-params">old</span>, <span class="hljs-params">new</span> <span class="hljs-params">string</span>, <span class="hljs-params">n</span> <span class="hljs-params">int</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>返回将s中前n个不重叠old子串都替换为new的新字符串，如果n&lt;0会替换所有old子串。</p><p>Example</p><h1 id="func-Map"><a href="#func-Map" class="headerlink" title="func Map"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#383">Map</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Map</span><span class="hljs-params">(mapping <span class="hljs-keyword">func</span>(<span class="hljs-type">rune</span>)</span></span> <span class="hljs-type">rune</span>, s <span class="hljs-type">string</span>) <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>将s的每一个unicode码值r都替换为mapping(r)，返回这些新码值组成的字符串拷贝。如果mapping返回一个负值，将会丢弃该码值而不会被替换。（返回值中对应位置将没有码值）</p><p>Example</p><h1 id="func-Trim"><a href="#func-Trim" class="headerlink" title="func Trim"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#586">Trim</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">Trim(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">cutset</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>返回将s前后端所有cutset包含的utf-8码值都去掉的字符串。</p><p>Example</p><h1 id="func-TrimSpace"><a href="#func-TrimSpace" class="headerlink" title="func TrimSpace"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#613">TrimSpace</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TrimSpace</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>返回将s前后端所有空白（unicode.IsSpace指定）都去掉的字符串。</p><p>Example</p><h1 id="func-TrimFunc"><a href="#func-TrimFunc" class="headerlink" title="func TrimFunc"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#531">TrimFunc</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">TrimFunc(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">f</span> <span class="hljs-params">func</span>(<span class="hljs-params">rune</span>)</span> <span class="hljs-built_in">bool</span>) <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>返回将s前后端所有满足f的unicode码值都去掉的字符串。</p><h1 id="func-TrimLeft"><a href="#func-TrimLeft" class="headerlink" title="func TrimLeft"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#595">TrimLeft</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">TrimLeft(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">cutset</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>返回将s前端所有cutset包含的utf-8码值都去掉的字符串。</p><h1 id="func-TrimLeftFunc"><a href="#func-TrimLeftFunc" class="headerlink" title="func TrimLeftFunc"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#508">TrimLeftFunc</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">TrimLeftFunc(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">f</span> <span class="hljs-params">func</span>(<span class="hljs-params">rune</span>)</span> <span class="hljs-built_in">bool</span>) <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>返回将s前端所有满足f的unicode码值都去掉的字符串。</p><h1 id="func-TrimPrefix"><a href="#func-TrimPrefix" class="headerlink" title="func TrimPrefix"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#619">TrimPrefix</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">TrimPrefix(<span class="hljs-params">s</span>, <span class="hljs-params">prefix</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>返回去除s可能的前缀prefix的字符串。</p><p>Example</p><h1 id="func-TrimRight"><a href="#func-TrimRight" class="headerlink" title="func TrimRight"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#604">TrimRight</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">TrimRight(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">cutset</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>返回将s后端所有cutset包含的utf-8码值都去掉的字符串。</p><h1 id="func-TrimRightFunc"><a href="#func-TrimRightFunc" class="headerlink" title="func TrimRightFunc"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#518">TrimRightFunc</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">TrimRightFunc(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">f</span> <span class="hljs-params">func</span>(<span class="hljs-params">rune</span>)</span> <span class="hljs-built_in">bool</span>) <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>返回将s后端所有满足f的unicode码值都去掉的字符串。</p><h1 id="func-TrimSuffix"><a href="#func-TrimSuffix" class="headerlink" title="func TrimSuffix"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#628">TrimSuffix</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">TrimSuffix(<span class="hljs-params">s</span>, <span class="hljs-params">suffix</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>返回去除s可能的后缀suffix的字符串。</p><p>Example</p><h1 id="func-Fields"><a href="#func-Fields" class="headerlink" title="func Fields"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#307">Fields</a></h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fields</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> []<span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>返回将字符串按照空白（unicode.IsSpace确定，可以是一到多个连续的空白字符）分割的多个字符串。如果字符串全部是空白或者是空字符串的话，会返回空切片。</p><p>Example</p><h1 id="func-FieldsFunc"><a href="#func-FieldsFunc" class="headerlink" title="func FieldsFunc"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#314">FieldsFunc</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">FieldsFunc(<span class="hljs-params">s</span> <span class="hljs-params">string</span>, <span class="hljs-params">f</span> <span class="hljs-params">func</span>(<span class="hljs-params">rune</span>)</span> <span class="hljs-built_in">bool</span>) <span class="hljs-literal">[]</span><span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>类似Fields，但使用函数f来确定分割符（满足f的unicode码值）。如果字符串全部是分隔符或者是空字符串的话，会返回空切片。</p><p>Example</p><h1 id="func-Split"><a href="#func-Split" class="headerlink" title="func Split"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#294">Split</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">Split(<span class="hljs-params">s</span>, <span class="hljs-params">sep</span> <span class="hljs-params">string</span>)</span> <span class="hljs-literal">[]</span><span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>用去掉s中出现的sep的方式进行分割，会分割到结尾，并返回生成的所有片段组成的切片（每一个sep都会进行一次切割，即使两个sep相邻，也会进行两次切割）。如果sep为空字符，Split会将s切分成每一个unicode码值一个字符串。</p><p>Example</p><h1 id="func-SplitN"><a href="#func-SplitN" class="headerlink" title="func SplitN"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#277">SplitN</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">SplitN(<span class="hljs-params">s</span>, <span class="hljs-params">sep</span> <span class="hljs-params">string</span>, <span class="hljs-params">n</span> <span class="hljs-params">int</span>)</span> <span class="hljs-literal">[]</span><span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>用去掉s中出现的sep的方式进行分割，会分割到结尾，并返回生成的所有片段组成的切片（每一个sep都会进行一次切割，即使两个sep相邻，也会进行两次切割）。如果sep为空字符，Split会将s切分成每一个unicode码值一个字符串。参数n决定返回的切片的数目：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">n</span> &amp;gt; <span class="hljs-number">0</span> <span class="hljs-symbol">:</span> 返回的切片最多<span class="hljs-built_in">n</span>个子字符串；最后一个子字符串包含未进行切割的部分。<br><span class="hljs-built_in">n</span> == <span class="hljs-symbol">0:</span> 返回nil<br><span class="hljs-built_in">n</span> &amp;lt; <span class="hljs-number">0</span> <span class="hljs-symbol">:</span> 返回所有的子字符串组成的切片<br></code></pre></td></tr></table></figure><p>Example</p><h1 id="func-SplitAfter"><a href="#func-SplitAfter" class="headerlink" title="func SplitAfter"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#300">SplitAfter</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">SplitAfter(<span class="hljs-params">s</span>, <span class="hljs-params">sep</span> <span class="hljs-params">string</span>)</span> <span class="hljs-literal">[]</span><span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>用从s中出现的sep后面切断的方式进行分割，会分割到结尾，并返回生成的所有片段组成的切片（每一个sep都会进行一次切割，即使两个sep相邻，也会进行两次切割）。如果sep为空字符，Split会将s切分成每一个unicode码值一个字符串。</p><p>Example</p><h1 id="func-SplitAfterN"><a href="#func-SplitAfterN" class="headerlink" title="func SplitAfterN"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#286">SplitAfterN</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">SplitAfterN(<span class="hljs-params">s</span>, <span class="hljs-params">sep</span> <span class="hljs-params">string</span>, <span class="hljs-params">n</span> <span class="hljs-params">int</span>)</span> <span class="hljs-literal">[]</span><span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>用从s中出现的sep后面切断的方式进行分割，会分割到结尾，并返回生成的所有片段组成的切片（每一个sep都会进行一次切割，即使两个sep相邻，也会进行两次切割）。如果sep为空字符，Split会将s切分成每一个unicode码值一个字符串。参数n决定返回的切片的数目：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">n</span> &amp;gt; <span class="hljs-number">0</span> <span class="hljs-symbol">:</span> 返回的切片最多<span class="hljs-built_in">n</span>个子字符串；最后一个子字符串包含未进行切割的部分。<br><span class="hljs-built_in">n</span> == <span class="hljs-symbol">0:</span> 返回nil<br><span class="hljs-built_in">n</span> &amp;lt; <span class="hljs-number">0</span> <span class="hljs-symbol">:</span> 返回所有的子字符串组成的切<br></code></pre></td></tr></table></figure><p>Example</p><h1 id="func-Join"><a href="#func-Join" class="headerlink" title="func Join"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/strings.go?name=release#349">Join</a></h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func <span class="hljs-constructor">Join(<span class="hljs-params">a</span> []<span class="hljs-params">string</span>, <span class="hljs-params">sep</span> <span class="hljs-params">string</span>)</span> <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>将一系列字符串连接为一个字符串，之间用sep来分隔。</p><p>Example</p><h1 id="type-Reader"><a href="#type-Reader" class="headerlink" title="type Reader"></a>type <a href="https://github.com/golang/go/blob/master/src/strings/reader.go?name=release#16">Reader</a></h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">type</span> Reader <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">// 内含隐藏或非导出字段</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Reader类型通过从一个字符串读取数据，实现了io.Reader、io.Seeker、io.ReaderAt、io.WriterTo、io.ByteScanner、io.RuneScanner接口。</p><h2 id="func-NewReader"><a href="#func-NewReader" class="headerlink" title="func NewReader"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/reader.go?name=release#144">NewReader</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewReader</span><span class="hljs-params">(s <span class="hljs-type">string</span>)</span></span> *Reader<br></code></pre></td></tr></table></figure><p>NewReader创建一个从s读取数据的Reader。本函数类似bytes.NewBufferString，但是更有效率，且为只读的。</p><h2 id="func-Reader-Len"><a href="#func-Reader-Len" class="headerlink" title="func (*Reader) Len"></a>func (*Reader) <a href="https://github.com/golang/go/blob/master/src/strings/reader.go?name=release#24">Len</a></h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Reader)</span> <span class="hljs-title function_">Len</span><span class="hljs-params">()</span> <span class="hljs-title function_">int</span><br></code></pre></td></tr></table></figure><p>Len返回r包含的字符串还没有被读取的部分。</p><h2 id="func-Reader-Read"><a href="#func-Reader-Read" class="headerlink" title="func (*Reader) Read"></a>func (*Reader) <a href="https://github.com/golang/go/blob/master/src/strings/reader.go?name=release#31">Read</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Reader)</span></span> Read(b []<span class="hljs-type">byte</span>) (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><h2 id="func-Reader-ReadByte"><a href="#func-Reader-ReadByte" class="headerlink" title="func (*Reader) ReadByte"></a>func (*Reader) <a href="https://github.com/golang/go/blob/master/src/strings/reader.go?name=release#59">ReadByte</a></h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Reader)</span> <span class="hljs-title function_">ReadByte</span><span class="hljs-params">()</span> <span class="hljs-params">(b byte, err error)</span><br></code></pre></td></tr></table></figure><h2 id="func-Reader-UnreadByte"><a href="#func-Reader-UnreadByte" class="headerlink" title="func (*Reader) UnreadByte"></a>func (*Reader) <a href="https://github.com/golang/go/blob/master/src/strings/reader.go?name=release#69">UnreadByte</a></h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Reader)</span> <span class="hljs-title function_">UnreadByte</span><span class="hljs-params">()</span> <span class="hljs-title function_">error</span><br></code></pre></td></tr></table></figure><h2 id="func-Reader-ReadRune"><a href="#func-Reader-ReadRune" class="headerlink" title="func (*Reader) ReadRune"></a>func (*Reader) <a href="https://github.com/golang/go/blob/master/src/strings/reader.go?name=release#78">ReadRune</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Reader)</span></span> ReadRune() (ch <span class="hljs-type">rune</span>, size <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><h2 id="func-Reader-UnreadRune"><a href="#func-Reader-UnreadRune" class="headerlink" title="func (*Reader) UnreadRune"></a>func (*Reader) <a href="https://github.com/golang/go/blob/master/src/strings/reader.go?name=release#93">UnreadRune</a></h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Reader)</span> <span class="hljs-title function_">UnreadRune</span><span class="hljs-params">()</span> <span class="hljs-title function_">error</span><br></code></pre></td></tr></table></figure><h2 id="func-Reader-Seek"><a href="#func-Reader-Seek" class="headerlink" title="func (*Reader) Seek"></a>func (*Reader) <a href="https://github.com/golang/go/blob/master/src/strings/reader.go?name=release#103">Seek</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Reader)</span></span> Seek(offset <span class="hljs-type">int64</span>, whence <span class="hljs-type">int</span>) (<span class="hljs-type">int64</span>, <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><p>Seek实现了io.Seeker接口。</p><h2 id="func-Reader-ReadAt"><a href="#func-Reader-ReadAt" class="headerlink" title="func (*Reader) ReadAt"></a>func (*Reader) <a href="https://github.com/golang/go/blob/master/src/strings/reader.go?name=release#44">ReadAt</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Reader)</span></span> ReadAt(b []<span class="hljs-type">byte</span>, off <span class="hljs-type">int64</span>) (n <span class="hljs-type">int</span>, err <span class="hljs-type">error</span>)<br></code></pre></td></tr></table></figure><h2 id="func-Reader-WriteTo"><a href="#func-Reader-WriteTo" class="headerlink" title="func (*Reader) WriteTo"></a>func (*Reader) <a href="https://github.com/golang/go/blob/master/src/strings/reader.go?name=release#124">WriteTo</a></h2><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Reader)</span> <span class="hljs-title function_">WriteTo</span><span class="hljs-params">(w io.Writer)</span> <span class="hljs-params">(n int64, err error)</span><br></code></pre></td></tr></table></figure><p>WriteTo实现了io.WriterTo接口。</p><h1 id="type-Replacer"><a href="#type-Replacer" class="headerlink" title="type Replacer"></a>type <a href="https://github.com/golang/go/blob/master/src/strings/replace.go?name=release#10">Replacer</a></h1><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">type</span> Replacer <span class="hljs-keyword">struct</span> &#123;<br>    <span class="hljs-comment">// 内含隐藏或非导出字段</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Replacer类型进行一系列字符串的替换。</p><h2 id="func-NewReplacer"><a href="#func-NewReplacer" class="headerlink" title="func NewReplacer"></a>func <a href="https://github.com/golang/go/blob/master/src/strings/replace.go?name=release#31">NewReplacer</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewReplacer</span><span class="hljs-params">(oldnew ...<span class="hljs-type">string</span>)</span></span> *Replacer<br></code></pre></td></tr></table></figure><p>使用提供的多组old、new字符串对创建并返回一个*Replacer。替换是依次进行的，匹配时不会重叠。</p><p>Example</p><h2 id="func-Replacer-Replace"><a href="#func-Replacer-Replace" class="headerlink" title="func (*Replacer) Replace"></a>func (*Replacer) <a href="https://github.com/golang/go/blob/master/src/strings/replace.go?name=release#78">Replace</a></h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(r *Replacer)</span></span> Replace(s <span class="hljs-type">string</span>) <span class="hljs-type">string</span><br></code></pre></td></tr></table></figure><p>Replace返回s的所有替换进行完后的拷贝。</p><h2 id="func-Replacer-WriteString"><a href="#func-Replacer-WriteString" class="headerlink" title="func (*Replacer) WriteString"></a>func (*Replacer) <a href="https://github.com/golang/go/blob/master/src/strings/replace.go?name=release#83">WriteString</a></h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">func (r *Replacer) <span class="hljs-constructor">WriteString(<span class="hljs-params">w</span> <span class="hljs-params">io</span>.Writer, <span class="hljs-params">s</span> <span class="hljs-params">string</span>)</span> (n <span class="hljs-built_in">int</span>, err error)<br></code></pre></td></tr></table></figure><p>WriteString向w中写入s的所有替换进行完后的拷贝。</p><p>来源： <a href="https://studygolang.com/pkgdoc">Go语言标准库文档中文版 | Go语言中文网 | Golang中文社区 | Golang中国 (studygolang.com)</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP正则表达式中模式修正符 (Pattern Modifiers)</title>
    <link href="/2021/11/17/PHP%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E6%A8%A1%E5%BC%8F%E4%BF%AE%E6%AD%A3%E7%AC%A6%20(Pattern%20Modifiers)/"/>
    <url>/2021/11/17/PHP%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E4%B8%AD%E6%A8%A1%E5%BC%8F%E4%BF%AE%E6%AD%A3%E7%AC%A6%20(Pattern%20Modifiers)/</url>
    
    <content type="html"><![CDATA[<p>The current possible PCRE modifiers are listed below. The names in parentheses refer to internal PCRE names for these modifiers. Spaces and newlines are ignored in modifiers, other characters cause error.</p><h2 id="i-PCRE-CASELESS"><a href="#i-PCRE-CASELESS" class="headerlink" title="i (PCRE_CASELESS)"></a>i (PCRE_CASELESS)</h2><p>  If this modifier is set, letters in the pattern match both upper and lower case letters.</p><h2 id="m-PCRE-MULTILINE"><a href="#m-PCRE-MULTILINE" class="headerlink" title="m (PCRE_MULTILINE)"></a>m (PCRE_MULTILINE)</h2><p>  By default, PCRE treats the subject string as consisting of a single &quot;line&quot; of characters (even if it actually contains several newlines). The &quot;start of line&quot; metacharacter (^) matches only at the start of the string, while the &quot;end of line&quot; metacharacter ($) matches only at the end of the string, or before a terminating newline (unless <em>D</em> modifier is set). This is the same as Perl. When this modifier is set, the &quot;start of line&quot; and &quot;end of line&quot; constructs match immediately following or immediately before any newline in the subject string, respectively, as well as at the very start and end. This is equivalent to Perl&amp;#039;s &#x2F;m modifier. If there are no &quot;\n&quot; characters in a subject string, or no occurrences of ^ or $ in a pattern, setting this modifier has no effect.</p><h2 id="s-PCRE-DOTALL"><a href="#s-PCRE-DOTALL" class="headerlink" title="s (PCRE_DOTALL)"></a>s (PCRE_DOTALL)</h2><p>  If this modifier is set, a dot metacharacter in the pattern matches all characters, including newlines. Without it, newlines are excluded. This modifier is equivalent to Perl&amp;#039;s &#x2F;s modifier. A negative class such as [^a] always matches a newline character, independent of the setting of this modifier.</p><h2 id="x-PCRE-EXTENDED"><a href="#x-PCRE-EXTENDED" class="headerlink" title="x (PCRE_EXTENDED)"></a>x (PCRE_EXTENDED)</h2><p>  If this modifier is set, whitespace data characters in the pattern are totally ignored except when escaped or inside a character class, and characters between an unescaped # outside a character class and the next newline character, inclusive, are also ignored. This is equivalent to Perl&amp;#039;s &#x2F;x modifier, and makes it possible to include commentary inside complicated patterns. Note, however, that this applies only to data characters. Whitespace characters may never appear within special character sequences in a pattern, for example within the sequence (?( which introduces a conditional subpattern.</p><h2 id="A-PCRE-ANCHORED"><a href="#A-PCRE-ANCHORED" class="headerlink" title="A (PCRE_ANCHORED)"></a>A (PCRE_ANCHORED)</h2><p>  If this modifier is set, the pattern is forced to be &quot;anchored&quot;, that is, it is constrained to match only at the start of the string which is being searched (the &quot;subject string&quot;). This effect can also be achieved by appropriate constructs in the pattern itself, which is the only way to do it in Perl.</p><h2 id="D-PCRE-DOLLAR-ENDONLY"><a href="#D-PCRE-DOLLAR-ENDONLY" class="headerlink" title="D (PCRE_DOLLAR_ENDONLY)"></a>D (PCRE_DOLLAR_ENDONLY)</h2><p>  If this modifier is set, a dollar metacharacter in the pattern matches only at the end of the subject string. Without this modifier, a dollar also matches immediately before the final character if it is a newline (but not before any other newlines). This modifier is ignored if <em>m</em> modifier is set. There is no equivalent to this modifier in Perl.</p><h2 id="S"><a href="#S" class="headerlink" title="S"></a>S</h2><p>  When a pattern is going to be used several times, it is worth spending more time analyzing it in order to speed up the time taken for matching. If this modifier is set, then this extra analysis is performed. At present, studying a pattern is useful only for non-anchored patterns that do not have a single fixed starting character.</p><h2 id="U-PCRE-UNGREEDY"><a href="#U-PCRE-UNGREEDY" class="headerlink" title="U (PCRE_UNGREEDY)"></a>U (PCRE_UNGREEDY)</h2><p>  This modifier inverts the &quot;greediness&quot; of the quantifiers so that they are not greedy by default, but become greedy if followed by <code>?</code>. It is not compatible with Perl. It can also be set by a (<code>?U</code>) <a href="https://www.php.net/manual/en/regexp.reference.internal-options.php">modifier setting within the pattern</a> or by a question mark behind a quantifier (e.g. <code>.*?</code>).<strong>Note</strong>:It is usually not possible to match more than <a href="https://www.php.net/manual/en/pcre.configuration.php#ini.pcre.backtrack-limit">pcre.backtrack_limit</a> characters in ungreedy mode.</p><h2 id="X-PCRE-EXTRA"><a href="#X-PCRE-EXTRA" class="headerlink" title="X (PCRE_EXTRA)"></a>X (PCRE_EXTRA)</h2><p>  This modifier turns on additional functionality of PCRE that is incompatible with Perl. Any backslash in a pattern that is followed by a letter that has no special meaning causes an error, thus reserving these combinations for future expansion. By default, as in Perl, a backslash followed by a letter with no special meaning is treated as a literal. There are at present no other features controlled by this modifier.</p><h2 id="J-PCRE-INFO-JCHANGED"><a href="#J-PCRE-INFO-JCHANGED" class="headerlink" title="J (PCRE_INFO_JCHANGED)"></a>J (PCRE_INFO_JCHANGED)</h2><p>  The (?J) internal option setting changes the local <code>PCRE_DUPNAMES</code> option. Allow duplicate names for subpatterns. As of PHP 7.2.0 <code>J</code> is supported as modifier as well.</p><h2 id="u-PCRE-UTF8"><a href="#u-PCRE-UTF8" class="headerlink" title="u (PCRE_UTF8)"></a>u (PCRE_UTF8)</h2><p>  This modifier turns on additional functionality of PCRE that is incompatible with Perl. Pattern and subject strings are treated as UTF-8. An invalid subject will cause the preg_* function to match nothing; an invalid pattern will trigger an error of level E_WARNING. Five and six octet UTF-8 sequences are regarded as invalid.</p><p>参考文档：<a href="https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php">https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Centos7.x 防火墙</title>
    <link href="/2021/11/14/Centos7.x%20%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    <url>/2021/11/14/Centos7.x%20%E9%98%B2%E7%81%AB%E5%A2%99/</url>
    
    <content type="html"><![CDATA[<p>&gt; CentOS 7.x 默认使用的是firewall作为防火墙，取代6.x的iptables</p><h4 id="1-查看防火墙状态"><a href="#1-查看防火墙状态" class="headerlink" title="1. 查看防火墙状态"></a>1. 查看防火墙状态</h4><hr><p><strong>命令如下</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">firewall-cmd <span class="hljs-comment">--state</span><br></code></pre></td></tr></table></figure><p>该命令有两种结果：<code>running</code>、<code>not running</code>；前者代表是<code>开启状态</code>，后者代表是<code>关闭状态</code></p><p>在 vmware 上安装的centos7最小化镜像防火墙默认是开机自启的</p><p><a href="https://img.itqaq.com/art/content/028e377d019bac9774c07fecd426191f.png"><img src="https://img.itqaq.com/art/content/028e377d019bac9774c07fecd426191f.png" alt="img"></a></p><h4 id="2-修改防火墙状态的相关命令（后缀-service-可以省略）"><a href="#2-修改防火墙状态的相关命令（后缀-service-可以省略）" class="headerlink" title="2. 修改防火墙状态的相关命令（后缀 .service 可以省略）"></a>2. 修改防火墙状态的相关命令（后缀 .service 可以省略）</h4><hr><p><strong>开启防火墙</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> firewalld.service<br></code></pre></td></tr></table></figure><p><strong>关闭防火墙</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">systemctl stop firewalld.service<br></code></pre></td></tr></table></figure><p><strong>防火墙开机自启</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">enable</span> firewalld.service<br></code></pre></td></tr></table></figure><p><strong>重启防火墙</strong></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">systemctl <span class="hljs-built_in">restart</span> firewalld.service<br></code></pre></td></tr></table></figure><p><strong>禁止防火墙开机自启</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">systemctl <span class="hljs-built_in">disable</span> firewalld.service<br></code></pre></td></tr></table></figure><h4 id="3-测试以上命令时可能会用到关机重启命令，在此也写下吧"><a href="#3-测试以上命令时可能会用到关机重启命令，在此也写下吧" class="headerlink" title="3. 测试以上命令时可能会用到关机重启命令，在此也写下吧"></a>3. 测试以上命令时可能会用到关机重启命令，在此也写下吧</h4><hr><p><strong>重启</strong></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">reboot</span><br></code></pre></td></tr></table></figure><p><strong>关机（其实有很多方式，这里只写一种）</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">init</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>文章来源：<a href="http://www.itqaq.com/index/art/126.html">http://www.itqaq.com/index/art/126.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>加快你的Github访问速度</title>
    <link href="/2021/11/14/%E5%8A%A0%E5%BF%AB%E4%BD%A0%E7%9A%84Github%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/"/>
    <url>/2021/11/14/%E5%8A%A0%E5%BF%AB%E4%BD%A0%E7%9A%84Github%E8%AE%BF%E9%97%AE%E9%80%9F%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<p>有时候打开Github是真的慢，紧急时刻总是打不开，所以在这里写下加快Github访问的一些步骤，供大家参考</p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><h2 id="云服务器一台"><a href="#云服务器一台" class="headerlink" title="云服务器一台"></a>云服务器一台</h2><p>我使用了Docker, 你也可以直接装到当前系统， 服务器的话国外的最好，因为国外访问Github是比较快的。</p><h2 id="拉取Nginx镜像"><a href="#拉取Nginx镜像" class="headerlink" title="拉取Nginx镜像"></a>拉取Nginx镜像</h2><p><a href="https://registry.hub.docker.com/_/nginx">https://registry.hub.docker.com/_/nginx</a></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">docker pull nginx</span><br></code></pre></td></tr></table></figure><p>这个版本是真的新啊</p><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> run -itd -p <span class="hljs-number">89</span>:<span class="hljs-number">80</span> --name nginx nginx <br></code></pre></td></tr></table></figure><blockquote><p>以下操作均在容器中进行</p></blockquote><h2 id="官网下载Nginx源码"><a href="#官网下载Nginx源码" class="headerlink" title="官网下载Nginx源码"></a>官网下载Nginx源码</h2><p><a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.21</span>.<span class="hljs-number">4</span>.tar.gz<br></code></pre></td></tr></table></figure><h2 id="下载要新增的模块"><a href="#下载要新增的模块" class="headerlink" title="下载要新增的模块"></a>下载要新增的模块</h2><p><a href="https://github.com/chobits/ngx_http_proxy_connect_module">https://github.com/chobits/ngx_http_proxy_connect_module</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/chobits/</span>ngx_http_proxy_connect_module.git<br></code></pre></td></tr></table></figure><h1 id="重新编译Nginx"><a href="#重新编译Nginx" class="headerlink" title="重新编译Nginx"></a>重新编译Nginx</h1><h2 id="查看Nginx编译参数"><a href="#查看Nginx编译参数" class="headerlink" title="查看Nginx编译参数"></a>查看Nginx编译参数</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nginx -V</span><br></code></pre></td></tr></table></figure><p>将编译参数保存起来</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><h3 id="解压下载的Nginx和模块"><a href="#解压下载的Nginx和模块" class="headerlink" title="解压下载的Nginx和模块"></a>解压下载的Nginx和模块</h3><blockquote><p>如果需要的话</p></blockquote><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">tar</span> -zxf nginx-**<span class="hljs-regexp">*.tar.gz</span><br></code></pre></td></tr></table></figure><p>进入Nginx源码路径，根据你的Nginx版本及下面的对应关系，执行类似下面的命令</p><table><thead><tr><th>nginx version</th><th>enable REWRITE phase</th><th>patch</th></tr></thead><tbody><tr><td>1.4.x ~ 1.12.x</td><td>NO</td><td><a href="https://github.com/chobits/ngx_http_proxy_connect_module/blob/master/patch/proxy_connect.patch">proxy_connect.patch</a></td></tr><tr><td>1.4.x ~ 1.12.x</td><td>YES</td><td><a href="https://github.com/chobits/ngx_http_proxy_connect_module/blob/master/patch/proxy_connect_rewrite.patch">proxy_connect_rewrite.patch</a></td></tr><tr><td>1.13.x ~ 1.14.x</td><td>NO</td><td><a href="https://github.com/chobits/ngx_http_proxy_connect_module/blob/master/patch/proxy_connect_1014.patch">proxy_connect_1014.patch</a></td></tr><tr><td>1.13.x ~ 1.14.x</td><td>YES</td><td><a href="https://github.com/chobits/ngx_http_proxy_connect_module/blob/master/patch/proxy_connect_rewrite_1014.patch">proxy_connect_rewrite_1014.patch</a></td></tr><tr><td>1.15.2</td><td>YES</td><td><a href="https://github.com/chobits/ngx_http_proxy_connect_module/blob/master/patch/proxy_connect_rewrite_1015.patch">proxy_connect_rewrite_1015.patch</a></td></tr><tr><td>1.15.4 ~ 1.16.x</td><td>YES</td><td><a href="https://github.com/chobits/ngx_http_proxy_connect_module/blob/master/patch/proxy_connect_rewrite_101504.patch">proxy_connect_rewrite_101504.patch</a></td></tr><tr><td>1.17.x ~ 1.18.0</td><td>YES</td><td><a href="https://github.com/chobits/ngx_http_proxy_connect_module/blob/master/patch/proxy_connect_rewrite_1018.patch">proxy_connect_rewrite_1018.patch</a></td></tr><tr><td>1.19.x ~ 1.21.0</td><td>YES</td><td><a href="https://github.com/chobits/ngx_http_proxy_connect_module/blob/master/patch/proxy_connect_rewrite_1018.patch">proxy_connect_rewrite_1018.patch</a></td></tr><tr><td>1.21.1</td><td>YES</td><td><a href="https://github.com/chobits/ngx_http_proxy_connect_module/blob/master/patch/proxy_connect_rewrite_102101.patch">proxy_connect_rewrite_102101.patch</a></td></tr></tbody></table><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">patch -p1 &lt; <span class="hljs-regexp">/path/</span>to<span class="hljs-regexp">/ngx_http_proxy_connect_module/</span>patch/proxy_connect.patch<br>.<span class="hljs-regexp">/configure --add-module=/</span>path<span class="hljs-regexp">/to/</span>ngx_http_proxy_connect_module<br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>注意，上面的编译参数要把你刚刚复制的那段加上去安装完成</p><h2 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h2><p>我们需要修改一下配置，</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">server &#123;<br>     listen                         80;<br>     resolver                       8.8.8.8;<br>     proxy_<span class="hljs-keyword">connect</span>;<br>     proxy_<span class="hljs-keyword">connect</span>_allow            443 563;<br>     proxy_<span class="hljs-keyword">connect</span>_<span class="hljs-keyword">connect</span>_timeout  10s;<br>     proxy_<span class="hljs-keyword">connect</span>_read_timeout     10s;<br>     proxy_<span class="hljs-keyword">connect</span>_send_timeout     10s;<br><br> <span class="hljs-comment"># 下面这个配置应该需要改下</span><br>     location / &#123;<br>         proxy_pass $scheme:<span class="hljs-string">//</span>$host/;<br>         proxy_<span class="hljs-keyword">set</span>_header Host $host;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure><blockquote><p>这个配置你可能需要根据需要做相应修改，例如你需要转发某个header头，你可以使用</p></blockquote><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">proxy_<span class="hljs-keyword">set</span>_header Accpet <span class="hljs-string">&quot;*/*&quot;</span><br></code></pre></td></tr></table></figure><p>然后重载一下</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">nginx -s reload</span><br></code></pre></td></tr></table></figure><p>或者直接重启</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>修改你电脑或者浏览器的代理配置，如下</p><p><img src="/images/20211114/64756e1a123133753a1478a85f46de5c.png"></p><p>这里的127.0.0.1是你服务器的ip地址，89是你映射到nginx的端口，可以看下</p><p><img src="/images/20211114/115a8544b17a91ac4c746537af39e822.png"></p><p>如果远程地址是[你服务器ip]:89 就说明成功了，如果你使用的是国外的机器那么速度应该会很快。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>教程是前几天搭建之后总结的，总结的时候并没有再操作一遍，所以可能会有一些问题，如果有问题可以留言给我。</p><p>还可以使用nginx代理socket，可以参考下面两篇文章</p><p><a href="https://www.zybuluo.com/orangleliu/note/478334" title="Nginx折腾－TCP代理和负载均衡">Nginx折腾－TCP代理和负载均衡</a></p><p><a href="https://www.cnblogs.com/knowledgesea/p/6497783.html" title="Nginx支持Socket转发过程详解">Nginx支持Socket转发过程详解</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>微信开发笔记</title>
    <link href="/2021/11/13/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/13/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="微信公众号授权流程"><a href="#微信公众号授权流程" class="headerlink" title="微信公众号授权流程"></a>微信公众号授权流程</h2><p>可能是很早的版本<br><img src="/images/20211113/f05d055280c2e92ee96018088169bbd0.png"></p><h2 id="UA"><a href="#UA" class="headerlink" title="UA"></a>UA</h2><blockquote><p>安坐</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Linux; Android <span class="hljs-number">7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>; MI <span class="hljs-number">6</span> Build/NMF26X; wv) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Version/<span class="hljs-number">4</span>.<span class="hljs-number">0</span> Chrome/<span class="hljs-number">57</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2987</span>.<span class="hljs-number">132</span> MQQBrowser/<span class="hljs-number">6</span>.<span class="hljs-number">2</span> TBS/<span class="hljs-number">043807</span> Mobile Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> MicroMessenger/<span class="hljs-number">6.6.1.122</span>0(<span class="hljs-number">0</span>x26060135) NetType/WIFI Language/zh_CN<br><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Linux; Android <span class="hljs-number">7</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>; OD103 Build/NMF26F; wv) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Version/<span class="hljs-number">4</span>.<span class="hljs-number">0</span> Chrome/<span class="hljs-number">53</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2785</span>.<span class="hljs-number">49</span> Mobile MQQBrowser/<span class="hljs-number">6</span>.<span class="hljs-number">2</span> TBS/<span class="hljs-number">043632</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> MicroMessenger/<span class="hljs-number">6.6.1.122</span>0(<span class="hljs-number">0</span>x26060135) NetType/<span class="hljs-number">4</span>G Language/zh_CN<br><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Linux; Android <span class="hljs-number">6</span>.<span class="hljs-number">0</span>.<span class="hljs-number">1</span>; SM919 Build/MXB48T; wv) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Version/<span class="hljs-number">4</span>.<span class="hljs-number">0</span> Chrome/<span class="hljs-number">53</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2785</span>.<span class="hljs-number">49</span> Mobile MQQBrowser/<span class="hljs-number">6</span>.<span class="hljs-number">2</span> TBS/<span class="hljs-number">043632</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> MicroMessenger/<span class="hljs-number">6.6.1.122</span>0(<span class="hljs-number">0</span>x26060135) NetType/WIFI Language/zh_CN<br><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Linux; Android <span class="hljs-number">5</span>.<span class="hljs-number">1</span>.<span class="hljs-number">1</span>; vivo X6S A Build/LMY47V; wv) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Version/<span class="hljs-number">4</span>.<span class="hljs-number">0</span> Chrome/<span class="hljs-number">53</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2785</span>.<span class="hljs-number">49</span> Mobile MQQBrowser/<span class="hljs-number">6</span>.<span class="hljs-number">2</span> TBS/<span class="hljs-number">043632</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> MicroMessenger/<span class="hljs-number">6.6.1.122</span>0(<span class="hljs-number">0</span>x26060135) NetType/WIFI Language/zh_CN<br><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (Linux; Android <span class="hljs-number">5</span>.<span class="hljs-number">1</span>; HUAWEI TAG-AL00 Build/HUAWEITAG-AL00; wv) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Version/<span class="hljs-number">4</span>.<span class="hljs-number">0</span> Chrome/<span class="hljs-number">53</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2785</span>.<span class="hljs-number">49</span> Mobile MQQBrowser/<span class="hljs-number">6</span>.<span class="hljs-number">2</span> TBS/<span class="hljs-number">043622</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> MicroMessenger/<span class="hljs-number">6.6.1.122</span>0(<span class="hljs-number">0</span>x26060135) NetType/<span class="hljs-number">4</span>G Language/zh_CN<br></code></pre></td></tr></table></figure><blockquote><p>iPhone 系统下的微信 User Agent</p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (iPhone; CPU iPhone OS <span class="hljs-number">9</span>_3_2 like Mac OS X) AppleWebKit/<span class="hljs-number">601</span>.<span class="hljs-number">1</span>.<span class="hljs-number">46</span> (KHTML, like Gecko) Mobile/<span class="hljs-number">13</span>F69 MicroMessenger/<span class="hljs-number">6</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1</span> NetType/<span class="hljs-number">4</span>G Language/zh_CN<br><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (iPhone; CPU iPhone OS <span class="hljs-number">11</span>_2_2 like Mac OS X) AppleWebKit/<span class="hljs-number">604</span>.<span class="hljs-number">4</span>.<span class="hljs-number">7</span> (KHTML, like Gecko) Mobile/<span class="hljs-number">15</span>C202 MicroMessenger/<span class="hljs-number">6</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1</span> NetType/<span class="hljs-number">4</span>G Language/zh_CN<br><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (iPhone; CPU iPhone OS <span class="hljs-number">11</span>_1_1 like Mac OS X) AppleWebKit/<span class="hljs-number">604</span>.<span class="hljs-number">3</span>.<span class="hljs-number">5</span> (KHTML, like Gecko) Mobile/<span class="hljs-number">15</span>B150 MicroMessenger/<span class="hljs-number">6</span>.<span class="hljs-number">6</span>.<span class="hljs-number">1</span> NetType/WIFI Language/zh_CN<br><span class="hljs-attribute">Mozilla</span>/<span class="hljs-number">5</span>.<span class="hljs-number">0</span> (iphone x Build/MXB48T; wv) AppleWebKit/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> (KHTML, like Gecko) Version/<span class="hljs-number">4</span>.<span class="hljs-number">0</span> Chrome/<span class="hljs-number">53</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2785</span>.<span class="hljs-number">49</span> Mobile MQQBrowser/<span class="hljs-number">6</span>.<span class="hljs-number">2</span> TBS/<span class="hljs-number">043632</span> Safari/<span class="hljs-number">537</span>.<span class="hljs-number">36</span> MicroMessenger/<span class="hljs-number">6.6.1.122</span>0(<span class="hljs-number">0</span>x26060135) NetType/WIFI Language/zh_CN<br></code></pre></td></tr></table></figure><blockquote><p>微信内置浏览器与小程序中的 User Agent 对比</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 安卓系统中小程序 User Agent<br>Mozilla<span class="hljs-regexp">/5.0 (Linux; Android 7.1.1; MI 6 Build/</span>NMF26X; wv) AppleWebKit<span class="hljs-regexp">/537.36 (KHTML, like Gecko) Version/</span><span class="hljs-number">4.0</span> Chrome<span class="hljs-regexp">/57.0.2987.132 MQQBrowser/</span><span class="hljs-number">6.2</span> TBS<span class="hljs-regexp">/043807 Mobile Safari/</span><span class="hljs-number">537.36</span> MicroMessenger<span class="hljs-regexp">/6.6.1.1220(0x26060135) NetType/</span><span class="hljs-number">4</span>G Language<span class="hljs-regexp">/zh_CN MicroMessenger/</span><span class="hljs-number">6.6</span>.<span class="hljs-number">1.1220</span>(<span class="hljs-number">0</span>x26060135) NetType<span class="hljs-regexp">/4G Language/</span>zh_CN miniProgram<br><span class="hljs-regexp">//</span> 安卓系统中微信内置浏览器 User Agent<br>Mozilla<span class="hljs-regexp">/5.0 (Linux; Android 7.1.1; MI 6 Build/</span>NMF26X; wv) AppleWebKit<span class="hljs-regexp">/537.36 (KHTML, like Gecko) Version/</span><span class="hljs-number">4.0</span> Chrome<span class="hljs-regexp">/57.0.2987.132 MQQBrowser/</span><span class="hljs-number">6.2</span> TBS<span class="hljs-regexp">/043807 Mobile Safari/</span><span class="hljs-number">537.36</span> MicroMessenger<span class="hljs-regexp">/6.6.1.1220(0x26060135) NetType/</span><span class="hljs-number">4</span>G Language/zh_CN<br></code></pre></td></tr></table></figure><p>以上两段字符串均为子凡自用 MI6 安卓设备中获得，可以看出微信小程序的 UA 是和微信内置浏览器 UA 是不同的，后面会多出一小段，特别是最后的“miniProgram”字符串，就是小程序的特别的 UA，而在 iPhone 系统设备中 UA 都是一致的，小程序和内置浏览器 UA 是没有区别的。</p><h3 id="UA-检测和判断方法"><a href="#UA-检测和判断方法" class="headerlink" title="UA 检测和判断方法"></a>UA 检测和判断方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//php 版本</span><br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">preg_match</span>( <span class="hljs-string">&#x27;/MicroMessenger/&#x27;</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;HTTP_USER_AGENT&#x27;</span>] ) ) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;你真正使用微信访问&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//js 版本 </span><br><span class="hljs-keyword">if</span>(<span class="hljs-regexp">/MicroMessenger/i</span>.<span class="hljs-title function_">test</span>(navigator.<span class="hljs-property">userAgent</span>))&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你真正使用微信访问&#x27;</span>);<br>&#125;<br><span class="hljs-comment">//或者</span><br><span class="hljs-keyword">if</span>(navigator.<span class="hljs-property">userAgent</span>.<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(MicroMessenger)/i</span>))&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你真正使用微信访问&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>以上子凡给出的两种判断方法默认都是直接使用正则表达式的方式判断是否为微信，也就是不论安卓还是苹果系统，是否小程序，都是通过 UA 中共有的“MicroMessenger”字符串来作为判断，只要判断为微信设备访问，代码中&#x2F;&#x2F;true 就可以改为自己想要执行的代码。当然为了更准确的判断还可以自己写正则表达式匹配。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Android.*MicroMessenger.*miniProgram<span class="hljs-regexp">//</span>安卓端的小程序<br>iPhone.*MicroMessenger<span class="hljs-regexp">//</span>苹果端微信或小程序<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>OpenAPI标准规范</title>
    <link href="/2021/11/07/OpenAPI%E6%A0%87%E5%87%86%E8%A7%84%E8%8C%83/"/>
    <url>/2021/11/07/OpenAPI%E6%A0%87%E5%87%86%E8%A7%84%E8%8C%83/</url>
    
    <content type="html"><![CDATA[<p><a href="https://honeypps.com/architect/openapi-standard-specification/">https://honeypps.com/architect/openapi-standard-specification/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux命令</title>
    <link href="/2021/11/07/Linux%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/11/07/Linux%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="常用Linux命令"><a href="#常用Linux命令" class="headerlink" title="常用Linux命令"></a>常用Linux命令</h1><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -ef | <span class="hljs-keyword">grep</span> redis<br></code></pre></td></tr></table></figure><p>根据进程id查找文件，找到pid，例如123</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -lp /proc/123/cwd<br></code></pre></td></tr></table></figure><h1 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h1><p>&gt;连接文件并打印到标准输出设备上，cat经常用来显示文件的内容。</p><p>注意：当文件较大时，文本在屏幕上迅速闪过（滚屏），用户往往看不清所显示的内容。因此，一般用more等命令分屏显示。</p><p>为了控制滚屏，可以按Ctrl+S键，停止滚屏；按Ctrl+Q键可以恢复滚屏。按Ctrl+C（中断）键可以终止该命令的执行，并且返回Shell提示符状态。</p><ul><li><p>-n或-number：有1开始对所有输出的行数编号；</p></li><li><p>-b或–number-nonblank：和-n相似，只不过对于空白行不编号；</p></li><li><p>-s或–squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行；</p></li><li><p>-A：显示不可打印字符，行尾显示“$”；</p></li><li><p>-e：等价于&quot;-vE&quot;选项；</p></li><li><p>-t：等价于&quot;-vT&quot;选项；</p></li></ul><p>##从键盘创建一个文件</p><p>$ cat &gt; d.txt</p><p>##将几个文件合并为一个文件</p><p>$ cat c.txt d.txt &gt; e.txt</p><p>##显示一个文件的内容</p><p>$ cat e.txt</p><p>显示多个文件的内容</p><p>$ cat e.txt a.txt</p><p>对所有输出行编号</p><p>$ cat  -n e.txt</p><p>对非空输出行编号</p><p>$ cat -b e.txt</p><p>如果有连续两行以上的空白行，输出时只显示一行</p><p>$ cat -s e.txt</p><p>显示不可打印字符，输出时每行结尾会加上一个$</p><p>$ cat -A e.txt</p><p>将一个文件的内容加上行号后输入到另一个文件里（直接覆盖掉这个文件原来的内容）</p><p>$ cat -n e.txt &gt; a.txt</p><p>将一个文件的内容加上行号后输入到另一个文件里（在尾部追加）</p><p>$ cat -n e.txt &gt;&gt; a.txt</p><p>复制这个文件</p><p>$ cat  e.txt &gt; a.txt </p><p>合并几个文件，并且test4是已经排好序的</p><p>$ cat test test1 test2 test3 | sort &gt; test4</p><p>如果有大量的文件包含不适合在输出端子和屏幕滚动起来非常快，我们可以多和少用参数与cat命令如上表演。</p><p>$ cat e.txt | more</p><p>$ cat e.txt | less</p><h1 id="tac命令"><a href="#tac命令" class="headerlink" title="tac命令"></a>tac命令</h1><p>反序输出文件的内容，文件的最后一行显示在第一行</p><p>它可以对调试日志文件提供了很大的帮助，扭转日志内容的时间顺序。</p><p>$ tac e.txt</p><h2 id="lsattr-chattr"><a href="#lsattr-chattr" class="headerlink" title="lsattr, chattr"></a>lsattr, chattr</h2><p>查看和修改文件属性</p><h2 id="jobs"><a href="#jobs" class="headerlink" title="jobs"></a>jobs</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">jobs -rp <span class="hljs-regexp">//</span> 暂时不知到什么用<br></code></pre></td></tr></table></figure><p> 查看挂起的进程，<code>kill %1</code> 可以停止<code>jobs</code>中标号为<code>1</code>的进程</p><p>也可以使用fg %1 来切到前台，部分可能不需要%</p><h2 id="stat"><a href="#stat" class="headerlink" title="stat"></a>stat</h2><h2 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h2><h2 id="zcat"><a href="#zcat" class="headerlink" title="zcat"></a>zcat</h2><h2 id="zgrep"><a href="#zgrep" class="headerlink" title="zgrep"></a>zgrep</h2><h2 id="tee"><a href="#tee" class="headerlink" title="tee"></a>tee</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">将sql输入到文件back.sql</span><br>tee back.sql &lt;&lt;-&#x27;EOT&#x27;<br>insert into<br>users<br>(id)<br>values<br>1;<br>EOT<br></code></pre></td></tr></table></figure><h2 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">sed -e <span class="hljs-string">&quot;1ititle:test&quot;</span> <span class="hljs-built_in">back</span>.txt  <span class="hljs-comment">// 给back.txt文件第一行前添加title:text</span><br></code></pre></td></tr></table></figure><h2 id="jq"><a href="#jq" class="headerlink" title="jq"></a>jq</h2><blockquote><p>解析json</p></blockquote><figure class="highlight scilab"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scilab">echo <span class="hljs-string">&#x27;&#123;&quot;</span>name<span class="hljs-string">&quot;: &quot;</span><span class="hljs-built_in">max</span><span class="hljs-string">&quot;&#125;&#x27;</span> | jq<br></code></pre></td></tr></table></figure><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -SX 按照文件类型排序，文件夹在前<br><span class="hljs-keyword">ll</span> -ht 按照时间排序<br><span class="hljs-keyword">ll</span> -hS 按照大小排序<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/ginvip/p/6351696.html">https://www.cnblogs.com/ginvip/p/6351696.html</a></p><h2 id="nohup"><a href="#nohup" class="headerlink" title="nohup"></a>nohup</h2><p><a href="https://www.cnblogs.com/baby123/p/6477429.html">https://www.cnblogs.com/baby123/p/6477429.html</a></p><h2 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h2><p><a href="https://www.cnblogs.com/fengzhilaoling/p/12269923.html">https://www.cnblogs.com/fengzhilaoling/p/12269923.html</a></p><h2 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h2><p><a href="https://blog.csdn.net/u010486679/article/details/78415666">https://blog.csdn.net/u010486679/article/details/78415666</a></p><h2 id="hostname"><a href="#hostname" class="headerlink" title="hostname"></a>hostname</h2><p><a href="https://blog.csdn.net/qhairen/article/details/45913465">https://blog.csdn.net/qhairen/article/details/45913465</a></p><h2 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">expr</span> <span class="hljs-number">1</span> + <span class="hljs-number">2</span><br><span class="hljs-attribute">expr</span> lentdh <span class="hljs-string">&quot;test&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-expr.html">Linux expr命令 | 菜鸟教程 (runoob.com)</a></p><h2 id="lscpu"><a href="#lscpu" class="headerlink" title="lscpu"></a>lscpu</h2><p>查看CPU信息</p><h2 id="lsmem"><a href="#lsmem" class="headerlink" title="lsmem"></a>lsmem</h2><p>查看内存信息</p><h2 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h2><p>cut命令用于显示每行从开头算起 num1 到 num2 的文字</p><p><a href="https://www.runoob.com/linux/linux-comm-cut.html">Linux cut命令 | 菜鸟教程 (runoob.com)</a></p><h2 id="netcat"><a href="#netcat" class="headerlink" title="netcat"></a>netcat</h2><p><a href="https://blog.csdn.net/wangqingchuan92/article/details/79666885">(38条消息) Linux系统终端命令：netcat的基本使用_麒麒川的博客-CSDN博客_linux netcat</a></p><h2 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">systemctl status -l</span><br></code></pre></td></tr></table></figure><h2 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ssh -n -x</span><br></code></pre></td></tr></table></figure><h2 id="ssh-keygen"><a href="#ssh-keygen" class="headerlink" title="ssh-keygen"></a>ssh-keygen</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">ssh-keygen -t rsa<br>ssh-keygen -<span class="hljs-selector-tag">A</span><br></code></pre></td></tr></table></figure><h2 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h2><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">updatedb</span> 更新locatedb<br></code></pre></td></tr></table></figure><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><h2 id="tree"><a href="#tree" class="headerlink" title="tree"></a>tree</h2><h2 id="alias"><a href="#alias" class="headerlink" title="alias"></a>alias</h2><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><h2 id="objdump"><a href="#objdump" class="headerlink" title="objdump"></a>objdump</h2><h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><h1 id="PHP相关"><a href="#PHP相关" class="headerlink" title="PHP相关"></a>PHP相关</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">php --ri grpc  <span class="hljs-regexp">//</span> 查看swoole扩展<br>php -l index.php <span class="hljs-regexp">//</span> 检查语法错误<br></code></pre></td></tr></table></figure><h1 id="安装build-essential"><a href="#安装build-essential" class="headerlink" title="安装build-essential"></a>安装build-essential</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install build-essential<br></code></pre></td></tr></table></figure><h1 id="lrzsz，可以在ssh终端中上传和下载文件"><a href="#lrzsz，可以在ssh终端中上传和下载文件" class="headerlink" title="lrzsz，可以在ssh终端中上传和下载文件"></a>lrzsz，可以在ssh终端中上传和下载文件</h1><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>ubuntu下</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> lrzsz<br></code></pre></td></tr></table></figure><p>或者编译安装</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">tar zxvf lrzsz-<span class="hljs-number">0.12</span>.<span class="hljs-number">20</span>.tar.gz<br><span class="hljs-keyword">cd</span> lrzsz-<span class="hljs-number">0.12</span>.<span class="hljs-number">20</span><br>./configure<br><span class="hljs-keyword">make</span><br><span class="hljs-keyword">make</span> install<br></code></pre></td></tr></table></figure><blockquote><p>上面安装过程默认把lsz和lrz安装到了&#x2F;usr&#x2F;local&#x2F;bin&#x2F;目录下,可以建立一个软连接</p></blockquote><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/usr/</span>bin<br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>lrz rz<br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>lsz sz<br></code></pre></td></tr></table></figure><p>上传</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">rz</span><br></code></pre></td></tr></table></figure><p>下载</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">sz <span class="hljs-tag">&lt;<span class="hljs-name">filename</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="killall"><a href="#killall" class="headerlink" title="killall"></a>killall</h1><p>命令找不到，可以用下面的命令安装</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">apt-<span class="hljs-built_in">get</span> install psmisc<br></code></pre></td></tr></table></figure><h1 id="put上传ftp文件"><a href="#put上传ftp文件" class="headerlink" title="put上传ftp文件"></a>put上传ftp文件</h1><p><strong>put</strong></p><p>   使用lftp登录ftp服务器之后，可以使用put指令将文件上传到服务器。</p><p>##语法</p><p>   <strong>put [-E] [-a] [-c] [-O base] lfile [-o rfile]</strong></p><p>##选项列表</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td><strong>-o</strong></td><td>指定输出文件的名字，不指定则使用原来的名字</td></tr><tr><td><strong>-c</strong></td><td>如果失败，持续获取</td></tr><tr><td><strong>-E</strong></td><td>获取之后，删除源文件</td></tr><tr><td><strong>-a</strong></td><td>使用ascii模式</td></tr><tr><td><strong>-O</strong></td><td>指定输出文件存放的目录</td></tr></tbody></table><p>##实例</p><p>上传文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@localhost weijie]# lftp 192.168.1.8          //登录服务器<br><br>lftp 192.168.1.8:~&gt; cd pub/                           //切换目录<br><br>lftp 192.168.1.8:/pub&gt; put 3.c                       //上传文件<br><br>65 bytes transferred<br><br>lftp 192.168.1.8:/pub&gt; ls                             //查看内容，已经上传成功<br><br>-rwxrwxrwx    1 0        0        2375494044 Aug 14 06:38 1.zip<br><br>-rw-r--r--    1 0       0               0 Oct 02 01:19 11c<br><br>-rw-r--r--    1 0       0               0 Oct 02 01:19 22c<br><br>-rw-------    1 14      50             65 Oct 02 01:48 3.c<br><br>drwxr-xr-x    2 0       0            4096 Oct 02 01:12 testftp<br><br>lftp 192.168.1.8:/pub&gt; <br></code></pre></td></tr></table></figure><h1 id="测试端口"><a href="#测试端口" class="headerlink" title="测试端口"></a>测试端口</h1><blockquote><p>linux测试某个端口的bai连通性可以du使用zhi如下命令测试daoTCP协议</p></blockquote><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">telnet</span>  <span class="hljs-built_in">ip</span>  port<br></code></pre></td></tr></table></figure><p>TCP&#x2F;UDP协议测试zhuan端口</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf">nc -vuz ip  <span class="hljs-keyword">port</span> <span class="hljs-comment">#测试udp协议</span><br>nc -vtz ip <span class="hljs-keyword">port</span>  <span class="hljs-comment">#测试tcp协议</span><br></code></pre></td></tr></table></figure><p>端口扫描 nc -z -v -n 192.168.21.135 1-100 z参数告诉nc使用0 输入&#x2F;输出模式，一般在扫描通信端口的时候使用</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Nc</span> -z -v -n <span class="hljs-number">192.168.21.135</span> <span class="hljs-number">1</span>-<span class="hljs-number">100</span> # 检测<span class="hljs-number">1</span>-<span class="hljs-number">100</span>端口<br><span class="hljs-attribute">Nc</span> -z -v -n <span class="hljs-number">192.168.21.135</span> <span class="hljs-number">8989</span>  #检测<span class="hljs-number">8989</span>端口<br></code></pre></td></tr></table></figure><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><blockquote><p>你可以使用 lsof 命令来查看某一端口是否开放。查看端口可以这样来使用，我就以80端口为例：</p></blockquote><p>lsof -i:80<br>或者<br>lsof -i:22<br>如果有显示说明已经开放了，如果没有显示说明没有开放<br>##netstat -aptn<br>是否监听在0.0.0.0:3306</p><h2 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h2><p>netstat -nupl (UDP类型的端口)<br>netstat -ntpl (TCP类型的端口)</p><h2 id="telnet-ip端口号-方式"><a href="#telnet-ip端口号-方式" class="headerlink" title="telnet ip端口号 方式"></a>telnet ip端口号 方式</h2><blockquote><p>测试远程主机端口是否打开</p></blockquote><p>telnet 127.0.0.1 3306</p><p>#其他命令</p><h2 id="删除输入的错误"><a href="#删除输入的错误" class="headerlink" title="删除输入的错误"></a>删除输入的错误</h2><p>有时候在linux终端中执行某个命令时，往往会输错命令，想删除掉重敲可以按backspace键，但这样较慢，一种简便技巧是，按住esc键同时按backspace键会较快删除【esc+backspace】组合键。或者【ctrl+u】组合键</p><p>当然，直接回车更直接，但可能会产生一堆的错误提示。<br>##vim<br>v &#x2F; ctrl + v 可视模式，&lt; &gt; 缩进，d,D,y dw d$</p><p>vim :行号，行号&lt; 回车  可以缩进</p><p>vim中统计文字出现次数 :%s&#x2F;name&#x2F;&#x2F;gn</p><p>##其他<br>lha<br>linux 的 ls -1 和 -l<br>shell 的[ -s file] 文件大小不为0为真 elif<br>lcd  put lftp<br>psql -c -f<br><a href="https://www.cnblogs.com/ftl1012/p/ssh.html">https://www.cnblogs.com/ftl1012/p/ssh.html</a><br><a href="https://www.cnblogs.com/hmwh/p/11015439.html">https://www.cnblogs.com/hmwh/p/11015439.html</a></p><p>telnet</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">telnet</span> <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">9501</span><br></code></pre></td></tr></table></figure><p>退出 <code>ctrl</code> + <code>]</code> 再按<code>ctrl</code> + <code>d</code> 或者输入 <code>quit</code></p><h1 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h1><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>vim ctrl + g 显示当前编辑的文件名</p><ol><li><p><code>sudo nautilus</code>   <code>ubuntu</code>以管理员方式打开文件可视化文件管理器 </p></li><li><p><code>apt install build-essential</code> ubuntu安装需要的文件</p></li><li><p><code>du -sh</code>  <code>df -h</code> 查看硬盘占用情况</p></li><li><p><code>wc -l -w -c / -lwc</code> 统计行数，字数字节数</p></li><li><p>排除<code>grep -v</code> 包含  <code>egrep/grep -e &#39;a|b|c&#39; 路径</code> 可以使用正则</p></li><li><p><code>cat /tac</code> <code>tail</code> <code>head</code> </p></li><li><p><code>ps -ef/af/x/aux</code> 不与终端有关的进程也显示出来 </p></li><li><p><code>pstree -Aup</code> kill -9 强制结束 kill -2 相当于ctrl+c</p></li><li><p>数字+G<code> 跳行，</code>数字+D<code>删除</code>数字+Y<code>复制，</code>:setnu<code>显示行号，</code>G&#x2F;gg<code> ，</code>dd&#96;剪切</p></li><li><p><code>su + username</code> 切换用户 <code>ctrl + d</code> 注销 <code>sudo -l</code> 查看自己的权限  <code>visudo</code> 修改用户权限 <code>admin[</code>用户] <code>ALL</code>[允许登录的主机]&#x3D;<code>(ALL</code>[以root运行]<code>) ALL</code>[所有命令]</p></li><li><p><code>[%]s/搜索内容/替换内容/[g]</code> %表示替换所有，没有g表示一行，有g表示所有</p></li><li><p><code>netstat -tunpl | grep 80</code> 查看80口占用 <code>-ano</code> <code>-lntp</code>列出系统里监听网络链接的端口号和相应进程pid </p></li><li><p><code>lsof [-i :80]</code> 列出当前系统打开的文件(listen opened files)</p></li><li><p>ubuntu-drivers devices 查看可以安装的闭源显卡驱动</p></li><li><p>apt editor-sources 修改源 </p></li><li><p>select-editor 更换默认编辑器</p></li><li><p>chown&#x2F;chgrp -R 用户名&#x2F;组名 文档  chown -R username:group &#x2F;etc&#x2F;文件…同时修改</p></li><li><p>rsync</p></li><li><p>{d}{rwx}{rwx}{rwx} -&gt; d表示文件夹，rwx-1 表示拥有者，rwx-2表示用户所在组，rwx-3表示其他人，使用chmod修改权限 chmod ug+w,o-w file1.txt file2.txt 给file1.txt 和file2.txt 加上对用户和用户组的写权限，去掉其他人的写权限</p></li><li><p>清空文件 gg跳到行首dG清空</p></li><li><p>ctrl-c 发送 SIGINT 信号给前台进程bai组中的所有进du程。常用于终止正在运zhi行的程序。<br>ctrl-z 发送 SIGTSTP 信号给前台进程dao组中的所有进程，常用于挂起一个进程。用户可以使用fg&#x2F;bg操作继续前台或后台的任务，fg命令重新启动前台被中断的任务,bg命令把被中断的任务放在后台执行.<br>ctrl-d 不是发送信号，而是表示一个特殊的二进制值，表示 EOF。<br>ctrl-\ 发送 SIGQUIT 信号给前台进程组中的所有进程，终止前台进程并生成 core 文件。</p></li><li><p>linux添加计划任务                                                        </p><p>crond 是linux用来定期执行程序的命令。当安装完成操作系统之后，默认便会启动此任务调度命令。crond命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。可以用以下的方法启动、关闭这个服务:</p><p>&#x2F;sbin&#x2F;service crond start &#x2F;&#x2F;启动服务</p><p>&#x2F;sbin&#x2F;service crond stop &#x2F;&#x2F;关闭服务</p><p>&#x2F;sbin&#x2F;service crond restart &#x2F;&#x2F;重启服务</p><p>&#x2F;sbin&#x2F;service crond reload &#x2F;&#x2F;重新载入配置</p><p>1.linux任务调度的工作主要分为以下两类：</p><p>*系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</p><p>*个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置。</p><p>2.crontab命令选项:</p><p>cron服务提供crontab命令来设定cron服务的，以下是这个命令的一些参数与说明:</p><p>crontab -u &#x2F;&#x2F;设定某个用户的cron服务，一般root用户在执行这个命令的时候需要此参数</p><p>crontab -l &#x2F;&#x2F;列出某个用户cron服务的详细内容</p><p>crontab -r &#x2F;&#x2F;删除没个用户的cron服务</p><p>crontab -e &#x2F;&#x2F;编辑某个用户的cron服务</p><p>比如说root查看自己的cron设置:crontab -u root -l</p><p>再例如，root想删除fred的cron设置:crontab -u fred -r</p><p>在编辑cron服务时，编辑的内容有一些格式和约定，输入:crontab -u root -e</p><p>进入vi编辑模式，编辑的内容一定要符合下面的格式:*&#x2F;1 * * * * ls &gt;&gt; &#x2F;tmp&#x2F;ls.txt</p><p>3.cron文件语法</p><p>  分   小时   日    月    星期   命令</p><p> 0-59  0-23  1-31  1-12   0-6   command   (取值范围,0表示周日一般一行对应一个任务)</p><p>4.记住几个特殊符号的含义:</p><p>“*”代表取值范围内的数字,</p><p>“&#x2F;“代表”每”,</p><p>“-“代表从某个数字到某个数字,</p><p>“,”分开几个离散的数字</p><p>5.举几个例子</p><p>5    *    *    *   *   ls       &#x2F;&#x2F;指定每小时的第5分钟执行一次ls命令</p><p>30   5    *    *   *   ls       &#x2F;&#x2F;指定每天的 5:30 执行ls命令</p><p>30   7    8    *   *   ls       &#x2F;&#x2F;指定每月8号的7：30分执行ls命令</p><p>30   5    8    6   *   ls       &#x2F;&#x2F;指定每年的6月8日5：30执行ls命令</p><p>30   6    *    *   0   ls       &#x2F;&#x2F;指定每星期日的6:30执行ls命令[注：0表示星期天，1表示星期1，以此类推，也可以用英文来表示，sun表示星期天，mon表示星期一等。]</p><p>30   3  10,20   *   *   ls       &#x2F;&#x2F;每月10号及20号的3：30执行ls命令[注：”,”用来连接多个不连续的时段]</p><p>25   8-11 *    *   *   ls       &#x2F;&#x2F;每天8-11点的第25分钟执行ls命令[注：”-”用来连接连续的时段]</p><p>*&#x2F;15  *   *    *   *   ls      &#x2F;&#x2F;每15分钟执行一次ls命令 [即每个小时的第0 15 30 45 60分钟执行ls命令 ]</p><p>30   6  *&#x2F;10   *   *   ls      &#x2F;&#x2F;每个月中，每隔10天6:30执行一次ls命令[即每月的1、11、21、31日是的6：30执行一次ls命令。 ]</p><p>50   7    *     *   *   root run-parts &#x2F;etc&#x2F;cron.daily   &#x2F;&#x2F;每天7：50以root 身份执行&#x2F;etc&#x2F;cron.daily目录中的所有可执行文件[  注：run-parts参数表示，执行后面目录中的所有可执行文件。 ]</p><p>6.新增调度任务可用两种方法：</p><p>a.在命令行输入: crontab -e 然后添加相应的任务，wq存盘退出。</p><p>b.直接编辑&#x2F;etc&#x2F;crontab 文件，即vi &#x2F;etc&#x2F;crontab，添加相应的任务。</p></li><li><p><code>lsb_release -a</code> ubuntu 查看版本信息 </p><p>uname [参数]</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs csharp">$ uname -a　　<span class="hljs-comment">//显示所有信息</span><br>Linux BigManing <span class="hljs-number">4.4</span><span class="hljs-number">.0</span><span class="hljs-number">-83</span>-generic <span class="hljs-meta">#106-Ubuntu SMP Mon Jun 26 17:54:43 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br><br>$ uname -s　　<span class="hljs-comment">//显示内核名称</span><br>Linux<br><br>$ uname -n　　<span class="hljs-comment">//显示网络节点上的主机名</span><br>BigManing<br><br>$ uname -r　　<span class="hljs-comment">//显示内核发行号</span><br><span class="hljs-number">4.4</span><span class="hljs-number">.0</span><span class="hljs-number">-83</span>-generic<br><br>$ uname -v　　　<span class="hljs-comment">//显示内核版本号</span><br><span class="hljs-meta">#106-Ubuntu SMP Mon Jun 26 17:54:43 UTC 2017</span><br>    $ uname -m　　　<span class="hljs-comment">//显示机器硬件名称　显示i686说明你安装了32位操作系统　　　显示 x86_64说明你安装了64位操作系统</span><br>x86_64<br><br>$ uname -p　　　<span class="hljs-comment">//显示处理器类型</span><br>x86_64<br><br>$ uname -i　　　<span class="hljs-comment">//显示硬件平台</span><br>x86_64<br><br>$ uname -o　　　<span class="hljs-comment">//操作系统</span><br>GNU/Linux<br></code></pre></td></tr></table></figure></li><li><p>wget在下载的时候就重命名:</p><p><code>wget -c &quot;www.baidu.com&quot; -O baidu.index.html</code><br>保存输出日至，可以使用:</p><p><code>wget -c &quot;www.baidu.com&quot; -O baidu.index.html -o wget.log</code></p><p>递归下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget -r -p -np -k http://archives.fedoraproject.org/pub/archive/epel/5Server/x86_64/</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">wget -r -p -np -k http://archives.fedoraproject.org/pub/epel/6Server/x86_64/</span><br>-c,  --continue                 resume getting a partially-downloaded file. 断点续传<br>-nd, --no-directories           don&#x27;t create directories. 不创建层级目录，所有文件下载到当前目录<br>-r,  --recursive                specify recursive download. 递归下载<br>-p,  --page-requisites          get all images, etc. needed to display HTML page. 下载页面所有文件，使页面能在本地打开<br>-k,  --convert-links            make links in downloaded HTML or CSS point to local files. 转换链接指向本地文件<br>-np, --no-parent                don&#x27;t ascend to the parent directory. 不下载父级目录的文件<br>-o,  --output-file=FILE         log messages to FILE. 指定日志输出文件<br>-O,  --output-document=FILE     write documents to FILE. 指定文件下载位置<br>-L,  --relative                 follow relative links only. 只下载相对链接，如果页面嵌入其他站点不会被下载<br>wget -m&lt;镜像/整站抓取&gt; -e rebots=off&lt;忽略robots协议&gt; -k&lt;将绝对url转换为本地相对url&gt; -E&lt;将所有text/html以html扩展名保存&gt; &#x27;http://baidu,com&#x27;<br><br></code></pre></td></tr></table></figure></li></ol><p>fdisk -l<br>lsblk -f</p><p>创建两个文件<br>touch app.{js,css}</p><h3 id="linux下如何输入EOF"><a href="#linux下如何输入EOF" class="headerlink" title="linux下如何输入EOF"></a>linux下如何输入EOF</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ctrl</span> + d <br></code></pre></td></tr></table></figure><p>不同系统有不同组合键</p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-type">int</span> main(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])<br>&#123;<br><span class="hljs-type">int</span> c;<br><span class="hljs-keyword">while</span> ((c = getc(<span class="hljs-built_in">stdin</span>)) != <span class="hljs-type">EOF</span>)<br>&#123;<br>putc(c, <span class="hljs-built_in">stdout</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">umask</span> <span class="hljs-number">022</span><br></code></pre></td></tr></table></figure><h1 id="查看进程占用网速和流量使用情况"><a href="#查看进程占用网速和流量使用情况" class="headerlink" title="查看进程占用网速和流量使用情况"></a>查看进程占用网速和流量使用情况</h1><blockquote><p>有三个命令vnstat、iftop、nethogs（推荐）</p></blockquote><h2 id="vnstat"><a href="#vnstat" class="headerlink" title="vnstat"></a>vnstat</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vnstat -i eth0 -l #实时流量情况<br></code></pre></td></tr></table></figure><h2 id="iftop"><a href="#iftop" class="headerlink" title="iftop"></a>iftop</h2><p>iftop可以用来监控网卡的实时流量（可以指定网段）、反向解析IP、显示端口信息等</p><h3 id="命令用法："><a href="#命令用法：" class="headerlink" title="命令用法："></a>命令用法：</h3><ul><li>-i设定监测的网卡，如：# iftop -i eth1</li><li>-B 以bytes为单位显示流量(默认是bits)，如：# iftop -B</li><li>-n使host信息默认直接都显示IP，如：# iftop -n</li><li>-N使端口信息默认直接都显示端口号，如: # iftop -N</li></ul><h3 id="交互命令："><a href="#交互命令：" class="headerlink" title="交互命令："></a>交互命令：</h3><ul><li>按n切换显示本机的IP或主机名;</li><li>按s切换是否显示本机的host信息;</li><li>按d切换是否显示远端目标主机的host信息;</li><li>按t切换显示格式为2行&#x2F;1行&#x2F;只显示发送流量&#x2F;只显示接收流- 量;</li><li>按N切换显示端口号或端口服务名称;</li><li>按S切换是否显示本机的端口信息;</li><li>按D切换是否显示远端目标主机的端口信息;</li><li>按p切换是否显示端口信息;</li></ul><h2 id="nethogs"><a href="#nethogs" class="headerlink" title="nethogs"></a>nethogs</h2><blockquote><p>按进程实时统计网络带宽利用率(推荐)</p></blockquote><h3 id="命令用法：-1"><a href="#命令用法：-1" class="headerlink" title="命令用法："></a>命令用法：</h3><ul><li>设置5秒钟刷新一次，通过-d来指定刷新频率：nethogs -d 5</li><li>监视eth0网络带宽 :nethogs eth0</li><li>同时监视eth0和eth1接口 : nethogs eth0 eth1</li></ul><h3 id="交互命令：-1"><a href="#交互命令：-1" class="headerlink" title="交互命令："></a>交互命令：</h3><p>以下是NetHogs的一些交互命令(键盘快捷键)</p><ul><li>m : 修改单位</li><li>r : 按流量排序</li><li>s : 按发送流量排序</li><li>q : 退出命令提示符</li></ul><h3 id="匹配进程名结束进程"><a href="#匹配进程名结束进程" class="headerlink" title="匹配进程名结束进程"></a>匹配进程名结束进程</h3><p>ps -ef | grep 进程名 | awk ‘{ print $2 }’ | xargs kill -9</p><h3 id="expect"><a href="#expect" class="headerlink" title="expect"></a>expect</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/expect</span><br>set user &quot;git账号&quot;<br>set pass &quot;密码&quot;<br>set timeout 10<br><br>spawn git pull # spawn启动新的进程<br>expect &quot;Username*&quot; # 匹配username*<br>send &quot;$user\n&quot; #发送账号到进程内<br>expect &quot;Password*&quot; # 匹配password<br>send &quot;$pass\n&quot; #发送密码到进程内<br>expect eof<br><br>expect -f pull.sh #运行脚本<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>WSL2 使用笔记</title>
    <link href="/2021/11/05/WSL2%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/11/05/WSL2%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote><p>官方文档</p></blockquote><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual">https://docs.microsoft.com/zh-cn/windows/wsl/install-manual</a></p><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/install">https://docs.microsoft.com/zh-cn/windows/wsl/install</a></p><h1 id="登录相关"><a href="#登录相关" class="headerlink" title="登录相关"></a>登录相关</h1><h2 id="停止wsl2"><a href="#停止wsl2" class="headerlink" title="停止wsl2"></a>停止wsl2</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl --shutdown<br></code></pre></td></tr></table></figure><blockquote><p>wsl切换用户需要输入密码</p></blockquote><p>可以根据下面文档去掉密码：<br><a href="https://www.1kmb.com/note/232.html">https://www.1kmb.com/note/232.html</a></p><h1 id="默认使用root用户"><a href="#默认使用root用户" class="headerlink" title="默认使用root用户"></a>默认使用root用户</h1><p>运行cmd&#x2F;powershell, 运行下面的命令</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ubuntu1804 config --<span class="hljs-keyword">default</span>-user root<br>wsl --shutdown<br>ubuntu1804<br></code></pre></td></tr></table></figure><p>如果你的发行版是其他版本，修改ubuntu1804 即可</p><h1 id="ip相关"><a href="#ip相关" class="headerlink" title="ip相关"></a>ip相关</h1><p>WSL2 每次重启后ip会变，网上提供了响应教程可以固定，实际上使用localhost就可以。如果你的子系统安装了nginx，建立虚拟机，绑定域名后在windows的hosts中将域名指向127.0.0.1</p><h1 id="IO问题"><a href="#IO问题" class="headerlink" title="IO问题"></a>IO问题</h1><p>wsl2 和 windows之间的io速度很慢，所以可以安装俩子系统发行版，一个使用wsl1， 一个使用wsl2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl --set-version Ubuntu-18.04 1   # 将Ubuntu-18.04设置为wsl1<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wsl -l -v  # 查看所有版本<br></code></pre></td></tr></table></figure><h1 id="windows访问wsl"><a href="#windows访问wsl" class="headerlink" title="windows访问wsl"></a>windows访问wsl</h1><p>在文件资源管理器输入</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">\\wsl<span class="hljs-symbol">$</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>什么是POP3、SMTP和IMAP?</title>
    <link href="/2021/11/02/%E4%BB%80%E4%B9%88%E6%98%AFPOP3%E3%80%81SMTP%E5%92%8CIMAP%EF%80%BF/"/>
    <url>/2021/11/02/%E4%BB%80%E4%B9%88%E6%98%AFPOP3%E3%80%81SMTP%E5%92%8CIMAP%EF%80%BF/</url>
    
    <content type="html"><![CDATA[<h1 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h1><p><strong>POP3</strong>是Post Office Protocol 3的简称，即邮局协议的第3个版本,它规定怎样将个人计算机连接到Internet的邮件服务器和下载电子邮件的电子协议。它是因特网电子邮件的第一个离线协议标准,POP3允许用户从服务器上把邮件存储到本地主机（即自己的计算机）上,同时删除保存在邮件服务器上的邮件，而POP3服务器则是遵循POP3协议的接收邮件服务器，用来接收电子邮件的。(<a href="http://help.163.com/10/0203/13/5UJONJ4I00753VB8.html?servCode=6010237">与IMAP有什么区别？</a>)</p><p>**<a href="http://help.163.com/09/1223/14/5R7P6CJ600753VB8.html?servCode=6010376">POP3</a>**协议允许电子邮件客户端下载服务器上的邮件，但是在客户端的操作（如移动邮件、标记已读等），不会反馈到服务器上，比如通过客户端收取了邮箱中的3封邮件并移动到其他文件夹，邮箱服务器上的这些邮件是没有同时被移动的 。</p><p>而**<a href="http://help.163.com/09/1223/14/5R7P6CJ600753VB8.html?servCode=6010376">IMAP</a>**提供webmail 与电子邮件客户端之间的双向通信，客户端的操作都会反馈到服务器上，对邮件进行的操作，服务器上的邮件也会做相应的动作。</p><p>同时，<strong>IMAP</strong>像<strong>POP3</strong>那样提供了方便的邮件下载服务，让用户能进行离线阅读。<strong>IMAP</strong>提供的摘要浏览功能可以让你在阅读完所有的邮件到达时间、主题、发件人、大小等信息后才作出是否下载的决定。此外，<strong>IMAP</strong> 更好地支持了从多个不同设备中随时访问新邮件。</p><p><img src="http://img4.cache.netease.com/help/2011/1/11/2011011118014265ebf.gif" alt="IMAP及POP3有什么区别?"></p><p>总之，<strong>IMAP</strong> 整体上为用户带来更为便捷和可靠的体验。<strong>POP3</strong> 更易丢失邮件或多次下载相同的邮件，但 <strong>IMAP</strong> 通过邮件客户端与webmail 之间的双向同步功能很好地避免了这些问题。</p><p><img src="http://img4.cache.netease.com/help/2010/12/29/201012291025107be5f.gif" alt="提供汇款凭证的扫描件格式要求及实例"> <strong>注：</strong>若在web邮箱中设置了“保存到已发送”，使用客户端POP服务发信时，已发邮件也会自动同步到网页端“已发送”文件夹内。</p><h1 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h1><p><strong>SMTP</strong> 的全称是“Simple Mail Transfer Protocol”，即简单邮件传输协议。它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转方式。SMTP 协议属于 TCP&#x2F;IP 协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。SMTP 服务器就是遵循 SMTP 协议的发送邮件服务器。<br>　　SMTP 认证，简单地说就是要求必须在提供了账户名和密码之后才可以登录 SMTP 服务器，这就使得那些垃圾邮件的散播者无可乘之机。<br>　　增加 SMTP 认证的目的是为了使用户避免受到垃圾邮件的侵扰。</p><p>使用smtp发送邮件：<br><a href="https://www.cnblogs.com/sdgwc/p/3324368.html">https://www.cnblogs.com/sdgwc/p/3324368.html</a><br><a href="https://blog.csdn.net/qq_35644234/article/details/68961603">https://blog.csdn.net/qq_35644234/article/details/68961603</a></p><h1 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h1><p><strong>IMAP</strong>全称是Internet Mail Access Protocol，即交互式邮件存取协议，它是跟POP3类似邮件访问标准协议之一。不同的是，开启了IMAP后，您在电子邮件客户端收取的邮件仍然保留在服务器上，同时在客户端上的操作都会反馈到服务器上，如：删除邮件，标记已读等，服务器上的邮件也会做相应的动作。所以无论从浏览器登录邮箱或者客户端软件登录邮箱，看到的邮件以及状态都是一致的。（<a href="http://help.163.com/10/0203/13/5UJONJ4I00753VB8.html?servCode=6010237">与POP3有什么区别？</a>）</p><p>文章来源： <a href="http://help.163.com/09/1223/14/5R7P6CJ600753VB8.html">http://help.163.com/09/1223/14/5R7P6CJ600753VB8.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP箭头函数与引用返回</title>
    <link href="/2021/11/02/PHP%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E5%BC%95%E7%94%A8%E8%BF%94%E5%9B%9E/"/>
    <url>/2021/11/02/PHP%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E4%B8%8E%E5%BC%95%E7%94%A8%E8%BF%94%E5%9B%9E/</url>
    
    <content type="html"><![CDATA[<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><p>文档来自PHP手册： <a href="https://www.php.net/manual/zh/functions.arrow.php">https://www.php.net/manual/zh/functions.arrow.php</a></p><blockquote><p>箭头函数是 PHP 7.4 的新语法，是一种更简洁的 匿名函数 写法。</p></blockquote><p>匿名函数和箭头函数都是 <code>Closure</code> 类的实现。</p><p>箭头函数的基本语法为 </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">fn</span> (<span class="hljs-params">argument_list</span>) =&gt;</span> expr<br></code></pre></td></tr></table></figure><p>箭头函数支持与 匿名函数 相同的功能，只是其父作用域的变量总是自动的。</p><p>当表达式中使用的变量是在父作用域中定义的，它将被隐式地按值捕获。在下面的例子中，函数 <code>$fn1</code> 和 <code>$fn2</code> 的行为是一样的。</p><blockquote><p>示例 箭头函数自动捕捉变量的值</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><br><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$y</span> = <span class="hljs-number">1</span>;<br><br><span class="hljs-variable">$fn1</span> = <span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>) =&gt;</span> <span class="hljs-variable">$x</span> + <span class="hljs-variable">$y</span>;<br><span class="hljs-comment">// 相当于 using $y by value:</span><br><span class="hljs-variable">$fn2</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$x</span></span>) <span class="hljs-keyword">use</span> (<span class="hljs-params"><span class="hljs-variable">$y</span></span>) </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$x</span> + <span class="hljs-variable">$y</span>;<br>&#125;;<br><br><span class="hljs-title function_ invoke__">var_export</span>(<span class="hljs-variable">$fn1</span>(<span class="hljs-number">3</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>示例 箭头函数自动捕捉变量的值，即使在嵌套的情况下</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$z</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable">$fn</span> = <span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"><span class="hljs-variable">$x</span></span>) =&gt;</span> <span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"><span class="hljs-variable">$y</span></span>) =&gt;</span> <span class="hljs-variable">$x</span> * <span class="hljs-variable">$y</span> + <span class="hljs-variable">$z</span>;<br><span class="hljs-comment">// 输出 51</span><br><span class="hljs-title function_ invoke__">var_export</span>(<span class="hljs-variable">$fn</span>(<span class="hljs-number">5</span>)(<span class="hljs-number">10</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>以下均为有效箭头函数例子</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"><span class="hljs-keyword">array</span> <span class="hljs-variable">$x</span></span>) =&gt;</span> <span class="hljs-variable">$x</span>;<br><span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"></span>): <span class="hljs-title">int</span> =&gt;</span> <span class="hljs-variable">$x</span>;<br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"><span class="hljs-variable">$x</span> = <span class="hljs-number">42</span></span>) =&gt;</span> <span class="hljs-variable">$x</span>;<br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$x</span></span>) =&gt;</span> <span class="hljs-variable">$x</span>;<br><span class="hljs-function"><span class="hljs-keyword">fn</span>&amp;(<span class="hljs-params"><span class="hljs-variable">$x</span></span>) =&gt;</span> <span class="hljs-variable">$x</span>;<br><span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"><span class="hljs-variable">$x</span>, ...<span class="hljs-variable">$rest</span></span>) =&gt;</span> <span class="hljs-variable">$rest</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>箭头函数会自动绑定上下文变量，这相当于对箭头函数内部使用的每一个变量 $x 执行了一个 use($x)。这意味着不可能修改外部作用域的任何值，若要实现对值的修改，可以使用 匿名函数 来替代。</p><blockquote><p>示例 来自外部范围的值不能在箭头函数内修改</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-variable">$x</span> = <span class="hljs-number">1</span>;<br><span class="hljs-variable">$fn</span> = <span class="hljs-function"><span class="hljs-keyword">fn</span>(<span class="hljs-params"></span>) =&gt;</span> <span class="hljs-variable">$x</span>++; <span class="hljs-comment">// 不会影响 x 的值</span><br><span class="hljs-variable">$fn</span>();<br><span class="hljs-title function_ invoke__">var_export</span>(<span class="hljs-variable">$x</span>);  <span class="hljs-comment">// 输出 1</span><br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="引用返回"><a href="#引用返回" class="headerlink" title="引用返回"></a>引用返回</h1><blockquote><p>字面意思就是函数返回一个引用</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> &amp;<span class="hljs-title">test</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">&amp;test</span>()<br>&#123;<br>    $a = 1;<br>    <span class="hljs-keyword">return</span> <span class="hljs-type">$a</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> &amp;(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$b</span> = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$b</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="箭头函数-1"><a href="#箭头函数-1" class="headerlink" title="箭头函数"></a>箭头函数</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$a</span> = <span class="hljs-function"><span class="hljs-keyword">fn</span> &amp;(<span class="hljs-params"><span class="hljs-variable">$b</span></span>) =&gt;</span> <span class="hljs-variable">$b</span>;<br></code></pre></td></tr></table></figure><p>关于引用返回的介绍可以参考官方文档：<a href="https://www.php.net/manual/zh/language.references.return.php">https://www.php.net/manual/zh/language.references.return.php</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Supervisor 使用踩坑笔记 【配置syncd】</title>
    <link href="/2021/10/30/Supervisor%20%E4%BD%BF%E7%94%A8%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0%20%E3%80%90%E9%85%8D%E7%BD%AEsyncd%E3%80%91/"/>
    <url>/2021/10/30/Supervisor%20%E4%BD%BF%E7%94%A8%E8%B8%A9%E5%9D%91%E7%AC%94%E8%AE%B0%20%E3%80%90%E9%85%8D%E7%BD%AEsyncd%E3%80%91/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>之前有使用hyperf这样的框架开发过，但是线上部署没有实操，也不清楚进程监控怎么配置，所以学习了一下，记录一篇笔记。</p></blockquote><p>我主要是看了这篇文章的讲解：<a href="https://www.1kmb.com/note/284.html">https://www.1kmb.com/note/284.html</a><br>内容很不错，推荐在这里。</p><h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><p>根据教程配置了syncd的监控配置如下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[program:syncd]</span><br><span class="hljs-attr">directory</span>=/root/syncd-deploy<br><span class="hljs-attr">command</span>=/root/syncd-deploy/bin/syncd<br><span class="hljs-attr">autostart</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">autorestart</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">startsecs</span>=<span class="hljs-number">1</span><br><span class="hljs-comment">;user=root</span><br><span class="hljs-attr">stderr_logfile</span>=/data/logs/syncd.log<br><span class="hljs-attr">stdout_logfile</span>=/data/logs/syncd.log<br><span class="hljs-attr">redirect_stderr</span>=<span class="hljs-literal">true</span><br><span class="hljs-attr">stdout_logfile_maxbytes</span>=<span class="hljs-number">30</span>MB<br><span class="hljs-attr">strout_logfile_backups</span>=<span class="hljs-number">20</span><br></code></pre></td></tr></table></figure><p>注意这个配置文件的后缀是ini，之前不小心建成conf文件，导致使用<code>supervisorctl start syncd</code> 的时候出现了下面的报错</p><blockquote><p>更正：系统不同配置后缀不同</p></blockquote><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">syncd: <span class="hljs-built_in">ERROR</span> (<span class="hljs-literal">no</span> such process)<br></code></pre></td></tr></table></figure><p>查看<code>/etc/supervisord.conf</code> 里面会有[include]一节，files就是其他进程的配置文件</p><p>更改后使用<code>supervisorctl update</code> 命令更新配置提示错误</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit"><span class="hljs-keyword">error: </span>&lt;class &#x27;xmlrpclib.Fault&#x27;&gt;, &lt;Fault 92: &quot;CANT_REREAD: The directory named as part of the path /data/logs/syncd.log does not exist in section &#x27;program:syncd&#x27; (file: &#x27;/etc/supervisord.d/syncd.ini&#x27;)&quot;&gt;: file: /usr/lib64/python2.7/xmlrpclib.py line: 794<br></code></pre></td></tr></table></figure><p>原来是日志目录不存在，新建目录后再次执行提示</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">syncd: </span><span class="hljs-keyword">added </span>process group<br></code></pre></td></tr></table></figure><p>再次执行</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">supervisorctl <span class="hljs-literal">start</span> syncd<br></code></pre></td></tr></table></figure><p>提示</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">syncd:</span> <span class="hljs-keyword">ERROR</span> (spawn <span class="hljs-keyword">error</span>)<br></code></pre></td></tr></table></figure><p>执行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">supervisorctl status</span><br></code></pre></td></tr></table></figure><p>提示</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">syncd                            FATAL     Exited too quickly (<span class="hljs-built_in">process</span> <span class="hljs-built_in">log</span> may have details)<br></code></pre></td></tr></table></figure><p>查看日志</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">less <span class="hljs-regexp">/data/</span>logs/syncd.log<br></code></pre></td></tr></table></figure><p>一堆</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">/root/syncd-deploy/bin/syncd: /root/syncd-deploy/bin/syncd: cannot<span class="hljs-built_in"> execute </span>binary file<br></code></pre></td></tr></table></figure><p>原来是因为之前启动不了。以为要加什么解释器，于是配置文件里面就出现了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">command=bash <span class="hljs-regexp">/root/</span>syncd-deploy<span class="hljs-regexp">/bin/</span>syncd<br></code></pre></td></tr></table></figure><p>但是这个syncd是go编译后的二进制文件，所以报错了。。。 在上面的配置中已经去掉了。</p><p>更改上面的bug后执行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">supervisorctl update</span><br></code></pre></td></tr></table></figure><p>提示</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">syncd:</span> stopped<br><span class="hljs-symbol">syncd:</span> updated process <span class="hljs-keyword">group</span><br></code></pre></td></tr></table></figure><p>查看下状态</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@VM</span><span class="hljs-number">-0</span><span class="hljs-number">-10</span>-centos ~]<span class="hljs-meta"># supervisorctl status</span><br>syncd                            RUNNING   pid <span class="hljs-number">20999</span>, uptime <span class="hljs-number">0</span>:<span class="hljs-number">00</span>:<span class="hljs-number">04</span><br></code></pre></td></tr></table></figure><p>然后根据syncd配置的端口访问下，正常。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>配置文件不要搞错， 涉及日志目录的要确保目录存在，命令怎么执行要写完整。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>消息头字段之Cache-Control</title>
    <link href="/2021/10/28/%E6%B6%88%E6%81%AF%E5%A4%B4%E5%AD%97%E6%AE%B5%E4%B9%8BCache-Control/"/>
    <url>/2021/10/28/%E6%B6%88%E6%81%AF%E5%A4%B4%E5%AD%97%E6%AE%B5%E4%B9%8BCache-Control/</url>
    
    <content type="html"><![CDATA[<h1 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h1><p><code>Cache-Control</code> 通用消息头字段，被用于在http请求和响应中，通过指定指令来实现缓存机制。缓存指令是单向的，这意味着在请求中设置的指令，不一定被包含在响应中。</p><table><thead><tr><th align="left">Header type</th><th><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/General_header">General header</a></th></tr></thead><tbody><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Forbidden_header_name">Forbidden header name</a></td><td>no</td></tr><tr><td align="left"><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Simple_response_header">CORS-safelisted response-header</a></td><td>yes</td></tr></tbody></table><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E8%AF%AD%E6%B3%95">语法</a></h2><p>指令格式具有以下有效规则：</p><ul><li>不区分大小写，但建议使用小写。</li><li>多个指令以逗号分隔。</li><li>具有可选参数，可以用令牌或者带引号的字符串语法。</li></ul><h3 id="缓存请求指令"><a href="#缓存请求指令" class="headerlink" title="缓存请求指令"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E7%BC%93%E5%AD%98%E8%AF%B7%E6%B1%82%E6%8C%87%E4%BB%A4">缓存请求指令</a></h3><p>客户端可以在HTTP请求中使用的标准 Cache-Control 指令。</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gams">Cache-Control: <span class="hljs-built_in">max</span>-age=&amp;<span class="hljs-keyword">lt</span>;seconds&amp;<span class="hljs-keyword">gt</span>;<br>Cache-Control: <span class="hljs-built_in">max</span>-stale[=&amp;<span class="hljs-keyword">lt</span>;seconds&amp;<span class="hljs-keyword">gt</span>;]<br>Cache-Control: <span class="hljs-built_in">min</span>-fresh=&amp;<span class="hljs-keyword">lt</span>;seconds&amp;<span class="hljs-keyword">gt</span>;<br>Cache-control: <span class="hljs-keyword">no</span>-cache<br>Cache-control: <span class="hljs-keyword">no</span>-store<br>Cache-control: <span class="hljs-keyword">no</span>-transform<br>Cache-control: only-<span class="hljs-keyword">if</span>-cached<br></code></pre></td></tr></table></figure><h3 id="缓存响应指令"><a href="#缓存响应指令" class="headerlink" title="缓存响应指令"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E7%BC%93%E5%AD%98%E5%93%8D%E5%BA%94%E6%8C%87%E4%BB%A4">缓存响应指令</a></h3><p>服务器可以在响应中使用的标准 Cache-Control 指令。</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">Cache-control: </span>must-revalidate<br><span class="hljs-keyword">Cache-control: </span>no-<span class="hljs-keyword">cache</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">Cache-control: </span>no-store<br><span class="hljs-keyword">Cache-control: </span>no-transform<br><span class="hljs-keyword">Cache-control: </span>public<br><span class="hljs-keyword">Cache-control: </span>private<br><span class="hljs-keyword">Cache-control: </span>proxy-revalidate<br><span class="hljs-keyword">Cache-Control: </span>max-age=&amp;lt<span class="hljs-comment">;seconds&amp;gt;</span><br><span class="hljs-keyword">Cache-control: </span>s-maxage=&amp;lt<span class="hljs-comment">;seconds&amp;gt;</span><br></code></pre></td></tr></table></figure><h3 id="扩展Cache-Control指令"><a href="#扩展Cache-Control指令" class="headerlink" title=" 扩展Cache-Control指令"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E6%89%A9%E5%B1%95cache-control%E6%8C%87%E4%BB%A4"> 扩展<code>Cache-Control</code>指令</a></h3><p>拓展缓存指令不是核心HTTP缓存标准文档的一部分，使用前请注意检查<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7">兼容性</a>！</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas">Cache-control: immutable<br>Cache-control: stale-<span class="hljs-keyword">while</span>-revalidate=<span class="hljs-variable">&amp;lt</span>;seconds<span class="hljs-variable">&amp;gt</span>;<br>Cache-control: stale-<span class="hljs-keyword">if</span>-<span class="hljs-keyword">error</span>=<span class="hljs-variable">&amp;lt</span>;seconds<span class="hljs-variable">&amp;gt</span>;<br></code></pre></td></tr></table></figure><h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E6%8C%87%E4%BB%A4">指令</a></h2><h3 id="可缓存性"><a href="#可缓存性" class="headerlink" title="可缓存性"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E5%8F%AF%E7%BC%93%E5%AD%98%E6%80%A7">可缓存性</a></h3><ul><li><p><code>public</code></p><p>表明响应可以被任何对象（包括：发送请求的客户端，代理服务器，等等）缓存，即使是通常不可缓存的内容。（例如：1.该响应没有<code>max-age</code>指令或<code>Expires</code>消息头；2. 该响应对应的请求方法是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST">POST</a> 。）</p></li><li><p><code>private</code></p><p>表明响应只能被单个用户缓存，不能作为共享缓存（即代理服务器不能缓存它）。私有缓存可以缓存响应内容，比如：对应用户的本地浏览器。</p></li><li><p><code>no-cache</code></p><p>在发布缓存副本之前，强制要求缓存把请求提交给原始服务器进行验证(协商缓存验证)。</p></li><li><p><code>no-store</code></p><p>缓存不应存储有关客户端请求或服务器响应的任何内容，即不使用任何缓存。</p></li></ul><h3 id="到期"><a href="#到期" class="headerlink" title="到期"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E5%88%B0%E6%9C%9F">到期</a></h3><ul><li><p><code>max-age=&amp;lt;seconds&amp;gt;</code></p><p>设置缓存存储的最大周期，超过这个时间缓存被认为过期(单位秒)。与<code>Expires</code>相反，时间是相对于请求的时间。</p></li><li><p><code>s-maxage=&amp;lt;seconds&amp;gt;</code></p><p>覆盖<code>max-age</code>或者<code>Expires</code>头，但是仅适用于共享缓存(比如各个代理)，私有缓存会忽略它。</p></li><li><p><code>max-stale[=&amp;lt;seconds&amp;gt;]</code></p><p>表明客户端愿意接收一个已经过期的资源。可以设置一个可选的秒数，表示响应不能已经过时超过该给定的时间。</p></li><li><p><code>min-fresh=&amp;lt;seconds&amp;gt;</code></p><p>表示客户端希望获取一个能在指定的秒数内保持其最新状态的响应。</p></li><li><p><code>stale-while-revalidate=&amp;lt;seconds&amp;gt;</code> </p><p>表明客户端愿意接受陈旧的响应，同时在后台异步检查新的响应。秒值指示客户愿意接受陈旧响应的时间长度。</p></li><li><p><code>stale-if-error=&amp;lt;seconds&amp;gt;</code> </p><p>表示如果新的检查失败，则客户愿意接受陈旧的响应。秒数值表示客户在初始到期后愿意接受陈旧响应的时间。</p></li></ul><h3 id="重新验证和重新加载"><a href="#重新验证和重新加载" class="headerlink" title="重新验证和重新加载"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E9%87%8D%E6%96%B0%E9%AA%8C%E8%AF%81%E5%92%8C%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD">重新验证和重新加载</a></h3><ul><li><p><code>must-revalidate</code></p><p>一旦资源过期（比如已经超过<code>max-age</code>），在成功向原始服务器验证之前，缓存不能用该资源响应后续请求。</p></li><li><p><code>proxy-revalidate</code></p><p>与must-revalidate作用相同，但它仅适用于共享缓存（例如代理），并被私有缓存忽略。</p></li><li><p><code>immutable</code> </p><p>表示响应正文不会随时间而改变。资源（如果未过期）在服务器上不发生改变，因此客户端不应发送重新验证请求头（例如<code>If-None-Match</code>或I<code>f-Modified-Since</code>）来检查更新，即使用户显式地刷新页面。在Firefox中，immutable只能被用在 <code>https://</code> transactions. 有关更多信息，请参阅<a href="http://bitsup.blogspot.de/2016/05/cache-control-immutable.html">这里</a>。</p></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E5%85%B6%E4%BB%96">其他</a></h3><ul><li><p><code>no-transform</code></p><p>不得对资源进行转换或转变。<code>Content-Encoding</code>、<code>Content-Range</code>、<code>Content-Type</code>等HTTP头不能由代理修改。例如，非透明代理或者如<a href="https://support.google.com/webmasters/answer/6211428?hl=en">Google&amp;#039;s Light Mode</a>可能对图像格式进行转换，以便节省缓存空间或者减少缓慢链路上的流量。<code>no-transform</code>指令不允许这样做。</p></li><li><p><code>only-if-cached</code></p><p>表明客户端只接受已缓存的响应，并且不要向原始服务器检查是否有更新的拷贝。</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E7%A4%BA%E4%BE%8B">示例</a></h2><h3 id="禁止缓存"><a href="#禁止缓存" class="headerlink" title="禁止缓存"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E7%A6%81%E6%AD%A2%E7%BC%93%E5%AD%98">禁止缓存</a></h3><p>发送如下响应头可以关闭缓存。此外，可以参考<code>Expires</code>和<code>Pragma</code>消息头。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Cache-Control:</span> <span class="hljs-literal">no</span><span class="hljs-string">-store</span><br></code></pre></td></tr></table></figure><h3 id="缓存静态资源"><a href="#缓存静态资源" class="headerlink" title="缓存静态资源"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E7%BC%93%E5%AD%98%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90">缓存静态资源</a></h3><p>对于应用程序中不会改变的文件，你通常可以在发送响应头前添加积极缓存。这包括例如由应用程序提供的静态文件，例如图像，CSS文件和JavaScript文件。另请参阅Expires标题。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Cache</span><span class="hljs-params">-Control</span>:<span class="hljs-keyword">public</span>, <span class="hljs-keyword">max</span><span class="hljs-params">-age</span>=<span class="hljs-number">31536000</span><br></code></pre></td></tr></table></figure><h3 id="需要重新验证"><a href="#需要重新验证" class="headerlink" title="需要重新验证"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control#%E9%9C%80%E8%A6%81%E9%87%8D%E6%96%B0%E9%AA%8C%E8%AF%81">需要重新验证</a></h3><p>指定 <code>no-cache</code> 或 <code>max-age=0, must-revalidate</code> 表示客户端可以缓存资源，每次使用缓存资源前都必须重新验证其有效性。这意味着每次都会发起 HTTP 请求，但当缓存内容仍有效时可以跳过 HTTP 响应体的下载。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Cache</span>-Control: no-<span class="hljs-keyword">cache</span><br></code></pre></td></tr></table></figure><p>Copy to Clipboard</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Cache</span><span class="hljs-params">-Control</span>: <span class="hljs-keyword">max</span><span class="hljs-params">-age</span>=<span class="hljs-number">0</span>, must<span class="hljs-params">-revalidate</span><br></code></pre></td></tr></table></figure><p>Copy to Clipboard</p><p><strong>注意</strong>: 如果服务器关闭或失去连接，下面的指令可能会造成使用缓存。</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">Cache</span><span class="hljs-params">-Control</span>: <span class="hljs-keyword">max</span><span class="hljs-params">-age</span>=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>原文地址：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>去掉sudo的密码</title>
    <link href="/2021/10/20/%E5%8E%BB%E6%8E%89sudo%E7%9A%84%E5%AF%86%E7%A0%81/"/>
    <url>/2021/10/20/%E5%8E%BB%E6%8E%89sudo%E7%9A%84%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>sudo执行命令的时候老是让输入密码，真的好烦，下面为去掉密码的方法：</p><p>首先打开&#x2F;etc&#x2F;sudoers</p><p>“sudo visudo” 或 “sudo vi &#x2F;etc&#x2F;sudoers”</p><p>建议用以下命令打开”sudo visudo”，用该命令编辑sudoers后保存时如果有语法错误系统会给出提示，而用“vi &#x2F;etc&#x2F;sudoers”就不会给出错误提示。</p><p>内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">root    ALL=(ALL:ALL) ALL<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Members of the admin group may gain root privileges</span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">admin ALL=(ALL) ALL</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Allow members of group sudo to execute any <span class="hljs-built_in">command</span></span><br><span class="hljs-meta prompt_">%</span><span class="language-bash">sudo   ALL=(ALL:ALL) NOPASSWD:ALL</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">See sudoers(5) <span class="hljs-keyword">for</span> more information on <span class="hljs-string">&quot;#include&quot;</span> directives:</span><br></code></pre></td></tr></table></figure><p>接下来有二种方法(以下操作必须谨慎，使用出错与小站无关)</p><p>方法一：</p><p>找到 <code>%admin ALL=(ALL) ALL</code>这一行，将其修改为 <code>%admin ALL=(ALL) NOPASSWD:ALL</code>，或者直接给<code>sudo</code>加上<code>NOPASSWD</code>，如上代码<br>方法二：</p><p>在<code>%admin ALL=(ALL) ALL</code>这一行的下面添加一行 <code>username ALL = NOPASSWD:ALL</code></p><p>一定要在<code>%admin ALL=(ALL) ALL</code>行的下面，否则系统会先加载<code>username ALL = NOPASSWD:ALL”再加载“%admin ALL=(ALL) ALL</code></p><p>由于username属于admin组所以会将对username的设置覆盖。</p><p>注：username是你登录的用户名。</p><p>顺便附加一个介绍sudo的博客：<a href="https://blog.csdn.net/zahuopuboss/article/details/8909891">https://blog.csdn.net/zahuopuboss/article/details/8909891</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu下安装PHP的一系列笔记</title>
    <link href="/2021/10/15/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85PHP%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/10/15/Ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85PHP%E7%9A%84%E4%B8%80%E7%B3%BB%E5%88%97%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="查看配置"><a href="#查看配置" class="headerlink" title="查看配置"></a>查看配置</h2><p>可以通过命令查看</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">php -i <span class="hljs-string">| grep configure</span><br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">php <span class="hljs-comment">--ini</span><br>php -m<br></code></pre></td></tr></table></figure><p>安装PHP</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>下载源码包解压</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs q"><br>apt -y install make<br>apt -y install build-essential<br>apt -y install libxml2-<span class="hljs-built_in">dev</span><br>apt -y install libssl-<span class="hljs-built_in">dev</span><br>apt -y install libpng-<span class="hljs-built_in">dev</span><br>apt -y install libsqlite3-<span class="hljs-built_in">dev</span><br>apt -y install zlib1g-<span class="hljs-built_in">dev</span>  <span class="hljs-comment">// apt-get install libbz2-dev </span><br>apt -y install libcurl4-openssl-<span class="hljs-built_in">dev</span><br>apt -y install libtidy-<span class="hljs-built_in">dev</span><br>apt -y install autoconf<br>apt -y install libtool<br>apt -y install pkg-config<br>git clone https:<span class="hljs-comment">//github.com/kkos/oniguruma.git oniguruma</span><br>cd oniguruma<br>./autogen.sh<br>./configure<br>make<br>make install<br><br></code></pre></td></tr></table></figure><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">sudo apt <span class="hljs-keyword">install </span>gcc -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>make -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>openssl -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>curl -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libbz2-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libxml2-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libjpeg-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libpng-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libfreetype6-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libzip-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libssl-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libsqlite3-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libcurl4-openssl-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libgmp3-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libonig-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libreadline-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libxslt1-dev -y &amp;&amp;<br>sudo apt <span class="hljs-keyword">install </span>libffi-dev -y<br><br></code></pre></td></tr></table></figure><p>模块对应的依赖（可选择性的安装）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs routeros">xml<br>sudo apt-<span class="hljs-built_in">get</span> install -y libxml2-dev<br>pcre<br>sudo apt-<span class="hljs-built_in">get</span> install -y libpcre3-dev<br>jpeg<br>sudo apt-<span class="hljs-built_in">get</span> install -y libjpeg62-dev<br>freetype<br>sudo apt-<span class="hljs-built_in">get</span> install -y libfreetype6-dev<br>png<br>sudo apt-<span class="hljs-built_in">get</span> install -y libpng12-dev libpng3 libpnglite-dev<br>iconv<br>sudo apt-<span class="hljs-built_in">get</span> install -y libiconv-hook-dev libiconv-hook1<br>mycrypt<br>sudo apt-<span class="hljs-built_in">get</span> install -y libmcrypt-dev libmcrypt4<br>mhash<br>sudo apt-<span class="hljs-built_in">get</span> install -y libmhash-dev libmhash2<br>openssl<br>sudo apt-<span class="hljs-built_in">get</span> install -y libltdl-dev libssl-dev<br>curl<br>sudo apt-<span class="hljs-built_in">get</span> install -y libcurl4-openssl-dev<br>mysql<br>sudo apt-<span class="hljs-built_in">get</span> install -y libmysqlclient-dev<br>imagick<br>sudo apt-<span class="hljs-built_in">get</span> install -y libmagickcore-dev libmagickwand-dev<br>readline<br>sudo apt-<span class="hljs-built_in">get</span> install -y libedit-dev<br>ubuntu 无法找到 iconv<br>sudo ln -s /usr/lib/libiconv_hook.so.1.0.0 /usr/lib/libiconv.so<br>sudo ln -s /usr/lib/libiconv_hook.so.1.0.0 /usr/lib/libiconv.so.1<br>安装PHP扩展<br>sudo apt-<span class="hljs-built_in">get</span> install -y autoconf automake m4<br><br></code></pre></td></tr></table></figure><p>去掉单引号后如下</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">./configure</span> <span class="hljs-params">--prefix=/usr/local/php/81</span> <span class="hljs-params">--with-config-file-path=/usr/local/php/81/etc</span> <span class="hljs-params">--enable-pcntl</span> <span class="hljs-params">--enable-fpm</span> <span class="hljs-params">--enable-inline-optimization</span> <span class="hljs-params">--disable-debug</span> <span class="hljs-params">--disable-rpath</span> <span class="hljs-params">--enable-shared</span>  <span class="hljs-params">--with-xmlrpc</span> <span class="hljs-params">--with-mhash</span> <span class="hljs-params">--with-sqlite3</span> <span class="hljs-params">--with-zlib</span> <span class="hljs-params">--enable-bcmath</span> <span class="hljs-params">--with-iconv</span> <span class="hljs-params">--with-bz2</span> <span class="hljs-params">--with-openssl</span> <span class="hljs-params">--enable-calendar</span> <span class="hljs-params">--with-curl</span> <span class="hljs-params">--with-cdb</span> <span class="hljs-params">--enable-dom</span> <span class="hljs-params">--enable-exif</span> <span class="hljs-params">--enable-fileinfo</span> <span class="hljs-params">--enable-filter</span> <span class="hljs-params">--with-openssl-dir</span> <span class="hljs-params">--with-zlib-dir</span> <span class="hljs-params">--enable-gd-jis-conv</span> <span class="hljs-params">--with-gettext</span> <span class="hljs-params">--with-gmp</span> <span class="hljs-params">--with-mhash</span> <span class="hljs-params">--enable-json</span> <span class="hljs-params">--enable-mbstring</span> <span class="hljs-params">--enable-mbregex</span> <span class="hljs-params">--enable-pdo</span> <span class="hljs-params">--with-mysqli=mysqlnd</span> <span class="hljs-params">--with-pdo-mysql=mysqlnd</span> <span class="hljs-params">--with-pdo-sqlite</span> <span class="hljs-params">--with-readline</span> <span class="hljs-params">--enable-session</span> <span class="hljs-params">--enable-shmop</span> <span class="hljs-params">--enable-simplexml</span> <span class="hljs-params">--enable-sockets</span>  <span class="hljs-params">--enable-sysvmsg</span> <span class="hljs-params">--enable-sysvsem</span> <span class="hljs-params">--enable-sysvshm</span> <span class="hljs-params">--with-xsl</span> <span class="hljs-params">--enable-mysqlnd-compression-support</span> <span class="hljs-params">--with-pear</span> <span class="hljs-params">--enable-opcache</span> <span class="hljs-params">--with-zip</span> <span class="hljs-params">--enable-gd</span> <span class="hljs-params">--with-ffi</span><br></code></pre></td></tr></table></figure><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> -j &amp;&amp; <span class="hljs-built_in">make</span> install<br></code></pre></td></tr></table></figure><p>配置文件</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cp php.ini-development <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/php/</span><span class="hljs-number">8.1</span><span class="hljs-regexp">/etc/</span>php.ini <br>cd <span class="hljs-regexp">/opt/</span>php<span class="hljs-regexp">/74/</span>etc &amp;&amp; cp php-fpm.conf.<span class="hljs-keyword">default</span> php-fpm.conf<br>cd <span class="hljs-regexp">/opt/</span>php<span class="hljs-regexp">/74/</span>etc/php-fpm.d &amp;&amp; cp www.conf.<span class="hljs-keyword">default</span> www.conf<br></code></pre></td></tr></table></figure><p>vim &#x2F;opt&#x2F;php&#x2F;74&#x2F;etc&#x2F;php-fpm.conf，pid &#x3D; run&#x2F;php-fpm.pid  #去掉；</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">pid</span> <span class="hljs-operator">=</span> run/php-fpm.pid<br></code></pre></td></tr></table></figure><p>vim &#x2F;opt&#x2F;php&#x2F;74&#x2F;etc&#x2F;php-fpm.d&#x2F;<a href="http://www.conf/">www.conf</a></p><p>增加</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">user</span> <span class="hljs-title">= www</span><br><span class="hljs-keyword">group</span> <span class="hljs-title">= www</span><br></code></pre></td></tr></table></figure><p>增加php环境变量(我使用的zsh 如果是bash 请编辑 .bashrc 文件 )</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.zshrc<br></code></pre></td></tr></table></figure><p>加入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">PHP_HOME</span>=/opt/php/74<br><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-variable">$PHP_HOME</span>/bin:$PATH<br></code></pre></td></tr></table></figure><p>增加www用户用户组</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo groupadd www</span><br><span class="hljs-attribute">sudo useradd -g www www</span><br></code></pre></td></tr></table></figure><p>php-fpm服务化（Systemd）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo touch <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>php-fpm.service<br>sudo vim <span class="hljs-regexp">/lib/</span>systemd<span class="hljs-regexp">/system/</span>php-fpm.service<br></code></pre></td></tr></table></figure><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[Unit]</span><br><span class="hljs-attr">Description</span>=The PHP FastCGI Process Manager<br><span class="hljs-attr">After</span>=syslog.target network.target<br><br><span class="hljs-section">[Service]</span><br><span class="hljs-attr">Type</span>=forking<br><span class="hljs-attr">PIDFile</span>=/opt/php/<span class="hljs-number">74</span>/var/run/php-fpm.pid<br><span class="hljs-attr">ExecStart</span>=/opt/php/<span class="hljs-number">74</span>/sbin/php-fpm<br><span class="hljs-attr">ExecReload</span>=/bin/kill -USR2 <span class="hljs-variable">$MAINPID</span><br><span class="hljs-attr">PrivateTmp</span>=<span class="hljs-literal">true</span><br><br><span class="hljs-section">[Install]</span><br><span class="hljs-attr">WantedBy</span>=multi-user.target<br></code></pre></td></tr></table></figure><p>服务开机启动</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo systemctl <span class="hljs-built_in">enable</span> php-fpm.service<br></code></pre></td></tr></table></figure><p>启动、停止、重启、状态</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nsis">sudo <span class="hljs-params">system</span>ctl start php-fpm.service<br>sudo <span class="hljs-params">system</span>ctl stop php-fpm.service<br>sudo <span class="hljs-params">system</span>ctl restart php-fpm.service<br>sudo <span class="hljs-params">system</span>ctl status php-fpm.service<br></code></pre></td></tr></table></figure><p>参考：<a href="https://blog.csdn.net/hiqiming/article/details/105245227">https://blog.csdn.net/hiqiming/article/details/105245227</a></p><h3 id="apt安装"><a href="#apt安装" class="headerlink" title="apt安装"></a>apt安装</h3><p>首先，请确保您的系统中具有<strong>add-apt-repository</strong>命令实用程序。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markup">sudo apt-get install software-properties-common<br></code></pre></td></tr></table></figure><p>现在，您可以添加存储库并更新系统中的程序包缓存。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs markup">sudo add-apt-repository ppa:ondrej/php<br>sudo apt-get update<br></code></pre></td></tr></table></figure><p>最后，要在Linux系统中安装PHP 8，请使用安装命令。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markup">sudo apt install php8.1<br></code></pre></td></tr></table></figure><h2 id="安装pecl"><a href="#安装pecl" class="headerlink" title="安装pecl"></a>安装pecl</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>pear.php.net/go-pear.phar<br>php go-pear.phar<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">apt <span class="hljs-keyword">install</span> php-pear<br></code></pre></td></tr></table></figure><h2 id="安装扩展"><a href="#安装扩展" class="headerlink" title="安装扩展"></a>安装扩展</h2><h3 id="amqp"><a href="#amqp" class="headerlink" title="amqp"></a>amqp</h3><h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p>怼最新版<br><a href="https://github.com/alanxz/rabbitmq-c/releases">https://github.com/alanxz/rabbitmq-c/releases</a></p><p>下载后解压</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>没有安装cmake的需要先安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt install cmake<br></code></pre></td></tr></table></figure><p>解压后进入解压目录执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir build &amp;&amp; cd build<br>cmake -DCMAKE_INSTALL_PREFIX=/usr/local/rabbitmq-c ..<br>make &amp;&amp; make install <br></code></pre></td></tr></table></figure><blockquote><p>pecl</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">pecl install amqp<br></code></pre></td></tr></table></figure><p>指定下librabbmitmq的位置，回车再按照添加配置</p><blockquote><p>源码</p></blockquote><p>pecl下载源码包，</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">phpize<br>./configure --with-php-config=/path-to/php-config --with-amqp --with-librabbitmq-dir=/usr/local/rabbitmq-c<br></code></pre></td></tr></table></figure><p>源码安装如果报错</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/rabbitmq-c-0.11.0/</span>lib -lrabbitmq<br>...<br><span class="hljs-regexp">/usr/</span>bin/ld: cannot <span class="hljs-keyword">find</span> -lrabbitmq<br></code></pre></td></tr></table></figure><p>那就找到rabbitmq-c的链接库做下软连接</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/rabbitmq-c-0.11.0/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>librabbitmq.so <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/rabbitmq-c-0.11.0/</span>lib/<br>ln -s <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/rabbitmq-c-0.11.0/</span>lib<span class="hljs-regexp">/x86_64-linux-gnu/</span>librabbitmq.so.<span class="hljs-number">4</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/rabbitmq-c-0.11.0/</span>lib/<br></code></pre></td></tr></table></figure><h2 id="pecl卸载扩展"><a href="#pecl卸载扩展" class="headerlink" title="pecl卸载扩展"></a>pecl卸载扩展</h2><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pecl uninstall swoole</span><br></code></pre></td></tr></table></figure><h3 id="fpm配置"><a href="#fpm配置" class="headerlink" title="fpm配置"></a>fpm配置</h3><p>添加到服务项</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp php-fpm.service <span class="hljs-regexp">/etc/</span>systemd<span class="hljs-regexp">/system/</span><br><br></code></pre></td></tr></table></figure><figure class="highlight protobuf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs protobuf"><span class="hljs-keyword">service </span><span class="hljs-title class_">php</span>-fpm start<br><span class="hljs-keyword">service </span><span class="hljs-title class_">php</span>-fpm stop<br><span class="hljs-keyword">service </span><span class="hljs-title class_">php</span>-fpm restart<br><span class="hljs-keyword">service </span><span class="hljs-title class_">php</span>-fpm reload<br></code></pre></td></tr></table></figure><h2 id="报错解决方案"><a href="#报错解决方案" class="headerlink" title="报错解决方案"></a>报错解决方案</h2><ul><li>php拓展安装报错：Warning: PHP Startup: Invalid library (maybe not a PHP library) ‘*.so’ in Unknown on lin</li></ul><p>解决方法：make clean    然后重新phpize,configure –with-php-config&#x3D;,make,make install走安装流</p><h2 id="编译参数"><a href="#编译参数" class="headerlink" title="编译参数"></a>编译参数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br></pre></td><td class="code"><pre><code class="hljs sql">`configure<span class="hljs-string">&#x27; configures PHP 7.4.0-dev to adapt to many kinds of systems.</span><br><span class="hljs-string"> </span><br><span class="hljs-string">Usage: ./configure [OPTION]... [VAR=VALUE]...</span><br><span class="hljs-string"> </span><br><span class="hljs-string">To assign environment variables (e.g., CC, CFLAGS...), specify them as</span><br><span class="hljs-string">VAR=VALUE.  See below for descriptions of some of the useful variables.</span><br><span class="hljs-string"> </span><br><span class="hljs-string">Defaults for the options are specified in brackets.</span><br><span class="hljs-string"> </span><br><span class="hljs-string">Configuration:</span><br><span class="hljs-string">  -h, --help              display this help and exit</span><br><span class="hljs-string">      --help=short        display options specific to this package</span><br><span class="hljs-string">      --help=recursive    display the short help of all the included packages</span><br><span class="hljs-string">  -V, --version           display version information and exit</span><br><span class="hljs-string">  -q, --quiet, --silent   do not print `checking ...&#x27;</span> messages<br>      <span class="hljs-comment">--cache-file=FILE   cache test results in FILE [disabled]</span><br>  <span class="hljs-operator">-</span>C, <span class="hljs-comment">--config-cache      alias for `--cache-file=config.cache&#x27;</span><br>  <span class="hljs-operator">-</span>n, <span class="hljs-comment">--no-create         do not create output files</span><br>      <span class="hljs-comment">--srcdir=DIR        find the sources in DIR [configure dir or `..&#x27;]</span><br> <br>Installation directories:<br>  <span class="hljs-comment">--prefix=PREFIX         install architecture-independent files in PREFIX</span><br>                          [<span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span><span class="hljs-keyword">local</span>]<br>  <span class="hljs-comment">--exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX</span><br>                          [PREFIX]<br> <br><span class="hljs-keyword">By</span> <span class="hljs-keyword">default</span>, `make install<span class="hljs-string">&#x27; will install all the files in</span><br><span class="hljs-string">`/usr/local/bin&#x27;</span>, `<span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span><span class="hljs-keyword">local</span><span class="hljs-operator">/</span>lib<span class="hljs-string">&#x27; etc.  You can specify</span><br><span class="hljs-string">an installation prefix other than `/usr/local&#x27;</span> <span class="hljs-keyword">using</span> `<span class="hljs-comment">--prefix&#x27;,</span><br><span class="hljs-keyword">for</span> instance `<span class="hljs-comment">--prefix=$HOME&#x27;.</span><br> <br><span class="hljs-keyword">For</span> better control, use the options below.<br> <br>Fine tuning <span class="hljs-keyword">of</span> the installation directories:<br>  <span class="hljs-comment">--bindir=DIR            user executables [EPREFIX/bin]</span><br>  <span class="hljs-comment">--sbindir=DIR           system admin executables [EPREFIX/sbin]</span><br>  <span class="hljs-comment">--libexecdir=DIR        program executables [EPREFIX/libexec]</span><br>  <span class="hljs-comment">--sysconfdir=DIR        read-only single-machine data [PREFIX/etc]</span><br>  <span class="hljs-comment">--sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]</span><br>  <span class="hljs-comment">--localstatedir=DIR     modifiable single-machine data [PREFIX/var]</span><br>  <span class="hljs-comment">--libdir=DIR            object code libraries [EPREFIX/lib]</span><br>  <span class="hljs-comment">--includedir=DIR        C header files [PREFIX/include]</span><br>  <span class="hljs-comment">--oldincludedir=DIR     C header files for non-gcc [/usr/include]</span><br>  <span class="hljs-comment">--datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]</span><br>  <span class="hljs-comment">--datadir=DIR           read-only architecture-independent data [DATAROOTDIR]</span><br>  <span class="hljs-comment">--infodir=DIR           info documentation [DATAROOTDIR/info]</span><br>  <span class="hljs-comment">--localedir=DIR         locale-dependent data [DATAROOTDIR/locale]</span><br>  <span class="hljs-comment">--mandir=DIR            man documentation [DATAROOTDIR/man]</span><br>  <span class="hljs-comment">--docdir=DIR            documentation root [DATAROOTDIR/doc/php]</span><br>  <span class="hljs-comment">--htmldir=DIR           html documentation [DOCDIR]</span><br>  <span class="hljs-comment">--dvidir=DIR            dvi documentation [DOCDIR]</span><br>  <span class="hljs-comment">--pdfdir=DIR            pdf documentation [DOCDIR]</span><br>  <span class="hljs-comment">--psdir=DIR             ps documentation [DOCDIR]</span><br> <br>Program names:<br>  <span class="hljs-comment">--program-prefix=PREFIX            prepend PREFIX to installed program names</span><br>  <span class="hljs-comment">--program-suffix=SUFFIX            append SUFFIX to installed program names</span><br>  <span class="hljs-comment">--program-transform-name=PROGRAM   run sed PROGRAM on installed program names</span><br> <br><span class="hljs-keyword">System</span> types:<br>  <span class="hljs-comment">--build=BUILD     configure for building on BUILD [guessed]</span><br>  <span class="hljs-comment">--host=HOST       cross-compile to build programs to run on HOST [BUILD]</span><br>  <span class="hljs-comment">--target=TARGET   configure for building compilers for TARGET [HOST]</span><br> <br>Optional Features <span class="hljs-keyword">and</span> Packages:<br>  <span class="hljs-comment">--disable-option-checking  ignore unrecognized --enable/--with options</span><br>  <span class="hljs-comment">--disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)</span><br>  <span class="hljs-comment">--enable-FEATURE[=ARG]  include FEATURE [ARG=yes]</span><br>  <span class="hljs-comment">--with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]</span><br>  <span class="hljs-comment">--without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)</span><br>  <span class="hljs-comment">--with-libdir=NAME      Look for libraries in .../NAME rather than .../lib</span><br>  <span class="hljs-comment">--disable-rpath         Disable passing additional runtime library search</span><br>                          paths<br>  <span class="hljs-comment">--enable-re2c-cgoto     Enable -g flag to re2c to use computed goto gcc</span><br>                          extension<br>  <span class="hljs-comment">--disable-gcc-global-regs</span><br>                          whether <span class="hljs-keyword">to</span> enable GCC <span class="hljs-keyword">global</span> register variables<br> <br>SAPI modules:<br> <br>  <span class="hljs-comment">--with-apxs2[=FILE]     Build shared Apache 2.0 Handler module. FILE is the</span><br>                          optional pathname <span class="hljs-keyword">to</span> the Apache apxs tool [apxs]<br>  <span class="hljs-comment">--disable-cli           Disable building CLI version of PHP (this forces</span><br>                          <span class="hljs-comment">--without-pear)</span><br>  <span class="hljs-comment">--enable-embed[=TYPE]   EXPERIMENTAL: Enable building of embedded SAPI</span><br>                          library TYPE <span class="hljs-keyword">is</span> either <span class="hljs-string">&#x27;shared&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;static&#x27;</span>.<br>                          [TYPE<span class="hljs-operator">=</span>shared]<br>  <span class="hljs-comment">--enable-fpm            Enable building of the fpm SAPI executable</span><br>  <span class="hljs-comment">--with-fpm-user[=USER]  Set the user for php-fpm to run as. (default:</span><br>                          nobody)<br>  <span class="hljs-comment">--with-fpm-group[=GRP]  Set the group for php-fpm to run as. For a system</span><br>                          <span class="hljs-keyword">user</span>, this should usually be <span class="hljs-keyword">set</span> <span class="hljs-keyword">to</span> <span class="hljs-keyword">match</span> the fpm<br>                          username (<span class="hljs-keyword">default</span>: nobody)<br>  <span class="hljs-comment">--with-fpm-systemd      Activate systemd integration</span><br>  <span class="hljs-comment">--with-fpm-acl          Use POSIX Access Control Lists</span><br>  <span class="hljs-comment">--with-litespeed        Build PHP as litespeed module</span><br>  <span class="hljs-comment">--enable-phpdbg         Build phpdbg</span><br>  <span class="hljs-comment">--enable-phpdbg-webhelper</span><br>                          Build phpdbg web SAPI support<br>  <span class="hljs-comment">--enable-phpdbg-debug   Build phpdbg in debug mode</span><br>  <span class="hljs-comment">--enable-phpdbg-readline</span><br>                          Enable readline support <span class="hljs-keyword">in</span> phpdbg (depends <span class="hljs-keyword">on</span> <span class="hljs-keyword">static</span><br>                          ext<span class="hljs-operator">/</span>readline)<br>  <span class="hljs-comment">--disable-cgi           Disable building CGI version of PHP</span><br>  <span class="hljs-comment">--with-valgrind=DIR     Enable valgrind support</span><br> <br>General settings:<br> <br>  <span class="hljs-comment">--enable-gcov           Enable GCOV code coverage (requires LTP) - FOR</span><br>                          DEVELOPERS <span class="hljs-keyword">ONLY</span><span class="hljs-operator">!</span><span class="hljs-operator">!</span><br>  <span class="hljs-comment">--enable-debug          Compile with debugging symbols</span><br>  <span class="hljs-comment">--enable-rtld-now       Use dlopen with RTLD_NOW instead of RTLD_LAZY</span><br>  <span class="hljs-comment">--with-layout=TYPE      Set how installed files will be laid out. Type can</span><br>                          be either PHP <span class="hljs-keyword">or</span> GNU [PHP]<br>  <span class="hljs-comment">--with-config-file-path=PATH</span><br>                          <span class="hljs-keyword">Set</span> the path <span class="hljs-keyword">in</span> which <span class="hljs-keyword">to</span> look <span class="hljs-keyword">for</span> php.ini<br>                          [PREFIX<span class="hljs-operator">/</span>lib]<br>  <span class="hljs-comment">--with-config-file-scan-dir=PATH</span><br>                          <span class="hljs-keyword">Set</span> the path <span class="hljs-keyword">where</span> <span class="hljs-keyword">to</span> scan <span class="hljs-keyword">for</span> configuration files<br>  <span class="hljs-comment">--enable-sigchild       Enable PHP&#x27;s own SIGCHLD handler</span><br>  <span class="hljs-comment">--enable-libgcc         Enable explicitly linking against libgcc</span><br>  <span class="hljs-comment">--disable-short-tags    Disable the short-form &lt;? start tag by default</span><br>  <span class="hljs-comment">--enable-dmalloc        Enable dmalloc</span><br>  <span class="hljs-comment">--disable-ipv6          Disable IPv6 support</span><br>  <span class="hljs-comment">--enable-dtrace         Enable DTrace support</span><br>  <span class="hljs-comment">--enable-fd-setsize     Set size of descriptor sets</span><br> <br>Extensions:<br> <br>  <span class="hljs-comment">--with-EXTENSION=shared[,PATH]</span><br> <br>    NOTE: <span class="hljs-keyword">Not</span> <span class="hljs-keyword">all</span> extensions can be build <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;shared&#x27;</span>.<br> <br>    Example: <span class="hljs-comment">--with-foobar=shared,/usr/local/foobar/</span><br> <br>      o Builds the foobar extension <span class="hljs-keyword">as</span> shared extension.<br>      o foobar package install prefix <span class="hljs-keyword">is</span> <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span><span class="hljs-keyword">local</span><span class="hljs-operator">/</span>foobar<span class="hljs-operator">/</span><br> <br> <br>  <span class="hljs-comment">--disable-all           Disable all extensions which are enabled by default</span><br>  <span class="hljs-comment">--disable-libxml        Disable LIBXML support</span><br>  <span class="hljs-comment">--with-libxml-dir[=DIR] LIBXML: libxml2 install prefix</span><br>  <span class="hljs-comment">--with-openssl          Include OpenSSL support (requires OpenSSL &gt;= 1.0.1)</span><br>  <span class="hljs-comment">--with-kerberos[=DIR]   OPENSSL: Include Kerberos support</span><br>  <span class="hljs-comment">--with-system-ciphers   OPENSSL: Use system default cipher list instead of</span><br>                          hardcoded <span class="hljs-keyword">value</span><br>  <span class="hljs-comment">--with-external-pcre    Use external library for PCRE support</span><br>  <span class="hljs-comment">--with-pcre-jit         Enable PCRE JIT functionality</span><br>  <span class="hljs-comment">--with-pcre-valgrind=DIR</span><br>                          Enable PCRE valgrind support. Developers <span class="hljs-keyword">only</span><span class="hljs-operator">!</span><br>  <span class="hljs-comment">--without-sqlite3[=DIR] Do not include SQLite3 support. DIR is the prefix to</span><br>                          SQLite3 installation directory.<br>  <span class="hljs-comment">--with-zlib             Include ZLIB support (requires zlib &gt;= 1.2.0.4)</span><br>  <span class="hljs-comment">--enable-bcmath         Enable bc style precision math functions</span><br>  <span class="hljs-comment">--with-bz2[=DIR]        Include BZip2 support</span><br>  <span class="hljs-comment">--enable-calendar       Enable support for calendar conversion</span><br>  <span class="hljs-comment">--disable-ctype         Disable ctype functions</span><br>  <span class="hljs-comment">--with-curl             Include cURL support</span><br>  <span class="hljs-comment">--enable-dba            Build DBA with bundled modules. To build shared DBA</span><br>                          extension use <span class="hljs-comment">--enable-dba=shared</span><br>  <span class="hljs-comment">--with-qdbm[=DIR]       DBA: QDBM support</span><br>  <span class="hljs-comment">--with-gdbm[=DIR]       DBA: GDBM support</span><br>  <span class="hljs-comment">--with-ndbm[=DIR]       DBA: NDBM support</span><br>  <span class="hljs-comment">--with-db4[=DIR]        DBA: Oracle Berkeley DB 4.x or 5.x support</span><br>  <span class="hljs-comment">--with-db3[=DIR]        DBA: Oracle Berkeley DB 3.x support</span><br>  <span class="hljs-comment">--with-db2[=DIR]        DBA: Oracle Berkeley DB 2.x support</span><br>  <span class="hljs-comment">--with-db1[=DIR]        DBA: Oracle Berkeley DB 1.x support/emulation</span><br>  <span class="hljs-comment">--with-dbm[=DIR]        DBA: DBM support</span><br>  <span class="hljs-comment">--with-tcadb[=DIR]      DBA: Tokyo Cabinet abstract DB support</span><br>  <span class="hljs-comment">--with-lmdb[=DIR]       DBA: Lightning memory-mapped database support</span><br>  <span class="hljs-comment">--without-cdb[=DIR]     DBA: CDB support (bundled)</span><br>  <span class="hljs-comment">--disable-inifile       DBA: INI support (bundled)</span><br>  <span class="hljs-comment">--disable-flatfile      DBA: FlatFile support (bundled)</span><br>  <span class="hljs-comment">--disable-dom           Disable DOM support</span><br>  <span class="hljs-comment">--with-libxml-dir[=DIR] DOM: libxml2 install prefix</span><br>  <span class="hljs-comment">--with-enchant[=DIR]    Include enchant support. GNU Aspell version 1.1.3 or</span><br>                          higher required.<br>  <span class="hljs-comment">--enable-exif           Enable EXIF (metadata from images) support</span><br>  <span class="hljs-comment">--with-ffi              Include FFI support</span><br>  <span class="hljs-comment">--disable-fileinfo      Disable fileinfo support</span><br>  <span class="hljs-comment">--disable-filter        Disable input filter support</span><br>  <span class="hljs-comment">--enable-ftp            Enable FTP support</span><br>  <span class="hljs-comment">--with-openssl-dir[=DIR]</span><br>                          FTP: openssl install prefix<br>  <span class="hljs-comment">--enable-gd             Include GD support</span><br>  <span class="hljs-comment">--with-external-gd      Use external libgd</span><br>  <span class="hljs-comment">--with-webp             GD: Enable WEBP support</span><br>  <span class="hljs-comment">--with-jpeg             GD: Enable JPEG support</span><br>  <span class="hljs-comment">--with-xpm              GD: Enable XPM support</span><br>  <span class="hljs-comment">--with-freetype         GD: Enable FreeType 2 support</span><br>  <span class="hljs-comment">--enable-gd-jis-conv    GD: Enable JIS-mapped Japanese font support</span><br>  <span class="hljs-comment">--with-gettext[=DIR]    Include GNU gettext support</span><br>  <span class="hljs-comment">--with-gmp[=DIR]        Include GNU MP support</span><br>  <span class="hljs-comment">--with-mhash[=DIR]      Include mhash support</span><br>  <span class="hljs-comment">--without-iconv[=DIR]   Exclude iconv support</span><br>  <span class="hljs-comment">--with-imap[=DIR]       Include IMAP support. DIR is the c-client install</span><br>                          prefix<br>  <span class="hljs-comment">--with-kerberos[=DIR]   IMAP: Include Kerberos support. DIR is the Kerberos</span><br>                          install prefix<br>  <span class="hljs-comment">--with-imap-ssl[=DIR]   IMAP: Include SSL support. DIR is the OpenSSL</span><br>                          install prefix<br>  <span class="hljs-comment">--with-interbase[=DIR]  Include Firebird support. DIR is the Firebird base</span><br>                          install directory [<span class="hljs-operator">/</span>opt<span class="hljs-operator">/</span>firebird]<br>  <span class="hljs-comment">--enable-intl           Enable internationalization support</span><br>  <span class="hljs-comment">--disable-json          Disable JavaScript Object Serialization support</span><br>  <span class="hljs-comment">--with-ldap[=DIR]       Include LDAP support</span><br>  <span class="hljs-comment">--with-ldap-sasl[=DIR]  LDAP: Include Cyrus SASL support</span><br>  <span class="hljs-comment">--enable-mbstring       Enable multibyte string support</span><br>  <span class="hljs-comment">--disable-mbregex       MBSTRING: Disable multibyte regex support</span><br>  <span class="hljs-comment">--with-mysqli[=FILE]    Include MySQLi support. FILE is the path to</span><br>                          mysql_config. If <span class="hljs-keyword">no</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">or</span> mysqlnd <span class="hljs-keyword">is</span> passed <span class="hljs-keyword">as</span><br>                          FILE, the MySQL native driver will be used<br>  <span class="hljs-comment">--with-mysql-sock[=SOCKPATH]</span><br>                          MySQLi<span class="hljs-operator">/</span>PDO_MYSQL: Location <span class="hljs-keyword">of</span> the MySQL unix socket<br>                          pointer. If unspecified, the <span class="hljs-keyword">default</span> locations <span class="hljs-keyword">are</span><br>                          searched<br>  <span class="hljs-comment">--with-oci8[=DIR]       Include Oracle Database OCI8 support. DIR defaults</span><br>                          <span class="hljs-keyword">to</span> $ORACLE_HOME. Use<br>                          <span class="hljs-comment">--with-oci8=instantclient,/path/to/instant/client/lib</span><br>                          <span class="hljs-keyword">to</span> use an Oracle Instant Client installation<br>  <span class="hljs-comment">--with-odbcver[=HEX]    Force support for the passed ODBC version. A hex</span><br>                          number <span class="hljs-keyword">is</span> expected, <span class="hljs-keyword">default</span> <span class="hljs-number">0x0350</span>. Use the special<br>                          <span class="hljs-keyword">value</span> <span class="hljs-keyword">of</span> <span class="hljs-number">0</span> <span class="hljs-keyword">to</span> prevent an explicit ODBCVER <span class="hljs-keyword">to</span> be<br>                          defined.<br>  <span class="hljs-comment">--with-adabas[=DIR]     Include Adabas D support [/usr/local]</span><br>  <span class="hljs-comment">--with-sapdb[=DIR]      Include SAP DB support [/usr/local]</span><br>  <span class="hljs-comment">--with-solid[=DIR]      Include Solid support [/usr/local/solid]</span><br>  <span class="hljs-comment">--with-ibm-db2[=DIR]    Include IBM DB2 support [/home/db2inst1/sqllib]</span><br>  <span class="hljs-comment">--with-empress[=DIR]    Include Empress support $EMPRESSPATH (Empress</span><br>                          Version <span class="hljs-operator">&gt;=</span> <span class="hljs-number">8.60</span> required)<br>  <span class="hljs-comment">--with-empress-bcs[=DIR]</span><br>                          Include Empress <span class="hljs-keyword">Local</span> Access support $EMPRESSPATH<br>                          (Empress Version <span class="hljs-operator">&gt;=</span> <span class="hljs-number">8.60</span> required)<br>  <span class="hljs-comment">--with-custom-odbc[=DIR]</span><br>                          Include <span class="hljs-keyword">user</span> defined ODBC support. DIR <span class="hljs-keyword">is</span> ODBC<br>                          install base directory [<span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span><span class="hljs-keyword">local</span>]. Make sure <span class="hljs-keyword">to</span><br>                          <span class="hljs-keyword">define</span> CUSTOM_ODBC_LIBS <span class="hljs-keyword">and</span> have <span class="hljs-keyword">some</span> odbc.h <span class="hljs-keyword">in</span> your<br>                          include dirs. f.e. you should <span class="hljs-keyword">define</span> following <span class="hljs-keyword">for</span><br>                          Sybase <span class="hljs-keyword">SQL</span> Anywhere <span class="hljs-number">5.5</span><span class="hljs-number">.00</span> <span class="hljs-keyword">on</span> QNX, prior <span class="hljs-keyword">to</span> <span class="hljs-keyword">running</span><br>                          this configure script: CPPFLAGS<span class="hljs-operator">=</span>&quot;-DODBC_QNX<br>                          -DSQLANY_BUG&quot; LDFLAGS<span class="hljs-operator">=</span><span class="hljs-operator">-</span>lunix<br>                          CUSTOM_ODBC_LIBS<span class="hljs-operator">=</span>&quot;-ldblib -lodbc&quot;<br>  <span class="hljs-comment">--with-iodbc[=DIR]      Include iODBC support [/usr/local]</span><br>  <span class="hljs-comment">--with-esoob[=DIR]      Include Easysoft OOB support</span><br>                          [<span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span><span class="hljs-keyword">local</span><span class="hljs-operator">/</span>easysoft<span class="hljs-operator">/</span>oob<span class="hljs-operator">/</span>client]<br>  <span class="hljs-comment">--with-unixODBC[=DIR]   Include unixODBC support [/usr/local]</span><br>  <span class="hljs-comment">--with-dbmaker[=DIR]    Include DBMaker support</span><br>  <span class="hljs-comment">--disable-opcache       Disable Zend OPcache support</span><br>  <span class="hljs-comment">--disable-huge-code-pages</span><br>                          Disable copying PHP CODE pages <span class="hljs-keyword">into</span> HUGE PAGES<br>  <span class="hljs-comment">--enable-pcntl          Enable pcntl support (CLI/CGI only)</span><br>  <span class="hljs-comment">--disable-pdo           Disable PHP Data Objects support</span><br>  <span class="hljs-comment">--with-pdo-dblib[=DIR]  PDO: DBLIB-DB support. DIR is the FreeTDS home</span><br>                          directory<br>  <span class="hljs-comment">--with-pdo-firebird[=DIR]</span><br>                          PDO: Firebird support. DIR <span class="hljs-keyword">is</span> the Firebird base<br>                          install directory [<span class="hljs-operator">/</span>opt<span class="hljs-operator">/</span>firebird]<br>  <span class="hljs-comment">--with-pdo-mysql[=DIR]  PDO: MySQL support. DIR is the MySQL base directory.</span><br>                          If <span class="hljs-keyword">no</span> <span class="hljs-keyword">value</span> <span class="hljs-keyword">or</span> mysqlnd <span class="hljs-keyword">is</span> passed <span class="hljs-keyword">as</span> DIR, the MySQL<br>                          native driver will be used<br>  <span class="hljs-comment">--with-zlib-dir[=DIR]   PDO_MySQL: Set the path to libz install prefix</span><br>  <span class="hljs-comment">--with-pdo-oci[=DIR]    PDO: Oracle OCI support. DIR defaults to</span><br>                          $ORACLE_HOME. Use<br>                          <span class="hljs-comment">--with-pdo-oci=instantclient,/path/to/instant/client/lib</span><br>                          <span class="hljs-keyword">for</span> an Oracle Instant Client installation.<br>  <span class="hljs-comment">--with-pdo-odbc=flavour,dir</span><br>                          PDO: Support <span class="hljs-keyword">for</span> <span class="hljs-string">&#x27;flavour&#x27;</span> ODBC driver. The include<br>                          <span class="hljs-keyword">and</span> lib dirs <span class="hljs-keyword">are</span> looked <span class="hljs-keyword">for</span> under <span class="hljs-string">&#x27;dir&#x27;</span>. The<br>                          <span class="hljs-string">&#x27;flavour&#x27;</span> can be <span class="hljs-keyword">one</span> <span class="hljs-keyword">of</span>: ibm<span class="hljs-operator">-</span>db2, iODBC, unixODBC,<br>                          generic. If <span class="hljs-string">&#x27;,dir&#x27;</span> part <span class="hljs-keyword">is</span> omitted, <span class="hljs-keyword">default</span> <span class="hljs-keyword">for</span> the<br>                          flavour you have selected will be used. e.g.:<br>                          <span class="hljs-comment">--with-pdo-odbc=unixODBC will check for unixODBC</span><br>                          under <span class="hljs-operator">/</span>usr<span class="hljs-operator">/</span>local. You may attempt <span class="hljs-keyword">to</span> use an<br>                          otherwise unsupported driver <span class="hljs-keyword">using</span> the <span class="hljs-string">&#x27;generic&#x27;</span><br>                          flavour. The syntax <span class="hljs-keyword">for</span> generic ODBC support <span class="hljs-keyword">is</span>:<br>                          <span class="hljs-comment">--with-pdo-odbc=generic,dir,libname,ldflags,cflags.</span><br>                          <span class="hljs-keyword">When</span> built <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;shared&#x27;</span> the extension filename <span class="hljs-keyword">is</span><br>                          always pdo_odbc.so<br>  <span class="hljs-comment">--with-pdo-pgsql[=DIR]  PDO: PostgreSQL support. DIR is the PostgreSQL base</span><br>                          install directory <span class="hljs-keyword">or</span> the path <span class="hljs-keyword">to</span> pg_config<br>  <span class="hljs-comment">--without-pdo-sqlite[=DIR]</span><br>                          PDO: sqlite <span class="hljs-number">3</span> support. DIR <span class="hljs-keyword">is</span> the sqlite base<br>                          install directory [BUNDLED]<br>  <span class="hljs-comment">--with-pgsql[=DIR]      Include PostgreSQL support. DIR is the PostgreSQL</span><br>                          base install directory <span class="hljs-keyword">or</span> the path <span class="hljs-keyword">to</span> pg_config<br>  <span class="hljs-comment">--disable-phar          Disable phar support</span><br>  <span class="hljs-comment">--disable-posix         Disable POSIX-like functions</span><br>  <span class="hljs-comment">--with-pspell[=DIR]     Include PSPELL support. GNU Aspell version 0.50.0 or</span><br>                          higher required<br>  <span class="hljs-comment">--with-libedit          Include libedit readline replacement (CLI/CGI only)</span><br>  <span class="hljs-comment">--with-readline[=DIR]   Include readline support (CLI/CGI only)</span><br>  <span class="hljs-comment">--with-recode[=DIR]     Include recode support</span><br>  <span class="hljs-comment">--disable-session       Disable session support</span><br>  <span class="hljs-comment">--with-mm[=DIR]         SESSION: Include mm support for session storage</span><br>  <span class="hljs-comment">--enable-shmop          Enable shmop support</span><br>  <span class="hljs-comment">--disable-simplexml     Disable SimpleXML support</span><br>  <span class="hljs-comment">--with-libxml-dir=DIR   SimpleXML: libxml2 install prefix</span><br>  <span class="hljs-comment">--with-snmp[=DIR]       Include SNMP support</span><br>  <span class="hljs-comment">--with-openssl-dir[=DIR]</span><br>                          SNMP: openssl install prefix<br>  <span class="hljs-comment">--enable-soap           Enable SOAP support</span><br>  <span class="hljs-comment">--with-libxml-dir=DIR   SOAP: libxml2 install prefix</span><br>  <span class="hljs-comment">--enable-sockets        Enable sockets support</span><br>  <span class="hljs-comment">--with-sodium[=DIR]     Include sodium support</span><br>  <span class="hljs-comment">--with-password-argon2[=DIR]</span><br>                          Include Argon2 support <span class="hljs-keyword">in</span> password_<span class="hljs-operator">*</span>. DIR <span class="hljs-keyword">is</span> the<br>                          Argon2 shared library path<br>  <span class="hljs-comment">--enable-sysvmsg        Enable sysvmsg support</span><br>  <span class="hljs-comment">--enable-sysvsem        Enable System V semaphore support</span><br>  <span class="hljs-comment">--enable-sysvshm        Enable the System V shared memory support</span><br>  <span class="hljs-comment">--with-tidy[=DIR]       Include TIDY support</span><br>  <span class="hljs-comment">--disable-tokenizer     Disable tokenizer support</span><br>  <span class="hljs-comment">--disable-xml           Disable XML support</span><br>  <span class="hljs-comment">--with-libxml-dir=DIR   XML: libxml2 install prefix</span><br>  <span class="hljs-comment">--with-libexpat-dir=DIR XML: libexpat install prefix (deprecated)</span><br>  <span class="hljs-comment">--disable-xmlreader     Disable XMLReader support</span><br>  <span class="hljs-comment">--with-libxml-dir=DIR   XMLReader: libxml2 install prefix</span><br>  <span class="hljs-comment">--with-xmlrpc[=DIR]     Include XMLRPC-EPI support</span><br>  <span class="hljs-comment">--with-libxml-dir=DIR   XMLRPC-EPI: libxml2 install prefix</span><br>  <span class="hljs-comment">--with-libexpat-dir=DIR XMLRPC-EPI: libexpat dir for XMLRPC-EPI (deprecated)</span><br>  <span class="hljs-comment">--with-iconv-dir=DIR    XMLRPC-EPI: iconv dir for XMLRPC-EPI</span><br>  <span class="hljs-comment">--disable-xmlwriter     Disable XMLWriter support</span><br>  <span class="hljs-comment">--with-libxml-dir=DIR   XMLWriter: libxml2 install prefix</span><br>  <span class="hljs-comment">--with-xsl[=DIR]        Include XSL support. DIR is the libxslt base install</span><br>                          directory (libxslt <span class="hljs-operator">&gt;=</span> <span class="hljs-number">1.1</span><span class="hljs-number">.0</span> required)<br>  <span class="hljs-comment">--enable-zend-test      Enable zend-test extension</span><br>  <span class="hljs-comment">--enable-zip            Include Zip read/write support</span><br>  <span class="hljs-comment">--with-libzip[=DIR]     ZIP: use libzip</span><br>  <span class="hljs-comment">--enable-mysqlnd        Enable mysqlnd explicitly, will be done implicitly</span><br>                          <span class="hljs-keyword">when</span> required <span class="hljs-keyword">by</span> other extensions<br>  <span class="hljs-comment">--disable-mysqlnd-compression-support</span><br>                          Disable support <span class="hljs-keyword">for</span> the MySQL compressed protocol <span class="hljs-keyword">in</span><br>                          mysqlnd<br>  <span class="hljs-comment">--with-zlib-dir[=DIR]   mysqlnd: Set the path to libz install prefix</span><br> <br>PEAR:<br> <br>  <span class="hljs-comment">--with-pear[=DIR]       Install PEAR in DIR [PREFIX/lib/php]</span><br> <br>Zend:<br> <br>  <span class="hljs-comment">--enable-maintainer-zts Enable thread safety - for code maintainers only!!(安全线程)</span><br>  <span class="hljs-comment">--disable-inline-optimization</span><br>                          If building zend_execute.lo fails, try this switch<br>  <span class="hljs-comment">--disable-zend-signals  whether to enable zend signal handling</span><br> <br>TSRM:<br> <br>  <span class="hljs-comment">--with-tsrm-pth[=pth-config]</span><br>                          Use GNU Pth<br>  <span class="hljs-comment">--with-tsrm-st          Use SGI&#x27;s State Threads</span><br>  <span class="hljs-comment">--with-tsrm-pthreads    Use POSIX threads (default)</span><br> <br>Libtool:<br> <br>  <span class="hljs-comment">--enable-shared=PKGS    Build shared libraries default=yes</span><br>  <span class="hljs-comment">--enable-static=PKGS    Build static libraries default=yes</span><br>  <span class="hljs-comment">--enable-fast-install=PKGS</span><br>                          Optimize <span class="hljs-keyword">for</span> fast installation <span class="hljs-keyword">default</span><span class="hljs-operator">=</span>yes<br>  <span class="hljs-comment">--with-gnu-ld           Assume the C compiler uses GNU ld default=no</span><br>  <span class="hljs-comment">--disable-libtool-lock  Avoid locking (might break parallel builds)</span><br>  <span class="hljs-comment">--with-pic              Try to use only PIC/non-PIC objects default=use both</span><br>  <span class="hljs-comment">--with-tags=TAGS        Include additional configurations automatic</span><br><br></code></pre></td></tr></table></figure><p><a href="http://https//blog.csdn.net/yuxiaomin886/article/details/103821731" title="Ubuntu 18.04 安装 php7.4 --enable-maintainer-zts">Ubuntu 18.04 安装 php7.4 –enable-maintainer-zts</a><br><a href="https://www.jianshu.com/p/0a79847c8151" title="PHP 编译安装 PHP各参数配置详解">PHP 编译安装 PHP各参数配置详解</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>GMT时间和Cookie</title>
    <link href="/2021/10/13/GMT%E6%97%B6%E9%97%B4%E5%92%8CCookie/"/>
    <url>/2021/10/13/GMT%E6%97%B6%E9%97%B4%E5%92%8CCookie/</url>
    
    <content type="html"><![CDATA[<p>今天给MaxPHP开发兼容Swoole的Cookie的时候设置了Cookie，大眼一看感觉不是很对</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-built_in">set-cookie:</span> <span class="hljs-string">MAXPHP_SESSION_ID</span>=<span class="hljs-string">a9917035968c0e125179b4b949558e64</span>; <span class="hljs-string">expires</span>=<span class="hljs-string">Wed</span>, <span class="hljs-string">13-Oct-2021</span> <span class="hljs-string">16:34:</span><span class="hljs-string">24</span> <span class="hljs-string">GMT</span>; <span class="hljs-string">Max-Age</span>=<span class="hljs-string">3600</span>; <span class="hljs-string">path</span>=/<br></code></pre></td></tr></table></figure><p>我这边明明才23：40， 而Cookie又没有过期，于是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">php</span> &amp;gt; echo strtotime(&amp;#<span class="hljs-number">039</span>;Wed, <span class="hljs-number">13</span>-Oct-<span class="hljs-number">2021</span> <span class="hljs-number">16</span>:<span class="hljs-number">34</span>:<span class="hljs-number">24</span> GMT&amp;#<span class="hljs-number">039</span>;) - time();<br><span class="hljs-attribute">3182</span><br><span class="hljs-attribute">php</span> &amp;gt; <br></code></pre></td></tr></table></figure><p>证明确实时间是正确的，但是时间却是14：34：24秒。于是想起GMT时间和北京时间是不一样的。百度了一下，贴在下面：</p><p><a href="https://zhidao.baidu.com/question/558694182487723652.html">https://zhidao.baidu.com/question/558694182487723652.html</a><br>GMT是中央时区，北京在东8区，相差8个小时，所以为2008年08月29日 11点52分19秒。</p><p>北京时间是中国采用国际时区东八时区的区时作为标准时间。北京时间并不是北京（东经116.4°）地方的时间，而是东经120°地方的地方时间。因为北京处于国际时区划分中的东八区，同格林威治时间(世界时)整整相差8小时，（即北京时间&#x3D;世界时+8小时）而中国东西相跨5个时区（即东五区、东六区、东七区、东八区、东九区5个时区）授时台必须建在中心地带，从而也就产生了长短波授。“北京时间”的发播不在北京，而在陕西蒲城。而东经120度的地方太阳时要比北京的地方时早约14分半钟。</p><p>中国科学院国家授时中心台本部位于陕西西安临潼区。中国科学院国家授时中心授时部（二部）位于陕西省渭南市蒲城县，负责发布北京时间（中国标准时间）。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MySQL面试题</title>
    <link href="/2021/10/06/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2021/10/06/MySQL%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<ol><li><p>唯一索引比普通索引快吗, 为什么</p><p>唯一索引不一定比普通索引快, 还可能慢。</p><p>查询时, 在未使用 limit 1 的情况下, 在匹配到一条数据后, 唯一索引即返回, 普通索引会继续匹配下一条数据, 发现不匹配后返回. 如此看来唯一索引少了一次匹配, 但实际上这个消耗微乎其微.</p><p>更新时, 这个情况就比较复杂了. 普通索引将记录放到 change buffer 中语句就执行完毕了. 而对唯一索引而言, 它必须要校验唯一性, 因此, 必须将数据页读入内存确定没有冲突, 然后才能继续操作. 对于写多读少的情况, 普通索引利用 change buffer 有效减少了对磁盘的访问次数, 因此普通索引性能要高于唯一索引。</p></li><li><p>MySQL由哪些部分组成, 分别用来做什么</p></li></ol><p>一. Server</p><pre><code class="hljs">连接器: 管理连接, 权限验证.分析器: 词法分析, 语法分析.优化器: 执行计划生成, 索引的选择.执行器: 操作存储引擎, 返回执行结果.</code></pre><p>二. 存储引擎: 存储数据, 提供读写接口。</p><ol start="3"><li>MySQL查询缓存有什么弊端, 应该什么情况下使用, 8.0版本对查询缓存有什么变更</li></ol><p>查询缓存可能会失效非常频繁, 对于一个表, 只要有更新, 该表的全部查询缓存都会被清空. 因此对于频繁更新的表来说, 查询缓存不一定能起到正面效果.对于读远多于写的表可以考虑使用查询缓存.8.0版本的查询缓存功能被删了 (￣.￣)。<br>4.MyISAM和InnoDB的区别有哪些</p><pre><code class="hljs">InnoDB支持事务, MyISAM不支持；InnoDB支持行级锁, MyISAM支持表级锁；InnoDB支持多版本并发控制(MVVC), MyISAM不支持；InnoDB支持外键, MyISAM不支持；MyISAM支持全文索引, InnoDB部分版本不支持(但可以使用Sphinx插件)；</code></pre><p>5.MySQL怎么恢复半个月前的数据</p><p>通过整库备份+binlog进行恢复. 前提是要有定期整库备份且保存了binlog日志<br>6.MySQL事务的隔离级别, 分别有什么特点</p><pre><code class="hljs">读未提交(RU): 一个事务还没提交时, 它做的变更就能被别的事务看到.读提交(RC): 一个事务提交之后, 它做的变更才会被其他事务看到.可重复读(RR): 一个事务执行过程中看到的数据, 总是跟这个事务在启动时看到的数据是一致的. 当然在可重复读隔离级别下, 未提交变更对其他事务也是不可见的.串行化(S): 对于同一行记录, 读写都会加锁. 当出现读写锁冲突的时候, 后访问的事务必须等前一个事务执行完成才能继续执行</code></pre><ol start="7"><li>做过哪些MySQL索引相关优化</li></ol><p>尽量使用主键查询:</p><pre><code class="hljs">聚簇索引上存储了全部数据, 相比普通索引查询, 减少了回表的消耗.MySQL5.6之后引入了索引下推优化, 通过适当的使用联合索引, 减少回表判断的消耗.若频繁查询某一列数据, 可以考虑利用覆盖索引避免回表.联合索引将高频字段放在最左边。</code></pre><ol start="8"><li><p>简要说一下数据库范式</p><p>第一范式: 属性不可再分。<br>第二范式: 在一范式的基础上, 要求数据库表中的每个实例或行必须可以被惟一地区分. 通常需要为表加上一个列, 以存储各个实例的惟一标识. 这个惟一属性列被称为主关键字或主键。<br>第三范式: 在二范式的基础上, 要求一个数据库表中不包含已在其它表中已包含的非主关键字信息。</p></li></ol><p>所以第三范式具有如下特征：1). 每一列只有一个值. 2). 每一行都能区分. 3). 每一个表都不包含其他表已经包含的非主关键字信息。</p><ol start="9"><li>一千万条数据的表, 如何分页查询</li></ol><p>数据量过大的情况下, limit offset 分页会由于扫描数据太多而越往后查询越慢. 可以配合当前页最后一条ID进行查询, SELECT * FROM T WHERE id &gt; #{ID} LIMIT #{LIMIT} . 当然, 这种情况下ID必须是有序的, 这也是有序ID的好处之一。</p><ol start="10"><li>订单表数据量越来越大导致查询缓慢, 如何处理</li></ol><p>分库分表. 由于历史订单使用率并不高, 高频的可能只是近期订单, 因此, 将订单表按照时间进行拆分, 根据数据量的大小考虑按月分表或按年分表. 订单ID最好包含时间(如根据雪花算法生成), 此时既能根据订单ID直接获取到订单记录, 也能按照时间进行查询。<br>MySQL基础</p><p>在这里插入图片描述</p><ol><li><p>一张表里面有 ID 自增主键当 当insert 了17 条记录之后 ，删除了第 15,16,17 条记录 ， 再把Mysql 重启 ，再insert 一条记录，这条记录的 ID 是18还是15 ？</p><p>如果表的类型是MyISAM，那么是18。因为MyISAM表会把自增主键的最大ID记录到内存中，所以重启数据库或者是对表进行OPTIMIZE操作，都会导致最大ID丢失。</p></li></ol><p>2 .Mysql 的技术特点是什么？</p><pre><code class="hljs">Mysql 数据库软件是一个客户端或服务器系统，其中包括：支持各种客户端程序和库的多线程 SQL 服务器、不同的后端、广泛的应用程序编程接口和管理工具。</code></pre><p>3.Heap 表是什么？</p><p>HEAP 表存在于内存中，用于临时高速存储。</p><pre><code class="hljs">BLOB 或 TEXT 字段是不允许的只能使用比较运算符=，&amp;lt;，&amp;gt;，=&amp;gt;，= &amp;lt;HEAP 表不支持 AUTO_INCREMENT索引不可为 NULL</code></pre><p>4.Mysql 服务器默认端口是什么？</p><p>Mysql 服务器的默认端口是 3306。<br>5.与 Oracle 相比，Mysql 有什么优势？</p><pre><code class="hljs">Mysql 是开源软件，随时可用，无需付费。Mysql 是便携式的带有命令提示符的 GUI。使用 Mysql 查询浏览器支持管理</code></pre><p>6.如何区分FLOAT和DOUBLE ？</p><p>以下是 FLOAT 和 DOUBLE 的区别：</p><pre><code class="hljs">浮点数以 8 位精度存储在 FLOAT 中，并且有四个字节。浮点数存储在 DOUBLE 中，精度为 18 位，有八个字节。</code></pre><p>7.区分 CHAR_LENGTH 和 和 LENGTH</p><p>CHAR_LENGTH 是字符数，而 LENGTH 是字节数。Latin 字符的这两个数据是相同的，但是对于 Unicode 和其他编码，它们是不同的。<br>8.在 Mysql 中 ENUM 的用法是什么？</p><p>ENUM 是一个字符串对象，用于指定一组预定义的值，并可在创建表时使用。<br>Create table size(name ENUM(&amp;#039;Smail,&amp;#039;Medium&amp;#039;,&amp;#039;Large&amp;#039;);<br>9.如何定义 REGEXP ？</p><p>REGEXP 是模式匹配，其中匹配模式在搜索值的任何位置。<br>10 .CHAR 和 和 VARCHAR 的区别？</p><p>以下是 CHAR 和 VARCHAR 的区别：</p><pre><code class="hljs">CHAR 和 VARCHAR 类型在存储和检索方面有所不同CHAR 列长度固定为创建表时声明的长度，长度值范围是 1 到 255当 CHAR 值被存储时，它们被用空格填充到特定长度，检索 CHAR 值时需删除尾随空格。</code></pre><p>11.列的字符串类型可以是什么？</p><p>字符串类型是：</p><pre><code class="hljs">SETBLOBENUMCHARTEXTVARCHAR</code></pre><p>12.如何获取当前的 l Mysql 版本？</p><p>SELECT VERSION();用于获取当前 Mysql 的版本。</p><ol start="13"><li>Mysql 中使用什么存储引擎？</li></ol><p>存储引擎称为表类型，数据使用各种技术存储在文件中。<br>技术涉及：</p><pre><code class="hljs">Storage mechanismLocking levelsIndexingCapabilities and functions.</code></pre><p>14.Mysql 驱动程序是什么？</p><p>以下是 Mysql 中可用的驱动程序：</p><pre><code class="hljs">PHP 驱动程序JDBC 驱动程序ODBC 驱动程序CWRAPPERPYTHON 驱动程序PERL 驱动程序RUBY 驱动程序CAP11PHP 驱动程序Ado.net5.mxj</code></pre><p>15.TIMESTAMP 在 在 UPDATE P CURRENT_TIMESTAMP 数据类型上做什么？</p><p>创建表时 TIMESTAMP 列用 Zero 更新。只要表中的其他字段发生更改，UPDATE<br>CURRENT_TIMESTAMP 修饰符就将时间戳字段更新为当前时间。<br>16.主键和候选键有什么区别？</p><p>表格的每一行都由主键唯一标识,一个表只有一个主键。主键也是候选键。按照惯例，候选键可以被指定为主键，并且可以用于任何外键引用。<br>17.如何使用 Unix l shell 登录 Mysql ？</p><p>我们可以通过以下命令登录：<br>18.myisamchk 是用来做什么的？</p><p>它用来压缩 MyISAM 表，这减少了磁盘或内存使用。<br>19.如何控制 HEAP 表的最大尺寸？</p><p>Heal 表的大小可通过称为 max_heap_table_size 的 Mysql 配置变量来控制。</p><ol start="20"><li>MyISAM Static 和 和 MyISAM Dynamic 有什么区别？</li></ol><p>在 MyISAM Static 上的所有字段有固定宽度。动态 MyISAM 表将具有像 TEXT，BLOB等字段，以适应不同长度的数据类型。MyISAM Static 在受损情况下更容易恢复。<br>21.federated 表是什么？</p><p>federated 表，允许访问位于其他服务器数据库上的表。<br>22.如果一个表有一列定义为 TIMESTAMP ，将发生什么？</p><p>每当行被更改时，时间戳字段将获取当前时间戳。</p><ol start="23"><li>列设置为 AUTO INCREMENT 时，如果在表中达到最大值，会发生什么情况？</li></ol><p>它会停止递增，任何进一步的插入都将产生错误，因为密钥已被使用。<br>24.怎样才能找出最后一次插入时分配了哪个自动增量？</p><p>LAST_INSERT_ID 将返回由 Auto_increment分配的最后一个值，并且不需要指定表名<br>称。<br>25.你怎么看到为表格定义的所有索引？</p><p>索引是通过以下方式为表格定义的：<br>sqlqSHOW INDEX FROM &lt;tablename&gt;;</p><ol start="26"><li>LIKE 声明中的％和_ 是什么意思？</li></ol><p>％对应于 0 个或更多字符，_只是 LIKE 语句中的一个字符。<br>27.如何在 x Unix 和 和 l Mysql 时间戳之间进行转换？</p><p>UNIX_TIMESTAMP 是从 Mysql 时间戳转换为 Unix 时间戳的命令<br>FROM_UNIXTIME 是从 Unix 时间戳转换为 Mysql 时间戳的命令<br>28.列对比运算符是什么？</p><p>在 SELECT 语句的列比较中使用&#x3D;，&lt;&gt;，&lt;&#x3D;，&lt;，&gt; &#x3D;，&gt;，&lt;&lt;，&gt;&gt;，&lt;&#x3D;&gt;，AND，OR 或LIKE 运算符。<br>29.我们如何得到受查询影响的行数？</p><p>行数可以通过以下代码获得：<br>SELECT COUNT(user_id)FROM users;<br>30.Mysql 查询是否区分大小写？</p><p>不区分</p><p>所有这些例子都是一样的，Mysql 不区分大小写。<br>31.LIKE 和 REGEXP 操作有什么区别？</p><p>LIKE 和 REGEXP 运算符用于表示^和％。<br>SELECT * FROM employee WHERE emp_name REGEXP &quot;^b&quot;;<br>SELECT * FROM employee WHERE emp_name LIKE &quot;%b&quot;;</p><ol start="32"><li>BLOB 和 和 TEXT 有什么区别？</li></ol><p>BLOB 是一个二进制对象，可以容纳可变数量的数据。有四种类型的 BLOB</p><pre><code class="hljs">TINYBLOBBLOBMEDIUMBLOBLONGBLOB</code></pre><p>它们只能在所能容纳价值的最大长度上有所不同。TEXT 是一个不区分大小写的 BLOB。四种 TEXT 类型</p><pre><code class="hljs">TINYTEXTTEXTMEDIUMTEXTLONGTEXT</code></pre><p>它们对应于四种 BLOB 类型，并具有相同的最大长度和存储要求。BLOB 和 TEXT 类型之间的唯一区别在于对 BLOB 值进行排序和比较时区分大小写，对TEXT 值不区分大小写。<br>33.mysql_fetch_array 和 和 mysql_fetch_object 的区别是什么？</p><p>以下是 mysql_fetch_array 和 mysql_fetch_object 的区别：</p><pre><code class="hljs">mysql_fetch_array（） - 将结果行作为关联数组或来自数据库的常规数组返回。mysql_fetch_object - 从数据库返回结果行作为对象。</code></pre><p>34.我们如何在 mysql 中运行批处理模式？</p><p>以下命令用于在批处理模式下运行：<br>35.MyISAM 表格将在哪里存储，并且还提供其存储格式？</p><p>每个 MyISAM 表格以三种格式存储在磁盘上：</p><pre><code class="hljs">“.frm”文件存储表定义数据文件具有“.MYD”（MYData）扩展名索引文件具有“.MYI”（MYIndex）扩展名</code></pre><ol start="36"><li>Mysql 中有哪些不同的表格？</li></ol><p>共有 5 种类型的表格：</p><pre><code class="hljs">MyISAMHeapMergeINNODBISAM</code></pre><p>MyISAM 是 Mysql 的默认存储引擎。</p><ol start="37"><li>SAM 是什么？</li></ol><p>ISAM 简称为索引顺序访问方法。它是由 IBM 开发的，用于在磁带等辅助存储系统上存储和检索数据。<br>38.Mysql 如何优化 DISTINCT ？</p><p>DISTINCT 在所有列上转换为 GROUP BY，并与 ORDER BY 子句结合使用。<br>SELECT DISTINCT t1.a FROM t1,t2 where t1.a&#x3D;t2.a;<br>39.如何输入字符为十六进制数字？</p><p>如果想输入字符为十六进制数字，可以输入带有单引号的十六进制数字和前缀（X），或者只用（Ox）前缀输入十六进制数字。如果表达式上下文是字符串，则十六进制数字串将自动转换为字符串。<br>40.如何显示前 0 50 行？</p><p>在 Mysql 中，使用以下代码查询显示前 50 行：<br>SELECT*FROM xx LIMIT 0,50;<br>41.可以使用多少列创建索引？</p><p>任何标准表最多可以创建 16 个索引列。<br>42.NOW（）和 CURRENT_DATE （）有什么区别？</p><p>NOW（）命令用于显示当前年份，月份，日期，小时，分钟和秒。<br>CURRENT_DATE（）仅显示当前年份，月份和日期。<br>43.什么样的对象可以使用 CREATE 语句创建？</p><p>以下对象是使用 CREATE 语句创建的：</p><pre><code class="hljs">DATABASEEVENTFUNCTIONINDEXPROCEDURETABLETRIGGERUSERVIEW</code></pre><p>44.解释访问控制列表</p><pre><code class="hljs">ACL（访问控制列表）是与对象关联的权限列表。这个列表是 Mysql 服务器安全模型的基础，它有助于排除用户无法连接的问题。Mysql 将 ACL（也称为授权表）缓存在内存中。当用户尝试认证或运行命令时，Mysql 会按照预定的顺序检查 ACL 的认证信息和权限。</code></pre><p>45.MYSQL 数据表在什么情况下容易损坏？</p><p>服务器突然断电导致数据文件损坏。强制关机，没有先关闭 mysql 服务等。<br>46.mysql 有关权限的表都有哪几个？</p><p>Mysql 服务器通过权限表来控制用户对数据库的访问，权限表存放在 mysql 数据库里，由mysql_install_db 脚本初始化。这些权限表分别 user，db，table_priv，columns_priv和 host。<br>MySQL中级<br>1.MySQL 中有哪几种锁？</p><pre><code class="hljs">表级锁： 开销小， 加锁快； 不会出现死锁； 锁定粒度大， 发生锁冲突的概率最高， 并发度最低。行级锁： 开销大， 加锁慢； 会出现死锁； 锁定粒度最小， 发生锁冲突的概率最低， 并发度也最高。页面锁： 开销和加锁时间界于表锁和行锁之间； 会出现死锁； 锁定粒度界于表锁和行锁之间， 并发度一般。</code></pre><p>2.MySQL 中有哪些不同的表格？</p><pre><code class="hljs">共有 5 种类型的表格： 1、MyISAM2、Heap 3、Merge 4、INNODB 5、MISAM</code></pre><p>3.简述在MySQL 数据库中 MyISAM 和InnoDB 的区别</p><p>MyISAM：</p><pre><code class="hljs">不支持事务， 但是每次查询都是原子的； 支持表级锁， 即每次操作是对整个表加锁； 存储表的总行数；一个 MYISAM 表有三个文件： 索引文件、表结构文件、数据文件；采用菲聚集索引， 索引文件的数据域存储指向数据文件的指针。辅索引与主索引基本一致， 但是辅索引不用保证唯一性。</code></pre><p>InnoDb：</p><pre><code class="hljs">支持 ACID 的事务， 支持事务的四种隔离级别； 支持行级锁及外键约束： 因此可以支持写并发； 不存储总行数：一个 InnoDb 引擎存储在一个文件空间（ 共享表空间， 表大小不受操作系统控制，一个表可能分布在多个文件里）， 也有可能为多个（ 设置为独立表空， 表大小受操作系统文件大小限制， 一般为 2G）， 受操作系统文件大小的限制；主键索引采用聚集索引（ 索引的数据域存储数据文件本身）， 辅索引的数据域存储主键的值； 因此从辅索引查找数据， 需要先通过辅索引找到主键值， 再访问辅索引； 最好使用自增主键， 防止插入数据时， 为维持 B+树结构， 文件的大调整。</code></pre><p>4.MySQL 中InnoDB 支持的四种事务隔离级别名称，以及逐级之间的区别？</p><p>SQL 标准定义的四个隔离级别为：</p><pre><code class="hljs">read uncommited ： 读到未提交数据read committed： 脏读， 不可重复读repeatable read： 可重读serializable ： 串行事物</code></pre><p>5.CHAR 和VARCHAR 的区别？</p><pre><code class="hljs">CHAR 和 VARCHAR 类型在存储和检索方面有所不同CHAR 列长度固定为创建表时声明的长度， 长度值范围是 1 到 255 当 CHAR 值被存储时， 它们被用空格填充到特定长度， 检索 CHAR 值时需删除尾随空格。</code></pre><p>6.主键和候选键有什么区别？</p><p>表格的每一行都由主键唯一标识,一个表只有一个主键。<br>主键也是候选键。按照惯例， 候选键可以被指定为主键， 并且可以用于任何外键引用。<br>7.myisamchk 是用来做什么的？</p><pre><code class="hljs">它用来压缩 MyISAM 表， 这减少了磁盘或内存使用。</code></pre><p>MyISAM Static 和 MyISAM Dynamic 有什么区别？</p><pre><code class="hljs">在 MyISAM Static 上的所有字段有固定宽度。动态 MyISAM 表将具有像 TEXT， BLOB 等字段， 以适应不同长度的数据类型。MyISAM Static 在受损情况下更容易恢复。</code></pre><p>8.如果一个表有一列定义为TIMESTAMP，将发生什么？</p><pre><code class="hljs">每当行被更改时， 时间戳字段将获取当前时间戳。列设置为 AUTO INCREMENT 时， 如果在表中达到最大值， 会发生什么情况？它会停止递增， 任何进一步的插入都将产生错误， 因为密钥已被使用。怎样才能找出最后一次插入时分配了哪个自动增量？LAST_INSERT_ID 将返回由 Auto_increment 分配的最后一个值， 并且不需要指定表名称。</code></pre><p>9.你怎么看到为表格定义的所有索引？</p><p>索引是通过以下方式为表格定义的：<br>10.LIKE 声明中的％是什么意思？</p><p>％ 对应于 0 个或更多字符，只是 LIKE 语句中的一个字符。<br>11.列对比运算符是什么？</p><p>在 SELECT 语句的列比较中使用&#x3D;，&lt;&gt;，&lt;&#x3D;，&lt;，&gt; &#x3D;，&gt;，&lt;&lt;，&gt;&gt;，&lt;&#x3D;&gt;，AND， OR 或 LIKE 运算符。<br>12.BLOB 和TEXT 有什么区别？</p><p>BLOB 是一个二进制对象， 可以容纳可变数量的数据。TEXT 是一个不区分大小写的 BLOB。BLOB 和 TEXT 类型之间的唯一区别在于对 BLOB 值进行排序和比较时区分大小写， 对 TEXT 值不区分大小写。<br>13.MySQL_fetch_array 和MySQL_fetch_object 的区别是什么？</p><p>以下是 MySQL_fetch_array 和 MySQL_fetch_object 的区别：</p><pre><code class="hljs">MySQL_fetch_array（ ） – 将结果行作为关联数组或来自数据库的常规数组返回。MySQL_fetch_object – 从数据库返回结果行作为对象。</code></pre><p>14.MyISAM 表格将在哪里存储，并且还提供其存储格式？</p><p>每个 MyISAM 表格以三种格式存储在磁盘上：</p><pre><code class="hljs">·“.frm” 文件存储表定义·数据文件具有“.MYD”（ MYData）扩展名索引文件具有“.MYI”（ MYIndex） 扩展名</code></pre><p>15.如何显示前 50 行？</p><p>在 MySQL 中， 使用以下代码查询显示前 50 行：<br>SELECT*FROM TABLE LIMIT 0,50;<br>16.可以使用多少列创建索引？</p><p>任何标准表最多可以创建 16 个索引列。<br>17.NOW（）和 CURRENT_DATE（）有什么区别？</p><p>NOW（）: 命令用于显示当前年份， 月份， 日期， 小时， 分钟和秒。</p><p>CURRENT_DATE（）: 仅显示当前年份， 月份和日期。<br>18.什么是非标准字符串类型？</p><pre><code class="hljs">TINYTEXTTEXTMEDIUMTEXTLONGTEXT</code></pre><p>19.什么是通用 SQL 函数？</p><pre><code class="hljs">CONCAT(A, B) – 连接两个字符串值以创建单个字符串输出。通常用于将两个或多个字段合并为一个字段。FORMAT(X, D)- 格式化数字 X 到 D 有效数字。CURRDATE(), CURRTIME()- 返回当前日期或时间。NOW（） – 将当前日期和时间作为一个值返回。MONTH（）， DAY（ ）， YEAR（）， WEEK（）， WEEKDAY（） – 从日期值中提取给定数据。HOUR（）， MINUTE（）， SECOND（） – 从时间值中提取给定数据。DATEDIFF（ A， B） – 确定两个日期之间的差异， 通常用于计算年龄SUBTIMES（ A， B） – 确定两次之间的差异。FROMDAYS（ INT） – 将整数天数转换为日期值。</code></pre><p>20.MySQL 支持事务吗？</p><p>在缺省模式下，MySQL 是 autocommit 模式的，所有的数据库更新操作都会即时提交， 所以在缺省情况下， MySQL 是不支持事务的。</p><pre><code class="hljs">但是如果你的 MySQL 表类型是使用 InnoDB Tables 或 BDB tables 的话， 你的MySQL 就可以使用事务处理,使用SETAUTOCOMMIT=0 就可以使 MySQL 允许在非 autocommit 模式， 在非autocommit 模式下，你必须使用 COMMIT 来提交你的更改，或者用 ROLLBACK 来回滚你的更改。</code></pre><p>21.MySQL 里记录货币用什么字段类型好</p><p>NUMERIC 和 DECIMAL 类型被 MySQL 实现为同样的类型， 这在 SQL92 标准允许。他们被用于保存值， 该值的准确精度是极其重要的值， 例如与金钱有关的数据。当声明一个类是这些类型之一时， 精度和规模的能被(并且通常是)指定。</p><p>例如:</p><pre><code class="hljs">salary DECIMAL(9,2)在这个例子中， 9(precision)代表将被用于存储值的总的小数位数，而 2(scale)代表将被用于存储小数点后的位数。因此， 在这种情况下， 能被存储在 salary 列中的值的范围是从-9999999.99 到9999999.99。</code></pre><p>22.MySQL 有关权限的表都有哪几个？</p><p>MySQL 服务器通过权限表来控制用户对数据库的访问， 权限表存放在 MySQL 数据库里，由MySQL_install_db 脚本初始化。</p><pre><code class="hljs">这些权限表分别 user，db，table_priv， columns_priv 和 host 。</code></pre><p>23.列的字符串类型可以是什么？</p><p>字符串类型是：</p><pre><code class="hljs">SETBLOBENUMCHARTEXT</code></pre><p>24.MySQL 数据库作发布系统的存储，一天五万条以上的增量， 预计运维三年,怎么优化？</p><pre><code class="hljs">设计良好的数据库结构， 允许部分数据冗余， 尽量避免 join 查询， 提高效率。选择合适的表字段数据类型和存储引擎， 适当的添加索引。MySQL 库主从读写分离。找规律分表， 减少单表中的数据量提高查询速度。添加缓存机制， 比如 memcached， apc等。不经常改动的页面， 生成静态页面。书写高效率的 SQL。比如 SELECT * FROM TABEL 改为 SELECT field_1, field_2, field_3 FROMTABLE.</code></pre><p>25.锁的优化策略</p><pre><code class="hljs">读写分离分段加锁减少锁持有的时间，多个线程尽量以相同的顺序去获取资源不能将锁的粒度过于细化， 不然可能会出现线程的加锁和释 放次数过多， 反而效率不如一次加一把大锁。</code></pre><p>26.索引的底层实现原理和优化</p><p>B+树，<br>经过优化的 B+树 主要是在所有的叶子结点中增加了指向下一个叶子节点的指针， 因此 InnoDB 建议为大部分表使用默认自增的主键作为主索引。<br>27.什么情况下设置了索引但无法使用</p><pre><code class="hljs">以“%” 开头的 LIKE 语句， 模糊匹配OR 语句前后没有同时使用索引数据类型出现隐式转化（ 如 varchar 不加单引号的话可能会自动转换为 int 型）</code></pre><p>28.实践中如何优化 MySQL</p><p>最好是按照以下顺序优化：</p><pre><code class="hljs">SQL 语句及索引的优化数据库表结构的优化系统配置的优化硬件的优化</code></pre><p>29.优化数据库的方法</p><pre><code class="hljs">选取最适用的字段属性，尽可能减少定义字段宽度，尽量把字段设置 NOTNULL， 例如省份, 性别 最好适用 ENUM使用连接(JOIN)来代替子查询适用联合(UNION)来代替手动创建的临时表事务处理锁定表、优化事务处理适用外键， 优化锁定表建立索引优化查询语句</code></pre><p>30.简单描述 MySQL 中，索引，主键，唯一索引，联合索引的区别，对数据库的性能有什么影响（从读写两方面）</p><pre><code class="hljs">索引是一种特殊的文件(InnoDB 数据表上的索引是表空间的一个组成部分)， 它们包含着对数据表里所有记录的引用指针。普通索引(由关键字KEY或 INDEX定义的索引)的唯一任务是加快对数据的访问速度。普通索引允许被索引的数据列包含重复的值。如果能确定某个数据列将只包含彼此各不相同的值， 在为这个数据列创建索引的时候就应该用关键字UNIQUE 把它定义为一个唯一索引。也就是说， 唯一索引可以保证数据记录的唯一性。主键， 是一种特殊的唯一索引， 在一张表中只能定义一个主键索引， 主键用于唯一标识一条记录， 使用关键字 PRIMARY KEY 来创建。索引可以覆盖多个数据列，如像INDEX(columnA, columnB)索引，这就是联合索引。索引可以极大的提高数据的查询速度， 但是会降低插入、删除、更新表的速度， 因为在执行这些写操作时， 还要操作索引文件。</code></pre><p>31.数据库中的事务是什么？</p><p>事务（ transaction） 是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功， 则认为事务成功， 即使只有一个操作失败， 事务也不成功。如果所有操作完成， 事务则提交， 其修改将作用于所有其他数据库进程。如果一个操作失败， 则事务将回滚， 该事务所有操作的影响都将取消。</p><p>事务特性：</p><pre><code class="hljs">    原子性： 即不可分割性， 事务要么全部被执行， 要么就全部不被执行。    一致性或可串性：事务的执行使得数据库从一种正确状态转换成另一种正确状态。    隔离性：在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事务。    持久性：事务正确提交后， 其结果将永久保存在数据库中， 即使在事务提交后有了其他故障， 事务的处理结果也会得到保存。    或者这样理解：事务就是被绑定在一起作为一个逻辑工作单元的 SQL 语句分组， 如果任何一个语句操作失败那么整个操作就被失败， 以后操作就会回滚到操作前状态， 或者是上有个节点。为了确保要么执行， 要么不执行， 就可以使用事务。要将有组语句作为事务考虑， 就需要通过 ACID 测试， 即原子性， 一致性， 隔离性和持久性。</code></pre><p>32.SQL 注入漏洞产生的原因？如何防止？</p><pre><code class="hljs">SQL 注入产生的原因： 程序开发过程中不注意规范书写 sql 语句和对特殊字符进行过滤，导致客户端可以通过全局变量 POST 和 GET 提交一些 sql 语句正常执行。</code></pre><p>防止 SQL 注入的方式：</p><pre><code class="hljs">开启配置文件中的 magic_quotes_gpc 和 magic_quotes_runtime 设置执行 sql 语句时使用 addslashes 进行 sql 语句转换Sql 语句书写尽量不要省略双引号和单引号。过滤掉 sql 语句中的一些关键词：update、insert、delete、select、 * 。提高数据库表和字段的命名技巧， 对一些重要的字段根据程序的特点命名， 取不易被猜到的。</code></pre><p>33.为表中得字段选择合适得数据类型</p><pre><code class="hljs">字段类型优先级: 整形&amp;gt;date,time&amp;gt;enum,char&amp;gt;varchar&amp;gt;blob,text</code></pre><p>优先考虑数字类型， 其次是日期或者二进制类型， 最后是字符串类型， 同级别得数据类型， 应该优先选择占用空间小的数据类型。<br>34.存储时期(日期)</p><pre><code class="hljs">Datatime: 以 YYYY-MM-DD HH:MM:SS 格式存储时期时间， 精确到秒， 占用 8 个字节得存储空间，datatime 类型与时区无关。Timestamp: 以时间戳格式存储，占用 4 个字节，范围小 1970-1-1 到 2038-1-19， 显示依赖于所指定得时区， 默认在第一个列行的数据修改时可以自动得修改timestamp 列得值 。Date: 占用得字节数比使用字符串.datatime.int 储存要少， 使用 date 只需要 3 个字节， 存储日期月份， 还可以利用日期时间函数进行日期间的计算。Time: 存储时间部分的数据</code></pre><p>注意:不要使用字符串类型来存储日期时间数据（ 通常比字符串占用得储存空间小， 在进行查找过滤可以利用日期得函数）使用 int 存储日期时间不如使用 timestamp 类型<br>35.对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题</p><pre><code class="hljs">1、索引的目的是什么？快速访问数据表中的特定信息， 提高检索速度创建唯一性索引， 保证数据库表中每一行数据的唯一性。加速表和表之间的连接使用分组和排序子句进行数据检索时， 可以显著减少查询中分组和排序的时间2、索引对数据库系统的负面影响是什么？</code></pre><p>负面影响：</p><pre><code class="hljs">创建索引和维护索引需要耗费时间， 这个时间随着数据量的增加而增加； 索引需要占用物理空间， 不光是表需要占用数据空间， 每个索引也需要占用物理空间；当对表进行增、删、改、的时候索引也要动态维护， 这样就降低了数据的维护速度。3、为数据表建立索引的原则有哪些？在最频繁使用的、用以缩小查询范围的字段上建立索引。 在频繁使用的、需要排序的字段上建立索引。4、什么情况下不宜建立索引？对于查询中很少涉及的列或者重复值比较多的列， 不宜建立索引。对于一些特殊的数据类型， 不宜建立索引， 比如文本字段（ text） 等</code></pre><p>36.解释 MySQL 外连接、内连接与自连接的区别</p><p>先说什么是交叉连接: 交叉连接又叫笛卡尔积，它是指不使用任何条件，直接将一个表的所有记录和另一个表中的所有记录一一匹配。</p><p>内连接： 则是只有条件的交叉连接，根据某个条件筛选出符合条件的记录，不符合条件的记录不会出现在结果集中， 即内连接只连接匹配的行。</p><p>外连接： 其结果集中不仅包含符合连接条件的行，而且还会包括左表、右表或两个表中的所有数据行， 这三种情况依次称之为左外连接， 右外连接， 和全外连接。</p><p>左外连接： 也称左连接，左表为主表， 左表中的所有记录都会出现在结果集中， 对于那些在右表中并没有匹配的记录， 仍然要显示， 右边对应的那些字段值以NULL 来填充。</p><p>右外连接： 也称右连接，右表为主表，右表中的所有记录都会出现在结果集中。左连接和右连接可以互换， MySQL 目前还不支持全外连接。<br>37.Myql 中的事务回滚机制概述</p><pre><code class="hljs">事务是用户定义的一个数据库操作序列， 这些操作要么全做要么全不做， 是一个不可分割的工作单位， 事务回滚是指将该事务已经完成的对数据库的更新操作撤销。要同时修改数据库中两个不同表时， 如果它们不是一个事务的话， 当第一个表修改完， 可能第二个表修改过程中出现了异常而没能修改， 此时就只有第二个表依旧是未修改之前的状态， 而第一个表已经被修改完毕。而当你把它们设定为一个事务的时候， 当第一个表修改完， 第二表修改出现异常而没能修改， 第一个表和第二个表都要回到未修改的状态， 这就是所谓的事务回滚。</code></pre><p>38.SQL 语言包括哪几部分？每部分都有哪些操作关键字？</p><p>SQL 语言包括数据定义(DDL)、数据操纵(DML),数据控制(DCL)和数据查询（ DQL） 四个部分。</p><p>数据定义： Create Table,Alter Table,Drop Table, Craete&#x2F;Drop Index<br>等数据操纵： Select,insert,update,delete,<br>数据控制：grant,revoke<br>数据查询：select<br>39.完整性约束包括哪些？</p><pre><code class="hljs">数据完整性(Data Integrity)是指数据的精确(Accuracy)和可靠性(Reliability)。</code></pre><p>分为以下四类：</p><pre><code class="hljs">实体完整性： 规定表的每一行在表中是惟一的实体。域完整性： 是指表中的列必须满足某种特定的数据类型约束，其中约束又包括 取值范围、精度等规定。参照完整性： 是指两个表的主关键字和外关键字的数据应一致， 保证了表之间的数据的一致性，防止了数据丢失或无意义的数据在数据库中扩散。用户定义的完整性： 不同的关系数据库系统根据其应用环境的不同，往往还需 要一些特殊的约束条件。用户定义的完整性即是针对某个特定关系数据库的约束条件， 它反映某一具体应用必须满足的语义要求。与表有关的约束：包括列约束(NOT NULL（ 非空约束）)和表约束(PRIMARY KEY、foreign key、check、UNIQUE)。</code></pre><p>————————————————<br>版权声明：本文为CSDN博主「Cs 挽周」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_45692705/article/details/119343669">https://blog.csdn.net/weixin_45692705/article/details/119343669</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP数组相加和array_merge</title>
    <link href="/2021/10/04/PHP%E6%95%B0%E7%BB%84%E7%9B%B8%E5%8A%A0%E5%92%8Carray_merge/"/>
    <url>/2021/10/04/PHP%E6%95%B0%E7%BB%84%E7%9B%B8%E5%8A%A0%E5%92%8Carray_merge/</url>
    
    <content type="html"><![CDATA[<p><strong>array_merge</strong></p><p>如果输入的数组中有相同的字符串键名，则该键名后面的值将覆盖前一个值。然而，如果数组包含数字键名，后面的值将 不会 覆盖原来的值，而是附加到后面。</p><p><strong>联合（数组相加）</strong></p><p>+ 运算符把右边的数组元素附加到左边的数组后面，两个数组中都有的键名，则只用左边数组中的，右边的被忽略。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;?php<br><span class="hljs-variable">$a</span> = <span class="hljs-keyword">array</span>(&amp;quot;a&amp;quot; =&amp;gt; &amp;quot;apple&amp;quot;, &amp;quot;b&amp;quot; =&amp;gt; &amp;quot;banana&amp;quot;);<br><span class="hljs-variable">$b</span> = <span class="hljs-keyword">array</span>(&amp;quot;a&amp;quot; =&amp;gt; &amp;quot;pear&amp;quot;, &amp;quot;b&amp;quot; =&amp;gt; &amp;quot;strawberry&amp;quot;, &amp;quot;c&amp;quot; =&amp;gt; &amp;quot;cherry&amp;quot;);<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$a</span> + <span class="hljs-variable">$b</span>; <span class="hljs-comment">// $a 和 $b 的并集</span><br><span class="hljs-keyword">echo</span> &amp;quot;Union of \<span class="hljs-variable">$a</span> <span class="hljs-keyword">and</span> \<span class="hljs-variable">$b</span>: \n&amp;quot;;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$c</span>);<br><br><span class="hljs-variable">$c</span> = <span class="hljs-variable">$b</span> + <span class="hljs-variable">$a</span>; <span class="hljs-comment">// $b 和 $a 的并集</span><br><span class="hljs-keyword">echo</span> &amp;quot;Union of \<span class="hljs-variable">$b</span> <span class="hljs-keyword">and</span> \<span class="hljs-variable">$a</span>: \n&amp;quot;;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$c</span>);<br><br><span class="hljs-variable">$a</span> += <span class="hljs-variable">$b</span>; <span class="hljs-comment">//  $a += $b 的并集是 $a 和 $b</span><br><span class="hljs-keyword">echo</span> &amp;quot;Union of \<span class="hljs-variable">$a</span> += \<span class="hljs-variable">$b</span>: \n&amp;quot;;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$a</span>);<br>?&amp;gt;<br><br></code></pre></td></tr></table></figure><p><strong>array_replace</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ubuntu 安装ImageMagic</title>
    <link href="/2021/08/29/ubuntu%20%E5%AE%89%E8%A3%85ImageMagic/"/>
    <url>/2021/08/29/ubuntu%20%E5%AE%89%E8%A3%85ImageMagic/</url>
    
    <content type="html"><![CDATA[<p>I. 安装ImageMagic</p><ol><li>安装：</li></ol><p>sudo  apt-get install imagemagick</p><ol start="2"><li>测试:<br>1). 版本察看<br>简单地执行:<br>引用<br>convert -version</li></ol><p>如果看到下面的信息说明安装已经成功<br>引用<br>Version: ImageMagick 6.4.3 2008-08-27 Q16 OpenMP <a href="http://www.imagemagick.org/">http://www.imagemagick.org</a><br>Copyright: Copyright (C) 1999-2008 ImageMagick Studio LLC</p><p>2). 压缩图片.<br>当前目录下有一个文件名字叫hill.png,执行<br>引用<br>convert -sample 25%x25% hill.png  hill_t.png</p><p>将缩小hill.png为原来的25%，生成新的文件名叫hill_t.png</p><p>如果出现如下错误提示:<br>引用<br>convert: error while loading shared libraries: libMagickCore.so.1: cannot open shared object file: No such file or directory</p><p>将so所在的路径加入到LD_LIBRARY_PATH(前面的安装方式默认安装so到&#x2F;usr&#x2F;local&#x2F;lib目录下)<br>引用<br>  export LD_LIBRARY_PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;lib</p><p>当执行jpg图片缩放的时候,<br>3). 压缩jpg图片<br>引用<br>convert -sample 25%x25% water.png  water_t.png</p><p>系统提示:<br>引用<br>convert: no decode delegate for this image format <code>water.jpg&amp;#039;. convert: missing an image filename </code>t_water.jpg&amp;#039;.</p><p>其他：</p><p>ImageMagick是一个免费的创建、编辑、合成图片的软件。</p><p>原文地址：<a href="https://blog.csdn.net/jacke121/article/details/76126245">https://blog.csdn.net/jacke121/article/details/76126245</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>解决 go build时候timeout问题</title>
    <link href="/2021/08/29/%E8%A7%A3%E5%86%B3%20go%20build%E6%97%B6%E5%80%99timeout%E9%97%AE%E9%A2%98/"/>
    <url>/2021/08/29/%E8%A7%A3%E5%86%B3%20go%20build%E6%97%B6%E5%80%99timeout%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>默认安装的go 在 build的时候会出现长时间无响应，有类似如下报如下错误：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">go: github.com<span class="hljs-regexp">/hyperledger/</span>fabric-contract-api-go@v1.<span class="hljs-number">0.0</span>: Get https:<span class="hljs-regexp">//</span>proxy.golang.org<span class="hljs-regexp">/github.com/</span>hyperledger<span class="hljs-regexp">/fabric-contract-api-go/</span>@v<span class="hljs-regexp">/v1.0.0.mod: dial tcp 172.217.27.145:443: i/</span>o timeout<br></code></pre></td></tr></table></figure><p>因为默认的go地址被墙了，所以我们要更换地址，更换为七牛云的镜像，直接运行下面两条命令即可：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">go env -w <span class="hljs-attribute">GO111MODULE</span>=on<br>go env -w <span class="hljs-attribute">GOPROXY</span>=https://goproxy.cn,direct<br></code></pre></td></tr></table></figure><p>原文地址：<a href="http://www.iamlintao.com/7194.html">http://www.iamlintao.com/7194.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>慢速连接攻击和处理方式</title>
    <link href="/2021/07/26/%E6%85%A2%E9%80%9F%E8%BF%9E%E6%8E%A5%E6%94%BB%E5%87%BB%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <url>/2021/07/26/%E6%85%A2%E9%80%9F%E8%BF%9E%E6%8E%A5%E6%94%BB%E5%87%BB%E5%92%8C%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>慢速攻击原理：</p><p>  http慢速攻击是利用http合法机制，在建立连接后，尽量长时间保持连接，不释放，达到对HTTP服务攻击,攻击者发送POST请求，自行构造报文向服务器提交数据，将报文长度设置一个很大的值，且在随后每次发送中，每次只发送一个很小的报文，这样导致服务器一直等待数据，连接始终一直被占用。</p><p>如果攻击者使用多线程或傀儡机子去做同样操作，服务器WEB容器很快就被占满TCP连接而不再接受新请求</p><p>slowhttptest是一款对服务器进行慢攻击的测试软件，包含了几种攻击方式，像Slowloris、SlowHTTP POST、Slow Read attack等。</p><p>总而言之，该工具的原理就是设法让服务器等待，当服务器在保持连接等待时，就消耗了资源。</p><p>1、 最具代表性的是rsnake发明的Slowloris，又被称为slow headers。</p><p>【攻击原理】</p><p>HTTP协议规定，<strong>HTTP Request以\r\n\r\n（0d0a0d0a）结尾表示客户端发送结束，服务端开始处理。那么，如果永远不发送\r\n\r\n会如何</strong>？Slowloris就是利用这一点来做DDoS攻击的。攻击者在HTTP请求头中将Connection设置为Keep-Alive，要求Web Server保持TCP连接不要断开，随后缓慢地每隔几分钟发送一个key-value格式的数据到服务端，如a:b\r\n，导致服务端认为HTTP头部没有接收完成而一直等待。如果攻击者使用多线程或者傀儡机来做同样的操作，服务器的Web容器很快就被攻击者占满了TCP连接而不再接受新的请求。</p><p>2、Slowloris的变种–Slow HTTP POST，也称为Slow body。 </p><p>【攻击原理】</p><p><strong>在POST提交方式中，允许在HTTP的头中声明content-length，也就是POST内容的长度。</strong></p><p><strong>在提交了头以后，将后面的body部分卡住不发送，这时服务器在接受了POST长度以后，就会等待客户端发送POST的内容，攻击者保持连接并且以10S-100S一个字节的速度去发送，就达到了消耗资源的效果，因此不断地增加这样的链接，就会使得服务器的资源被消耗，最后可能宕机。</strong></p><p>3、Slow Read attack</p><p>【攻击原理】</p><p><strong>采用调整TCP协议中的滑动窗口大小，来对服务器单次发送的数据大小进行控制，使得服务器需要对一个回应分成很多个包来发送。要使这种攻击效果更加明显，请求的资源要尽量大。</strong></p><p> 用Wireshark抓包可以看出，当请求a.wmv资源（大小有9M多）时，客户端windowssize被刻意设置为1152字节。客户端缓冲区在被来自服务器的数据填满后，发出了[TCP ZeroWindow]告警，迫使服务端等待。 </p><p>受到以上各种慢速攻击后，服务器再无法访问 </p><p>解决办法：</p><p>1.使用NGINX，因为其本身就对慢速攻击有很好防护</p><p>2.tomcat可通过运行模式NIO和connectionTimeout值进行缓解</p><p>3.dos deflate软件：<a href="https://www.cnblogs.com/cloudapps/p/4996050.html">https://www.cnblogs.com/cloudapps/p/4996050.html</a></p><p>另外，在tomcat中配置connectionTimeout参数也可以防止head攻击下的拒绝服务，但是对于body和read情况下没有能力解决（论坛上也说了，tomcat就不是做这个事儿的）。 </p><p>&gt; 原文地址：<a href="https://www.cnblogs.com/xiaoliu66007/p/10174672.html">https://www.cnblogs.com/xiaoliu66007/p/10174672.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql binlog相关使用笔记</title>
    <link href="/2021/07/16/Mysql%20binlog%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/16/Mysql%20binlog%E7%9B%B8%E5%85%B3%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="开启bin-log"><a href="#开启bin-log" class="headerlink" title="开启bin-log"></a>开启bin-log</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/etc/my</span>sql<span class="hljs-regexp">/mysql.conf.d/my</span>sqld.cnf<br></code></pre></td></tr></table></figure><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf">[mysqld]区块添加<br><span class="hljs-attribute">log-bin</span><span class="hljs-operator">=</span>mysql-bin(也可指定二进制日志生成的路径，如：log-bin<span class="hljs-operator">=/</span>opt/Data/mysql-bin)<br><span class="hljs-attribute">server-id</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br>binlog_format<span class="hljs-operator">=</span>MIXED(加入此参数才能记录到insert语句)<br></code></pre></td></tr></table></figure><h2 id="重启Mysql"><a href="#重启Mysql" class="headerlink" title="重启Mysql"></a>重启Mysql</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">systemctl restart mysql<br><span class="hljs-regexp">//</span>或者<br>service mysql restart <br></code></pre></td></tr></table></figure><h2 id="查看binlog日志是否开启"><a href="#查看binlog日志是否开启" class="headerlink" title="查看binlog日志是否开启"></a>查看binlog日志是否开启</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">mysql&gt; show <span class="hljs-keyword">variables</span> like <span class="hljs-comment">&#x27;log_%&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h2><h2 id="向数据表中插入一行"><a href="#向数据表中插入一行" class="headerlink" title="向数据表中插入一行"></a>向数据表中插入一行</h2><h2 id="查看bin-log"><a href="#查看bin-log" class="headerlink" title="查看bin-log"></a>查看bin-log</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mysqlbinlog -v <span class="hljs-regexp">/var/</span>log<span class="hljs-regexp">/mysql/my</span>sql-bin.<span class="hljs-number">000001</span><br></code></pre></td></tr></table></figure><h2 id="导出，可以指定时间段"><a href="#导出，可以指定时间段" class="headerlink" title="导出，可以指定时间段"></a>导出，可以指定时间段</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysqlbinlog</span> --base64-output=decode-rows -v --start-date=&#x27;<span class="hljs-number">2014</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span> <span class="hljs-number">14</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00</span>&#x27; --stop-date=&#x27;<span class="hljs-number">2014</span>-<span class="hljs-number">09</span>-<span class="hljs-number">16</span> <span class="hljs-number">14</span>:<span class="hljs-number">20</span>:<span class="hljs-number">00</span>&#x27; /var/log/mysql/mysql-bin.<span class="hljs-number">000001</span> &gt;/tmp/log.sql<br></code></pre></td></tr></table></figure><p>推荐：<br><a href="https://www.cnblogs.com/Presley-lpc/p/9619571.html">https://www.cnblogs.com/Presley-lpc/p/9619571.html</a><br><a href="https://blog.csdn.net/Allenzyg/article/details/106446992">https://blog.csdn.net/Allenzyg/article/details/106446992</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql5.* Mysql 8.0* 一条SQL实现树形递归查询</title>
    <link href="/2021/07/10/Mysql5.%EF%80%AA%20Mysql%208.0%EF%80%AA%20%E4%B8%80%E6%9D%A1SQL%E5%AE%9E%E7%8E%B0%E6%A0%91%E5%BD%A2%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2/"/>
    <url>/2021/07/10/Mysql5.%EF%80%AA%20Mysql%208.0%EF%80%AA%20%E4%B8%80%E6%9D%A1SQL%E5%AE%9E%E7%8E%B0%E6%A0%91%E5%BD%A2%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2/</url>
    
    <content type="html"><![CDATA[<p>用户表 user</p><table><thead><tr><th>id</th><th>username</th><th>pid</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>0</td></tr><tr><td>2</td><td>李四</td><td>1</td></tr><tr><td>3</td><td>王五</td><td>2</td></tr><tr><td>4</td><td>赵六</td><td>3</td></tr><tr><td>5</td><td>孙七</td><td>4</td></tr></tbody></table><p>拿到id为5的用户，查他的所有上级，如何用一条SQL实现树形的递归查询呢</p><p>Mysql5.* @变量迭代递归查询<br>老版本的Mysql（5.6）通过使用的@变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> T2.id, T2.`username` <span class="hljs-keyword">FROM</span> (<br> <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@r</span> <span class="hljs-keyword">AS</span> _id,(<br>    <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@r</span> :<span class="hljs-operator">=</span> pid <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> id <span class="hljs-operator">=</span> _id<br> ) <span class="hljs-keyword">AS</span> parent_id,<span class="hljs-variable">@l</span> :<span class="hljs-operator">=</span> <span class="hljs-variable">@l</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span> <span class="hljs-keyword">AS</span> lvl<br> <span class="hljs-keyword">FROM</span><br>  ( <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@r</span> :<span class="hljs-operator">=</span> <span class="hljs-number">5</span>, <span class="hljs-variable">@l</span> :<span class="hljs-operator">=</span> <span class="hljs-number">0</span> ) vars,<span class="hljs-keyword">user</span> h<br> <span class="hljs-keyword">WHERE</span> <span class="hljs-variable">@r</span> <span class="hljs-operator">&amp;</span>lt;<span class="hljs-operator">&amp;</span>gt; <span class="hljs-number">0</span> )<br> T1<br> <span class="hljs-keyword">JOIN</span> <span class="hljs-keyword">user</span> T2 <span class="hljs-keyword">ON</span> T1._id <span class="hljs-operator">=</span> T2.id<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br> T1.lvl <span class="hljs-keyword">DESC</span><br> <br></code></pre></td></tr></table></figure><p><em>Mysql8. 中不能这么用会报警告⚠</em>*<br>Warning: #1287 Setting user variables within expressions is deprecated and will be removed in a future release. Please set variables in separate statements instead.</p><p>Mysql8.* CTE递归查询<br>Mysql8版本的支持了CTE递归查询的语法</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">RECURSIVE</span> parent_cte <span class="hljs-keyword">AS</span> (<br>   <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> id=<span class="hljs-number">91</span><br>       <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span><br>       <span class="hljs-keyword">SELECT</span> u.* <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> u <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> parent_cte parent_cte2 <span class="hljs-keyword">ON</span> u.id = parent_cte2.pid<br>) <span class="hljs-keyword">SELECT</span> id,username <span class="hljs-keyword">FROM</span> parent_cte <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> id <span class="hljs-keyword">ASC</span><br><br></code></pre></td></tr></table></figure><p><a href="https://huue.cc/index.php/tag/%E6%9C%AC%E5%9C%B0/">本地</a>Mysql8.* ，线上服务器Mysql5.6，在不改动数据库版本的情况下，使用用户<a href="https://huue.cc/index.php/tag/%E8%87%AA%E5%AE%9A%E4%B9%89/">自定义</a><a href="https://huue.cc/index.php/tag/%E5%87%BD%E6%95%B0/">函数</a>Function 实现树形递归</p><p>Mysql Function<a href="https://huue.cc/index.php/tag/%E5%87%BD%E6%95%B0/">函数</a><br>&#x2F;&#x2F; 在Mysql中创建getParentList函数</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DEFINER</span>=`root`@`%` <span class="hljs-keyword">FUNCTION</span> `getParentList`(rootId <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)) <span class="hljs-keyword">RETURNS</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) CHARSET utf8mb4 <span class="hljs-keyword">COLLATE</span> utf8mb4_general_ci<br><span class="hljs-keyword">BEGIN</span><br>    <span class="hljs-keyword">DECLARE</span> fid <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">DECLARE</span> str <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">default</span> rootId;<br>    <span class="hljs-keyword">WHILE</span> rootId <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>  <span class="hljs-keyword">do</span><br>     <span class="hljs-keyword">SET</span> fid =(<span class="hljs-keyword">SELECT</span> PID <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">WHERE</span> ID = rootId);<br>     <span class="hljs-keyword">IF</span> fid <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">THEN</span><br>         <span class="hljs-keyword">SET</span> str = concat(str, <span class="hljs-string">&#x27;,&#x27;</span>, fid);<br>         <span class="hljs-keyword">SET</span> rootId = fid;<br>     <span class="hljs-keyword">ELSE</span><br>         <span class="hljs-keyword">SET</span> rootId = fid; <br>     <span class="hljs-keyword">END</span> <span class="hljs-keyword">IF</span>;<br><span class="hljs-keyword">END</span> <span class="hljs-keyword">WHILE</span>;<br><span class="hljs-keyword">return</span> str;<br><span class="hljs-keyword">END</span><br>// 业务中直接调用函数<br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> FIND_IN_SET(id,getParentList(<span class="hljs-number">5</span>));<br>   <br>CTE<br>CTE，全名 Common <span class="hljs-keyword">Table</span> Expressions<br> <br><span class="hljs-keyword">WITH</span><br>  cte1 <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> a, b <span class="hljs-keyword">FROM</span> table1),<br>  cte2 <span class="hljs-keyword">AS</span> (<span class="hljs-keyword">SELECT</span> c, d <span class="hljs-keyword">FROM</span> table2)<br><span class="hljs-keyword">SELECT</span> b, d <span class="hljs-keyword">FROM</span> cte1 <span class="hljs-keyword">JOIN</span> cte2<br><span class="hljs-keyword">WHERE</span> cte1.a = cte2.c;<br> <br></code></pre></td></tr></table></figure><p>cte1, cte2 为我们定义的CTE，可以在当前查询中引用</p><p>递归查询<br>先来看下递归查询的语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">WITH</span> <span class="hljs-keyword">RECURSIVE</span> cte_name <span class="hljs-keyword">AS</span><br>(<br>    <span class="hljs-keyword">SELECT</span> ...      <span class="hljs-comment">-- return initial row set</span><br>    <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">ALL</span> <span class="hljs-operator">/</span> <span class="hljs-keyword">UNION</span> <span class="hljs-keyword">DISTINCT</span><br>    <span class="hljs-keyword">SELECT</span> ...      <span class="hljs-comment">-- return additional row sets</span><br>)<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> cte;<br> <br></code></pre></td></tr></table></figure><p>定义一个CTE，这个CTE 最终的结果集就是我们想要的 ”递归得到的树结构&quot;，RECURSIVE 代表当前 CTE 是递归的<br>第一个SELECT 为 “初始结果集”<br>第二个SELECT 为递归部分，利用 &quot;初始结果集&#x2F;上一次递归返回的结果集&quot; 进行查询得到 “新的结果集”<br>直到递归部分结果集返回为null，查询结束<br>最终UNION ALL 会将上述<a href="https://huue.cc/index.php/tag/%E6%AD%A5%E9%AA%A4/">步骤</a>中的所有结果集合并（UNION DISTINCT 会进行去重），再通过 SELECT * FROM cte; 拿到所有的结果集<br>可以参考下MySQL<a href="https://huue.cc/index.php/tag/%E5%BC%80%E5%8F%91/">开发</a>文档：<br><a href="https://dev.mysql.com/doc/refman/8.0/en/with.html">https://dev.mysql.com/doc/refman/8.0/en/with.html</a><br><a href="https://dev.mysql.com/doc/refman/8.0/en/with.html#common-table-expressions-recursive-examples">https://dev.mysql.com/doc/refman/8.0/en/with.html#common-table-expressions-recursive-examples</a><br><a href="https://huue.cc/index.php/tag/%E6%96%87%E7%AB%A0/">文章</a>来源于:<a href="https://blog.tius.cn/archives/260">https://blog.tius.cn/archives/260</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>使用Postfix发送邮件</title>
    <link href="/2021/07/10/%E4%BD%BF%E7%94%A8Postfix%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/"/>
    <url>/2021/07/10/%E4%BD%BF%E7%94%A8Postfix%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>下面介绍在<code>Ubuntu</code>下使用<code>Postfix</code>发送邮件的方法</p><h1 id="安装Postfix"><a href="#安装Postfix" class="headerlink" title="安装Postfix"></a>安装Postfix</h1><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install postfix <br>sudo apt-<span class="hljs-built_in">get</span> install mailutils<br></code></pre></td></tr></table></figure><p>我这边是按照默认配置安装的。</p><h1 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/postfix/main.cf<br></code></pre></td></tr></table></figure><p>将<code>myhostname</code>修改为<code>localhost</code></p><h1 id="启动Postfix服务"><a href="#启动Postfix服务" class="headerlink" title="启动Postfix服务"></a>启动Postfix服务</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">service postfix <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><h1 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mailx -r root@chengyao.xyz -s &amp;quot;Subject&amp;quot; 987861463@qq.com &amp;lt; ./log.txt<br></code></pre></td></tr></table></figure><p>上面步骤没有测试，可行性未知</p><p>如果有发送附件但发送失败，可以查看<code>/var/log/mail.log</code>文件，如果是<code>message file too big</code>,可以输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">postconf -e &amp;quot;message_size_limit=409600000&amp;quot;            //设置400MB<br></code></pre></td></tr></table></figure><p>将允许的大小改大些。</p><h1 id="mailx命令"><a href="#mailx命令" class="headerlink" title="mailx命令"></a>mailx命令</h1><p>mailx命令相关命令的有：mail,sendmail.</p><p>语法</p><p>mailx [选项] [名字]</p><p>说明</p><p>本命令用于发送和接收邮件，名字是收信人的用户名，本命令有许多选项，选项说明如下：</p><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs ldif"><span class="hljs-literal">-</span>A：执行帐户的命令的名称启动文件被读取之后。<br><span class="hljs-literal">-</span>a：给定的文件附加到邮件中。<br><span class="hljs-literal">-</span>B：使标准输入和标准输出线-缓冲。<br><span class="hljs-literal">-</span>b：发送密件副本列表。列表应该是一个逗号分隔的名称列表。<br><span class="hljs-literal">-</span>c：送炭复制到地址列表。<br><span class="hljs-literal">-</span>D：开始在断开模式; 看到断开的变量的描述选项。<br><span class="hljs-literal">-</span>d：启用调试消息和关闭消息的实际交付。 不像-v，此选项仅用于开发目的。<br><span class="hljs-literal">-</span>e：只是检查是否有邮件系统邮箱。 如果是，返回零，否则，一个非零值退出状态。<br><span class="hljs-literal">-</span>E：如果传出消息，不包含在它的第一个或唯一的消息部分的任何文字，不要把它丢弃，但它静静地，有效地设置在程序启动时的skipemptybody变量。这是一个从发送消息有用 的脚本由启动cron的。<br><span class="hljs-literal">-</span>f：阅读在用户的邮箱中的内容（或文件时 ，如果指定）进行处理; 当mailx的是退出，将其写入未删除的邮件恢复该文件。 该字符串作为文件处理描述为文件夹命令如下。<br><span class="hljs-literal">-</span>F：保存要发送的消息中的第一个收件人的地址的本地部分命名的文件。<br><span class="hljs-literal">-</span>H：打印头汇总所有消息并退出。<br><span class="hljs-literal">-</span>h：调用的sendmail与指定的跃点数。此选项没有在使用SMTP发送邮件的效果。<br><span class="hljs-literal">-</span>i：TTY忽略中断信号。使用mailx的对噪音的电话线时，这是非常有用的。<br><span class="hljs-literal">-</span>I：显示了“ 新闻组：&amp;<span class="hljs-comment">#039;或&amp;#039; 文章ID：&amp;#039;在标题汇总字段。只有在与-f结合使用时适用。</span><br><span class="hljs-literal">-</span>n：禁止阅读/etc/mail.rc启动时。这个选项应该适用于对多台计算机调用mailx的脚 本来启动，因为文件的内容，它们之间可能有所不同。<br><span class="hljs-literal">-</span>N：阅读邮件或编辑邮件文件夹时禁止消息头的初始显示。<br><span class="hljs-literal">-</span>q：启动与指定的文件的内容的消息。 可仅在发送模式给出。<br><span class="hljs-literal">-</span>r：设置发件人地址。忽略任何从指定的变量环境变量或启动文件。波浪号逃逸被禁用。该-r地址选项被传递到邮件传输代理，除非使用SMTP。此选项存在唯一的相容性;它建议，而不是直接设置从变量。<br><span class="hljs-literal">-</span>R：如果打开文件夹的只读打开它们。<br><span class="hljs-literal">-</span>s：指定主题的命令行（仅后-s标志作为主题的第一个参数，要注意引用包含空格的科目）。<br><span class="hljs-literal">-</span>S：设置内部选项变量变量的可选值的价值 。<br><span class="hljs-literal">-</span>T：写“ 邮件ID：”和“ 文章ID：&amp;<span class="hljs-comment">#039;读入文件名 ??的每个消息头字段。暗示我压缩文件的处理所描述的文件夹命令如下。</span><br><span class="hljs-literal">-</span>t：要发送的消息，预计将包含一个消息头“收件人：”，“抄送”或“密件抄送：”字段给收件人。 在命令行上指定的收件人将被忽略。<br><span class="hljs-literal">-</span>u：读取用户的用户的邮箱。<br><span class="hljs-literal">-</span>v：详细模式。 递送的详细信息显示在用户的终端上。<br><span class="hljs-literal">-</span>V：显示版本信息并退出。<br><span class="hljs-literal">-</span> ?：启用波浪逃逸 ，即使不是在交互模式。<br></code></pre></td></tr></table></figure><p>命令内说明</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs excel">. 当前信件<br><span class="hljs-built_in">n</span> 第 <span class="hljs-built_in">n</span> 封信<br>^ 第一封未被处理的信<br>$ 最后一封信<br>* 所有的信<br><span class="hljs-built_in">n</span>-m 第<span class="hljs-built_in">n</span>封至第m封信<br>/ 字符串 标题中包含字符串的信<br>：c 满足指定类型c的信，类型可为<br>d 已删除的信<br><span class="hljs-built_in">n</span> 信传送的信<br>o 旧信件<br>r 已读过的信<br>u 未读过的信<br>p 一次显示多封信<br><span class="hljs-built_in">t</span> 显示某封信的前若干行<br>si 显示信件字符数<br>h 显示信件标题<br>d 删除信件<br>u 恢复信件<br>s [信件表] 文件名<br>将信件存入指定文件中<br>q 退出<br>r 回信<br>~e 编辑信件<br>~r 文件 从文件中读取信件<br></code></pre></td></tr></table></figure><p>实例</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mailx</span> -s &amp;quot;test&amp;quot; -a <span class="hljs-number">1</span>.txt &amp;#<span class="hljs-number">039</span>;mytest@ywnz.com&amp;#<span class="hljs-number">039</span>; &amp;lt; <span class="hljs-number">2</span>.txt　#test为标题,<span class="hljs-number">1</span>.txt附 件,<span class="hljs-number">2</span>.txt正文,发送给mytest@<span class="hljs-number">123</span>.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL优化相关总结</title>
    <link href="/2021/07/06/SQL%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/"/>
    <url>/2021/07/06/SQL%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL执行顺序"><a href="#SQL执行顺序" class="headerlink" title="SQL执行顺序"></a>SQL执行顺序</h1><p>原文链接：<a href="https://blog.csdn.net/u011277123/article/details/54691260">https://blog.csdn.net/u011277123/article/details/54691260</a></p><p>#Pgsql 执行计划<br><a href="http://mysql.taobao.org/monthly/2018/11/06/">http://mysql.taobao.org/monthly/2018/11/06/</a></p><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>在数据库应用中，程序员们通过不断的实践总结了很多经验，这些经验是一些普遍适用的规则。每一个程序员都应该了解并记住它们，在构造SQL语句时，养成良好的习惯。以下10条比较重要的原则供大家参考。</p><p>原则1：尽量避免在列上做运算，这样会导致索引失败。例如原句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> t <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">YEAR</span>(d) <span class="hljs-operator">&amp;</span>gt;<span class="hljs-operator">=</span> <span class="hljs-number">2011</span>;<br></code></pre></td></tr></table></figure><p>优化为：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">SELECT</span> * FROM t WHERE ｄ　&amp;gt;= ‘<span class="hljs-number">2011</span>-<span class="hljs-number">01</span>-<span class="hljs-number">01</span>’;<br></code></pre></td></tr></table></figure><p>原则2：使用join时，应该用小结果集驱动大结果集。同时把复杂的join查询拆分成多个query。因为join多个表时，可能导致更多的锁定和堵塞。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> a <span class="hljs-keyword">JOIN</span> b <span class="hljs-keyword">ON</span> a.id <span class="hljs-operator">=</span> b.id<br><br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> c <span class="hljs-keyword">ON</span> c.time <span class="hljs-operator">=</span> a.date<br><br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> d <span class="hljs-keyword">ON</span> c.pid <span class="hljs-operator">=</span> b.aid<br><br><span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> e <span class="hljs-keyword">ON</span> e.cid <span class="hljs-operator">=</span> a.did<br></code></pre></td></tr></table></figure><p>原则3：注意like模糊查询的使用，避免%%。例如原句为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> t <span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span> <span class="hljs-keyword">LIKE</span> ‘%de%’<br></code></pre></td></tr></table></figure><p>优化为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> t <span class="hljs-keyword">WHERE</span> <span class="hljs-type">name</span> &amp;gt;= ‘de’<span class="hljs-keyword">AND</span> <span class="hljs-type">name</span> &amp;lt;= ‘df’<br></code></pre></td></tr></table></figure><p>原则4：仅列出需要查询的字段，这对速度不会有明显的影响，主要考虑节省内存。例如原句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">Member</span>；<br></code></pre></td></tr></table></figure><p>优化为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> id,<span class="hljs-type">name</span>,pwd <span class="hljs-keyword">FROM</span> Member;<br></code></pre></td></tr></table></figure><p>原则5：使用批量插入语句节省交互。例如原句为：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t(id,<span class="hljs-type">name</span>)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">1</span>,’a’);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t(id,<span class="hljs-type">name</span>)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">2</span>,’b’);<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t(id,<span class="hljs-type">name</span>)<span class="hljs-keyword">VALUES</span>(<span class="hljs-number">3</span>,’c’);<br></code></pre></td></tr></table></figure><p>优化为：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">INSERT INTO <span class="hljs-built_in">t</span>(id,name)<span class="hljs-built_in">VALUES</span>(<span class="hljs-number">1</span>,’a’),(<span class="hljs-number">2</span>,’b’),(<span class="hljs-number">3</span>,’c’);<br></code></pre></td></tr></table></figure><p>原则6：limit的基数比较大的时候使用between。例如原句为：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> article <span class="hljs-keyword">AS</span> article RODER <span class="hljs-keyword">BY</span> id <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">1000000</span>,<span class="hljs-number">10</span>;<br></code></pre></td></tr></table></figure><p>优化为：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> article <span class="hljs-keyword">AS</span> article <span class="hljs-keyword">WHERE</span> id <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">1000000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">1000010</span> RODER <span class="hljs-keyword">BY</span> id;<br></code></pre></td></tr></table></figure><p>Between限定比limit快，所以海量数据访问时，建议between或是where替换掉limit。但是between也有缺陷，如果id中间有断行或是中间部分id不读取的情况，总读取的数量会少于预计数量！</p><p>在取比较后面的数据时，通过desc方式把数据反向查找，以减少对前段数据的扫描，让limit的基数越小越好！</p><p>原则7：不要使用rand()函数获取多条随机记录。例如：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> rand() <span class="hljs-keyword">limit</span> <span class="hljs-number">20</span>;<br></code></pre></td></tr></table></figure><p>使用下面的语句代替：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">Select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> ‘<span class="hljs-keyword">table</span>’<span class="hljs-keyword">as</span> t1 <span class="hljs-keyword">join</span>(<span class="hljs-keyword">select</span> rand(rand() <span class="hljs-operator">*</span> ((<span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(id) <span class="hljs-keyword">from</span> ‘<span class="hljs-keyword">table</span>’)<span class="hljs-operator">-</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(id) <span class="hljs-keyword">from</span> ‘<span class="hljs-keyword">table</span>’))<span class="hljs-operator">+</span>(<span class="hljs-keyword">select</span> <span class="hljs-built_in">min</span>(id) <span class="hljs-keyword">from</span> ‘<span class="hljs-keyword">table</span>’))<span class="hljs-keyword">as</span> id) <span class="hljs-keyword">as</span> t2 <span class="hljs-keyword">where</span> t1.id <span class="hljs-operator">&amp;</span>gt;<span class="hljs-operator">=</span> t2.id <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> t1.id limit <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>这是获取一条随机记录，这样即使执行20次，也比原来的语句高效。或者先用php产生随机数，把这个字符串传给MySQL，MySQL里用in查询。</p><p>原则8：避免使用null。</p><p>原则9：不要使用count(*)，而应该是count(1)。</p><p>原则10：不要做无谓的排序操作，而尽可能在索引中完成排序。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Mysql基础命令及语法笔记</title>
    <link href="/2021/07/05/Mysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E5%8F%8A%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/07/05/Mysql%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E5%8F%8A%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="show-命令"><a href="#show-命令" class="headerlink" title="show 命令"></a>show 命令</h1><blockquote><p>help show 查看允许的show语句</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases<br><span class="hljs-keyword">show</span> tables<br><span class="hljs-keyword">show</span> [<span class="hljs-keyword">full</span>] columns <span class="hljs-keyword">from</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span><span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> database <span class="hljs-operator">&lt;</span>name<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">show</span> status<br><span class="hljs-keyword">show</span> grants<br><span class="hljs-keyword">show</span> errors<br><span class="hljs-keyword">show</span> warnings<br></code></pre></td></tr></table></figure><h1 id="set-names"><a href="#set-names" class="headerlink" title="set names"></a>set names</h1><p>设置编码</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> names <span class="hljs-comment">&#x27;utf8&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="select"><a href="#select" class="headerlink" title="select"></a>select</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">column</span><span class="hljs-operator">&gt;</span> <span class="hljs-keyword">from</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>对于order by , <code>A</code> 和 <code>a</code> 不一定相同（在mysql中默认相同【字典排序】），取决于数据库怎么设计，通常可以改变这种行为。</p></blockquote><blockquote><p>对于没有排序的语句，返回的结果集的顺序没有特殊意义，又可能按照插入表的顺序，也有可能不是，只要返回总数正确，就是正常的。</p></blockquote><h2 id="正则"><a href="#正则" class="headerlink" title="正则"></a>正则</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> name REGEXP <span class="hljs-type">BINARY</span> <span class="hljs-string">&#x27;^cheng.*g$&#x27;</span> <span class="hljs-comment">--使用BINARY来区分大小写</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> information <span class="hljs-keyword">WHERE</span> salary REGEXP <span class="hljs-string">&#x27;1000|2000&#x27;</span> <span class="hljs-comment">--OR匹配</span><br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> name REGEXT <span class="hljs-string">&#x27;[cz]ong&#x27;</span> <span class="hljs-comment">-- 单一字符，会匹配cong / zong； 可以使用否定 例如：[^cz]</span><br></code></pre></td></tr></table></figure><blockquote><p>其他支持的正则 [0-9], \\-（特殊字符）-, 也可以用来引用元字符，例如\\f (换页)， \\n （换行），\\r （换行）, \\t （制表）, \\v （纵向制表），\\ （反斜线），多数正则表达式使用单个反斜线转义特殊字符，mysql要求使用两个，一个由mysql解析，另外一个由正则表达式库解析。</p></blockquote><p>like 也支持binary来区分大小写 <code>like binary</code>, 大小写主要取决于表的校对规则collect</p><h3 id="字符类（character-class）"><a href="#字符类（character-class）" class="headerlink" title="字符类（character class）"></a>字符类（character class）</h3><table><thead><tr><th>类</th><th>说明</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>任意字母和数字.(同[ a-zA-Z0-9])</td></tr><tr><td>[:alpha:]</td><td>任意字符（同[ a-zA-Z])</td></tr><tr><td>[:blank:]</td><td>空格和制表（同[ \lt])</td></tr><tr><td>[:cntrl:]</td><td>ASCII控制字符（ASCII 0到31和127)</td></tr><tr><td>[:digit:]</td><td>任意数字（同[0-9])</td></tr><tr><td>[:graph:]</td><td>与[ :print : ]相同，但不包括空格</td></tr><tr><td>[:lower:]</td><td>任意小写字母(同[ a-z])</td></tr><tr><td>[:print:]</td><td>任意可打印字符</td></tr><tr><td>[:punct:]</td><td>既不在[ :alnum: ]又不在[ :cntrl: ]中的任意字符</td></tr><tr><td>[:space:]</td><td>包括空格在内的任意空白字符（同[ \lf\ln \lrlltllv])</td></tr><tr><td>[:upper:]</td><td>任意大写字母(同[A-Z])</td></tr><tr><td>[:xdigit:]</td><td>任意十六进制数字（同[ a-fA-FO-9])</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> contracts <span class="hljs-keyword">where</span> amount regexp <span class="hljs-string">&#x27;[[:digit:]]&#123;2,4&#125;&#x27;</span><br><span class="hljs-comment">-- 匹配2到四位数字</span><br></code></pre></td></tr></table></figure><h3 id="匹配多个实例"><a href="#匹配多个实例" class="headerlink" title="匹配多个实例"></a>匹配多个实例</h3><p>支持<code>*</code>,<code>+</code>, <code>?</code>, <code>&#123;n&#125;</code>, <code>&#123;n,&#125;</code>, <code>&#123;n,m&#125;</code> 其中m不能大于255 （mysql8测试可以输入大于255的数字，但是有没有效果没有测试）</p><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><table><thead><tr><th>元字符</th><th>说明</th></tr></thead><tbody><tr><td>^</td><td>文本的开始</td></tr><tr><td>$</td><td>文本的结尾</td></tr><tr><td>[[:&lt;:]]</td><td>词的开始</td></tr><tr><td>[[:&gt;:]]</td><td>词的结尾</td></tr></tbody></table><blockquote><p>匹配词的边界，兼容perl的正则表达式通常使用\b单词边界 或者\B 非单词边界</p></blockquote><p>使REGEXP起类似LIKE的作用， LIKE和REGEXP的不同在于、LIKE匹配整个串而REGEXP匹配子串。利用定位符,通过用^开始每个表达式，用$结束每个表达式可以使REGEXP的作用与LIKE一样。</p><blockquote><p>简单的正则表达式测试可以在不使用数据库表的情况下用SELECT来测试正则表达式。 REGEXP检查总是返回0(没有匹配）或1(匹配）。可以用带文字串的REGEXP来测试表达式，并试验它们。相应的语法如下:</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-string">&#x27;hello&#x27;</span> REGEXP <span class="hljs-string">&#x27;[0-9]&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h2><h3 id="拼接（concatenate）字段或者字符串"><a href="#拼接（concatenate）字段或者字符串" class="headerlink" title="拼接（concatenate）字段或者字符串"></a>拼接（concatenate）字段或者字符串</h3><blockquote><p>多数数据库采用<code>||</code>或者<code>+</code> 来拼接，而Mysql使用concat() 函数拼接。</p></blockquote><h3 id="删除多余空格"><a href="#删除多余空格" class="headerlink" title="删除多余空格"></a>删除多余空格</h3><p><code>rtrim()</code> <code>ltrim()</code> <code>trim()</code></p><p><code>AS</code> 别名，可以用来创建一个计算字段，当列名不符合规定的字符例如包含空格的时候可以使用别名代替，在原名易混淆时候扩充它。别名也称作<code>导出列（derivid column）</code></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>LEFT(Str,length)</td><td>返回串左边的字符</td></tr><tr><td>Length()</td><td>返回串的长度</td></tr><tr><td>Locate()</td><td>找出一个串的子串</td></tr><tr><td>Lower()</td><td>将串转为小写</td></tr><tr><td>Ltrim()</td><td>去掉左边的空格</td></tr><tr><td>Right()</td><td>返回串右边的字符</td></tr><tr><td>Rtrim()</td><td>去掉右边空格</td></tr><tr><td>Soundex()</td><td>发音接近</td></tr><tr><td>SubString()</td><td>返回子串的字符</td></tr><tr><td>Upper()</td><td>将串转为大写</td></tr><tr><td>LOCATE(substr,str)</td><td>寻找子串位置，返回数字，0表示没有找到</td></tr><tr><td>LOCATE(substr,str,pos)</td><td></td></tr><tr><td>POSITION(substr IN str)</td><td></td></tr><tr><td>INSTR(str,substr)</td><td></td></tr><tr><td>REVERSE(Str)</td><td>翻转</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> party_course_study<br><span class="hljs-keyword">WHERE</span> LOCATE(findCode, <span class="hljs-string">&#x27;00001&#x27;</span>) <span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><br> <br><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 注：Mybatis使用场景，需要加 <span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span>[CDATA[ ]]<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <br><span class="hljs-keyword">FROM</span> party_course_study<br><span class="hljs-keyword">WHERE</span> <span class="hljs-operator">&lt;</span><span class="hljs-operator">!</span>[CDATA[ LOCATE(findCode, <span class="hljs-string">&#x27;00001&#x27;</span>) <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span> ]]<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>表中的SOUNDEX需要做进一步的解释。SOUNDEX是一个将任何文本串转换为描述其语音表示的字母数字模式的算法。SOUNDEX考虑了类似的发音字符和音节，使得能对串进行发音比较而不是字母比较。虽然SOUNDEX不是SQL概念，但MySQL（就像多数DBMS一样）都提供对SOUNDEX的支持。</p></blockquote><h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>AddDate()</td><td>增加一个日期（天、周等）</td></tr><tr><td>AddTime()</td><td>增加一个时间（时、分等）</td></tr><tr><td>CurDate()</td><td>返回当前日期</td></tr><tr><td>CurTime ()</td><td>返回当前时间</td></tr><tr><td>Date()</td><td>返回日期时间的日期部分</td></tr><tr><td>DateDiff ()</td><td>计算两个日期之差</td></tr><tr><td>Date_Add()</td><td>高度灵活的日期运算函数</td></tr><tr><td>Date Format ()</td><td>返回一个格式化的日期或时间串</td></tr><tr><td>Day()</td><td>返回一个日期的天数部分</td></tr><tr><td>DayOfWeek()</td><td>对千一个日期， 返回对应的星期几</td></tr><tr><td>Hour()</td><td>返回一个时间的小时部分</td></tr><tr><td>minute()</td><td>返回一个时间的分钟部分</td></tr><tr><td>Month ()</td><td>返回一个日期的月份部分</td></tr><tr><td>Now()</td><td>返回当前日期和时间</td></tr><tr><td>Second()</td><td>返回一个时间的秒部分</td></tr><tr><td>Time ()</td><td>返回一个日期时间的时间部分</td></tr><tr><td>Year()</td><td>返回一个日期的年份部分</td></tr><tr><td>DATE_FORMAT(CURDATE(),’%Y%m’)</td><td>结果为当前年和月</td></tr><tr><td>CURRENT_TIMESTAM</td><td>当前时间戳</td></tr><tr><td>CURRENT_TIME</td><td>当前时间</td></tr><tr><td>CURRENT_DATE</td><td>当前日期</td></tr></tbody></table><p>mysql查询今天、昨天、本周、本月、上一月 、今年数据</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">--今天</span><br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> to_days(时间字段名) = to_days(now());<br><br><span class="hljs-comment">--昨天</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> TO_DAYS( NOW( ) ) - TO_DAYS( 时间字段名) &amp;lt;= <span class="hljs-number">1</span><br><br><span class="hljs-comment">--本周</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span>  表名 <span class="hljs-keyword">WHERE</span> YEARWEEK( date_format(  时间字段名,<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span> ) ) = YEARWEEK( now() ) ;<br><br><span class="hljs-comment">--本月</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span>  表名 <span class="hljs-keyword">WHERE</span> DATE_FORMAT( 时间字段名, <span class="hljs-string">&#x27;%Y%m&#x27;</span> ) = DATE_FORMAT( CURDATE( ) ,<span class="hljs-string">&#x27;%Y%m&#x27;</span> ) <br><br><span class="hljs-comment">--上一个月</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span>  表名 <span class="hljs-keyword">WHERE</span> PERIOD_DIFF(date_format(now(),<span class="hljs-string">&#x27;%Y%m&#x27;</span>),date_format(时间字段名,<span class="hljs-string">&#x27;%Y%m&#x27;</span>) =<span class="hljs-number">1</span><br><br><span class="hljs-comment">--本年</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> YEAR(  时间字段名 ) = YEAR( NOW( ) ) <br><br><br><span class="hljs-comment">--上一月</span><br><br><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> 表名 <span class="hljs-keyword">WHERE</span> PERIOD_DIFF( date_format( now( ) , <span class="hljs-string">&#x27;%Y%m&#x27;</span> ) , date_format( 时间字段名, <span class="hljs-string">&#x27;%Y%m&#x27;</span> ) ) =<span class="hljs-number">1</span><br><br><br><br><span class="hljs-comment">--查询本季度数据</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> `ht_invoice_information` <span class="hljs-keyword">where</span> QUARTER(create_date)=QUARTER(now());<br><span class="hljs-comment">--查询上季度数据</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> `ht_invoice_information` <span class="hljs-keyword">where</span> QUARTER(create_date)=QUARTER(DATE_SUB(now(),<span class="hljs-type">interval</span> <span class="hljs-number">1</span> QUARTER));<br><span class="hljs-comment">--查询本年数据</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> `ht_invoice_information` <span class="hljs-keyword">where</span> YEAR(create_date)=YEAR(NOW());<br><span class="hljs-comment">--查询上年数据</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> `ht_invoice_information` <span class="hljs-keyword">where</span> year(create_date)=year(date_sub(now(),<span class="hljs-type">interval</span> <span class="hljs-number">1</span> year));<br><br><br><br><br><span class="hljs-comment">--查询当前这周的数据 </span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-type">name</span>,submittime <span class="hljs-keyword">FROM</span> enterprise <span class="hljs-keyword">WHERE</span> YEARWEEK(date_format(submittime,<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)) = YEARWEEK(now());<br><br><span class="hljs-comment">--查询上周的数据</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-type">name</span>,submittime <span class="hljs-keyword">FROM</span> enterprise <span class="hljs-keyword">WHERE</span> YEARWEEK(date_format(submittime,<span class="hljs-string">&#x27;%Y-%m-%d&#x27;</span>)) = YEARWEEK(now())<span class="hljs-number">-1</span>;<br><br><span class="hljs-comment">--查询当前月份的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-type">name</span>,submittime <span class="hljs-keyword">from</span> enterprise   <span class="hljs-keyword">where</span> date_format(submittime,<span class="hljs-string">&#x27;%Y-%m&#x27;</span>)=date_format(now(),<span class="hljs-string">&#x27;%Y-%m&#x27;</span>)<br><br><span class="hljs-comment">--查询距离当前现在6个月的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-type">name</span>,submittime <span class="hljs-keyword">from</span> enterprise <span class="hljs-keyword">where</span> submittime <span class="hljs-keyword">between</span> date_sub(now(),<span class="hljs-type">interval</span> <span class="hljs-number">6</span> month) <span class="hljs-keyword">and</span> now();<br><br><span class="hljs-comment">--查询上个月的数据</span><br><span class="hljs-keyword">select</span> <span class="hljs-type">name</span>,submittime <span class="hljs-keyword">from</span> enterprise   <span class="hljs-keyword">where</span> date_format(submittime,<span class="hljs-string">&#x27;%Y-%m&#x27;</span>)=date_format(DATE_SUB(curdate(), <span class="hljs-type">INTERVAL</span> <span class="hljs-number">1</span> MONTH),<span class="hljs-string">&#x27;%Y-%m&#x27;</span>)<br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> ` <span class="hljs-keyword">user</span> ` <span class="hljs-keyword">where</span> DATE_FORMAT(pudate, <span class="hljs-string">&#x27; %Y%m &#x27;</span> ) = DATE_FORMAT(CURDATE(), <span class="hljs-string">&#x27; %Y%m &#x27;</span> ) ;<br><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> WEEKOFYEAR(FROM_UNIXTIME(pudate,<span class="hljs-string">&#x27;%y-%m-%d&#x27;</span>)) = WEEKOFYEAR(now())<br><br><span class="hljs-keyword">select</span> * <br><span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <br><span class="hljs-keyword">where</span> MONTH (FROM_UNIXTIME(pudate, <span class="hljs-string">&#x27; %y-%m-%d &#x27;</span> )) = MONTH (now())<br><br><span class="hljs-keyword">select</span> * <br><span class="hljs-keyword">from</span> [ <span class="hljs-keyword">user</span> ] <br><span class="hljs-keyword">where</span> YEAR (FROM_UNIXTIME(pudate, <span class="hljs-string">&#x27; %y-%m-%d &#x27;</span> )) = YEAR (now())<br><span class="hljs-keyword">and</span> MONTH (FROM_UNIXTIME(pudate, <span class="hljs-string">&#x27; %y-%m-%d &#x27;</span> )) = MONTH (now())<br><br><span class="hljs-keyword">select</span> * <br><span class="hljs-keyword">from</span> [ <span class="hljs-keyword">user</span> ] <br><span class="hljs-keyword">where</span> pudate <span class="hljs-keyword">between</span> 上月最后一天<br><span class="hljs-keyword">and</span> 下月第一天<br><br><span class="hljs-keyword">where</span>   <span class="hljs-type">date</span>(regdate)   =   curdate();<br><br><span class="hljs-keyword">select</span>   *   <span class="hljs-keyword">from</span>   test   <span class="hljs-keyword">where</span>   year(regdate)=year(now())   <span class="hljs-keyword">and</span>   month(regdate)=month(now())   <span class="hljs-keyword">and</span>   day(regdate)=day(now())<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-type">date</span>( c_instime ) ,curdate( )<br><span class="hljs-keyword">FROM</span> `t_score`<br><span class="hljs-keyword">WHERE</span> <span class="hljs-number">1</span><br><span class="hljs-keyword">LIMIT</span> <span class="hljs-number">0</span> , <span class="hljs-number">30</span><br></code></pre></td></tr></table></figure><h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>Abs ()</td><td>返回一个数的绝对值</td></tr><tr><td>Cos ()</td><td>返回一个角度的余弦</td></tr><tr><td>Exp ()</td><td>返回一个数的指数值</td></tr><tr><td>Mod ()</td><td>返回除操作的余数</td></tr><tr><td>Pi（）</td><td>返回圆周率</td></tr><tr><td>Rand ()</td><td>返回一个随机数</td></tr><tr><td>Sin ()</td><td>返回一个角度的正弦</td></tr><tr><td>Sqrt()</td><td>返回一个数的平方根</td></tr><tr><td>Tan ()</td><td>返回一个角度的正切</td></tr></tbody></table><h2 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h2><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>AVG()</td><td>返回某列的平均值</td></tr><tr><td>COUNT()</td><td>返回某列的行数</td></tr><tr><td>MAX()</td><td>返回某列的最大值</td></tr><tr><td>MIN()</td><td>返回某列的最小值</td></tr><tr><td>SUM()</td><td>返回某列值之和</td></tr></tbody></table><blockquote><p>不可以使用distinct <em>, count(</em>) 包含null，count(字段) 不包含null，；利用标准运算符，所有的聚集函数都可以执行多个列的运算</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-keyword">distinct</span> cid) <span class="hljs-keyword">from</span> notes;<br></code></pre></td></tr></table></figure><p>聚合函数可以聚合多个列的计算值，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">sum</span>(price <span class="hljs-operator">*</span> stock) <span class="hljs-keyword">from</span> products;<br></code></pre></td></tr></table></figure><h2 id="concat系列函数"><a href="#concat系列函数" class="headerlink" title="concat系列函数"></a>concat系列函数</h2><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><p><strong>mysql</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> concat(id, <span class="hljs-type">name</span>) <span class="hljs-keyword">as</span> id_and_name <span class="hljs-keyword">from</span> users;<br></code></pre></td></tr></table></figure><p>返回两个字段拼接的值，如果有一个字段的值为null，则返回null</p><p><strong>oracle, psql</strong></p><p>可以使用<code>||</code>来分割，例如</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> id || <span class="hljs-type">name</span> <span class="hljs-keyword">as</span> id_and_name <span class="hljs-keyword">from</span> users;<br></code></pre></td></tr></table></figure><p>好像是上面这么写的，好久没用了。</p><h3 id="concat-ws"><a href="#concat-ws" class="headerlink" title="concat_ws"></a>concat_ws</h3><blockquote><p>concat with separator, 使用分隔符分割</p></blockquote><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> concat_ws(<span class="hljs-string">&#x27;,&#x27;</span>, id, <span class="hljs-type">name</span>) <span class="hljs-keyword">as</span> id_and_name <span class="hljs-keyword">from</span> users;<br></code></pre></td></tr></table></figure><p>返回结果例如，分隔符如果为null则返回null</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">id</span> = <span class="hljs-number">1</span>, name = <span class="hljs-number">2</span><br><span class="hljs-attribute">id_and_name</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="group-concat"><a href="#group-concat" class="headerlink" title="group_concat"></a>group_concat</h3><ul><li>功能：将<code>group by</code>产生的同一个分组中的值连接起来，返回一个字符串结果。</li><li>语法：<code>group_concat( [distinct] 要连接的字段 [order by 排序字段 asc/desc ] [separator &#39;分隔符&#39;])</code></li></ul><blockquote><p>在有group by的查询语句中，select指定的字段要么就包含在group by语句的后面，作为分组的依据，要么就包含在聚合函数中</p></blockquote><p>例如，查询相同姓名中年龄最小的用户</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-type">name</span>, min(age) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-type">name</span>;<br></code></pre></td></tr></table></figure><p>如果要查出所有</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-type">name</span>, age <span class="hljs-keyword">from</span> users <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> age;<br></code></pre></td></tr></table></figure><p>则name可能重复，可以使用group_concat</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> <span class="hljs-type">name</span>, group_concat(age) <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <span class="hljs-type">name</span>; <br></code></pre></td></tr></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p><code>group by</code> 必须出现在<code>where</code>之后<code>order by</code>之前</p><p>使用<code>with rollup</code> 可以获取分组汇总级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(id), id <span class="hljs-keyword">from</span> users <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">with</span> <span class="hljs-keyword">rollup</span>;<br></code></pre></td></tr></table></figure><p>我们经常发现用GROUP BY分组的数据确实是以分组顺序输出的。但情况并不总是这样，它并不是SQL规范所要求的。此外，用户也可能会要求以不同于分组的顺序排序。仅因为你以某种方式分组数据（获得特定的分组聚集值)，并不表示你需要以相同的方式排序输出。应该提供明确的ORDER BY子句，即使其效果等同于GROUP BY子句也是如此。</p><blockquote><p>不要忘记ORDER BY一般在使用GROUP BY子句时，应该也给出ORDER BY子句。这是保证数据正确排序的唯一方法。千万不要仅依赖GROUP BY排序数据。</p></blockquote><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="随机排序"><a href="#随机排序" class="headerlink" title="随机排序"></a>随机排序</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">order</span> <span class="hljs-title">by</span> rand()<br></code></pre></td></tr></table></figure><h2 id="取消排序"><a href="#取消排序" class="headerlink" title="取消排序"></a>取消排序</h2><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-literal">null</span> <br></code></pre></td></tr></table></figure><h2 id="自定义排序"><a href="#自定义排序" class="headerlink" title="自定义排序"></a>自定义排序</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">order</span> by field(id, <span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><p>根据id自定义排序，如果id是null或者不存在于后面的列表中则排序为0，否则按照后面给定的排序进行排序</p><h1 id="SQL子句顺序"><a href="#SQL子句顺序" class="headerlink" title="SQL子句顺序"></a>SQL子句顺序</h1><table><thead><tr><th>子句</th><th>说明</th><th>是否必须使用</th></tr></thead><tbody><tr><td>SELECT</td><td>要返回的列或表达式</td><td>是</td></tr><tr><td>FROM</td><td>从中检索数据的表</td><td>仅在从表选择数据时使用</td></tr><tr><td>WHERE</td><td>行级过滤</td><td>否</td></tr><tr><td>GROUP BY</td><td>分组说明</td><td>仅在按组计算聚集时使用</td></tr><tr><td>HAVING</td><td>组级过滤</td><td>否</td></tr><tr><td>ORDER BY</td><td>输出排序顺序</td><td>否</td></tr><tr><td>LIMIT</td><td>要检索的行数</td><td>否</td></tr></tbody></table><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> maker <span class="hljs-keyword">where</span> country_id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> country_id <span class="hljs-keyword">from</span> country);<br></code></pre></td></tr></table></figure><h1 id="联表"><a href="#联表" class="headerlink" title="联表"></a>联表</h1><p>自联结<br>内联<br>外联【左，右】<br>full join</p><h1 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h1><p>union 会去除重复行<br>union all 不会去除重复行</p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>禁用、启用索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> users disable keys; <span class="hljs-comment">--禁用</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> users enable keys; <span class="hljs-comment">--启用</span><br></code></pre></td></tr></table></figure><blockquote><p>在批量插入数据之前禁用索引，插入完成后启用索引</p></blockquote><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><h3 id="添加PRIMARY-KEY（主键索引）"><a href="#添加PRIMARY-KEY（主键索引）" class="headerlink" title="添加PRIMARY KEY（主键索引）"></a>添加PRIMARY KEY（主键索引）</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-built_in">table_name</span>` <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY KEY</span> ( `<span class="hljs-keyword">column</span>` ) <br></code></pre></td></tr></table></figure><h3 id="添加UNIQUE-唯一索引"><a href="#添加UNIQUE-唯一索引" class="headerlink" title="添加UNIQUE(唯一索引)"></a>添加UNIQUE(唯一索引)</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-built_in">table_name</span>` <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> ( `<span class="hljs-keyword">column</span>` ) <br></code></pre></td></tr></table></figure><h3 id="添加INDEX-普通索引"><a href="#添加INDEX-普通索引" class="headerlink" title="添加INDEX(普通索引)"></a>添加INDEX(普通索引)</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-built_in">table_name</span>` <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">INDEX</span> index_name ( `<span class="hljs-keyword">column</span>` ) <br></code></pre></td></tr></table></figure><h3 id="添加FULLTEXT-全文索引"><a href="#添加FULLTEXT-全文索引" class="headerlink" title="添加FULLTEXT(全文索引)"></a>添加FULLTEXT(全文索引)</h3><h4 id="建表时建立"><a href="#建表时建立" class="headerlink" title="建表时建立"></a>建表时建立</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> article ( <br>    id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">PRIMARY</span> KEY, <br>    title <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>), <br>    body TEXT, <br>    FULLTEXT(title, body) <br>) TYPE<span class="hljs-operator">=</span>MYISAM; <br></code></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `table_name` <span class="hljs-keyword">ADD</span> FULLTEXT INDEX index_name( `<span class="hljs-keyword">column</span>`, `column2`); <br></code></pre></td></tr></table></figure><h4 id="直接添加"><a href="#直接添加" class="headerlink" title="直接添加"></a>直接添加</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> FULLTEXT INDEX index_name(`<span class="hljs-keyword">column</span>`) <span class="hljs-keyword">on</span> `table_name`;<br></code></pre></td></tr></table></figure><h3 id="添加多列索引"><a href="#添加多列索引" class="headerlink" title="添加多列索引"></a>添加多列索引</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `table_name` <span class="hljs-keyword">ADD</span> INDEX index_name ( `column1`, `column2`, `column3` )<br></code></pre></td></tr></table></figure><h2 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h2><p>mysql中没有真正意义上的修改索引，只有先删除之后在创建新的索引才可以达到修改的目的，原因是mysql在创建索引时会对字段建立关系长度等，只有删除之后创建新的索引才能创建新的关系保证索引的正确性；</p><p>如：将login_name_index索引修改为单唯一索引；</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">INDEX</span> login_name_index <span class="hljs-keyword">ON</span> `<span class="hljs-keyword">user</span>`; <br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `<span class="hljs-keyword">user</span>` <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> login_name_index ( `login_name` );<br></code></pre></td></tr></table></figure><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><p>格式：<code>DROP INDEX</code> 索引名称 <code>ON</code> 表名;</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> INDEX login_name_index <span class="hljs-keyword">ON</span> <span class="hljs-string">&#x27;user&#x27;</span>;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `table_name` <span class="hljs-keyword">DROP</span> INDEX <span class="hljs-string">&#x27;index_name&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="查询索引"><a href="#查询索引" class="headerlink" title="查询索引"></a>查询索引</h2><p>格式：SHOW INDEX FROM 表名;</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">INDEX</span> <span class="hljs-keyword">FROM</span> `<span class="hljs-keyword">user</span>`;<br></code></pre></td></tr></table></figure><h2 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h2><p>全文本搜索时，MySQL不需要分别查看每个行，不需要分别分析和处理每个词。MySQL创建指定列中各词的-一个索引，搜索可以针对这些词进行。这样，MySQL可以快速有效地决定哪些词匹配(哪些行包含它们)，哪些词不匹配，它们匹配的频率，等等。</p><blockquote><p>Mysql5.7之后innodb引擎也支持全文索引</p></blockquote><p>通常在建表的时候添加fulltext索引，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> notes (<br>title text,<br>fulltext(title)<br>)engine<span class="hljs-operator">=</span>myisam;<br></code></pre></td></tr></table></figure><p>也可以使用<code>create index</code> 或者<code>alter table</code>来添加索引</p><blockquote><p>match() against() 还可以作为一个列，</p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">match</span>(<span class="hljs-params">title</span>) <span class="hljs-title">against</span>(<span class="hljs-params"><span class="hljs-string">&#x27;rabbit&#x27;</span></span>) <span class="hljs-keyword">as</span> sc <span class="hljs-keyword">from</span> notes</span>;<br></code></pre></td></tr></table></figure><p>sc 表示全文检索的计算出的等级值</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>参考：<a href="https://blog.csdn.net/suo082407128/article/details/82663113">MySQL使用全文索引(fulltext index)_椰汁菠萝-CSDN博客_fulltext index</a></p><blockquote><p>使用全文索引需要注意的是：(基本单位是词)， MySQL默认的分词是所有非字母和数字的特殊符号都是分词符</p></blockquote><p>使用Match() 和 Against() 来使用全文索引进行检索</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> note_text <span class="hljs-keyword">from</span> notes <span class="hljs-keyword">where</span> <span class="hljs-keyword">match</span>(note_text) against(<span class="hljs-string">&#x27;book&#x27;</span>);<br></code></pre></td></tr></table></figure><blockquote><p>match() 可以包含多个列，例如match(title,content) , 应该和建立索引时候的顺序一致</p><p> 当查询多列数据时，建议在此多列数据上创建一个联合的全文索引，否则使用不了索引的</p></blockquote><p>检索的文本越靠前，等级值越大。如果包含多个搜索项，则包含多个匹配词的行的等级值更高</p><h2 id="查询扩展"><a href="#查询扩展" class="headerlink" title="查询扩展"></a>查询扩展</h2><p>扫描步骤如下：</p><ol><li>全文检索，筛选结果行</li><li>检查匹配行，选择有用词</li><li>再次全文检索，包含上个步骤选择词</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> note_text <span class="hljs-keyword">from</span> notes <span class="hljs-keyword">where</span> <span class="hljs-keyword">match</span>(note_text) against(<span class="hljs-string">&#x27;book&#x27;</span> <span class="hljs-keyword">with</span> query expansion);<br></code></pre></td></tr></table></figure><blockquote><p>记录越多，文本越多，使用查询扩展返回的结果越好</p></blockquote><h2 id="布尔全文检索"><a href="#布尔全文检索" class="headerlink" title="布尔全文检索"></a>布尔全文检索</h2><blockquote><p>即使没有fulltext索引也可以使用，但是比较慢且性能差</p></blockquote><p>关键点：</p><ul><li>要匹配的词</li><li>要排除的词（即使有匹配到的词也会排除掉）</li><li>排列提示（指定一些更重要的词，越重要的词等级越高）</li><li>表达式分组</li><li>其他</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--匹配heavy 排除rope*（rope开头的词）</span><br><span class="hljs-keyword">SELECT</span> note_ text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_ text) Agai nst( <span class="hljs-string">&#x27;heavy -rope*&#x27;</span> <span class="hljs-keyword">IN</span> <span class="hljs-type">BOOLEAN</span> MODE);<br></code></pre></td></tr></table></figure><table><thead><tr><th>布尔操作符</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>包含，词必须存在</td></tr><tr><td>-</td><td>排除，词必须不出现</td></tr><tr><td>&gt;</td><td>包含且增加等级值</td></tr><tr><td>&lt;</td><td>包含且减少等级值</td></tr><tr><td>（）</td><td>把词组成子表达式，允许这些组表达式作为一个组被包含，排除，排列等</td></tr><tr><td>~</td><td>取消一个词的排序值</td></tr><tr><td>*</td><td>词尾的通配符</td></tr><tr><td>“”</td><td>定义一个短语，它匹配整个短语</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">&#x27;+rabbit +bait&#x27;</span><span class="hljs-keyword">IN</span> <span class="hljs-type">BOOLEAN</span> MODE);<br><span class="hljs-comment">--这个搜索匹配包含词rabbit和bait的行。</span><br><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">&#x27;rabbit bait&#x27;</span><span class="hljs-keyword">IN</span> <span class="hljs-type">BOOLEAN</span> MODE); <br><span class="hljs-comment">--没有指定操作符，这个搜索匹配包含rabbit和bait中的至少一个词的行。</span><br><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">&#x27;&quot;rabbit bait&quot;&#x27;</span><span class="hljs-keyword">IN</span> <span class="hljs-type">BOOLEAN</span> MODE); <br><span class="hljs-comment">--这个搜索匹配短语rabbitbait而不是匹配两个词rabbit和bait。</span><br><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span>(note_text) Against(<span class="hljs-string">&#x27;&gt;rabbit &lt;carrot&#x27;</span><span class="hljs-keyword">IN</span> <span class="hljs-type">BOOLEAN</span> MODE); <br><span class="hljs-comment">--匹配rabbit和carrot,增加前者的等级，降低后者的等级。</span><br><span class="hljs-keyword">SELECT</span> note_text <span class="hljs-keyword">FROM</span> productnotes <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">Match</span> (note_text) Against(<span class="hljs-string">&#x27;+safe +(&lt;Combination)&#x27;</span><span class="hljs-keyword">IN</span> <span class="hljs-type">BOOLEAN</span> MODE); <br><span class="hljs-comment">--这个搜索匹配词safe和combination,降低后者的等级。</span><br></code></pre></td></tr></table></figure><blockquote><p>扩展</p></blockquote><ul><li>在索引全文本数据时，短词被忽略且从索引中排除。短词定义为那些具有3个或3个以下字符的词(如果需要,这个数目可以更改)。</li><li>MySQL带有一个内建的非用词(stopword) 列表，这些词在索引全文本数据时总是被忽略。如果需要，可以覆盖这个列表(请参阅MySQL文档以了解如何完成此工作)。</li><li>许多词出现的频率很高，搜索它们没有用处(返回太多的结果)。因此，MySQL规定了一条50%规则，如果-一个词出现在50%以上的行中，则将它作为一个非用词忽略。50%规则不用于IN BOOLEAN MODE。</li><li>如果表中的行数少于3行，则全文本搜索不返回结果(因为每个词或者不出现，或者至少出现在50%的行中)。</li><li>忽略词中的单引号。例如，don’t索 引为dont。</li><li>不具有词分隔符(包括日语和汉语)的语言不能恰当地返回全文本搜索结果。</li></ul><p><strong>邻近操作符</strong></p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="使用视图的优势："><a href="#使用视图的优势：" class="headerlink" title="使用视图的优势："></a>使用视图的优势：</h2><ol start="2"><li>重用SQL语句</li><li>简化复杂的SQL</li><li>使用表的组成部分而不是整个表，因此可以作保保护数据即授予表特定部分的访问权限，而不是整个表</li><li>更改数据格式，视图可以返回与底层表示和格式不同的数据</li></ol><p>视图本身不包含数据，使用视图实际上是使用视图的查询规则检索数据。如果修改源表的数据，视图中查询到的数据也会被修改。</p><blockquote><p>可以通过视图修改数据</p></blockquote><h2 id="视图创建的规则和限制"><a href="#视图创建的规则和限制" class="headerlink" title="视图创建的规则和限制"></a>视图创建的规则和限制</h2><ol><li>视图名不可与其他视图或表名重复</li><li>创建视图数量没有限制</li><li>创建视图必须有相应访问权限</li><li>视图可以嵌套（使用视图再创建视图）</li><li>ORDER BY可以在视图中使用，但是如果检索的SQL中有ORDER BY则视图中的被覆盖</li><li>视图不能索引，也不能有关联的触发器或者默认值</li><li>视图可以和表一起使用</li></ol><h2 id="使用视图"><a href="#使用视图" class="headerlink" title="使用视图"></a>使用视图</h2><h3 id="创建视图"><a href="#创建视图" class="headerlink" title="创建视图"></a>创建视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> <span class="hljs-operator">&lt;</span>view_name<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">as</span> <span class="hljs-operator">&lt;</span>dql<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h3 id="查看创建视图语句"><a href="#查看创建视图语句" class="headerlink" title="查看创建视图语句"></a>查看创建视图语句</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">view</span> <span class="hljs-operator">&lt;</span>view_name<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h3 id="删除视图"><a href="#删除视图" class="headerlink" title="删除视图"></a>删除视图</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">view</span> <span class="hljs-operator">&lt;</span>view_name<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><h3 id="修改视图"><a href="#修改视图" class="headerlink" title="修改视图"></a>修改视图</h3><p>可以先删除视图在创建，也可以</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">or</span> repace <span class="hljs-keyword">view</span> <span class="hljs-operator">&lt;</span>view_name<span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>视图可以更新，但是如果Mysql认为基数据不能被正确更新，则不会更新，在以下情况下不会更新</p></blockquote><ul><li>分组 group by 和having</li><li>联结</li><li>子查询</li><li>并</li><li>聚集函数</li><li>Distinct</li><li>导出（计算）列</li></ul><blockquote><p>上面的情况可能随着版本不同而有差异，一般情况下视图用来检索</p></blockquote><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><h2 id="使用存储过程"><a href="#使用存储过程" class="headerlink" title="使用存储过程"></a>使用存储过程</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">call</span> procedure_name(<span class="hljs-variable">@in</span>, <span class="hljs-variable">@out</span>)<br></code></pre></td></tr></table></figure><h2 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> <span class="hljs-title function_">procedure_name</span><span class="hljs-params">()</span> <span class="hljs-title function_">comment</span> &#x27;<span class="hljs-title function_">procedure</span> <span class="hljs-title function_">comment</span>&#x27;<br><span class="hljs-title function_">begin</span><br><span class="hljs-title function_">select</span> * <span class="hljs-title function_">from</span> <span class="hljs-title function_">notes</span>;<br><span class="hljs-keyword">end</span><span class="hljs-punctuation">;</span><br></code></pre></td></tr></table></figure><blockquote><p>注意要先使用\d $ 或者delimiter $将分隔符;临时更改为$或者其他字符</p></blockquote><p>其中<code>()</code>中可接受参数，begin, end 包含的为存储过程体</p><p>可以使用参数</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs delphi">create <span class="hljs-function"><span class="hljs-keyword">procedure</span> <span class="hljs-title">get_username</span><span class="hljs-params">(<span class="hljs-keyword">in</span> id int, <span class="hljs-keyword">out</span> <span class="hljs-keyword">name</span> varchar(10)</span>)</span><br><span class="hljs-function"><span class="hljs-title">begin</span></span><br><span class="hljs-function"><span class="hljs-title">select</span> `<span class="hljs-title">username</span>` <span class="hljs-title">into</span> <span class="hljs-title">name</span> <span class="hljs-title">from</span> <span class="hljs-title">users</span> <span class="hljs-title">where</span> `<span class="hljs-title">id</span>` = <span class="hljs-title">id</span>;</span><br><span class="hljs-keyword">end</span>;<br>--没有测试，正确性未知<br></code></pre></td></tr></table></figure><blockquote><p>所有变量都必须以@开始</p></blockquote><p>调用</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">call</span> <span class="hljs-selector-tag">get_username</span>(<span class="hljs-number">1</span>, <span class="hljs-variable">@ret</span>);<br></code></pre></td></tr></table></figure><p>查询执行返回值</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-keyword">select</span> <span class="hljs-symbol">@ret</span><span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">declare</span> total <span class="hljs-type">decimal</span>(<span class="hljs-number">8</span>,<span class="hljs-number">2</span>) <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h3 id="判断"><a href="#判断" class="headerlink" title="判断"></a>判断</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">if <span class="hljs-operator">&lt;</span>variable<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">then</span><br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users;<br><span class="hljs-keyword">end</span> if;<br></code></pre></td></tr></table></figure><p>查看存储过程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">procedure</span> status [<span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;keywords&#x27;</span>];<br><span class="hljs-keyword">show</span> <span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> <span class="hljs-operator">&lt;</span>procudure_name<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><blockquote><p>MySQL游标不同于其他多数DBMS， 只能用于存储过程和函数 【早期资料】</p></blockquote><h2 id="使用游标"><a href="#使用游标" class="headerlink" title="使用游标"></a>使用游标</h2><ul><li>使用游标前应该先声明（定义），这个过程实际没有检索数据，只是定义要使用的SELECT 语句</li><li>一旦声明后，应该打开游标来使用，这个过程用前面定义的SELECT 语句把数据检索出来</li><li>对于填有数据的游标，根据需要取出（检索）各行</li><li>结束后必须关闭游标</li></ul><p>声明游标后，可以频繁地打开或者关闭游标，游标打开后，可以频繁地执行取操作</p><h3 id="创建游标"><a href="#创建游标" class="headerlink" title="创建游标"></a>创建游标</h3><p><strong>使用declare 定义游标</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">declare</span> products_f <span class="hljs-keyword">cursor</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> products <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id;<br></code></pre></td></tr></table></figure><p><strong>定义游标之后可以打开游标</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">open products_f<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><blockquote><p>open 语句执行查询，存储检索到地数据以提供浏览和滚动。</p></blockquote><p><strong>游标处理完成，应该关闭游标</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">close products_f<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><blockquote><p>关闭游标会释放游标所使用地内存等资源，所以当游标不再需要使用地时候就应该关闭游标，如果你不明确关闭游标，MySQL会在end语句时关闭游标。</p></blockquote><p><strong>使用游标数据</strong></p><p>游标被打开后，可以使用fetch语句访问它的每一行。fetch指定检索所需的列，数据存放位置，还会向前移动游标内部指针，使下一条fetch语句检索下一行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">fetch</span> products_f <span class="hljs-keyword">into</span> o;<br></code></pre></td></tr></table></figure><blockquote><p>检索游标中结果的第一行并将数据存放到局部变量o中，再次执行fetch将检索下一行，除了使用repeat ,还可以使用其他循环语句来重复执行，直到使用leave手动退出，通常repeat的语法更适合对游标进行循环。</p></blockquote><p><strong>例子</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> products_p()<br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">declare</span> done <span class="hljs-type">boolean</span> <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">declare</span> o <span class="hljs-type">int</span>;<br><span class="hljs-keyword">declare</span> products_f <span class="hljs-keyword">cursor</span> <br><span class="hljs-keyword">for</span> <br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> users;<br><span class="hljs-comment">-- continue handler 条件出现时被执行的代码 即 SQLSTATE &#x27;02000&#x27;出现时执行set done = 1</span><br><span class="hljs-comment">-- SQLSTATE &#x27;02000&#x27;是一个未找到条件，即没有更多行时候不再循环 ，更多错误代码列可以查看MySQL手册https://dev.mysql.com/doc/refman/8.0/en/error-handling.html</span><br><span class="hljs-keyword">declare</span> continue handler <span class="hljs-keyword">for</span> <span class="hljs-keyword">SQLSTATE</span> <span class="hljs-string">&#x27;02000&#x27;</span> <span class="hljs-keyword">set</span> done <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">open</span> products_f;<br><span class="hljs-comment">-- 反复执行知道done为真</span><br>repeat<br><span class="hljs-keyword">fetch</span> products_f <span class="hljs-keyword">into</span> o;<br>until done <span class="hljs-keyword">end</span> repeat;<br><span class="hljs-keyword">close</span> products_f;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><blockquote><p> DECLARE语句的次序： DECLARE语句的发布存在特定的次序。用DECLARE语句定义的局部变量必须在定义任意游标或句柄之前定义，而句柄必须在游标之后定义，不遵守此顺序将产生错误消息。</p></blockquote><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p>MySQL响应delete, insert, update语句而执行触发的一条SQL或位于begin, end 之间的一组SQL。其他MySQL语句不支持触发器。</p><h2 id="创建触发器"><a href="#创建触发器" class="headerlink" title="创建触发器"></a>创建触发器</h2><p>创建触发器需要提供以下信息</p><ul><li>唯一的触发器名</li><li>触发器关联的表</li><li>触发器应该响应的活动（delete, insert, update）</li><li>触发器何时执行（前或者后）</li></ul><blockquote><p>触发器名必须在每个表中唯一，而在每个数据库中不一定唯一。这在其它DBMS中是不允许的。最好是在同一个数据库中保持触发器名唯一</p></blockquote><p>使用<code>create trigger</code> 创建触发器</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> get_id after <span class="hljs-keyword">insert</span> <span class="hljs-keyword">on</span> users <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-type">row</span> <span class="hljs-keyword">select</span> <span class="hljs-string">&#x27;insert&#x27;</span>;<br></code></pre></td></tr></table></figure><p>其中for each row 表示代码对每个插入执行</p><blockquote><p>只有表支持触发器，视图不支持，每个表每个事件只允许一个触发器，因此每个表支支持6个触发器（insert, update, delete 前后 ）。 如果before触发器执行失败，则MySQL不执行请求的操作，如果触发器或语句本身失败，如果有after触发器，则不执行。</p></blockquote><h2 id="删除触发器"><a href="#删除触发器" class="headerlink" title="删除触发器"></a>删除触发器</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">trigger</span> get_id;<br></code></pre></td></tr></table></figure><blockquote><p>触发器不能更新或者覆盖，因此必须先删除再创建</p></blockquote><h2 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><p><strong>insert 触发器</strong></p><ul><li>在insert 触发器代码内，可引用一个NEW的虚拟表，访问被插入的行</li><li>在before insert 触发器内，NEW中的值也可以被更新（允许更改被插入的值）</li><li>对于auto_increment 列，NEW 在insert 之前包含0，在insert 执行之后包含新的自动生成的值</li></ul><p><strong>delete 触发器</strong></p><p>在delete 触发器代码内，你可以引用一个名为OLD的虚拟表，访问被删除的行。</p><p>OLD中的值全部是只读的，不能更新</p><p>下面例子，使用OLD保存将要被删除的行到一个存档表中：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> 触发器名 <span class="hljs-keyword">before</span> <span class="hljs-keyword">delete</span> <span class="hljs-keyword">on</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span> <br><span class="hljs-keyword">begin</span> <br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表<span class="hljs-number">2</span>(列,列,列)<span class="hljs-keyword">values</span>(<span class="hljs-built_in">old</span>.表<span class="hljs-number">1</span>列名,<span class="hljs-built_in">old</span>.表<span class="hljs-number">1</span>列名,<span class="hljs-built_in">old</span>.表<span class="hljs-number">1</span>列名);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>删除表1的数据前会把数据存到结构相同的表2中<br>使用begin end 块的好处是触发器能容纳多条sql语句</p><p>**UPDATE 触发器 **</p><p>在update触发器代码中，可以引用一个名为old虚拟表访问以前的值，引用new虚拟表访问新更新的值</p><p>new中的值可能被更新，old中的值全部是只读的</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">trigger</span> 触发器名 <span class="hljs-keyword">before</span> <span class="hljs-keyword">update</span> <span class="hljs-keyword">on</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">set</span> <span class="hljs-built_in">new</span>.id = upper(<span class="hljs-built_in">new</span>.id);<br></code></pre></td></tr></table></figure><p>显然，每次更新一个行时，new.id 中的值（将用来更新表行的值）都用upper(new.id)替换。 也就是，如果new.id &#x3D; 110，那用update更新表1的id时，将用110这个值更新。</p><p><strong>触发器的进一步介绍</strong></p><p>触发器可以用来创建审计跟踪，使用触发器，把更改记录到另一个表非常容易</p><p>mysql触发器不支持call语句，这表示不能从触发器内调用存储过程，只能把存储过程代码复制到触发器内</p><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p><strong>事务（transaction）</strong>指一组SQL语句</p><p><strong>回滚（rollback）</strong>撤销指定SQL执行过程</p><p><strong>提交（commit）</strong>将为存储的SQL语句结果写入数据表</p><p><strong>保留点（savepoint）</strong>事务处理中设置的临时占位符（place holder） ,可以发布或者回退（与回退整个事务不同）</p><blockquote><p>事务用来管理insert, update, delete 语句，不能回退drop，select， create 操作，即使使用了也不会撤销。</p></blockquote><p>隐含事务提交：commit 或者rollback 后事务会自动关闭。</p><h2 id="保留点"><a href="#保留点" class="headerlink" title="保留点"></a>保留点</h2><p>简单的commit或者rollback会撤销整个事务，但是实际上可能需要回滚或者提交一部分事务，就需要在事务处理块中放置合适的保留点，回滚时回滚到某个保留点，可以使用savepoint创建保留点。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">savepoint delete1<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>当需要回滚时，可以指定保留点</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">rollback</span> <span class="hljs-keyword">to</span> delete1<br></code></pre></td></tr></table></figure><blockquote><p>可以尽可能多地创建保留点，因为这样就可以更灵活地控制事务。当执行commit 或者rollback 后自动释放保留点，也可以使用release savepoint 释放保留点。</p></blockquote><h2 id="更改默认提交行为"><a href="#更改默认提交行为" class="headerlink" title="更改默认提交行为"></a>更改默认提交行为</h2><p>关闭自动提交</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-keyword">set</span> autocommit <span class="hljs-comment">= 0</span><br></code></pre></td></tr></table></figure><blockquote><p>该标志是针对当前连接而不是服务器</p></blockquote><h1 id="字符集和编码"><a href="#字符集和编码" class="headerlink" title="字符集和编码"></a>字符集和编码</h1><p><strong>字符集</strong> 字母和符号的集合</p><p><strong>编码</strong> 某个字符集内成员的内部表示</p><p><strong>校对</strong> 规定字符集如何比较的指令</p><p>查看可用的校对和字符集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">collation</span>;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%character%&#x27;</span>;<br><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%collation%&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>可以给单个表，单个列设置字符集和校对</p></blockquote><p>select 语句中可以指定使用不同的校对，例如可以使用区分大小写的校对</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> username <span class="hljs-keyword">collate</span> latin1_general_cs;<br></code></pre></td></tr></table></figure><p>使用cast() 或者convert() 可以在字符集之间转换</p><h1 id="数据备份"><a href="#数据备份" class="headerlink" title="数据备份"></a>数据备份</h1><h2 id="数据备份-1"><a href="#数据备份-1" class="headerlink" title="数据备份"></a>数据备份</h2><p>mysqldump</p><p>mysqlhotcopy 从一个数据库复制全部数据</p><p>back up table &#x2F; select into outfile    -&gt;  restore table </p><blockquote><p>为保证所有数据都被写到磁盘（包括索引数据），可能需要在备份前使用flush tables 语句</p></blockquote><p>命令行下具体用法如下： </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -u用戶名 -p密码 -d 数据库名 表名 &gt; 脚本名;<br></code></pre></td></tr></table></figure><p>导出整个数据库结构和数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -h localhost -uroot -p123456 database &gt; dump.sql<br></code></pre></td></tr></table></figure><p>导出整个数据库结构和数据[包含建库语句]</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -h localhost -uroot -p123456 -B database &gt; dump.sql<br></code></pre></td></tr></table></figure><p>导出单个数据表结构和数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -h localhost -uroot -p123456  database table &gt; dump.sql<br></code></pre></td></tr></table></figure><p>导出整个数据库结构（不包含数据）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -h localhost -uroot -p123456  -d database &gt; dump.sql<br></code></pre></td></tr></table></figure><p>导出单个数据表结构（不包含数据）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysqldump -h localhost -uroot -p123456  -d database table &gt; dump.sql<br></code></pre></td></tr></table></figure><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p>未登录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql <span class="hljs-operator">-</span>uroot <span class="hljs-operator">-</span>proot <span class="hljs-operator">-</span>h127<span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-operator">-</span>P3306 test<span class="hljs-operator">&lt;</span>s1.sql<br></code></pre></td></tr></table></figure><p>登录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">source .<span class="hljs-operator">/</span>a.sql<br></code></pre></td></tr></table></figure><h2 id="数据维护"><a href="#数据维护" class="headerlink" title="数据维护"></a>数据维护</h2><ul><li>analyze table 检查表键是否正确</li><li>check table 针对许多问题进行检查，在myisam引擎上还针对索引进行检查 , 如果在Myisam引擎上产生的结果不正确，可能需要使用repare table 修复响应的表。</li><li>changed 检查自最后一次检查以来改动过的表</li><li>extended 执行最彻底的检查</li><li>fast 检查未正常关闭的表</li><li>medium 检查所有被删除的链接并进行键检验</li><li>quick 只进行快速扫描</li><li>optimize table  优化表，如果有大量删除操作，应该使用</li></ul><h2 id="诊断启动问题"><a href="#诊断启动问题" class="headerlink" title="诊断启动问题"></a>诊断启动问题</h2><ul><li>–safe-mode 装载减去某些最佳配置的服务器</li><li>–verbose 显示全文本消息，常与–help 联合使用</li></ul><h2 id="查看日志文件"><a href="#查看日志文件" class="headerlink" title="查看日志文件"></a>查看日志文件</h2><ul><li>错误日志，包含启停或任意关键位置的错误细节，日志名通常为hostname.err 位于data 目录， 可用–log-error 命令更改</li><li>查询日志，记录MySQL活动，在诊断问题时非常有用，日志可能会很快变得很大，所以不应该长期使用，位于data 目录，可用–log更改</li><li>二进制日志(bin-log)，记录更新或者可能更新过数据的所有语句，日志名通常为hostname-bin，位于data 目录，可用–log-bin 更改</li><li>慢查询日志， 可用–log-slow-queries 更改</li></ul><h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><p>MySQL 使用一系列默认配置预先配置的，但随着需求增加，往往需要重新调整分配内存，缓冲区等等。可以使用下面的命令查看变量以及状态</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">show</span> [global] variables;<br><span class="hljs-built_in">show</span> <span class="hljs-built_in">status</span>;<br></code></pre></td></tr></table></figure><p>当你遇到MySQL性能显著不良的时候，可以使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> [<span class="hljs-keyword">full</span>] processlist<br></code></pre></td></tr></table></figure><p>查看活动以及他们的线程id和执行时间，可以使用kill 来终止</p><p>使用explain [analyze] 来解释如何执行一条SQL</p><p>一般来说，存储过程比一条一条执行SQL性能好</p><p>insert  支持一个可选的 delayed 关键字，如果使用，将把控制立即返回给调用程序，并且一旦有可能就实际执行该操作</p><p>在导入数据时，应该关闭自动提交，临时禁用索引，索引在导入完成后再开启</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> notes <span class="hljs-keyword">disable</span>/<span class="hljs-keyword">enable</span> keys;<br></code></pre></td></tr></table></figure><p>如果SQL存在大量OR，可以尝试使用union关键字连接结果</p><p>索引可能会加快查询，也可能会降低插入，更新速度</p><p>一般来说，尽量使用fulltext 而不是用like</p><h1 id="其他语法"><a href="#其他语法" class="headerlink" title="其他语法"></a>其他语法</h1><h2 id="alter"><a href="#alter" class="headerlink" title="alter"></a>alter</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> &lt;<span class="hljs-built_in">table_name</span>&gt;<br>(<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">column</span> &lt;<span class="hljs-built_in">column_name</span>&gt;    datatype [<span class="hljs-keyword">null</span>|<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>] [<span class="hljs-keyword">constraint</span>],<br>change <span class="hljs-keyword">column</span> &lt;<span class="hljs-built_in">column_name</span>&gt; datatype [<span class="hljs-keyword">null</span>|<span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>] [<span class="hljs-keyword">constraint</span>], <br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">column</span> &lt;<span class="hljs-built_in">column_name</span>&gt;<br><span class="hljs-keyword">add</span> <span class="hljs-keyword">index</span> &lt;<span class="hljs-built_in">column_name</span>&gt; <br>)<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">table</span> Teacher change Tid Tnum <span class="hljs-type">int</span>; //修改列名<br></code></pre></td></tr></table></figure><h2 id="create-index"><a href="#create-index" class="headerlink" title="create index"></a>create index</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">index</span> &lt;index_name&gt; <span class="hljs-keyword">on</span> &lt;table_name&gt; (column [<span class="hljs-keyword">desc</span>|<span class="hljs-keyword">asc</span>], ...);<br></code></pre></td></tr></table></figure><h2 id="create-user"><a href="#create-user" class="headerlink" title="create user"></a>create user</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> &lt;username&gt;[@host] identified [<span class="hljs-keyword">with</span> mysql_native_password] <span class="hljs-keyword">by</span> &lt;<span class="hljs-keyword">password</span>&gt;; <br></code></pre></td></tr></table></figure><h2 id="drop"><a href="#drop" class="headerlink" title="drop"></a>drop</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">drop database|<span class="hljs-keyword">index</span>|<span class="hljs-keyword">procedure</span>|<span class="hljs-title function_">table</span>|<span class="hljs-title function_">trigger</span>|<span class="hljs-title function_">user</span>|<span class="hljs-title function_">view</span>|<span class="hljs-title function_">itemname</span>;<br></code></pre></td></tr></table></figure><h2 id="insert-select"><a href="#insert-select" class="headerlink" title="insert select"></a>insert select</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> users <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> users_bak;<br></code></pre></td></tr></table></figure><h2 id="select-1"><a href="#select-1" class="headerlink" title="select"></a>select</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <br><span class="hljs-keyword">column</span> <br><span class="hljs-keyword">from</span> <br>table_name<br><span class="hljs-keyword">where</span><br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> <br><span class="hljs-keyword">having</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br></code></pre></td></tr></table></figure><h2 id="事务-1"><a href="#事务-1" class="headerlink" title="事务"></a>事务</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span>;<br></code></pre></td></tr></table></figure><h2 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h2><p>字符串以字典顺序排序，从左向右一次比较每一个字符，这将导致‘10‘位于’2‘之前，数值才能正确排序。</p><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">drop <span class="hljs-function"><span class="hljs-keyword">procedure</span> &lt;<span class="hljs-title">procedure_name</span>&gt; [<span class="hljs-title">if</span> <span class="hljs-title">exists</span>]</span><br></code></pre></td></tr></table></figure><h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> 语句耗时，可能因为等待而降低<span class="hljs-keyword">select</span>性能，所以使用下面的语句降低有限级<br><span class="hljs-keyword">INSERT</span> LOW_PRIORITY <span class="hljs-keyword">INTO</span><br><span class="hljs-comment">--降低insert的有限级，同样适用于update,delete。</span><br></code></pre></td></tr></table></figure><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>更新可以使用子查询，即将查到的值更新到列。<br>update ignore 可以忽略错误</p><p>更新表不能包含该表的子查询例如</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">set</span> sex = <span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id <span class="hljs-keyword">in</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> age &gt; <span class="hljs-number">8</span>)<br></code></pre></td></tr></table></figure><p>上面的SQL会报错，应该更改为</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">left</span> <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> (<span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span> <span class="hljs-keyword">where</span> age &gt; <span class="hljs-number">8</span>) <span class="hljs-keyword">set</span> sex = <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><blockquote><p>上面的SQL只是示例</p></blockquote><h2 id="删除-1"><a href="#删除-1" class="headerlink" title="删除"></a>删除</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">truncate</span> [<span class="hljs-keyword">table</span>] users;<br><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> <br></code></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>外键不能跨引擎，例如myisam不能添加innodb表的主键为外键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">rename <span class="hljs-keyword">table</span> notes <span class="hljs-keyword">to</span> note;<br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> notes rename <span class="hljs-keyword">to</span> note;<br></code></pre></td></tr></table></figure><h1 id="Mysql添加自增列"><a href="#Mysql添加自增列" class="headerlink" title="Mysql添加自增列"></a>Mysql添加自增列</h1><p>两句查完：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">set</span> <span class="hljs-variable">@rownum</span><span class="hljs-operator">=</span><span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">select</span> (<span class="hljs-variable">@rownum</span>:<span class="hljs-operator">=</span><span class="hljs-variable">@rownum</span><span class="hljs-operator">+</span><span class="hljs-number">1</span>),colname <span class="hljs-keyword">from</span> [tablename <span class="hljs-keyword">or</span> (subquery) a];<br></code></pre></td></tr></table></figure><p>一句查完：</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript"><span class="hljs-built_in">select</span> @rownum:=@rownum+<span class="hljs-number">1</span>,colnum <span class="hljs-keyword">from</span> (<span class="hljs-built_in">select</span> @rownum:=<span class="hljs-number">0</span>) a,[tablename <span class="hljs-keyword">or</span> (subquery) b];<br></code></pre></td></tr></table></figure><blockquote><p>多条SQL要用<code>;</code>分割，单条SQL末尾的分号非必须，推荐加上分号，如果使用命令行，则必须要有结尾符。</p></blockquote><blockquote><p>SQL 语句不区分大小写。最佳的方式是按照大小写惯例，且使用时保持一致。</p></blockquote><blockquote><p>SQL可以分成多行，用更直观的格式表达</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">desc</span> <span class="hljs-operator">/</span> <span class="hljs-keyword">describe</span> <span class="hljs-operator">&lt;</span><span class="hljs-keyword">table</span><span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure><h1 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h1><h2 id="COALLESCE"><a href="#COALLESCE" class="headerlink" title="COALLESCE"></a>COALLESCE</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">COALESCE(<span class="hljs-params">expression</span>, <span class="hljs-params">value1</span>, <span class="hljs-params">value2</span>, <span class="hljs-params">valuen</span>)</span><br></code></pre></td></tr></table></figure><p>返回按顺序取第一个不为NULL的值，都为NULL则返回NULL, 因为不判断空字符串，所以如果有空字符串则需要先处理，例如：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">COALESCE</span><span class="hljs-params">(NULLIF(text1, <span class="hljs-string">&#x27;&#x27;</span>)</span></span>, <span class="hljs-built_in">NULLIF</span>(text2, <span class="hljs-string">&#x27;&#x27;</span>))<br></code></pre></td></tr></table></figure><p>其他替代</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">--MYSQL: <br>  <span class="hljs-constructor">IFNULL(<span class="hljs-params">expression</span>,<span class="hljs-params">value</span>)</span> <br>--MSSQLServer: <br>  <span class="hljs-constructor">ISNULL(<span class="hljs-params">expression</span>,<span class="hljs-params">value</span>)</span> <br>--Oracle: <br>  <span class="hljs-constructor">NVL(<span class="hljs-params">expression</span>,<span class="hljs-params">value</span>)</span><br></code></pre></td></tr></table></figure><h2 id="格式化时间日期"><a href="#格式化时间日期" class="headerlink" title="格式化时间日期"></a>格式化时间日期</h2><p><a href="https://www.cnblogs.com/shuilangyizu/p/8036620.html">https://www.cnblogs.com/shuilangyizu/p/8036620.html</a></p><h2 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h2><p>Mysql的if既可以作为表达式用，也可在存储过程中作为流程控制语句使用<br>IF表达式</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">IF(<span class="hljs-params">expr1</span>,<span class="hljs-params">expr2</span>,<span class="hljs-params">expr3</span>)</span><br></code></pre></td></tr></table></figure><p>如果 expr1 是TRUE (expr1 &lt;&gt; 0 and expr1 &lt;&gt; NULL)，则 IF()的返回值为expr2; 否则返回值则为 expr3。IF() 的返回值为数字值或字符串值，具体情况视其所在语境而定。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> *,<span class="hljs-keyword">if</span>(sva=<span class="hljs-number">1</span>,<span class="hljs-string">&quot;男&quot;</span>,<span class="hljs-string">&quot;女&quot;</span>) <span class="hljs-keyword">as</span> ssva <span class="hljs-keyword">from</span> taname <span class="hljs-keyword">where</span> sva != <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>作为表达式的if也可以用CASE when来实现：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">CASE</span> sva <span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;男&#x27;</span> <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;女&#x27;</span> <span class="hljs-keyword">END</span> <span class="hljs-keyword">as</span> ssva <span class="hljs-keyword">from</span> taname <span class="hljs-keyword">where</span> sva != <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>在第一个方案的返回结果中， value&#x3D;compare-value。而第二个方案的返回结果是第一种情况的真实结果。如果没有匹配的结果值，则返回结果为ELSE后的结果，如果没有ELSE 部分，则返回值为 NULL。</p><p>例如：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">CASE</span> <span class="hljs-number">1</span> <span class="hljs-keyword">WHEN</span> <span class="hljs-number">1</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;one&#x27;</span><br>              <span class="hljs-keyword">WHEN</span> <span class="hljs-number">2</span> <span class="hljs-keyword">THEN</span> <span class="hljs-string">&#x27;two&#x27;</span><br>              <span class="hljs-keyword">ELSE</span> <span class="hljs-string">&#x27;more&#x27;</span> <span class="hljs-keyword">END</span><br>              <span class="hljs-keyword">as</span> testCol<br></code></pre></td></tr></table></figure><p>将输出one</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">IFNULL(<span class="hljs-params">expr1</span>,<span class="hljs-params">expr2</span>)</span><br></code></pre></td></tr></table></figure><p>假如expr1 不为 NULL，则 IFNULL() 的返回值为 expr1; 否则其返回值为 expr2。IFNULL()的返回值是数字或是字符串，具体情况取决于其所使用的语境。</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">IFNULL</span>(<span class="hljs-number">1</span>,<span class="hljs-number">0</span>);<br>        -&gt; 1<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">IFNULL</span>(<span class="hljs-literal">NULL</span>,<span class="hljs-number">10</span>);<br>        -&gt; 10<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">IFNULL</span>(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>,<span class="hljs-number">10</span>);<br>        -&gt; 10<br><br>mysql&gt; <span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">IFNULL</span>(<span class="hljs-number">1</span>/<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;yes&#x27;</span>);<br>        -&gt; &#x27;yes&#x27;<br></code></pre></td></tr></table></figure><p>IFNULL(expr1,expr2) 的默认结果值为两个表达式中更加“通用”的一个，顺序为STRING、 REAL或 INTEGER。</p><p>IF ELSE 做为流程控制语句使用<br>if实现条件判断，满足不同条件执行不同的操作，这个我们只要学编程的都知道if的作用了，下面我们来看看mysql 存储过程中的if是如何使用的吧。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql">IF search_condition <span class="hljs-keyword">THEN</span><br>    statement_list<br>[ELSEIF search_condition <span class="hljs-keyword">THEN</span>]<br>    statement_list ...<br>[<span class="hljs-keyword">ELSE</span><br>    statement_list]<br><span class="hljs-keyword">END</span> IF<br></code></pre></td></tr></table></figure><p>当IF中条件search_condition成立时，执行THEN后的statement_list语句，否则判断ELSEIF中的条件，成立则执行其后的statement_list语句，否则继续判断其他分支。当所有分支的条件均不成立时，执行ELSE分支。search_condition是一个条件表达式，可以由“&#x3D;、&lt;、&lt;&#x3D;、&gt;、&gt;&#x3D;、!&#x3D;”等条件运算符组成，并且可以使用AND、OR、NOT对多个表达式进行组合。</p><p>例如，建立一个存储过程，该存储过程通过学生学号（student_no）和课程编号（course_no）查询其成绩（grade），返回成绩和成绩的等级，成绩大于90分的为A级，小于90分大于等于80分的为B级，小于80分大于等于70分的为C级，依次到E级。那么，创建存储过程的代码如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">procedure</span> dbname.proc_getGrade<br>(stu_no <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),cour_no <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>))<br><span class="hljs-keyword">BEGIN</span><br><span class="hljs-keyword">declare</span> stu_grade <span class="hljs-type">float</span>;<br><span class="hljs-keyword">select</span> grade <span class="hljs-keyword">into</span> stu_grade <span class="hljs-keyword">from</span> grade <span class="hljs-keyword">where</span> student_no<span class="hljs-operator">=</span>stu_no <span class="hljs-keyword">and</span> course_no<span class="hljs-operator">=</span>cour_no;<br>if stu_grade<span class="hljs-operator">&gt;=</span><span class="hljs-number">90</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">select</span> stu_grade,<span class="hljs-string">&#x27;A&#x27;</span>;<br>elseif stu_grade<span class="hljs-operator">&lt;</span><span class="hljs-number">90</span> <span class="hljs-keyword">and</span> stu_grade<span class="hljs-operator">&gt;=</span><span class="hljs-number">80</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">select</span> stu_grade,<span class="hljs-string">&#x27;B&#x27;</span>;<br>elseif stu_grade<span class="hljs-operator">&lt;</span><span class="hljs-number">80</span> <span class="hljs-keyword">and</span> stu_grade<span class="hljs-operator">&gt;=</span><span class="hljs-number">70</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">select</span> stu_grade,<span class="hljs-string">&#x27;C&#x27;</span>;<br>elseif stu_grade70 <span class="hljs-keyword">and</span> stu_grade<span class="hljs-operator">&gt;=</span><span class="hljs-number">60</span> <span class="hljs-keyword">then</span><br>    <span class="hljs-keyword">select</span> stu_grade,<span class="hljs-string">&#x27;D&#x27;</span>;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">select</span> stu_grade,<span class="hljs-string">&#x27;E&#x27;</span>;<br><span class="hljs-keyword">end</span> if;<br><span class="hljs-keyword">END</span><br></code></pre></td></tr></table></figure><p>注意：IF作为一条语句，在END IF后需要加上分号“;”以表示语句结束，其他语句如CASE、LOOP等也是相同的。</p><blockquote><p>help show 查看允许的show语句</p></blockquote><h1 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tee /home/cheng/log.sql<br></code></pre></td></tr></table></figure><p>将下面的操作都写入改日志</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> privileges <span class="hljs-keyword">on</span> testdb.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> ‘test_user’@’localhost’ identified <span class="hljs-keyword">by</span> “jack” <span class="hljs-keyword">with</span> <span class="hljs-keyword">grant</span> option;<br></code></pre></td></tr></table></figure><p>WITH GRANT OPTION 这个选项表示该用户可以将自己拥有的权限授权给别人。注意：经常有人在创建操作用户的时候不指定WITH GRANT OPTION选项导致后来该用户不能使用GRANT命令创建用户或者给其它用户授权。<br>如果不想这个用户有这个grant的权限，可以不加这句</p><h2 id="mysql的SQL长度限制"><a href="#mysql的SQL长度限制" class="headerlink" title="mysql的SQL长度限制"></a>mysql的SQL长度限制</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">max_allowed_packet = 6M<br></code></pre></td></tr></table></figure><p>把上面这个配置改大就行了</p><h2 id="监听SQL"><a href="#监听SQL" class="headerlink" title="监听SQL"></a>监听SQL</h2><p>登录mysql</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">general_log_file</span>=<span class="hljs-string">&#x27;/tmp/general.log&#x27;</span>;<br><span class="hljs-built_in">set</span> global <span class="hljs-attribute">general_log</span>=<span class="hljs-string">&#x27;on&#x27;</span>;<br></code></pre></td></tr></table></figure><p>之后执行命令都会记录进LOG</p><h2 id="排序-2"><a href="#排序-2" class="headerlink" title="排序"></a>排序</h2><p>MySQL中的排序ORDER BY 除了可以用ASC和DESC，还可以自定义字符串&#x2F;数字来实现排序。</p><p>格式如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> FIELD(status,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>这样子写的话，返回的结果集是按照字段status的1、2、0进行排序的，当然，也可以对字符串进行排序。</p><p>原理如下：</p><p>FIELD()函数是将参数1的字段对后续参数进行比较，并返回1、2、3等等，如果遇到null或者没有在结果集上存在的数据，则返回0，然后根据升序进行排序。</p><h1 id="json字段"><a href="#json字段" class="headerlink" title="json字段"></a>json字段</h1><p>自<em>MySQL5.7.8</em>版本以来，MySQL支持原生JSON数据类型。允许使用原生JSON数据类型比以前MySQL版本中所使用JSON文本格式更能有效地存储JSON文档。</p><p>MySQL以内部格式存储JSON文档，允许对文档元素的快速读取访问。JSON二进制格式的结构是允许服务器通过键或数组索引直接搜索JSON文档中的值，这非常快。</p><p>JSON文档的存储大约与存储<code>LONGBLOB</code>或<code>LONGTEXT</code>数据量相同。</p><p>要定义数据类型为JSON的列，请使用以下语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `json_test` (<br>  `id` <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) unsigned <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `j` json <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8mb4;<br></code></pre></td></tr></table></figure><blockquote><p>json列不能有默认值，而且不能直接编入索引，可以在包含从json列中提取的生成列上创建索引，当从JSON列查询数据时，MySQL优化器将在匹配JSON表达式的虚拟列上查找兼容的索引。</p></blockquote><p>如下json数据，存储为两条记录</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> json_test <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;test&quot;,&quot;age&quot;: 14&#125;&#x27;</span>);<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> json_test <span class="hljs-keyword">values</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;&#123;&quot;name&quot;:&quot;test1&quot;,&quot;age&quot;: 12&#125;&#x27;</span>);<br></code></pre></td></tr></table></figure><p>查询，使用列路径运算符(<code>-&gt;</code>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id, j<span class="hljs-operator">-</span><span class="hljs-operator">&gt;</span><span class="hljs-string">&#x27;$.name&#x27;</span> <span class="hljs-keyword">as</span> name <span class="hljs-keyword">from</span> json_test;<br></code></pre></td></tr></table></figure><p>查询结果如下</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----+</span>------------+<br><span class="hljs-section">| id | name       |</span><br><span class="hljs-section">+----+------------+</span><br>|  1 | &quot;chengyao&quot; |<br><span class="hljs-section">|  2 | &quot;test&quot;     |</span><br><span class="hljs-section">+----+------------+</span><br></code></pre></td></tr></table></figure><p>name列值中有引号，怎么去掉，可以使用内联路径运算符( <code>-&gt;&gt;</code>)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id, j<span class="hljs-operator">-</span><span class="hljs-operator">&gt;&gt;</span><span class="hljs-string">&#x27;$.name&#x27;</span> <span class="hljs-keyword">as</span> name <span class="hljs-keyword">from</span> json_test;<br></code></pre></td></tr></table></figure><p>查询结果</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-code">+----+</span>----------+<br><span class="hljs-section">| id | name     |</span><br><span class="hljs-section">+----+----------+</span><br>|  1 | chengyao |<br><span class="hljs-section">|  2 | test     |</span><br><span class="hljs-section">+----+----------+</span><br></code></pre></td></tr></table></figure><p>json函数： <a href="https://blog.csdn.net/dragonpeng2008/article/details/89479698">(53条消息) MySQL常用Json函数_dragonpeng2008的博客-CSDN博客</a></p><h1 id="生成列"><a href="#生成列" class="headerlink" title="生成列"></a>生成列</h1><p><em>MySQL 5.7</em>引入了一个名为<em>生成列</em>的新功能。它之所以叫作<em>生成列</em>，因为此列中的数据是基于预定义的表达式或从其他列计算的。</p><p>例如，假设有以下结构的一个<code>contacts</code>表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> contacts (<br>    id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    first_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    last_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><p>要获取联系人的全名，请使用<code>CONCAT()</code>函数，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    id, CONCAT(first_name, <span class="hljs-string">&#x27; &#x27;</span>, last_name), email<br><span class="hljs-keyword">FROM</span><br>    contacts;<br></code></pre></td></tr></table></figure><p>这不是最优的查询。</p><p>通过使用MySQL生成的列，可以重新创建<code>contacts</code>表，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">EXISTS</span> contacts;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> contacts (<br>    id <span class="hljs-type">INT</span> AUTO_INCREMENT <span class="hljs-keyword">PRIMARY</span> KEY,<br>    first_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    last_name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    fullname <span class="hljs-type">varchar</span>(<span class="hljs-number">101</span>) GENERATED ALWAYS <span class="hljs-keyword">AS</span> (CONCAT(first_name,<span class="hljs-string">&#x27; &#x27;</span>,last_name)),<br>    email <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><p><code>GENERATED ALWAYS as(expression)</code>是创建生成列的语法。要测试“全名”列，请在<code>contacts</code>表中插入一行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> contacts(first_name,last_name, email)<br><span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;john&#x27;</span>,<span class="hljs-string">&#x27;doe&#x27;</span>,<span class="hljs-string">&#x27;john.doe@yiibai.com&#x27;</span>);<br></code></pre></td></tr></table></figure><p>现在，可以从<code>contacts</code>表中查询数据。</p><p>当从<code>contacts</code>表中查询数据时，<code>fullname</code>列中的值将立即计算。</p><p>MySQL提供了两种类型的生成列：存储和虚拟。每次读取数据时，虚拟列都将在运行中计算，而存储的列在数据更新时被物理计算和存储。</p><p>基于此定义，上述示例中的<code>fullname</code>列是虚拟列。</p><h2 id="MySQL生成列的语法"><a href="#MySQL生成列的语法" class="headerlink" title="MySQL生成列的语法"></a>MySQL生成列的语法</h2><p>定义生成列的语法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">column_name data_type [GENERATED ALWAYS] <span class="hljs-keyword">AS</span> (expression)<br>   [VIRTUAL <span class="hljs-operator">|</span> STORED] [<span class="hljs-keyword">UNIQUE</span> [KEY]]<br></code></pre></td></tr></table></figure><p>首先，指定列名及其数据类型。</p><p>接下来，添加<code>GENERATED ALWAYS</code>子句以指示列是生成的列。</p><p>然后，通过使用相应的选项来指示生成列的类型：<code>VIRTUAL</code>或<code>STORED</code>。 默认情况下，如果未明确指定生成列的类型，MySQL将使用<code>VIRTUAL</code>。</p><p>之后，在<code>AS</code>关键字后面的大括号内指定表达式。 该表达式可以包含文字，内置函数，无参数，操作符或对同一表中任何列的引用。 如果你使用一个函数，它必须是标量和确定性的。</p><p>最后，如果生成的列被存储，可以为它定义一个唯一约束。</p><h2 id="MySQL存储列示例"><a href="#MySQL存储列示例" class="headerlink" title="MySQL存储列示例"></a>MySQL存储列示例</h2><p>我们来看一下<code>products</code>表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">desc</span> products;<br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+---------------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> Field              <span class="hljs-operator">|</span> Type          <span class="hljs-operator">|</span> <span class="hljs-keyword">Null</span> <span class="hljs-operator">|</span> Key <span class="hljs-operator">|</span> <span class="hljs-keyword">Default</span> <span class="hljs-operator">|</span> Extra <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+---------------+------+-----+---------+-------+</span><br><span class="hljs-operator">|</span> productCode        <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">15</span>)   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> PRI <span class="hljs-operator">|</span>         <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> productName        <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">70</span>)   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> productLine        <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>)   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span> MUL <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> productScale       <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>)   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> productVendor      <span class="hljs-operator">|</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>)   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> productDescription <span class="hljs-operator">|</span> text          <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> quantityInStock    <span class="hljs-operator">|</span> <span class="hljs-type">smallint</span>(<span class="hljs-number">6</span>)   <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> buyPrice           <span class="hljs-operator">|</span> <span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">|</span> MSRP               <span class="hljs-operator">|</span> <span class="hljs-type">decimal</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>) <span class="hljs-operator">|</span> <span class="hljs-keyword">NO</span>   <span class="hljs-operator">|</span>     <span class="hljs-operator">|</span> <span class="hljs-keyword">NULL</span>    <span class="hljs-operator">|</span>       <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">--------------------+---------------+------+-----+---------+-------+</span><br><span class="hljs-number">9</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span><br></code></pre></td></tr></table></figure><p>使用<code>quantityInStock</code>和<code>buyPrice</code>列的数据，通过以下表达式计算每个<code>SKU</code>的股票值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">quantityInStock <span class="hljs-operator">*</span> buyPrice<br></code></pre></td></tr></table></figure><p>但是，可以使用以下<a href="http://www.yiibai.com/mysql/add-column.html" title="ALTER TABLE ... ADD COLUMN">ALTER TABLE … ADD COLUMN</a>语句将名为<code>stock_value</code>的存储的生成列添加到<code>products</code>表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> products<br><span class="hljs-keyword">ADD</span> <span class="hljs-keyword">COLUMN</span> stockValue <span class="hljs-keyword">DOUBLE</span> <br>GENERATED ALWAYS <span class="hljs-keyword">AS</span> (buyprice<span class="hljs-operator">*</span>quantityinstock) STORED;<br></code></pre></td></tr></table></figure><p>通常，<code>ALTER TABLE</code>语句需要完整的表重建，因此，如果更改大表是耗时的。 但是，虚拟列并非如此。</p><p>现在，我们可以直接从<code>products</code>表中查询库存值。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <br>    productName, ROUND(stockValue, <span class="hljs-number">2</span>) <span class="hljs-keyword">AS</span> stock_value<br><span class="hljs-keyword">FROM</span><br>    products;<br></code></pre></td></tr></table></figure><p>执行上面查询语句，得到以下结果 -</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell">+---------------------------------------------+-------------+<br>| productName                                 | stock_value |<br>+---------------------------------------------+-------------+<br>| 1969 Harley Davidson Ultimate Chopper       |   387209.73 |<br>| 1952 Alpine Renault 1300                    |   720126.90 |<br>| 1996 Moto Guzzi 1100i                       |   457058.75 |<br>| 2003 Harley-Davidson Eagle Drag Bike        |   508073.64 |<br>| 1972 Alfa Romeo GTA                         |   278631.36 |<br>| 1962 LanciaA Delta 16V                      |   702325.22 |<br>| 1968 Ford Mustang                           |     6483.12 |<br>|************** 省略了一大波数据 ****************************|<br>| The Queen Mary                              |   272869.44 |<br>| American Airlines: MD-11S                   |   319901.40 |<br>| Boeing X-32A JSF                            |   159163.89 |<br>| Pont Yacht                                  |    13786.20 |<br>+---------------------------------------------+-------------+<br>110 rows in set<br></code></pre></td></tr></table></figure><p>参考： <a href="https://www.yiibai.com/mysql/generated-columns.html">MySQL生成列 - MySQL教程 (yiibai.com)</a></p><h1 id="常见错误处理"><a href="#常见错误处理" class="headerlink" title="常见错误处理"></a>常见错误处理</h1><h2 id="Operation-CREATE-USER-failed-for-XXX"><a href="#Operation-CREATE-USER-failed-for-XXX" class="headerlink" title="Operation CREATE USER failed for XXX"></a>Operation CREATE USER failed for XXX</h2><p>原因：可能是执行了如下操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span>  <span class="hljs-keyword">from</span>  mysql.user  <span class="hljs-keyword">where</span> <span class="hljs-keyword">user</span> <span class="hljs-operator">=</span><span class="hljs-string">&#x27;user_1&#x27;</span>;<br></code></pre></td></tr></table></figure><p>需要再执行下面命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> user1;<br></code></pre></td></tr></table></figure><h2 id="ERROR-1269-HY000-Can’t-revoke-all-privileges-for-one-or-more-of-the-requested-users"><a href="#ERROR-1269-HY000-Can’t-revoke-all-privileges-for-one-or-more-of-the-requested-users" class="headerlink" title="ERROR 1269 (HY000): Can’t revoke all privileges for one or more of the requested users"></a>ERROR 1269 (HY000): Can’t revoke all privileges for one or more of the requested users</h2><p>需要加上host，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">REVOKE</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <span class="hljs-string">&#x27;testuser&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="字符校对规则问题"><a href="#字符校对规则问题" class="headerlink" title="字符校对规则问题"></a>字符校对规则问题</h2><p>查询视图时报错：java.sql.SQLException: Illegal mix of collations (utf8mb4_general_ci,IMPLICIT) and (utf8mb4_0900_ai_ci,IMPLICIT) for operation ‘&#x3D;’；</p><p>本地环境:<code>mysql8.0.13</code></p><p>异常提示排序规则编码混乱，mysql8.0.1之后的默认COLLATE为utf8mb4_0900_ai_ci；</p><p>检查视图中所包含的表发现其中一个建表时 没有设置编码，并且其他的表设置的是 CHARSET&#x3D;utf8mb4 COLLATE&#x3D;utf8mb4_general_ci；因此导致混乱；</p><p>查看当前数据库的默认编码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show variables <span class="hljs-built_in">where</span> Variable_name like <span class="hljs-string">&#x27;collation%&#x27;</span>;</span><br></code></pre></td></tr></table></figure><p>查看各表编码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">show create table ‘table_name’;</span><br></code></pre></td></tr></table></figure><p>解决方案给没有设置编码的表重新设置一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">alter table table_name default character <span class="hljs-built_in">set</span> utf8mb4 collate=utf8mb4_general_ci;</span><br></code></pre></td></tr></table></figure><p>这样设置只针对表的，但是表中字段未修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">mysql&gt; </span><span class="language-bash">ALTER TABLE table_name convert to CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;</span><br></code></pre></td></tr></table></figure><p>修改完成以后，重新创建视图！！！！</p><h2 id="排序内存溢出问题"><a href="#排序内存溢出问题" class="headerlink" title="排序内存溢出问题"></a>排序内存溢出问题</h2><p>报错：<br><code>SQLSTATE[HY001]: Memory allocation error: 1038 Out of sort memory, consider increasing sort buffer size</code></p><p>找到mysql配置文件（我的是<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>）, 添加一行</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">sort_buffer_size</span>        = <span class="hljs-number">16</span>M<br></code></pre></td></tr></table></figure><p>重启数据库，报错继续加大</p><h2 id="数据类型相关"><a href="#数据类型相关" class="headerlink" title="数据类型相关"></a>数据类型相关</h2><p>记录datetime到毫秒<br>5.6 之后可以将字段类型设置为datetime(3), 其中的数字表示精度，三位精确到毫秒</p><h2 id="Incorrect-key-file-for-notes"><a href="#Incorrect-key-file-for-notes" class="headerlink" title="Incorrect key file for notes"></a>Incorrect key file for notes</h2><p>解决方案（目前使用myisam引擎）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">optimize <span class="hljs-keyword">table</span> notes;<br></code></pre></td></tr></table></figure><p>如果不行就google一下</p><h2 id="不用密码登录"><a href="#不用密码登录" class="headerlink" title="不用密码登录"></a>不用密码登录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /etc/my.cnf<br></code></pre></td></tr></table></figure><p>在[mysqld]段后加一行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">skip</span><span class="hljs-operator">-</span><span class="hljs-keyword">grant</span><span class="hljs-operator">-</span>tables<br></code></pre></td></tr></table></figure><p>或者用这条命令运行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/usr/</span>bin/mysqld --skip-grant-tables<br></code></pre></td></tr></table></figure><p>重启mysql</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/i</span>nit.d/mysql restart<br>service mysql restart<br></code></pre></td></tr></table></figure><h2 id="修改validate-password-policy参数的值"><a href="#修改validate-password-policy参数的值" class="headerlink" title="修改validate_password_policy参数的值"></a>修改validate_password_policy参数的值</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global <span class="hljs-attribute">validate_password_policy</span>=0;<br><span class="hljs-comment">#validate_password_length(密码长度)参数默认为8，修改为需要长度</span><br><span class="hljs-built_in">set</span> global <span class="hljs-attribute">validate_password_length</span>=1;<br></code></pre></td></tr></table></figure><h2 id="mysqld命令"><a href="#mysqld命令" class="headerlink" title="mysqld命令"></a>mysqld命令</h2><p><a href="https://www.cnblogs.com/shymen/p/8850655.html">https://www.cnblogs.com/shymen/p/8850655.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于版权和开源协议</title>
    <link href="/2021/07/04/%E5%85%B3%E4%BA%8E%E7%89%88%E6%9D%83%E5%92%8C%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/07/04/%E5%85%B3%E4%BA%8E%E7%89%88%E6%9D%83%E5%92%8C%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<p>相信大家都有在一些软件或者网页的某个角落里看到这样一个词：<code>Copyright</code> 或者一个<code>©</code>的符号，那么这个<code>Copyright</code> 是什么意思呢? 直译过来就是<code>版权</code>,<code>受版权保护的</code>, 它指的是保留一切权利，即软件的一切权力归作者所有。其中包括开源软件，免费软件，共享软件，传统商业软件。 <code>Copyright</code> 是商业软件中最常用的。这种软件用户只有使用权，可以通过出售，出售源代码等方式来盈利。<br>理查德﹡斯托曼（Richard Matthew Stallman, RMS…）声称: &quot;软件的自由，关系到人类的自由&quot; , 在1983年9月创建了GNU项目，1984年发表了《GNU宣言》，抨击了封闭源代码的行为，同时<code>Copyleft</code> 一词也诞生了。</p><p>&gt; （转）（1）Linux仅仅是一个内核，由林纳斯创始。内核是什么？内核建立了计算机软件与硬件之间通讯的平台，内核提供系统服务，比如文件管理、虚拟内存、设备I&#x2F;O等。由此可见，内核解决的问题是硬件管理，并不包含外围的应用程序，所以对于大多数人来说无法正常使用。（2）GNU是一个技术组织，发起人是 Richard Stallman。GNU的哲学就是：软件源码看成人类共同拥有的知识财富，应该公开地自由交换、修改。在Richard Stallman精神感召下，林纳斯带着Linux加入了GNU组织，Linux本身遵循GPL版权可协议，同时又把GNU的很多软件集成了进去，从而形成了GNU&#x2F;Linux。GNU&#x2F;Linux的意思是：外围程序&#x2F;操作系统内核。补充：关于GNU和Linux的更多介绍请参考：什么是Linux、GNU&#x2F;Linux、GNU、GPL？ 参考： <a href="https://www.zhihu.com/question/39160602/answer/1690683979">https://www.zhihu.com/question/39160602/answer/1690683979</a></p><p><code>Copyleft</code> 现在被译作<code>公共版权</code>,<code>非盈利版权</code>， 它反对一切权力归作者所有，保护知识共享，权利共享，用户和作者拥有除了版权以外的完全同等的权力，包括复制和再发布，唯一不许可的就是不允许任何人将软件据为私有。<code>Copyleft</code> 是为了反对商业软件而生的，但是也并不是放弃了版权，它也被译作“著佐权”， 即通过许可证的形式，补足，辅佐著作权不足的版权授权。</p><p>基于<code>Copyleft</code>思想的<code>GPL</code>协议是使用最广泛的许可证之一。这个许可证在开放源代码的前提下要求用户修改后的软件要开源，并且如果用户将<code>GPL</code>许可证的软件添加到专有软件，那么新组合的软件也应当全部适用于<code>GPL</code>协议，，也就是说，组合里的软件必须要开源，所以<code>GPL</code>协议被称为具有&quot;传染性&quot;的协议。</p><p>&gt; （转）开源就是为了包容更多东西，圈子越大生态越大，基于生态就可以做商业化。</p><p>那么有人会问：如果我使用了开源软件，但是没有遵守开源协议，会有什么后果呢？ 举个例子吧， 数字天堂有一款软件Hbuilder, 柚子（北京）移动信息技术有限公司的软件APICloud复制并修改了Hbuilder中的3个插件，而这三个插件全部采用了GPL协议，但是APICloud却没有全部开源，因此柚子公司被数字天堂索赔184万元。</p><p>所以大家在使用开源软件时候一定要确认软件的许可协议，比如Apache2.0, MIT，BSD等等，还需要了解使用这些协议的开源软件要注意什么，比如版权信息是否需要加在每个文件中，修改后能否闭源，至于这些内容的话，网上有一张图大家可以百度下&quot;一张图看懂开源协议&quot; 这样的关键字，就可以看到针对6种开源协议需要注意的内容。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>查看mysql数据库容量大小</title>
    <link href="/2021/07/02/%E6%9F%A5%E7%9C%8Bmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%B9%E9%87%8F%E5%A4%A7%E5%B0%8F/"/>
    <url>/2021/07/02/%E6%9F%A5%E7%9C%8Bmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%B9%E9%87%8F%E5%A4%A7%E5%B0%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="第一种情况"><a href="#第一种情况" class="headerlink" title="第一种情况"></a>第一种情况</h1><h2 id="查询所有数据库的总大小，方法如下："><a href="#查询所有数据库的总大小，方法如下：" class="headerlink" title="查询所有数据库的总大小，方法如下："></a>查询所有数据库的总大小，方法如下：</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&amp;</span>gt; use information_schema;<br>mysql<span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">select</span> concat(round(<span class="hljs-built_in">sum</span>(DATA_LENGTH<span class="hljs-operator">/</span><span class="hljs-number">1024</span><span class="hljs-operator">/</span><span class="hljs-number">1024</span>),<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;MB&#x27;</span>) <span class="hljs-keyword">as</span> data <span class="hljs-keyword">from</span> TABLES;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+</span><br><span class="hljs-operator">|</span> data      <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">3052.76</span>MB <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">-----------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.02</span> sec)<br></code></pre></td></tr></table></figure><h2 id="统计一下所有库数据量"><a href="#统计一下所有库数据量" class="headerlink" title="统计一下所有库数据量"></a>统计一下所有库数据量</h2><p>每张表数据量<code>=AVG_ROW_LENGTH*TABLE_ROWS+INDEX_LENGTH</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">SUM</span>(AVG_ROW_LENGTH<span class="hljs-operator">*</span>TABLE_ROWS<span class="hljs-operator">+</span>INDEX_LENGTH)<span class="hljs-operator">/</span><span class="hljs-number">1024</span><span class="hljs-operator">/</span><span class="hljs-number">1024</span> <span class="hljs-keyword">AS</span> total_mb <span class="hljs-keyword">FROM</span> information_schema.TABLES <br></code></pre></td></tr></table></figure><h2 id="统计每个库大小："><a href="#统计每个库大小：" class="headerlink" title="统计每个库大小："></a>统计每个库大小：</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">SELECT</span> table_schema,SUM(AVG_ROW_LENGTH*TABLE_ROWS+INDEX_LENGTH)/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span> <span class="hljs-keyword">AS</span> total_mb <span class="hljs-keyword">FROM</span> information_schema.<span class="hljs-keyword">TABLES</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> table_schema;  <br></code></pre></td></tr></table></figure><h1 id="第二种情况"><a href="#第二种情况" class="headerlink" title="第二种情况"></a>第二种情况</h1><p>&gt;查看指定数据库的大小，比如说：数据库test，方法如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&amp;</span>gt; use information_schema;<br>mysql<span class="hljs-operator">&amp;</span>gt; <span class="hljs-keyword">select</span> concat(round(<span class="hljs-built_in">sum</span>(DATA_LENGTH<span class="hljs-operator">/</span><span class="hljs-number">1024</span><span class="hljs-operator">/</span><span class="hljs-number">1024</span>),<span class="hljs-number">2</span>),<span class="hljs-string">&#x27;MB&#x27;</span>) <span class="hljs-keyword">as</span> data <span class="hljs-keyword">from</span> TABLES <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;test&#x27;</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span> data     <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-operator">|</span> <span class="hljs-number">142.84</span>MB <span class="hljs-operator">|</span><br><span class="hljs-operator">+</span><span class="hljs-comment">----------+</span><br><span class="hljs-number">1</span> <span class="hljs-type">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></td></tr></table></figure><h2 id="查看所有数据库各容量大小"><a href="#查看所有数据库各容量大小" class="headerlink" title="查看所有数据库各容量大小"></a>查看所有数据库各容量大小</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span><br>table_schema <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;数据库&#x27;</span>,<br>sum(table_rows) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;记录数&#x27;</span>,<br>sum(<span class="hljs-keyword">truncate</span>(data_length/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>, <span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;数据容量(MB)&#x27;</span>,<br>sum(<span class="hljs-keyword">truncate</span>(index_length/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>, <span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;索引容量(MB)&#x27;</span><br><span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span><br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> table_schema<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> sum(data_length) <span class="hljs-keyword">desc</span>, sum(index_length) <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><h2 id="查看所有数据库各表容量大小"><a href="#查看所有数据库各表容量大小" class="headerlink" title="查看所有数据库各表容量大小"></a>查看所有数据库各表容量大小</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span><br>table_schema <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;数据库&#x27;</span>,<br><span class="hljs-built_in">table_name</span> <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;表名&#x27;</span>,<br>table_rows <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;记录数&#x27;</span>,<br><span class="hljs-keyword">truncate</span>(data_length/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;数据容量(MB)&#x27;</span>,<br><span class="hljs-keyword">truncate</span>(index_length/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;索引容量(MB)&#x27;</span><br><span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> data_length <span class="hljs-keyword">desc</span>, index_length <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><h2 id="查看指定数据库容量大小"><a href="#查看指定数据库容量大小" class="headerlink" title="查看指定数据库容量大小"></a>查看指定数据库容量大小</h2><p>例：查看mysql库容量大小</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span><br>table_schema <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;数据库&#x27;</span>,<br>sum(table_rows) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;记录数&#x27;</span>,<br>sum(<span class="hljs-keyword">truncate</span>(data_length/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>, <span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;数据容量(MB)&#x27;</span>,<br>sum(<span class="hljs-keyword">truncate</span>(index_length/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>, <span class="hljs-number">2</span>)) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;索引容量(MB)&#x27;</span><br><span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span><br><span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;mysql&#x27;</span>;　<br></code></pre></td></tr></table></figure><h2 id="查看指定数据库各表容量大小"><a href="#查看指定数据库各表容量大小" class="headerlink" title="查看指定数据库各表容量大小"></a>查看指定数据库各表容量大小</h2><p>例：查看mysql库各表容量大小</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span><br>table_schema <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;数据库&#x27;</span>,<br><span class="hljs-built_in">table_name</span> <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;表名&#x27;</span>,<br>table_rows <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;记录数&#x27;</span>,<br><span class="hljs-keyword">truncate</span>(data_length/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;数据容量(MB)&#x27;</span>,<br><span class="hljs-keyword">truncate</span>(index_length/<span class="hljs-number">1024</span>/<span class="hljs-number">1024</span>, <span class="hljs-number">2</span>) <span class="hljs-keyword">as</span> <span class="hljs-string">&#x27;索引容量(MB)&#x27;</span><br><span class="hljs-keyword">from</span> information_schema.<span class="hljs-keyword">tables</span><br><span class="hljs-keyword">where</span> table_schema=<span class="hljs-string">&#x27;mysql&#x27;</span><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> data_length <span class="hljs-keyword">desc</span>, index_length <span class="hljs-keyword">desc</span>;<br></code></pre></td></tr></table></figure><p>&gt; 原文地址：<a href="https://www.cnblogs.com/--smile/p/11451238.html">https://www.cnblogs.com/--smile/p/11451238.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Nginx-基础总结</title>
    <link href="/2021/06/16/Nginx-%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <url>/2021/06/16/Nginx-%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>原文地址：<a href="https://www.mwbo.com/133.html">https://www.mwbo.com/133.html</a></p><h1 id="常规配置模板"><a href="#常规配置模板" class="headerlink" title="常规配置模板"></a>常规配置模板</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#user  www www;</span><br><span class="hljs-attribute">worker_processes</span> auto;<br><span class="hljs-attribute">error_log</span>  /home/wwwlogs/nginx_error.log <span class="hljs-literal">crit</span>;<br><span class="hljs-comment">#pid        /usr/local/nginx/nginx.pid;</span><br><br><span class="hljs-comment">#Specifies the value for maximum file descriptors that can be opened by this process.</span><br><span class="hljs-attribute">worker_rlimit_nofile</span> <span class="hljs-number">655350</span>;<br><br><span class="hljs-section">events</span><br>&#123;<br><span class="hljs-attribute">use</span> <span class="hljs-literal">epoll</span>;<br><span class="hljs-attribute">worker_connections</span> <span class="hljs-number">655350</span>;<br>&#125;<br><br><span class="hljs-section">http</span><br>&#123;<br><span class="hljs-attribute">include</span>       mime.types;<br><span class="hljs-attribute">default_type</span>  application/octet-stream;<br><br><span class="hljs-attribute">server_names_hash_bucket_size</span> <span class="hljs-number">128</span>;<br><span class="hljs-attribute">client_header_buffer_size</span> <span class="hljs-number">32k</span>;<br><span class="hljs-attribute">large_client_header_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">32k</span>;<br><span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">50m</span>;  <span class="hljs-comment"># 如果报错413，可以尝试将这个参数改大</span><br><span class="hljs-attribute">server_tokens</span> <span class="hljs-literal">off</span>;<br><br><span class="hljs-attribute">sendfile</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">tcp_nopush</span>     <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">tcp_nodelay</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">keepalive_timeout</span> <span class="hljs-number">60</span>;<br><br><br><span class="hljs-attribute">fastcgi_connect_timeout</span> <span class="hljs-number">300</span>;<br><span class="hljs-attribute">fastcgi_send_timeout</span> <span class="hljs-number">300</span>;<br><span class="hljs-attribute">fastcgi_read_timeout</span> <span class="hljs-number">300</span>;<br><span class="hljs-attribute">fastcgi_buffer_size</span> <span class="hljs-number">64k</span>;<br><span class="hljs-attribute">fastcgi_buffers</span> <span class="hljs-number">4</span> <span class="hljs-number">64k</span>;<br><span class="hljs-attribute">fastcgi_busy_buffers_size</span> <span class="hljs-number">128k</span>;<br><span class="hljs-attribute">fastcgi_temp_file_write_size</span> <span class="hljs-number">256k</span>;<br><span class="hljs-attribute">proxy_connect_timeout</span> <span class="hljs-number">600</span>;<br><span class="hljs-attribute">proxy_read_timeout</span> <span class="hljs-number">600</span>;<br><span class="hljs-attribute">proxy_send_timeout</span> <span class="hljs-number">600</span>;<br><span class="hljs-attribute">proxy_buffer_size</span> <span class="hljs-number">64k</span>;<br><span class="hljs-attribute">proxy_buffers</span>   <span class="hljs-number">4</span> <span class="hljs-number">32k</span>;<br><span class="hljs-attribute">proxy_busy_buffers_size</span> <span class="hljs-number">64k</span>;<br><span class="hljs-attribute">proxy_temp_file_write_size</span> <span class="hljs-number">64k</span>;<br><br><span class="hljs-attribute">gzip</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">gzip_min_length</span>  <span class="hljs-number">1k</span>;<br><span class="hljs-attribute">gzip_buffers</span>     <span class="hljs-number">4</span> <span class="hljs-number">16k</span>;<br><span class="hljs-attribute">gzip_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">0</span>;<br><span class="hljs-attribute">gzip_comp_level</span> <span class="hljs-number">2</span>;<br><span class="hljs-attribute">gzip_types</span>  text/plain application/x-javascript text/css application/xml text/xml application/json;<br><span class="hljs-attribute">gzip_vary</span> <span class="hljs-literal">on</span>;<br><span class="hljs-attribute">log_format</span>  access <span class="hljs-string">&#x27;<span class="hljs-variable">$remote_addr</span> - <span class="hljs-variable">$remote_user</span> [<span class="hljs-variable">$time_local</span>] <span class="hljs-variable">$host</span> &#x27;</span><br>                                   <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$request</span>&quot; <span class="hljs-variable">$status</span> <span class="hljs-variable">$body_bytes_sent</span> <span class="hljs-variable">$request_time</span> &#x27;</span><br>                                   <span class="hljs-string">&#x27;&quot;<span class="hljs-variable">$http_referer</span>&quot; &quot;<span class="hljs-variable">$http_user_agent</span>&quot; &quot;<span class="hljs-variable">$http_x_forwarded_for</span>&quot;&#x27;</span><br>                                   <span class="hljs-string">&#x27;<span class="hljs-variable">$upstream_addr</span> <span class="hljs-variable">$upstream_status</span> <span class="hljs-variable">$upstream_response_time</span>&#x27;</span> ;<br><br> <span class="hljs-comment">#设置Web缓存区名称为cache_one，内存缓存空间大小为256MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。</span><br><span class="hljs-attribute">proxy_temp_path</span>   /home/proxy_temp_dir;<br><span class="hljs-attribute">proxy_cache_path</span>  /home/proxy_cache_path levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=cache_one:<span class="hljs-number">256m</span> inactive=<span class="hljs-number">1d</span> max_size=<span class="hljs-number">30g</span>;<br><br>        <span class="hljs-section">server</span> &#123;<br>            <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>            <span class="hljs-attribute">server_name</span>  _;<br>            <span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>        &#125;<br>        <span class="hljs-attribute">include</span> vhost/<span class="hljs-regexp">*.conf</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>以“exmaple.org”为例，如下为基于 upstream 负载均衡模式的配置：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs awk">upstream example_backend &#123;<br>        server   <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9080</span>;<br>        server   <span class="hljs-number">192.168</span>.<span class="hljs-number">1.198</span>:<span class="hljs-number">9080</span>;<br>        server <span class="hljs-number">172.16</span>.<span class="hljs-number">0.4</span>:<span class="hljs-number">80</span> weight=<span class="hljs-number">5</span> max_fails=<span class="hljs-number">3</span> fail_timeout=<span class="hljs-number">10</span>s; <span class="hljs-comment"># 权重、健康监测</span><br>        server <span class="hljs-number">172.16</span>.<span class="hljs-number">0.5</span>:<span class="hljs-number">8080</span> backup; <span class="hljs-comment"># 备份节点,</span><br>        ip_hash;  <span class="hljs-comment">#调度算法</span><br> &#125;<br><br><br>server &#123;<br>        listen <span class="hljs-number">80</span>;<br>        server_name www.example.org example.com .example.org;<br><br>    location / &#123;<br><span class="hljs-comment"># 如果后端服务器出现502 或504错误代码的话nginx就不会请求某台服务器了,当后端服务器又工作正常了,nginx继续请求,这样一来达到了后端服务器健康状况检测的功能,</span><br>        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;<br>        proxy_pass http:<span class="hljs-regexp">//</span>example_backend;<br>        proxy_http_version <span class="hljs-number">1.1</span>;<br>        proxy_set_header        Host    <span class="hljs-variable">$host</span>;<br>        proxy_set_header        X-Real-IP       <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header        X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br><br>        <span class="hljs-comment"># 设置后端连接超时时间</span><br>        proxy_connect_timeout   <span class="hljs-number">600</span>;<br>        proxy_read_timeout  <span class="hljs-number">600</span>;<br>        proxy_send_timeout  <span class="hljs-number">600</span>;<br>        proxy_buffer_size   <span class="hljs-number">8</span>k;<br>        proxy_temp_file_write_size  <span class="hljs-number">64</span>k;<br><br>        <span class="hljs-comment"># nginx本地cache开启</span><br>        proxy_cache cache_one;<br>        proxy_cache_valid <span class="hljs-number">200</span> <span class="hljs-number">304</span> <span class="hljs-number">30</span>d;<br>        proxy_cache_valid <span class="hljs-number">301</span> <span class="hljs-number">302</span> <span class="hljs-number">404</span> <span class="hljs-number">1</span>m;<br>        proxy_cache_valid any <span class="hljs-number">1</span>m;<br>        proxy_cache_key <span class="hljs-variable">$host</span><span class="hljs-variable">$request_uri</span>;<br><br>        <span class="hljs-comment"># 客户端缓存，在header中增加“Expires”</span><br>        expires <span class="hljs-number">30</span>d;<br>        add_header Cache-Control public;<br>        add_header X-Proxy-Cache <span class="hljs-variable">$upstream_cache_status</span>;<br><br>        proxy_set_header If-Modified-Since <span class="hljs-variable">$http_if_modified_since</span>;<br>        if_modified_since before;<br>    &#125;<br><br>    location ~ .*\.(gif|jpg|jpeg|png|bmp|ico|swf|xml|css|js)$ &#123;<br>        proxy_pass      http:<span class="hljs-regexp">//</span>example_backend;<br>        proxy_set_header        Host    <span class="hljs-variable">$host</span>;<br>        proxy_set_header        X-Real-IP       <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header        X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        expires <span class="hljs-number">15</span>d;<br>    &#125;<br>    location ~ .*\.(jhtml)$ &#123;<br>        proxy_pass      http:<span class="hljs-regexp">//</span>example_backend;<br>        proxy_set_header        Host    <span class="hljs-variable">$host</span>;<br>        proxy_set_header        X-Real-IP       <span class="hljs-variable">$remote_addr</span>;<br>        proxy_set_header        X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        expires -<span class="hljs-number">1</span>;<br>    &#125;<br>    access_log  logs/www.example.org.log;<br>&#125;<br></code></pre></td></tr></table></figure><p>其他的 proxy 配置：</p><p>1.proxy_set_header :在将客户端请求发送给后端服务器之前，更改来自客户端的请求头信息。<br>2.proxy_connect_timeout:配置Nginx与后端代理服务器尝试建立连接的超时时间。<br>3.proxy_read_timeout : 配置Nginx向后端服务器组发出read请求后，等待相应的超时时间。<br>4.proxy_send_timeout：配置Nginx向后端服务器组发出write请求后，等待相应的超时时间。<br>5.proxy_redirect :用于修改后端服务器返回的响应头中的Location和Refresh。</p><h1 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># htpasswd -bc <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>auth/passwd admin <span class="hljs-number">123456</span><br>vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf<span class="hljs-regexp">/vhost/</span>www.conf<br>server &#123;<br>        listen   <span class="hljs-number">80</span>;<br>        server_name www.com;<br>        index  index.html index.htm;<br>        root /www;<br>location / &#123;<br>         auth_basic <span class="hljs-string">&quot;test&quot;</span>;<br>         auth_basic_user_file <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>auth/passwd;<br>&#125;<br><br>#service nginx restart<br></code></pre></td></tr></table></figure><h1 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 提示： add_header 也可以添加到 server 中，这样当前 server 下都允许跨域</span><br><span class="hljs-section">server</span><br>&#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">3002</span>;<br>    <span class="hljs-attribute">server_name</span> localhost;<br>    <span class="hljs-section">location</span> /ok &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://localhost:3000;<br><br>        <span class="hljs-comment">#   指定允许跨域的方法，*代表所有</span><br>        <span class="hljs-attribute">add_header</span> Access-Control-Allow-Methods *;<br><br>        <span class="hljs-comment">#   预检命令的缓存，如果不缓存每次会发送两次请求</span><br>        <span class="hljs-attribute">add_header</span> Access-Control-Max-Age <span class="hljs-number">3600</span>;<br><br>        <span class="hljs-comment">#   带cookie请求需要加上这个字段，并设置为true</span><br>        <span class="hljs-attribute">add_header</span> Access-Control-Allow-Credentials <span class="hljs-literal">true</span>;<br><br>        <span class="hljs-comment">#   表示允许这个域跨域调用（客户端发送请求的域名和端口）</span><br>        <span class="hljs-comment">#   $http_origin动态获取请求客户端请求的域   不用*的原因是带cookie的请求不支持*号</span><br>        <span class="hljs-attribute">add_header</span> Access-Control-Allow-Origin <span class="hljs-variable">$http_origin</span>;<br><br>        <span class="hljs-comment">#   表示请求头的字段 动态获取</span><br>        <span class="hljs-attribute">add_header</span> Access-Control-Allow-Headers <span class="hljs-variable">$http_access_control_request_headers</span>;<br><br>        <span class="hljs-comment">#   OPTIONS预检命令，预检命令通过时才发送请求</span><br>        <span class="hljs-comment">#   检查请求的类型是不是预检命令</span><br>        <span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = OPTIONS)&#123;<br>            <span class="hljs-attribute">return</span> <span class="hljs-number">200</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="URL-重写"><a href="#URL-重写" class="headerlink" title="URL 重写"></a>URL 重写</h1><p>比如说访问某站点的路径为&#x2F;forum&#x2F; , 此时想使用&#x2F;bbs 来访问此站点需要做 url 重写如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">location / &#123;<br>rewrite ^<span class="hljs-regexp">/forum/</span>?$ <span class="hljs-regexp">/bbs/</span> permanent;<br>&#125;<br></code></pre></td></tr></table></figure><p>比如说某站点有个图片服务器(10.0.0.1&#x2F;p_w_picpaths&#x2F; ) 此时访问某站点上&#x2F;p_w_picpaths&#x2F;的资源时希望访问到图片服务器上的资源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">location / &#123;<br>rewrite ^<span class="hljs-regexp">/p_w_picpaths/</span>(.*\.jpg)$  <span class="hljs-regexp">/p_w_picpaths2/</span><span class="hljs-variable">$1</span> <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="域名跳转"><a href="#域名跳转" class="headerlink" title="域名跳转"></a>域名跳转</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> www.com;<br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/</span> http://www.www.com/;<br>    <span class="hljs-comment"># return 301 http://www.andy.com/;</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$host</span> != <span class="hljs-string">&#x27;www.xyz.com&#x27;</span>) &#123;         <span class="hljs-comment">####注意，这里很严格，if后面要有空格，!=两边都是空格。</span><br>   <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/(.*)$</span> http://www.xyz.com/<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="域名镜像"><a href="#域名镜像" class="headerlink" title="域名镜像"></a>域名镜像</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  www.com;<br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/(.*)$</span> http://www.www.com/<span class="hljs-variable">$1</span> <span class="hljs-literal">last</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断表达式</p><p>-f 和 !-f 用来判断是否存在文件</p><p>-d 和 !-d 用来判断是否存在目录</p><p>-e 和 !-e 用来判断是否存在文件或目录</p><p>-x 和 !-x 用来判断文件是否可执行</p><h1 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~* \.(gif|jpg|png|swf|flv)$</span> &#123;<br>  <span class="hljs-attribute">valid_referers</span> <span class="hljs-literal">none</span> <span class="hljs-literal">blocked</span> www.com;<br>  <span class="hljs-attribute">if</span> (<span class="hljs-variable">$invalid_referer</span>) &#123;<br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/</span> http://www.com/403.html;<br>  &#125;<br></code></pre></td></tr></table></figure><h1 id="会话保持"><a href="#会话保持" class="headerlink" title="会话保持"></a>会话保持</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># ip_hash使用源地址哈希算法，将同一客户端的请求只发往同一个后端服务器（除非该服务器不可用）。</span><br><span class="hljs-comment"># 问题： 当后端服务器宕机后，session会话丢失；同一客户端会被转发到同一个后端服务器，可能导致负载失衡；</span><br>upstream <span class="hljs-keyword">backend </span>&#123;<br>    ip_hash;<br>    server <span class="hljs-keyword">backend1.example.com;</span><br><span class="hljs-keyword"></span>    server <span class="hljs-keyword">backend2.example.com;</span><br><span class="hljs-keyword"></span>    server <span class="hljs-keyword">backend3.example.com </span>down;<br>&#125;<br></code></pre></td></tr></table></figure><p>sticky_cookie_insert</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 使用sticky_cookie_insert 启用会话亲缘关系，会导致来自同一客户端的请求被传递到一组服务器的同一台服务器。与ip_hash不同之处在于，它不是基于IP来判断客户端的，而是基于cookie来判断。因此可以避免上述ip_hash中来自同一客户端导致负载失衡的情况(需要引入第三方模块才能实现)。</span><br><span class="hljs-section">upstream</span> backend &#123;<br>    <span class="hljs-attribute">server</span> backend1.example.com;<br>    <span class="hljs-attribute">server</span> backend2.example.com;<br>    <span class="hljs-attribute">sticky_cookie_insert</span> srv_id expires=<span class="hljs-number">1h</span> domain=3evip.cn path=/;<br>&#125;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> 3evip.cn;<br>    <span class="hljs-section">location</span> / &#123;<br>    <span class="hljs-attribute">proxy_pass</span> http://backend;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>expires：设置浏览器中保持 cookie 的时间<br>domain：定义 cookie 的域<br>path：为 cookie 定义路径</p><h1 id="日志切割"><a href="#日志切割" class="headerlink" title="日志切割"></a>日志切割</h1><p><strong>示列一</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 适合单个网站日志文件</span><br><br>LOGS_PATH=/home/wwwroot/yunwei/logs<br>yesterday=`<span class="hljs-built_in">date</span>  +<span class="hljs-string">&quot;%F&quot;</span> -d  <span class="hljs-string">&quot;-1 days&quot;</span>`<br><span class="hljs-built_in">mv</span> <span class="hljs-variable">$&#123;LOGS_PATH&#125;</span>/yunwei.log  <span class="hljs-variable">$&#123;LOGS_PATH&#125;</span>/yunwei-<span class="hljs-variable">$&#123;yesterday&#125;</span>.<span class="hljs-built_in">log</span><br><span class="hljs-built_in">kill</span> -USR1 $(<span class="hljs-built_in">cat</span> /var/logs/nginx.pid)<br></code></pre></td></tr></table></figure><p><strong>示列二</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#nginx日志切割</span><br><br><span class="hljs-comment"># Nginx pid</span><br>NGINX_PID=$(<span class="hljs-built_in">cat</span> /var/logs/nginx.pid)<br><br><span class="hljs-comment"># 多个日志文件</span><br>LOGS=(xxx.access.log xxx.access.log)<br><br><span class="hljs-comment"># Nginx日志路径目录</span><br>BASH_PATH=<span class="hljs-string">&quot;/www/wwwlogs&quot;</span><br><br><span class="hljs-comment"># xxxx年xx月</span><br>lOG_PATH=$(<span class="hljs-built_in">date</span> -d yesterday +<span class="hljs-string">&quot;%Y%m&quot;</span>)<br><br><span class="hljs-comment"># 昨天日期</span><br>DAY=$(<span class="hljs-built_in">date</span> -d yesterday +<span class="hljs-string">&quot;%d&quot;</span>)<br><br><span class="hljs-comment"># 循环移动</span><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">log</span> <span class="hljs-keyword">in</span> <span class="hljs-variable">$&#123;LOGS[@]&#125;</span><br><span class="hljs-keyword">do</span><br><span class="hljs-comment"># 先判断日志目录是否存在</span><br>    [[ ! -d <span class="hljs-string">&quot;<span class="hljs-variable">$&#123;BASH_PATH&#125;</span>/<span class="hljs-variable">$&#123;lOG_PATH&#125;</span>&quot;</span> ]] &amp;&amp; <span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;BASH_PATH&#125;</span>/<span class="hljs-variable">$&#123;lOG_PATH&#125;</span><br><br>    <span class="hljs-comment"># 进入日志目录</span><br>    <span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;BASH_PATH&#125;</span><br>    <span class="hljs-built_in">mv</span> <span class="hljs-variable">$&#123;log&#125;</span> <span class="hljs-variable">$&#123;lOG_PATH&#125;</span>/<span class="hljs-variable">$&#123;DAY&#125;</span>-<span class="hljs-variable">$&#123;log&#125;</span><br>    <span class="hljs-comment">#kill -USR1 `ps axu | grep &quot;nginx: master process&quot; | grep -v grep | awk &#x27;&#123;print $2&#125;&#x27;`</span><br>    <span class="hljs-built_in">kill</span> -USR1 <span class="hljs-variable">$&#123;NGINX_PID&#125;</span><br><br>    <span class="hljs-comment"># 删除30天的备份,最好是移动到其他位置，不建议 rm -fr</span><br>    <span class="hljs-comment">#find $&#123;BASH_PATH&#125;/$&#123;lOG_PATH&#125; -mtime +30 -name &quot;.&quot; -exec rm -fr &#123;&#125; \;</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p><strong>示列三</strong></p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs clean">#!/bin/bash<br><br>#set the path to nginx log files<br>log_files_path=<span class="hljs-string">&quot;/usr/local/nginx/logs/&quot;</span><br>log_files_dir=$&#123;log_files_path&#125;$(date -d <span class="hljs-string">&quot;yesterday&quot;</span> +<span class="hljs-string">&quot;%Y&quot;</span>)/$(date -d <span class="hljs-string">&quot;yesterday&quot;</span> +<span class="hljs-string">&quot;%m&quot;</span>)<br>#set nginx log files you want to cut<br>log_files_name=(gw20 gw20-json)<br>#set the path to nginx.<br>nginx_sbin=<span class="hljs-string">&quot;/usr/bin/nginx&quot;</span><br>#Set how long you want to save<br>save_days=<span class="hljs-number">10</span><br><br>############################################<br>#Please do not modify the following script #<br>############################################<br>mkdir -p $log_files_dir<br><br>log_files_num=$&#123;#log_files_name[@]&#125;<br><br>#cut nginx log files<br>for((i=<span class="hljs-number">0</span>;i&lt;$log_files_num;i++));do<br>mv $&#123;log_files_path&#125;$&#123;log_files_name[i]&#125;.log $&#123;log_files_dir&#125;/$&#123;log_files_name[i]&#125;_$(date -d <span class="hljs-string">&quot;yesterday&quot;</span> +<span class="hljs-string">&quot;%Y%m%d&quot;</span>).log<br>done<br><br>#delete <span class="hljs-number">30</span> days ago nginx log files<br>find $log_files_path -mtime +$save_days -exec rm -rf &#123;&#125; \;<br><br>$nginx_sbin -s reload<br></code></pre></td></tr></table></figure><p><strong>示列四</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">server&#123;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$time_iso8601</span> ~ <span class="hljs-string">&#x27;(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;)&#x27;</span>) &#123;<br>        set <span class="hljs-variable">$day</span> <span class="hljs-variable">$1</span>;<br>    &#125;<br><br>access_log  <span class="hljs-regexp">/www/</span>wwwlogs/xxx.com-<span class="hljs-variable">$day</span>.log main;<br>error_log  <span class="hljs-regexp">/www/</span>wwwlogs/xxx.com.error.log;<br>&#125;<br></code></pre></td></tr></table></figure><p>动静分离</p><p>为加快网站解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。 在动静分离的 tomcat 的时候比较明显，因为 tomcat 解析静态很慢，简单来说，是使用正则表达式匹配过滤，交给不同的服务器。</p><p>1、准备环境</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">192.168.62.159</span> 代理服务器<br><span class="hljs-number">192.168.62.157</span> 动态资源<br><span class="hljs-number">192.168.62.155</span> 静态资源<br></code></pre></td></tr></table></figure><p>2、配置 nginx 反向代理 upstream</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs awk">[root@nginx-server conf.d]<span class="hljs-comment"># cat upstream.conf</span><br><br>upstream static &#123;<br>    server <span class="hljs-number">192.168</span>.<span class="hljs-number">62.155</span>:<span class="hljs-number">80</span> weight=<span class="hljs-number">1</span> max_fails=<span class="hljs-number">1</span> fail_timeout=<span class="hljs-number">60</span>s;<br>&#125;<br><br>upstream phpserver &#123;<br>    server <span class="hljs-number">192.168</span>.<span class="hljs-number">62.157</span>:<span class="hljs-number">80</span> weight=<span class="hljs-number">1</span> max_fails=<span class="hljs-number">1</span> fail_timeout=<span class="hljs-number">60</span>s;<br>&#125;<br><br>server &#123;<br>   listen      <span class="hljs-number">80</span>;<br>   server_name     localhost;<br><br>   <span class="hljs-comment">#动态资源加载</span><br>   location ~ \.(php|jsp)$ &#123;<br>       proxy_pass http:<span class="hljs-regexp">//</span>phpserver;<br>       proxy_set_header Host <span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>;<br>       proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>       proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    &#125;<br><br>   <span class="hljs-comment">#静态资源加载</span><br>   location ~ .*\.(html|gif|jpg|png|bmp|swf|css|js)$ &#123;<br>       proxy_pass http:<span class="hljs-regexp">//</span>static;<br>       proxy_set_header Host <span class="hljs-variable">$host</span>:<span class="hljs-variable">$server_port</span>;<br>       proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>       proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、192.168.62.155 静态资源</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gherkin"><span class="hljs-comment">#静态资源配置</span><br>server &#123;<br>    listen 80;<br>    server_name     localhost;<br><br>    location ~ \.(html|<span class="hljs-string">jpg</span>|<span class="hljs-string">png</span>|<span class="hljs-string">js</span>|<span class="hljs-string">css</span>|<span class="hljs-string">gif</span>|<span class="hljs-string">bmp</span>|<span class="hljs-string">jpeg) &#123;</span><br><span class="hljs-string">        root /home/www/nginx;</span><br><span class="hljs-string">        index index.html index.htm;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><p>4、192.168.62.157 动态资源</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>      <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>     localhost;<br><br>    <span class="hljs-section">location</span> <span class="hljs-regexp">~ \.php$</span> &#123;<br>        <span class="hljs-attribute">root</span>           /home/nginx/html;  <span class="hljs-comment">#指定网站目录</span><br>        <span class="hljs-attribute">fastcgi_pass</span>   <span class="hljs-number">127.0.0.1:9000</span>;    <span class="hljs-comment">#指定访问地址</span><br>        <span class="hljs-attribute">fastcgi_index</span>  index.php;       <span class="hljs-comment">#指定默认文件</span><br>        <span class="hljs-attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="hljs-variable">$document_root</span><span class="hljs-variable">$fastcgi_script_name</span>; <span class="hljs-comment">#站点根目录，取决于root配置项</span><br>        <span class="hljs-attribute">include</span>        fastcgi_params;  <span class="hljs-comment">#包含nginx常量定义</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="location-优先级"><a href="#location-优先级" class="headerlink" title="location 优先级"></a>location 优先级</h2><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">当有多条 location 规则时，nginx 有一套比较复杂的规则，优先级如下：<br>`精确匹配=<br>`前缀匹配^~（立刻停止后续的正则搜索）<br>`按文件中顺序的正则匹配~或~*<br>`匹配不带任何修饰的前缀匹配。<br><br>这个规则大体的思路是<br>`先精确匹配，没有则查找带有^~的前缀匹配，没有则进行正则匹配，最后才返回前缀匹配的结果（如果有的话）<br></code></pre></td></tr></table></figure><h2 id="HTTPS-使用自颁发证书实现"><a href="#HTTPS-使用自颁发证书实现" class="headerlink" title="HTTPS 使用自颁发证书实现"></a>HTTPS 使用自颁发证书实现</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># 建立存放https证书的目录<br>mkdir -pv <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/.sslkey<br># 生成网站私钥文件<br>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/.sslkey<br>openssl genrsa -out https.key <span class="hljs-number">1024</span><br># 生存网站证书文件,需要注意的是在生成的过程中需要输入一些信息根据自己的需要输入,但Common Name 项输入的必须是访问网站的FQDN<br>openssl req -<span class="hljs-keyword">new</span> -x509 -key https.key -out https.crt<br># 为了安全起见,将存放证书的目录权限设置为<span class="hljs-number">400</span><br>chmod -R <span class="hljs-number">400</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/.sslkey<br><br>#vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf<span class="hljs-regexp">/vhost/</span>www.conf<br>server &#123;<br>        listen   <span class="hljs-number">443</span>;<br>        server_name www.com;<br>        index  index.html index.htm;<br>        root /www;<br>        ssl                 on;<br>        ssl_protocols       SSLv3 TLSv1 TLSv1.<span class="hljs-number">1</span> TLSv1.<span class="hljs-number">2</span>;<br>        ssl_ciphers         AES128-SHA:AES256-SHA:RC4-SHA:DES-CBC3-SHA:RC4-MD5;<br>        ssl_certificate     <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf<span class="hljs-regexp">/.sslkey/</span>https.crt;<br>        ssl_certificate_key <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf<span class="hljs-regexp">/.sslkey/</span>https.key;<br>        ssl_session_cache   shared:SSL:<span class="hljs-number">10</span>m;<br>        ssl_session_timeout <span class="hljs-number">10</span>m;<br>&#125;<br><br>#重新启动nginx服务<br>service nginx restar<br></code></pre></td></tr></table></figure><h2 id="基于-HTTPS-配置核心配置"><a href="#基于-HTTPS-配置核心配置" class="headerlink" title="基于 HTTPS 配置核心配置"></a>基于 HTTPS 配置核心配置</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs awk">upstream example_backend &#123;<br>    server   <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>:<span class="hljs-number">9080</span>;<br>    server   <span class="hljs-number">192.168</span>.<span class="hljs-number">1.198</span>:<span class="hljs-number">9080</span>;<br> &#125;<br>server &#123;<br>        listen <span class="hljs-number">80</span>;<br>        server_name www.example.org example.org;<br>        rewrite ^<span class="hljs-regexp">/(.*)$  https:/</span><span class="hljs-regexp">/$host/</span><span class="hljs-variable">$1</span> last;<br> &#125;<br>server &#123;<br>    listen <span class="hljs-number">443</span>;<br>    server_name www.example.org example.org;<br><br>    ssl on;<br>    ssl_certificate      <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf<span class="hljs-regexp">/ssl/</span>example.crt;<br>    ssl_certificate_key  <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf<span class="hljs-regexp">/ssl/</span>example.key;<br>    ssl_session_timeout  <span class="hljs-number">5</span>m;<br>    ssl_protocols  SSLv3 TLSv1 TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">1</span>;<br>    ssl_ciphers HIGH:!aNULL:!MD5:!EXPORT56:!EXP;<br>    ssl_prefer_server_ciphers   on;<br><br>    location / &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="根据页面不存在则自定义跳转"><a href="#根据页面不存在则自定义跳转" class="headerlink" title="根据页面不存在则自定义跳转"></a>根据页面不存在则自定义跳转</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span>) &#123;<br>      <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^(/.*)$</span> http://www.com <span class="hljs-literal">permanent</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="直接输出消息"><a href="#直接输出消息" class="headerlink" title="直接输出消息"></a>直接输出消息</h2><h3 id="直接返回文本："><a href="#直接返回文本：" class="headerlink" title="直接返回文本："></a>直接返回文本：</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/ &#123;</span><br><span class="hljs-title">default_type</span>    text/plain;<br>return <span class="hljs-number">502</span> <span class="hljs-string">&quot;服务正在升级，请稍后再试……&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="也可以使用html标签格式："><a href="#也可以使用html标签格式：" class="headerlink" title="也可以使用html标签格式："></a>也可以使用html标签格式：</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/ &#123;</span><br><span class="hljs-title">default_type</span>    text/html;<br>return <span class="hljs-number">502</span> <span class="hljs-string">&quot;服务正在升级，请稍后再试……&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="也可以直接返回json文本："><a href="#也可以直接返回json文本：" class="headerlink" title="也可以直接返回json文本："></a>也可以直接返回json文本：</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">/ &#123;</span><br><span class="hljs-title">default_type</span>    application/json;<br>return <span class="hljs-number">502</span> &#x27;&#123;<span class="hljs-string">&quot;status&quot;</span>:<span class="hljs-number">502</span>,<span class="hljs-string">&quot;msg&quot;</span>:<span class="hljs-string">&quot;服务正在升级，请稍后再试……&quot;</span>&#125;&#x27;;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="根据文件类型设置过期时间"><a href="#根据文件类型设置过期时间" class="headerlink" title="根据文件类型设置过期时间"></a>根据文件类型设置过期时间</h2><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coq">location ~* \.(js|<span class="hljs-type">css</span>|<span class="hljs-type">jpg</span>|<span class="hljs-type">jpeg</span>|<span class="hljs-type">gif</span>|<span class="hljs-type">png</span>|<span class="hljs-type">swf</span>)$ &#123;<br>    <span class="hljs-keyword">if</span> (-f $request_filename) &#123;<br>        expires <span class="hljs-number">1</span>h;<br>        break;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="根据域名自定义跳转"><a href="#根据域名自定义跳转" class="headerlink" title="根据域名自定义跳转"></a>根据域名自定义跳转</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> ( <span class="hljs-variable">$host</span> = <span class="hljs-string">&#x27;www.baidu.com&#x27;</span> ) &#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/(.*)$</span> http://baidu.com/<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="浏览器的类型-作出相应的跳转"><a href="#浏览器的类型-作出相应的跳转" class="headerlink" title="浏览器的类型,作出相应的跳转"></a>浏览器的类型,作出相应的跳转</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 根据浏览器头部 URL 重写到指定目录</span><br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$http_user_agent</span> <span class="hljs-regexp">~* MSIE)</span> &#123;<br><span class="hljs-attribute">rewrite</span> <span class="hljs-regexp"> ^(.*)$</span>  /msie/<span class="hljs-variable">$1</span>  <span class="hljs-literal">break</span>;<br>&#125;<br><br><span class="hljs-comment"># 判断是否是手机端</span><br><span class="hljs-attribute">if</span> ( <span class="hljs-variable">$http_user_agent</span> <span class="hljs-regexp">~* &quot;(Android|iPhone|Windows</span> Phone|UC|Kindle)<span class="hljs-string">&quot; ) &#123;</span><br><span class="hljs-string">rewrite ^/(.*)$ http://m.qp.com<span class="hljs-variable">$uri</span> redirect;</span><br><span class="hljs-string">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="禁止访问目录-文件"><a href="#禁止访问目录-文件" class="headerlink" title="禁止访问目录|文件"></a>禁止访问目录|文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">location ~* \.(txt|doc)$&#123;<br>    root <span class="hljs-regexp">/data/</span>www<span class="hljs-regexp">/wwwroot/</span>linuxtone/test;<br>    deny all;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果前端是反向代理的情况下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /admin/ &#123;<br><span class="hljs-attribute">allow</span> <span class="hljs-number">192.168.1.0</span>/<span class="hljs-number">24</span>;<br><span class="hljs-attribute">deny</span> all;<br>&#125;<br><br><span class="hljs-comment"># 后端</span><br><span class="hljs-comment"># set $allow false;</span><br><span class="hljs-comment"># if ($allow = false) &#123; return 403;&#125;</span><br><span class="hljs-attribute">if</span> (<span class="hljs-variable">$http_x_forwarded_for</span> !<span class="hljs-regexp">~* ^192\.168\.1\.*)</span> &#123;<br><span class="hljs-attribute">return</span> <span class="hljs-number">403</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="添加模块–支持-Websock"><a href="#添加模块–支持-Websock" class="headerlink" title="添加模块–支持 Websock"></a>添加模块–支持 Websock</h2><p>Nginx 动态添加模块</p><p>版本平滑升级，和添加模块操作类似</p><h2 id="准备模块"><a href="#准备模块" class="headerlink" title="准备模块"></a>准备模块</h2><p>这里以 nginx-push-stream-module 为例,模块我放在 &#x2F;data&#x2F;module 下，你也可以放在其他位置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/data/m</span>odule &amp;&amp; cd <span class="hljs-regexp">/data/m</span>odule/<br>git clone http:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/wandenberg/</span>nginx-push-stream-module.git<br></code></pre></td></tr></table></figure><h2 id="查看-Nginx-已安装模块"><a href="#查看-Nginx-已安装模块" class="headerlink" title="查看 Nginx 已安装模块"></a>查看 Nginx 已安装模块</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-string">/usr/local/nginx/sbin/nginx</span> -V<br><span class="hljs-params">--prefix=/usr/local/nginx</span> <span class="hljs-params">--user=www</span> <span class="hljs-params">--group=www</span> <span class="hljs-params">--with-http_ssl_module</span> <span class="hljs-params">--with-http_stub_status_module</span> <span class="hljs-params">--with-http_gzip_static_module</span> <span class="hljs-params">--with-http_flv_module</span> <span class="hljs-params">--with-http_mp4_module</span> <span class="hljs-params">--with-pcre</span><br></code></pre></td></tr></table></figure><h2 id="备份源执行文件"><a href="#备份源执行文件" class="headerlink" title="备份源执行文件"></a>备份源执行文件</h2><p>备份原来的 nginx 可执行文件</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin<span class="hljs-regexp">/nginx /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/sbin/</span>nginx_bak<br><span class="hljs-comment">#　有必要的话，可以再备份下配置文件，以防万一</span><br></code></pre></td></tr></table></figure><h2 id="下载源码编译"><a href="#下载源码编译" class="headerlink" title="下载源码编译"></a>下载源码编译</h2><p>下载相同版本的 Nginx 源码包编译（以前安装时的源码包），如果已经删除了可重新下载，版本相同即可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span>.tar.gz<br>tar xf nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span>.tar.gz<br>cd nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span><br> .<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>nginx --user=www --group=www --with-http_ssl_module --with-http_stub_status_module --with-http_gzip_static_module --with-http_flv_module --with-http_mp4_module --with-pcre --add-module=<span class="hljs-regexp">/data/m</span>odule/nginx-push-stream-module<br><br><span class="hljs-comment"># 编译Nginx（千万不要make install，不然就真的覆盖了）</span><br>make<br>mv objs<span class="hljs-regexp">/nginx /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/sbin/</span><br></code></pre></td></tr></table></figure><h2 id="查看是否安装"><a href="#查看是否安装" class="headerlink" title="查看是否安装"></a>查看是否安装</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">/usr/local/nginx/sbin/nginx -V<br>--prefix=<span class="hljs-regexp">/usr/</span>local/nginx --user=www --group=www --<span class="hljs-keyword">with</span>-http_ssl_module --<span class="hljs-keyword">with</span>-http_stub_status_module --<span class="hljs-keyword">with</span>-http_gzip_static_module --<span class="hljs-keyword">with</span>-http_flv_module --<span class="hljs-keyword">with</span>-http_mp4_module --<span class="hljs-keyword">with</span>-pcre --add-<span class="hljs-variable language_">module</span>=<span class="hljs-regexp">/data/m</span>odule/nginx-push-stream-<span class="hljs-variable language_">module</span><br></code></pre></td></tr></table></figure><h2 id="添加模块–支持健康检查模块"><a href="#添加模块–支持健康检查模块" class="headerlink" title="添加模块–支持健康检查模块"></a>添加模块–支持健康检查模块</h2><h2 id="缺陷？"><a href="#缺陷？" class="headerlink" title="缺陷？"></a>缺陷？</h2><p>自带健康检查的缺陷：</p><p>Nginx 只有当有访问时后，才发起对后端节点探测。<br>如果本次请求中，节点正好出现故障，Nginx 依然将请求转交给故障的节点,然后再转交给健康的节点处理。所以不会影响到这次请求的正常进行。但是会影响效率,因为多了一次转发<br>自带模块无法做到预警<br>被动健康检查<br>使用第三访模块 nginx_upstream_check_module：</p><p>区别于 nginx 自带的非主动式的心跳检测，淘宝开发的 tengine 自带了一个提供主动式后端服务器心跳检测模块<br>若健康检查包类型为 http，在开启健康检查功能后，nginx 会根据设置的间隔向指定的后端服务器端口发送健康检查包，并根据期望的 HTTP 回复状态码来判断服务是否健康。<br>后端真实节点不可用，则请求不会转发到故障节点<br>故障节点恢复后，请求正常转发</p><h2 id="准备模块-1"><a href="#准备模块-1" class="headerlink" title="准备模块"></a>准备模块</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install patch git -y<br>cd <span class="hljs-regexp">/usr/</span>local/src<br>git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/yaoweibin/</span>nginx_upstream_check_module.git<br></code></pre></td></tr></table></figure><h2 id="打补丁"><a href="#打补丁" class="headerlink" title="打补丁"></a>打补丁</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># 需进入源码包打补丁<br># 个人习惯，源码放在 <span class="hljs-regexp">/usr/</span>local/src<br># 例如我的 nginx 源码包存放： <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span> , 若源码已经删除，那么去官网上再下载同版本<br>cd <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>nginx-<span class="hljs-number">1.16</span>.<span class="hljs-number">1</span><br>patch -p1 &lt; ..<span class="hljs-regexp">/nginx_upstream_check_module/</span>check_1.<span class="hljs-number">16.1</span>+.patch<br></code></pre></td></tr></table></figure><h2 id="重新编译"><a href="#重新编译" class="headerlink" title="重新编译"></a>重新编译</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs gradle">nginx -V<br># configure arguments: --prefix=<span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx --user=www --group=www --with-http_ssl_module --with-http_stub_status_module --add-module=/</span>root<span class="hljs-regexp">/nginx_upstream_check_module/</span><br><br># 在运行中的 nginx 添加模块； 首先一点: 修改东西之前要先备份<br>mv <span class="hljs-regexp">/usr/</span>loca<span class="hljs-regexp">/nginx/</span>sbin/nginx&#123;,_bak&#125;<br><br><br>.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>nginx \<br>--user=www --<span class="hljs-keyword">group</span>=www \<br>--with-http_ssl_module \<br>--with-http_stub_status_module \<br>--add-module=../nginx_upstream_check_module<br>make<br><br><br># **别手贱， 千万不要 make install**<br>cp objs<span class="hljs-regexp">/nginx /u</span>sr<span class="hljs-regexp">/local/</span>nginx<span class="hljs-regexp">/sbin/</span><br></code></pre></td></tr></table></figure><h2 id="查看模块"><a href="#查看模块" class="headerlink" title="查看模块"></a>查看模块</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">nginx -V<br>configure arguments: <span class="hljs-attribute">--prefix</span>=/usr/local/nginx <span class="hljs-attribute">--user</span>=www <span class="hljs-attribute">--group</span>=www --with-http_ssl_module --with-http_stub_status_module <span class="hljs-attribute">--add-module</span>=../nginx_upstream_check_module<br></code></pre></td></tr></table></figure><h2 id="如何使用？"><a href="#如何使用？" class="headerlink" title="如何使用？"></a>如何使用？</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">http &#123;<br><br>    upstream <span class="hljs-keyword">cluster</span> &#123;<br>        <span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">80</span>;<br>        <span class="hljs-keyword">server</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>:<span class="hljs-number">80</span>;<br>    <span class="hljs-keyword">server</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">80</span>;<br>        <span class="hljs-keyword">check</span> <span class="hljs-type">interval</span>=<span class="hljs-number">5000</span> rise=<span class="hljs-number">1</span> fall=<span class="hljs-number">3</span> timeout=<span class="hljs-number">4000</span>;<br><br>        #<span class="hljs-keyword">check</span> <span class="hljs-type">interval</span>=<span class="hljs-number">3000</span> rise=<span class="hljs-number">2</span> fall=<span class="hljs-number">5</span> timeout=<span class="hljs-number">1000</span> <span class="hljs-keyword">type</span>=ssl_hello;<br>        #<span class="hljs-keyword">check</span> <span class="hljs-type">interval</span>=<span class="hljs-number">3000</span> rise=<span class="hljs-number">2</span> fall=<span class="hljs-number">5</span> timeout=<span class="hljs-number">1000</span> <span class="hljs-keyword">type</span>=http;<br>        #check_http_send &quot;HEAD / HTTP/1.0\r\n\r\n&quot;;<br>        #check_http_expect_alive http_2xx http_3xx;<br>    &#125;<br><br>    <span class="hljs-keyword">server</span> &#123;<br>        <span class="hljs-keyword">listen</span> <span class="hljs-number">80</span>;<br><br>        <span class="hljs-keyword">location</span> / &#123;<br>            proxy_pass http://<span class="hljs-keyword">cluster</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">location</span> /status &#123;<br>            # 默认html，请求方式： check_status html|<span class="hljs-type">json</span>|<span class="hljs-type">xml</span>;<br>            # allow 允许的IP地址<br>            check_status;<br>            access_log   <span class="hljs-keyword">off</span>;<br>            allow <span class="hljs-keyword">SOME</span>.IP.<span class="hljs-keyword">ADD</span>.RESS;<br>            deny <span class="hljs-keyword">all</span>;<br>       &#125;<br>    &#125;<br><br>&#125;<br><br># kill -USER2 `cat /usr/<span class="hljs-keyword">local</span>/nginx/logs/nginx.pid` #热升级nginx,如果当前nginx不是用绝对路径下的nginx命令启动的话，热升级无效。<br># 只能 `nginx -s stop` &amp;&amp; /usr/<span class="hljs-keyword">local</span>/nginx/sbin/nginx -c /usr/<span class="hljs-keyword">local</span>/nginx/conf/nginx.conf`<br></code></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs d"># curl http:<span class="hljs-comment">//127.0.0.1/status?format=http</span><br># curl http:<span class="hljs-comment">//127.0.0.1/status?format=xml</span><br>curl http:<span class="hljs-comment">//127.0.0.1/status?format=json</span><br><span class="hljs-string">&quot;&quot;</span><span class="hljs-string">&quot;</span><br><span class="hljs-string">&#123;&quot;</span>servers<span class="hljs-string">&quot;: &#123;</span><br><span class="hljs-string">  &quot;</span>total<span class="hljs-string">&quot;: 3,</span><br><span class="hljs-string">  &quot;</span>generation<span class="hljs-string">&quot;: 2,</span><br><span class="hljs-string">  &quot;</span>serve<span class="hljs-string">r&quot;: [</span><br><span class="hljs-string">    &#123;&quot;</span>index<span class="hljs-string">&quot;: 0, &quot;</span>upstream<span class="hljs-string">&quot;: &quot;c</span>luste<span class="hljs-string">r&quot;, &quot;</span>name<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">80</span><span class="hljs-string">&quot;, &quot;</span>status<span class="hljs-string">&quot;: &quot;d</span>own<span class="hljs-string">&quot;, &quot;</span>rise<span class="hljs-string">&quot;: 0, &quot;</span>fall<span class="hljs-string">&quot;: 432, &quot;</span>type<span class="hljs-string">&quot;: &quot;</span>tcp<span class="hljs-string">&quot;, &quot;</span>port<span class="hljs-string">&quot;: 0&#125;,</span><br><span class="hljs-string">    &#123;&quot;</span>index<span class="hljs-string">&quot;: 1, &quot;</span>upstream<span class="hljs-string">&quot;: &quot;c</span>luste<span class="hljs-string">r&quot;, &quot;</span>name<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.2</span>:<span class="hljs-number">80</span><span class="hljs-string">&quot;, &quot;</span>status<span class="hljs-string">&quot;: &quot;d</span>own<span class="hljs-string">&quot;, &quot;</span>rise<span class="hljs-string">&quot;: 0, &quot;</span>fall<span class="hljs-string">&quot;: 432, &quot;</span>type<span class="hljs-string">&quot;: &quot;</span>tcp<span class="hljs-string">&quot;, &quot;</span>port<span class="hljs-string">&quot;: 0&#125;,</span><br><span class="hljs-string">    &#123;&quot;</span>index<span class="hljs-string">&quot;: 2, &quot;</span>upstream<span class="hljs-string">&quot;: &quot;c</span>luste<span class="hljs-string">r&quot;, &quot;</span>name<span class="hljs-string">&quot;: &quot;</span><span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">80</span><span class="hljs-string">&quot;, &quot;</span>status<span class="hljs-string">&quot;: &quot;</span>up<span class="hljs-string">&quot;, &quot;</span>rise<span class="hljs-string">&quot;: 4, &quot;</span>fall<span class="hljs-string">&quot;: 0, &quot;</span>type<span class="hljs-string">&quot;: &quot;</span>tcp<span class="hljs-string">&quot;, &quot;</span>port<span class="hljs-string">&quot;: 0&#125;</span><br><span class="hljs-string">  ]</span><br><span class="hljs-string">&#125;&#125;</span><br><span class="hljs-string">&quot;</span><span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://www.mwbo.com/wp-content/uploads/2021/06/6666.png" alt="img"></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>如果后端是基于域名访问，可使用 check_http_send “GET &#x2F;xxx HTTP&#x2F;1.0\r\n HOST <a href="http://www.xxx.com/r/n/r/n%E2%80%9D;%E6%96%B9%E5%BC%8F%E5%9C%A8%E8%AF%B7%E6%B1%82%E6%97%B6%E6%B7%BB%E5%8A%A0%E8%AF%B7%E6%B1%82%E5%A4%B4%E4%BF%A1%E6%81%AF">www.xxx.com\r\n\r\n”;方式在请求时添加请求头信息</a></p><h2 id="参数详解"><a href="#参数详解" class="headerlink" title="参数详解"></a>参数详解</h2><p>interval： 检测间隔 3 秒<br>fall: 连续检测失败次数 5 次时，认定 relaserver is down<br>rise: 连续检测成功 2 次时，认定 relaserver is up<br>timeout: 超时 1 秒<br>default_down: 初始状态为 down,只有检测通过后才为 up<br>type: 检测类型方式 tcp<br>tcp :tcp 套接字,不建议使用，后端业务未 100%启动完成,前端已经放开访问的情况<br>ssl_hello： 发送 hello 报文并接收 relaserver 返回的 hello 报文<br>http: 自定义发送一个请求，判断上游 relaserver 接收并处理<br>mysql: 连接到 mysql 服务器，判断上游 relaserver 是否还存在<br>ajp: 发送 AJP Cping 数据包，接收并解析 AJP Cpong 响应以诊断上游 relaserver 是否还存活(AJP tomcat 内置的一种协议)<br>fastcgi: php 程序是否存活</p><h2 id="GIthub-地址"><a href="#GIthub-地址" class="headerlink" title="GIthub 地址"></a>GIthub 地址</h2><p><a href="https://www.mwbo.com/?golink=aHR0cHM6Ly9naXRodWIuY29tL3lhb3dlaWJpbi9uZ2lueF91cHN0cmVhbV9jaGVja19tb2R1bGU=">https://github.com/yaoweibin/nginx_upstream_check_module</a></p><h2 id="添加模块–支持国家城市模块"><a href="#添加模块–支持国家城市模块" class="headerlink" title="添加模块–支持国家城市模块"></a>添加模块–支持国家城市模块</h2><p>安装依赖 libmaxmindd</p><p>因为需要读取在 GeoIP2 的 IP 数据库库，需要使用到 libmaxminddb 中的一个 C 库</p><p><strong>pay源码</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/maxmind/</span>libmaxminddb<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.3.2/</span>libmaxminddb-<span class="hljs-number">1.3</span>.<span class="hljs-number">2</span>.tar.gz<br>tar zxvf libmaxminddb-<span class="hljs-number">1.3</span>.<span class="hljs-number">2</span>.tar.gz<br>cd libmaxminddb-<span class="hljs-number">1.3</span>.<span class="hljs-number">2</span><br>./configure<br>make<br>make  install<br><br><span class="hljs-comment"># 添加库路径并更新库</span><br>sh -c <span class="hljs-string">&quot;echo /usr/local/lib  &gt;&gt; /etc/ld.so.conf.d/local.conf&quot;</span><br>ldconfig<br></code></pre></td></tr></table></figure><p><strong>yum</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> libmaxminddb-devel -y<br></code></pre></td></tr></table></figure><h2 id="下载-GeoIP-源码"><a href="#下载-GeoIP-源码" class="headerlink" title="下载 GeoIP 源码"></a>下载 GeoIP 源码</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/leev/</span>ngx_http_geoip2_module<span class="hljs-regexp">/archive/</span><span class="hljs-number">3.2</span>.tar.gz<br>tar zxvf <span class="hljs-number">3.2</span>.tar.gz<br></code></pre></td></tr></table></figure><h2 id="Nginx-重新编译"><a href="#Nginx-重新编译" class="headerlink" title="Nginx 重新编译"></a>Nginx 重新编译</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"> .<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>nginx --add-module=../ngx_http_geoip2_module-<span class="hljs-number">3.2</span><br>make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h2 id="下载-GeoLite"><a href="#下载-GeoLite" class="headerlink" title="下载 GeoLite"></a>下载 GeoLite</h2><p>这个库是为了将 IP 地址翻译成具体的地址信息，下载需要注册…<br>URL: <a href="https://www.maxmind.com/en/accounts/current/people/current">https://www.maxmind.com/en/accounts/current/people/current</a> 账号： <a href="mailto:&#x78;&#x78;&#x78;&#x78;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;">&#x78;&#x78;&#x78;&#x78;&#x40;&#x71;&#x71;&#x2e;&#x63;&#111;&#109;</a> 密码： xxx..</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">gunzip GeoLite2-City<span class="hljs-selector-class">.mmdb</span><span class="hljs-selector-class">.gz</span><br>gunzip GeoLite2-Country<span class="hljs-selector-class">.mmdb</span><span class="hljs-selector-class">.gz</span><br>mkdir /data/geoip<br>mv GeoLite2-City<span class="hljs-selector-class">.mmdb</span>  /data/geoip/city<span class="hljs-selector-class">.mmdb</span><br>mv GeoLite2-Country<span class="hljs-selector-class">.mmdb</span> /data/geoip/country.mmdb<br></code></pre></td></tr></table></figure><h2 id="启用-GeoIP"><a href="#启用-GeoIP" class="headerlink" title="启用 GeoIP"></a>启用 GeoIP</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs awk">vim <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>conf/nginx.conf<br>http &#123;<br>    geoip2 <span class="hljs-regexp">/data/g</span>eoip/country.mmdb &#123;<br>        <span class="hljs-variable">$geoip2_data_country_code</span> default=CN country iso_code;<br>        <span class="hljs-variable">$geoip2_data_country_name</span> country names en;<br>    &#125;<br>    geoip2 <span class="hljs-regexp">/data/g</span>eoip/city.mmdb &#123;<br>        <span class="hljs-variable">$geoip2_data_city_name</span> default=Shenzhen city names en;<br>    &#125;<br><br>    server &#123;<br>        listen       <span class="hljs-number">80</span>;<br>        server_name  localhost;<br>        location / &#123;<br>            add_header geoip2_data_country_code <span class="hljs-variable">$geoip2_data_country_code</span>;<br>            add_header geoip2_data_city_name <span class="hljs-variable">$geoip2_data_city_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$geoip2_data_country_code</span> = CN)&#123;<br>                root <span class="hljs-regexp">/data/</span>webroot/cn;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-variable">$geoip2_data_country_code</span> = US)&#123;<br>                root <span class="hljs-regexp">/data/</span>webroot/us;<br>            &#125;<br>        &#125;<br>｝<br></code></pre></td></tr></table></figure><h2 id="检查-GeoIP"><a href="#检查-GeoIP" class="headerlink" title="检查 GeoIP"></a>检查 GeoIP</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir <span class="hljs-regexp">/data/</span>webroot/us<br>mkdir <span class="hljs-regexp">/data/</span>webroot/cn<br>echo <span class="hljs-string">&quot;US Site&quot;</span> &gt; <span class="hljs-regexp">/data/</span>webroot<span class="hljs-regexp">/us/i</span>ndex.html<br>echo <span class="hljs-string">&quot;CN Site&quot;</span> &gt; <span class="hljs-regexp">/data/</span>webroot<span class="hljs-regexp">/cn/i</span>ndex.html<br>curl 试一试<br></code></pre></td></tr></table></figure><h2 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs gams">http:<span class="hljs-comment">//wiki.nginx.org/HttpCoreModule#Variables   官方文档</span><br><span class="hljs-meta"><span class="hljs-keyword">$arg</span>_PARAMETER</span><br><span class="hljs-meta"><span class="hljs-keyword">$args</span></span><br><span class="hljs-meta"><span class="hljs-keyword">$binary</span>_remote_addr</span><br><span class="hljs-meta"><span class="hljs-keyword">$body</span>_bytes_sent</span><br><span class="hljs-meta"><span class="hljs-keyword">$content</span>_length</span><br><span class="hljs-meta"><span class="hljs-keyword">$content</span>_type</span><br><span class="hljs-meta"><span class="hljs-keyword">$cookie</span>_COOKIE</span><br><span class="hljs-meta"><span class="hljs-keyword">$document</span>_root</span><br><span class="hljs-meta"><span class="hljs-keyword">$document</span>_uri</span><br><span class="hljs-meta"><span class="hljs-keyword">$host</span></span><br><span class="hljs-meta"><span class="hljs-keyword">$hostname</span></span><br><span class="hljs-meta"><span class="hljs-keyword">$http</span>_HEADER</span><br><span class="hljs-meta"><span class="hljs-keyword">$sent</span>_http_HEADER</span><br><span class="hljs-meta"><span class="hljs-keyword">$is</span>_args</span><br><span class="hljs-meta"><span class="hljs-keyword">$limit</span>_rate</span><br><span class="hljs-meta"><span class="hljs-keyword">$nginx</span>_version</span><br><span class="hljs-meta"><span class="hljs-keyword">$query</span>_string</span><br><span class="hljs-meta"><span class="hljs-keyword">$remote</span>_addr</span><br><span class="hljs-meta"><span class="hljs-keyword">$remote</span>_port</span><br><span class="hljs-meta"><span class="hljs-keyword">$remote</span>_user</span><br><span class="hljs-meta"><span class="hljs-keyword">$request</span>_filename</span><br><span class="hljs-meta"><span class="hljs-keyword">$request</span>_body</span><br><span class="hljs-meta"><span class="hljs-keyword">$request</span>_body_file</span><br><span class="hljs-meta"><span class="hljs-keyword">$request</span>_completion</span><br><span class="hljs-meta"><span class="hljs-keyword">$request</span>_method</span><br><span class="hljs-meta"><span class="hljs-keyword">$request</span>_uri</span><br><span class="hljs-meta"><span class="hljs-keyword">$scheme</span></span><br><span class="hljs-meta"><span class="hljs-keyword">$server</span>_addr</span><br><span class="hljs-meta"><span class="hljs-keyword">$server</span>_name</span><br><span class="hljs-meta"><span class="hljs-keyword">$server</span>_port</span><br><span class="hljs-meta"><span class="hljs-keyword">$server</span>_protocol</span><br><span class="hljs-meta"><span class="hljs-keyword">$uri</span></span><br></code></pre></td></tr></table></figure><h1 id="nginx配置location"><a href="#nginx配置location" class="headerlink" title="nginx配置location"></a>nginx配置location</h1><p>基本语法：location [&#x3D;||*|^~] &#x2F;uri&#x2F; { … }</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">= 严格匹配。如果这个查询匹配，那么将停止搜索并立即处理此请求。</span><br>~ 为区分大小写匹配(可用正则表达式)<br>!~为区分大小写不匹配<br>~* 为不区分大小写匹配(可用正则表达式)<br>!~*为不区分大小写不匹配<br>^~ 如果把这个前缀用于一个常规字符串,那么告诉nginx 如果路径匹配那么不测试正则表达式。<br>123456<br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> = / &#123;<br> <span class="hljs-comment"># 只匹配 / 查询。</span><br>&#125;<br><span class="hljs-section">location</span> / &#123;<br> <span class="hljs-comment"># 匹配任何查询，因为所有请求都以 / 开头。但是正则表达式规则和长的块规则将被优先和查询匹配。</span><br>&#125;<br><span class="hljs-section">location</span><span class="hljs-regexp"> ^~</span> /images/ &#123;<br> <span class="hljs-comment"># 匹配任何以 /images/ 开头的任何查询并且停止搜索。任何正则表达式将不会被测试。</span><br>&#125;<br><span class="hljs-section">location</span> ~*.(gif|jpg|jpeg)$ &#123;<br> <span class="hljs-comment"># 匹配任何以 gif、jpg 或 jpeg 结尾的请求。</span><br>&#125;<br><span class="hljs-section">location</span> ~*.(gif|jpg|swf)$ &#123;<br>  <span class="hljs-attribute">valid_referers</span> <span class="hljs-literal">none</span> <span class="hljs-literal">blocked</span> start.igrow.cn sta.igrow.cn;<br>  <span class="hljs-attribute">if</span> (<span class="hljs-variable">$invalid_referer</span>) &#123;<br>    <span class="hljs-comment">#防盗链</span><br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/</span> http://<span class="hljs-variable">$host</span>/logo.png;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="try-files"><a href="#try-files" class="headerlink" title="try_files"></a>try_files</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">location / &#123;<br>            try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span><span class="hljs-regexp">/ /i</span>ndex.php?<span class="hljs-variable">$query_string</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>当用户请求 <code>http://localhost/example</code> 时，这里的 <code>$uri</code> 就是 <code>/example</code>。<br>try_files 会到硬盘里尝试找这个文件。如果存在名为 <code>/$root/example</code>（其中 <code>$root</code> 是项目代码安装目录）的文件，就直接把这个文件的内容发送给用户。<br>显然，目录中没有叫 example 的文件。然后就看 <code>$uri/</code>，增加了一个 <code>/</code>，也就是看有没有名为 <code>/$root/example/</code> 的目录。<br>又找不到，就会 fall back 到 try_files 的最后一个选项 &#x2F;index.php，发起一个内部 “子请求”，也就是相当于 nginx 发起一个 HTTP 请求到 <code>http://localhost/index.php</code>。 </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">loaction</span> / &#123;<br><br><span class="hljs-attribute">try_files</span> <span class="hljs-variable">$uri</span> <span class="hljs-variable">@apache</span><br><br>&#125;<br><br>loaction <span class="hljs-variable">@apache</span>&#123;<br><br><span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:88<br><br>include aproxy.conf<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>try_files</code>方法让<code>Ngxin</code>尝试访问后面得<code>$uri</code>链接，并进根据<code>@apache</code>配置进行内部重定向。</p><p>当然<code>try_files</code>也可以以错误代码赋值，如<code>try_files /index.php = 404 @apache</code>，则表示当尝试访问得文件返回<code>404</code>时，根据<code>@apache</code>配置项进行重定向。</p><h1 id="Nginx配置中的if判断"><a href="#Nginx配置中的if判断" class="headerlink" title="Nginx配置中的if判断"></a>Nginx配置中的if判断</h1><p>当rewrite的重写规则满足不了需求时，比如需要判断当文件不存在时、当路径包含xx时等条件，则需要用到if</p><h2 id="if语法"><a href="#if语法" class="headerlink" title="if语法"></a>if语法</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">if (表达式) </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">    ...</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><p>表达式语法：</p><p>当表达式只是一个变量时，如果值为空或任何以0开头的字符串都会当做false<br>直接比较变量和内容时，使用&#x3D;或!&#x3D;</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs llvm">-f和<span class="hljs-title">!-f</span>用来判断是否存在文件<br>-d和<span class="hljs-title">!-d</span>用来判断是否存在目录<br>-e和<span class="hljs-title">!-e</span>用来判断是否存在文件或目录<br>-<span class="hljs-keyword">x</span>和<span class="hljs-title">!-x</span>用来判断文件是否可执行<br></code></pre></td></tr></table></figure><p>为了配置if的条件判断，这里需要用到nginx中内置的全局变量</p><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-keyword">$args</span>               这个变量等于请求行中的参数，同$query_string</span><br><span class="hljs-meta"><span class="hljs-keyword">$content</span>_length     请求头中的Content-length字段。</span><br><span class="hljs-meta"><span class="hljs-keyword">$content</span>_type       请求头中的Content-Type字段。</span><br><span class="hljs-meta"><span class="hljs-keyword">$document</span>_root      当前请求在root指令中指定的值。</span><br><span class="hljs-meta"><span class="hljs-keyword">$host</span>               请求主机头字段，否则为服务器名称。</span><br><span class="hljs-meta"><span class="hljs-keyword">$http</span>_user_agent    客户端agent信息</span><br><span class="hljs-meta"><span class="hljs-keyword">$http</span>_cookie        客户端cookie信息</span><br><span class="hljs-meta"><span class="hljs-keyword">$limit</span>_rate         这个变量可以限制连接速率。</span><br><span class="hljs-meta"><span class="hljs-keyword">$request</span>_method     客户端请求的动作，通常为GET或POST。</span><br><span class="hljs-meta"><span class="hljs-keyword">$remote</span>_addr        客户端的IP地址。</span><br><span class="hljs-meta"><span class="hljs-keyword">$remote</span>_port        客户端的端口。</span><br><span class="hljs-meta"><span class="hljs-keyword">$remote</span>_user        已经经过Auth Basic Module验证的用户名。</span><br><span class="hljs-meta"><span class="hljs-keyword">$request</span>_filename   当前请求的文件路径，由root或alias指令与URI请求生成。</span><br><span class="hljs-meta"><span class="hljs-keyword">$scheme</span>             HTTP方法（如http，https）。</span><br><span class="hljs-meta"><span class="hljs-keyword">$server</span>_protocol    请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</span><br><span class="hljs-meta"><span class="hljs-keyword">$server</span>_addr        服务器地址，在完成一次系统调用后可以确定这个值。</span><br><span class="hljs-meta"><span class="hljs-keyword">$server</span>_name        服务器名称。</span><br><span class="hljs-meta"><span class="hljs-keyword">$server</span>_port        请求到达服务器的端口号。</span><br><span class="hljs-meta"><span class="hljs-keyword">$request</span>_uri        包含请求参数的原始URI，不包含主机名，如：”/foo/bar.php?arg=baz”。</span><br><span class="hljs-meta"><span class="hljs-keyword">$uri</span>                不带请求参数的当前URI，$uri不包含主机名，如”/foo/bar.html”。</span><br><span class="hljs-meta"><span class="hljs-keyword">$document</span>_uri       与$uri相同。</span><br></code></pre></td></tr></table></figure><p>举例说明<br>1、如果文件不存在则返回400</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (!-f <span class="hljs-variable">$request_filename</span>) &#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">400</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>2、如果host不是jouypub.com，则301到jouypub.com中</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> ( <span class="hljs-variable">$host</span> != <span class="hljs-string">&#x27;jouypub.com&#x27;</span> )&#123;<br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/(.*)$</span> https://jouypub.com/<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3、如果请求类型不是POST则返回405</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$request_method</span> = POST) &#123;<br>    <span class="hljs-attribute">return</span> <span class="hljs-number">405</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>4、如果参数中有a&#x3D;1则301到指定域名</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$args</span> <span class="hljs-regexp">~ a=1)</span> &#123;<br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^</span> http://example.com/ <span class="hljs-literal">permanent</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>5、在某种场景下可结合location规则来使用，如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#访问 /test.html 时</span><br><span class="hljs-section">location</span> = /test.html &#123;<br>    <span class="hljs-comment">#设置默认值为xiaowu</span><br>    <span class="hljs-attribute">set</span> <span class="hljs-variable">$name</span> xiaowu;<br>    <span class="hljs-comment">#如果参数中有 name=xx 则使用该值 </span><br>    <span class="hljs-attribute">if</span> (<span class="hljs-variable">$args</span> <span class="hljs-regexp">~* name=(\w+?)(&amp;|$))</span> &#123;<br>            <span class="hljs-attribute">set</span> <span class="hljs-variable">$name</span> <span class="hljs-variable">$1</span>;<br>    &#125;<br>    <span class="hljs-comment">#301</span><br>    <span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^</span> /<span class="hljs-variable">$name</span>.html <span class="hljs-literal">permanent</span>;<br>&#125;<br><span class="hljs-comment">#上面表示：</span><br><span class="hljs-comment">#/test.html =&gt; /xiaowu.html</span><br><span class="hljs-comment">#/test.html?name=ok =&gt; /ok.html?name=ok</span><br></code></pre></td></tr></table></figure><h1 id="强制跳转www"><a href="#强制跳转www" class="headerlink" title="强制跳转www"></a>强制跳转www</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">if</span> (<span class="hljs-variable">$host</span> != <span class="hljs-string">&#x27;www.1kmb.com&#x27;</span>) &#123;<br><span class="hljs-attribute">rewrite</span><span class="hljs-regexp"> ^/(.*)</span> https://www.1kmb.com/<span class="hljs-variable">$1</span> <span class="hljs-literal">permanent</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="代理中的几点区别"><a href="#代理中的几点区别" class="headerlink" title="代理中的几点区别"></a>代理中的几点区别</h1><p>在nginx中配置proxy_pass代理转发时，如果在proxy_pass后面的url加&#x2F;，表示绝对根路径；如果没有&#x2F;，表示相对路径，把匹配的路径部分也给代理走。<br>假设下面四种情况分别用 <a href="http://127.0.0.1/proxy/test.html">http://127.0.0.1/proxy/test.html</a> 进行访问。</p><p>第一种：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">location /proxy/ &#123;<br>    proxy_pass http://127.0.0.1/;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理到URL：<a href="http://127.0.0.1/test.html">http://127.0.0.1/test.html</a></p><p>第二种（相对于第一种，最后少一个 &#x2F; ）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">location /proxy/ &#123;<br>    proxy_pass http://127.0.0.1;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理到URL：<a href="http://127.0.0.1/proxy/test.html">http://127.0.0.1/proxy/test.html</a></p><p>第三种：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">location <span class="hljs-regexp">/proxy/</span> &#123;<br>    proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span><span class="hljs-regexp">/abc/</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理到URL：<a href="http://127.0.0.1/abc/test.html">http://127.0.0.1/abc/test.html</a></p><p>第四种（相对于第三种，最后少一个 &#x2F; ）</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">location <span class="hljs-regexp">/proxy/</span> &#123;<br>    proxy_pass http:<span class="hljs-regexp">//</span><span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span>/abc;<br>&#125;<br></code></pre></td></tr></table></figure><p>代理到URL：<a href="http://127.0.0.1/abctest.html">http://127.0.0.1/abctest.html</a></p><h1 id="Nginx限流"><a href="#Nginx限流" class="headerlink" title="Nginx限流"></a>Nginx限流</h1><p>高并发系统有三把利器：缓存、降级和限流；限流的目的是通过对并发访问&#x2F;请求进行限速来保护系统，一旦达到限制速率则可以拒绝服务（定向到错误页）、排队等待（秒杀）、降级（返回兜底数据或默认数据）。 高并发系统常见的限流有：限制总并发数（数据库连接池）、限制瞬时并发数（如nginx的limit_conn模块，用来限制瞬时并发连接数）、限制时间窗口内的平均速率（nginx的limit_req模块，用来限制每秒的平均速率）。<br> 另外还可以根据网络连接数、网络流量、CPU或内存负载等来限流 </p><h2 id="Module-ngx-http-limit-conn-module"><a href="#Module-ngx-http-limit-conn-module" class="headerlink" title="Module ngx_http_limit_conn_module"></a>Module ngx_http_limit_conn_module</h2><p><a href="http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html">http://nginx.org/en/docs/http/ngx_http_limit_conn_module.html</a></p><h2 id="限流算法"><a href="#限流算法" class="headerlink" title="限流算法"></a>限流算法</h2><p>计数器，令牌桶，漏桶</p><h2 id="请求限制"><a href="#请求限制" class="headerlink" title="请求限制"></a>请求限制</h2><p>依赖于nginx的ngx_http_limit_req_module模块，需要在http段配置参照标准和状态缓存区大小</p><ul><li>limit_req_zone 只能配置在 http 范围内；</li><li>$binary_remote_addr 表示客户端请求的IP地址；</li><li>mylimit 自己定义的变量名；</li><li>rate 请求频率，每秒允许多少请求；</li></ul><p>limit_req 与 limit_req_zone 对应，burst 表示缓存的请求数，也就是任务队列。</p><p>例如如下配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 定义了一个 mylimit 缓冲区（容器），请求频率为每秒 1 个请求（nr/s）</span><br><span class="hljs-attribute">limit_req_zone</span> <span class="hljs-variable">$binary_remote_addr</span> zone=mylimit:<span class="hljs-number">10m</span> rate=1r/s;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>  <span class="hljs-number">80</span>;<br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-comment"># nodelay 不延迟处理</span><br>        <span class="hljs-comment"># burst 是配置超额处理,可简单理解为队列机制</span><br>        <span class="hljs-comment"># 上面配置同一个 IP 没秒只能发送一次请求（1r/s），这里配置了缓存3个请求，就意味着同一秒内只能允许 4 个任务响应成功，其它任务请求则失败（503错误）</span><br>        <span class="hljs-attribute">limit_req</span> zone=mylimit burst=<span class="hljs-number">3</span> nodelay;<br>        <span class="hljs-attribute">proxy_pass</span> http://localhost:7070;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="并发限制"><a href="#并发限制" class="headerlink" title="并发限制"></a>并发限制</h2><p>Nginx 并发限制的功能来自于 ngx_http_limit_conn_module 模块，跟请求配置一样，使用它之前，需要先定义参照标准和状态缓存区。</p><ul><li>limit_conn_zone 只能配置在 http 范围内；</li><li>$binary_remote_addr 表示客户端请求的IP地址；</li><li>myconn 自己定义的变量名（缓冲区）；</li><li>limit_rate 限制传输速度</li><li>limit_conn 与 limit_conn_zone 对应，限制网络连接数</li></ul><p>下面的配置就是定义了使用客户端的 IP 作为参照依据，并使用一个 10M 大小的状态缓存区。限定了每个IP只允许建立一个请求连接，同时传输的速度最大为 1024KB</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 定义了一个 myconn 缓冲区（容器）</span><br><span class="hljs-attribute">limit_conn_zone</span> <span class="hljs-variable">$binary_remote_addr</span> zone=myconn:<span class="hljs-number">10m</span>;<br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>  <span class="hljs-number">70</span>;<br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-comment"># 每个 IP 只允许一个连接</span><br>        <span class="hljs-attribute">limit_conn</span> myconn <span class="hljs-number">1</span>;<br>        <span class="hljs-comment"># 限制传输速度（如果有N个并发连接，则是 N * limit_rate）</span><br>        <span class="hljs-attribute">limit_rate</span> <span class="hljs-number">1024k</span>;<br>        <span class="hljs-attribute">proxy_pass</span> http://localhost:7070;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原文地址：<a href="https://cloud.tencent.com/developer/article/1786015">https://cloud.tencent.com/developer/article/1786015</a></p><h1 id="Nginx代理后服务端使用remote-addr获取真实IP"><a href="#Nginx代理后服务端使用remote-addr获取真实IP" class="headerlink" title="Nginx代理后服务端使用remote_addr获取真实IP"></a>Nginx代理后服务端使用remote_addr获取真实IP</h1><p>在代理服务器的Nginx配置（yourWebsite.conf）的location &#x2F;中添加：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#获取客户端IP</span><br><span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br><span class="hljs-attribute">proxy_set_header</span> REMOTE-HOST <span class="hljs-variable">$remote_addr</span>;<br><span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br></code></pre></td></tr></table></figure><p>在业务服务器的Nginx配置（yourWebsite.conf）的location中添加：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">fastcgi_param</span>  HTTP_X_FORWARDED_FOR <span class="hljs-variable">$http_x_forwarded_for</span>;<br></code></pre></td></tr></table></figure><p>配置到这，可以用HTTP_X_FORWARDED_FOR获取客户端真实IP，以PHP为例，$_SERVER[‘HTTP_X_FORWARDED_FOR’]，但是remote_addr还是代理服务器的IP，接着往下配置，把remote_addr也配置成真实IP。</p><p>在业务服务器的Nginx配置（yourWebsite.conf）的location中继续添加：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">set_real_ip_from</span> <span class="hljs-number">172.18.209.11</span>/<span class="hljs-number">24</span>;<span class="hljs-comment">#这里的IP是代理服务器的IP，也可以是IP段。意思是把该IP请求过来的x_forwarded_for设为remote_addr</span><br><span class="hljs-attribute">real_ip_header</span> X-Forwarded-For;<br></code></pre></td></tr></table></figure><p>Tip：添加上面两行之前，需要查看Nginx是否安装了realip模块，Nginx默认是不安装的，查看命令 nginx -V ，结果如下所示，如果没有realip模块，需要先安装。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">nginx <span class="hljs-keyword">version</span>: nginx/1.14.0<br>built by gcc 4.8.5 20150623 <span class="hljs-params">(Red Hat 4.8.5-28)</span> <span class="hljs-params">(GCC)</span> <br>built with OpenSSL 1.0.2k-fips  26 Jan 2017<br>TLS SNI support enabled<br>configure arguments: <span class="hljs-params">--prefix=/usr/local/nginx</span> <span class="hljs-params">--with-select_module</span> <span class="hljs-params">--with-poll_module</span> <span class="hljs-params">--with-threads</span> <span class="hljs-params">--with-file-aio</span> <span class="hljs-params">--with-http_ssl_module</span> <span class="hljs-params">--with-http_realip_module</span> <span class="hljs-params">--with-http_addition_module</span> <span class="hljs-params">--with-http_gunzip_module</span> <span class="hljs-params">--with-http_gzip_static_module</span> <span class="hljs-params">--with-http_auth_request_module</span> <span class="hljs-params">--with-http_random_index_module</span> <span class="hljs-params">--with-http_degradation_module</span> <span class="hljs-params">--with-http_slice_module</span> <span class="hljs-params">--with-http_stub_status_module</span> <span class="hljs-params">--with-stream</span> <span class="hljs-params">--with-stream=dynamic</span> <span class="hljs-params">--with-stream_ssl_module</span> <span class="hljs-params">--with-pcre</span> <span class="hljs-params">--add-module=/usr/local/nginx_upstream_check_module-master/</span><br></code></pre></td></tr></table></figure><h1 id="关于nginx不支持PATHINFO问题的解决"><a href="#关于nginx不支持PATHINFO问题的解决" class="headerlink" title="关于nginx不支持PATHINFO问题的解决"></a>关于nginx不支持PATHINFO问题的解决</h1><p>配置好的NGINX配置文件</p><pre><code class="hljs">server &#123;    listen       80;    server_name  www.newmvc.com;     root /Users/likang/Desktop/mvc_new;    #charset koi8-r;     access_log  logs/www.newmvc.com.access.log  main;    error_log  logs/www.newmvc.com.error.log;     location / &#123;        autoindex on;        index index.php index.html index.htm;    &#125;    #error_page  404              /404.html;     # redirect server error pages to the static page /50x.html    #    error_page   500 502 503 504  /50x.html;    location = /50x.html &#123;    &#125;     # proxy the PHP scripts to Apache listening on 127.0.0.1:80    #    #location ~ \.php$ &#123;    #    proxy_pass   http://127.0.0.1;    #&#125;     # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000    #    location ~ \.php &#123;        fastcgi_pass   127.0.0.1:9000;        fastcgi_index  index.php;        include        fastcgi_params;          set $real_script_name $fastcgi_script_name;        if ($fastcgi_script_name ~ &quot;^(.+?\.php)(/.+)$&quot;) &#123;            set $real_script_name $1;            set $path_info $2;        &#125;        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;        fastcgi_param PATH_INFO $path_info;    &#125;     # deny access to .htaccess files, if Apache&#39;s document root    # concurs with nginx&#39;s one    #    #location ~ /\.ht &#123;    #    deny  all;    #&#125;&#125;</code></pre><p>需要注意的是 </p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">location</span> <span class="hljs-title">~ \.php</span><br></code></pre></td></tr></table></figure><p>这个地方$ 要去掉</p><pre><code class="hljs">还有一种更简单的办法，还是不支持pathinfo使用另外的路由模式，也能解决问题，建议使用第一种办法</code></pre><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">if</span> (!-e <span class="hljs-variable">$request_filename</span>) &#123;<br>   rewrite  ^index.php<span class="hljs-regexp">/(.*)$  /i</span>ndex.php?<span class="hljs-variable">$1</span>  last;<br>   <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu20.04 中文显示不正确的解决方案</title>
    <link href="/2021/06/15/Ubuntu20.04%20%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B8%8D%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/06/15/Ubuntu20.04%20%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B8%8D%E6%AD%A3%E7%A1%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>今天又买了一台腾讯云，想学学linux，就没有安装宝塔。搭建好网站后发现中文显示有问题。查阅一番资料后知道原来需要安装语言包。<br>如下图是没有安装语言包的文件列表:</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs tap">drwxr-xr-x<span class="hljs-number"> 11 </span>root root <span class="hljs-number"> 4096 </span>Jun<span class="hljs-number"> 14 </span>09:52  ./<br>drwxr-xr-x <span class="hljs-number"> 4 </span>root root <span class="hljs-number"> 4096 </span>Jun<span class="hljs-number"> 14 </span>09:53  ../<br>-rwxr-xr-x <span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 18 </span>Apr<span class="hljs-number"> 28 </span>22:24  .htaccess*<br>-rw-r--r-- <span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 47 </span>Oct<span class="hljs-number"> 22 </span><span class="hljs-number"> 2020 </span> .user.ini<br>drwxr-xr-x <span class="hljs-number"> 6 </span>root root <span class="hljs-number"> 4096 </span>May<span class="hljs-number"> 23 </span>22:21  app/<br>-rwxr-xr-x <span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 684 </span>May <span class="hljs-number"> 5 </span>11:32  composer.json*<br>-rwxr-xr-x <span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 23126 </span>Jun<span class="hljs-number"> 10 </span>22:57  composer.lock*<br>drwxr-xr-x <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>Jun <span class="hljs-number"> 6 </span>10:35  config/<br>drwxr-xr-x <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>Apr<span class="hljs-number"> 28 </span>22:24  extend/<br>-rwxr-xr-x <span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 506 </span>Apr<span class="hljs-number"> 28 </span>22:24  max*<br>drwxr-xr-x <span class="hljs-number"> 4 </span>root root <span class="hljs-number"> 4096 </span>Jun<span class="hljs-number"> 14 </span>10:14  public/<br>drwxr-xr-x <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>Apr<span class="hljs-number"> 28 </span>22:24  routes/<br>drwxrwxrwx <span class="hljs-number"> 4 </span>root root <span class="hljs-number"> 4096 </span>Jun<span class="hljs-number"> 12 </span>14:36  storage/<br>drwxr-xr-x <span class="hljs-number"> 8 </span>root root <span class="hljs-number"> 4096 </span>Jun<span class="hljs-number"> 14 </span>10:47  vendor/<br>drwxr-xr-x <span class="hljs-number"> 3 </span>root root <span class="hljs-number"> 4096 </span>May<span class="hljs-number"> 18 </span>14:05  views/<br>drwxr-xr-x <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>Jun<span class="hljs-number"> 12 </span>05:51 &#x27;&#x27;$&#x27;\346\226\207\346\241\243&#x27;/<br><br></code></pre></td></tr></table></figure><p>下面介绍下一般的解决办法：</p><p>首先安装语言包</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> install <span class="hljs-keyword">language</span>-pack-zh-hans<br></code></pre></td></tr></table></figure><p>安装完成后需要将我们的LANG设置为中文。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">locale -<span class="hljs-selector-tag">a</span> <br></code></pre></td></tr></table></figure><p>上面命令查看安装的语言</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@VM-<span class="hljs-number">0</span>-<span class="hljs-number">10</span>-ubuntu:/var/www/chengyao.xyz# locale -a<br><span class="hljs-attribute">C</span><br><span class="hljs-attribute">C</span>.UTF-<span class="hljs-number">8</span><br><span class="hljs-attribute">POSIX</span><br><span class="hljs-attribute">en_US</span>.utf8<br><span class="hljs-attribute">zh_CN</span>.utf8<br><span class="hljs-attribute">zh_SG</span>.utf8<br></code></pre></td></tr></table></figure><p>接下来</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">LANG</span>=zh_CN.utf8<br></code></pre></td></tr></table></figure><p>然后看下文件列表</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs tap">drwxr-xr-x<span class="hljs-number"> 11 </span>root root <span class="hljs-number"> 4096 </span>6月 <span class="hljs-number"> 14 </span>09:52 ./<br>drwxr-xr-x <span class="hljs-number"> 4 </span>root root <span class="hljs-number"> 4096 </span>6月 <span class="hljs-number"> 14 </span>09:53 ../<br>drwxr-xr-x <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>6月 <span class="hljs-number"> 12 </span>05:51 文档/<br>drwxr-xr-x <span class="hljs-number"> 6 </span>root root <span class="hljs-number"> 4096 </span>5月 <span class="hljs-number"> 23 </span>22:21 app/<br>-rwxr-xr-x <span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 684 </span>5月  <span class="hljs-number"> 5 </span>11:32 composer.json*<br>-rwxr-xr-x <span class="hljs-number"> 1 </span>root root<span class="hljs-number"> 23126 </span>6月 <span class="hljs-number"> 10 </span>22:57 composer.lock*<br>drwxr-xr-x <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>6月  <span class="hljs-number"> 6 </span>10:35 config/<br>drwxr-xr-x <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>4月 <span class="hljs-number"> 28 </span>22:24 extend/<br>-rwxr-xr-x <span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 18 </span>4月 <span class="hljs-number"> 28 </span>22:24 .htaccess*<br>-rwxr-xr-x <span class="hljs-number"> 1 </span>root root  <span class="hljs-number"> 506 </span>4月 <span class="hljs-number"> 28 </span>22:24 max*<br>drwxr-xr-x <span class="hljs-number"> 4 </span>root root <span class="hljs-number"> 4096 </span>6月 <span class="hljs-number"> 14 </span>10:14 public/<br>drwxr-xr-x <span class="hljs-number"> 2 </span>root root <span class="hljs-number"> 4096 </span>4月 <span class="hljs-number"> 28 </span>22:24 routes/<br>drwxrwxrwx <span class="hljs-number"> 4 </span>root root <span class="hljs-number"> 4096 </span>6月 <span class="hljs-number"> 12 </span>14:36 storage/<br>-rw-r--r-- <span class="hljs-number"> 1 </span>root root   <span class="hljs-number"> 47 </span>10月<span class="hljs-number"> 22 </span><span class="hljs-number"> 2020 </span>.user.ini<br>drwxr-xr-x <span class="hljs-number"> 8 </span>root root <span class="hljs-number"> 4096 </span>6月 <span class="hljs-number"> 14 </span>10:47 vendor/<br>drwxr-xr-x <span class="hljs-number"> 3 </span>root root <span class="hljs-number"> 4096 </span>5月 <span class="hljs-number"> 18 </span>14:05 views/<br></code></pre></td></tr></table></figure><p><code>文档</code>被显示出来了。</p><p>最后我将他添加到家目录下的<code>.bashrc</code>文件里</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">LANG</span>=zh_CN.utf8<br></code></pre></td></tr></table></figure><p>就可以一直正常显示中文了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>golang中如何获取变量的类型？</title>
    <link href="/2021/05/29/golang%E4%B8%AD%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%8F%98%E9%87%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%9F/"/>
    <url>/2021/05/29/golang%E4%B8%AD%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E5%8F%98%E9%87%8F%E7%9A%84%E7%B1%BB%E5%9E%8B%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>在golang中并没有提供内置函数来获取变量的类型，但是通过一定的方式也可以获取，下面提供两种思路</p><h1 id="通过格式化"><a href="#通过格式化" class="headerlink" title="通过格式化"></a>通过格式化</h1><p>使用格式化字符%T(注意为大写的T)便可以获取到对应的类型</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>&amp;quot;fmt&amp;quot;<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">var</span> v <span class="hljs-type">int</span> = <span class="hljs-number">64</span><br>fmt.Printf(&amp;quot;v的值为: %v, v的类型为: %T\n&amp;quot;, v, v)<br><span class="hljs-comment">// 如果想要保存类型到字符串中，可以使用</span><br>typ := fmt.Sprintf(&amp;quot;%T&amp;quot;, v)<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="通过反射机制"><a href="#通过反射机制" class="headerlink" title="通过反射机制"></a>通过反射机制</h1><p>reflect包中提供了相应的手段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>&amp;quot;fmt&amp;quot;<br>&amp;quot;reflect&amp;quot;<br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">var</span> v <span class="hljs-type">int</span> = <span class="hljs-number">64</span><br>fmt.Println(reflect.TypeOf(v))<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>apache模块使用</title>
    <link href="/2021/05/18/apache%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/"/>
    <url>/2021/05/18/apache%E6%A8%A1%E5%9D%97%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>加载SSL模块<br>sudo a2enmod ssl</p><p>sudo a2enmod http_proxy<br>sudo a2enmod proxy</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>高并发下防止库存超卖的解决方案</title>
    <link href="/2021/05/16/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%8B%E9%98%B2%E6%AD%A2%E5%BA%93%E5%AD%98%E8%B6%85%E5%8D%96%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2021/05/16/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%8B%E9%98%B2%E6%AD%A2%E5%BA%93%E5%AD%98%E8%B6%85%E5%8D%96%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p>最近在看秒杀相关的项目，针对防止库存超卖的问题，查阅了很多资料，其解决方案可以分为悲观锁、乐观锁、分布式锁、Redis原子操作、队列串行化等等，这里进行浅显的记录总结。</p><p>首先我们来看下库存超卖问题是怎样产生的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span>查询出商品库存信息<br><span class="hljs-keyword">select</span> stock <span class="hljs-keyword">from</span> t_goods <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2.</span>根据商品信息生成订单<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_orders (id,goods_id) <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-number">1</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3.</span>修改商品库存<br><span class="hljs-keyword">update</span> t_goods <span class="hljs-keyword">set</span> stock<span class="hljs-operator">=</span>stock<span class="hljs-number">-1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>在高并发场景下，如果同时有两个线程a和b，同时查询到商品库存为1，他们都认为存库充足，于是开始下单减库存。如果线程a先完成减库存操作，库存为0，接着线程b也是减库存，于是库存就变成了-1，商品被超卖了。</p><p>下面让我们来看看针对库存超卖问题的解决方案；</p><h1 id="解决方案一：悲观锁"><a href="#解决方案一：悲观锁" class="headerlink" title="解决方案一：悲观锁"></a>解决方案一：悲观锁</h1><p>所谓悲观锁，即悲观的认为自己在操作数据库时，会大几率出现并发，于是在操作前会先进行加锁，操作完成后再释放锁。如果加锁失败说明该记录正在被修改，那么当前操作可以等待后尝试。</p><p>以我们常用的MySQL为例，行锁、表锁、排他锁等都是悲观锁，为避免冲突，会在操作时先加锁，其他线程必须等待它的完成。</p><p>这里我们通过使用select…for update语句，在查询商品表库存时将该条记录加锁，待下单减库存完成后，再释放锁。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">0.</span>开始事务<br><span class="hljs-keyword">begin</span>;<span class="hljs-operator">/</span><span class="hljs-keyword">begin</span> work;<span class="hljs-operator">/</span><span class="hljs-keyword">start</span> transaction; (三者选一就可以)<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span>查询出商品信息<br><span class="hljs-keyword">select</span> stock <span class="hljs-keyword">from</span> t_goods <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2.</span>根据商品信息生成订单<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_orders (id,goods_id) <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-number">1</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3.</span>修改商品stock减一<br><span class="hljs-keyword">update</span> t_goods <span class="hljs-keyword">set</span> stock<span class="hljs-operator">=</span>stock<span class="hljs-number">-1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">4.</span>提交事务<br><span class="hljs-keyword">commit</span>;<br></code></pre></td></tr></table></figure><p>这样可以解决并发时库存超卖的问题，然而高并发时，所有的操作都被串行化了，效率很低，将严重影响系统的吞吐量。而且使用悲观锁还有可能造成死锁问题。</p><h1 id="解决方案二：乐观锁"><a href="#解决方案二：乐观锁" class="headerlink" title="解决方案二：乐观锁"></a>解决方案二：乐观锁</h1><p>现在我们尝试下使用乐观锁，所谓乐观锁，是相对于悲观锁而言的，它假设数据一般情况下不会发生并发，因此不会对数据进行加锁，操作完成提交时才对数据是否冲突进行检测，如果发现冲突则返回错误。</p><p>比较常见的实现方式是，在表中增加一个version字段，操作前先查询version信息，在数据提交时检查version字段是否被修改，如果没有被修改则进行提交，否则认为是过期数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">1.</span>查询出商品信息<br><span class="hljs-keyword">select</span> stock, version <span class="hljs-keyword">from</span> t_goods <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">2.</span>根据商品信息生成订单<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_orders (id,goods_id) <span class="hljs-keyword">values</span> (<span class="hljs-keyword">null</span>,<span class="hljs-number">1</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-number">3.</span>修改商品库存<br><span class="hljs-keyword">update</span> t_goods <span class="hljs-keyword">set</span> stock<span class="hljs-operator">=</span>stock<span class="hljs-number">-1</span>, version <span class="hljs-operator">=</span> version<span class="hljs-operator">+</span><span class="hljs-number">1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span>, version<span class="hljs-operator">=</span>version;<br></code></pre></td></tr></table></figure><p>这样，在并发时，如果线程a尝试修改商品库存时，发现版本号已经被线程b修改了，线程a执行update语句条件不满足便不再执行了，库存也不会被超卖。</p><p>但是这种乐观锁的方式，在高并发时，只有一个线程能执行成功，会造成大量的失败，这给用户的体验显然是很不好的。</p><p>这里我们可以减小锁的颗粒度，最大程度提升系统的吞吐量，提高并发能力：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>修改商品库存时判断库存是否大于<span class="hljs-number">0</span><br><span class="hljs-keyword">update</span> t_goods <span class="hljs-keyword">set</span> stock<span class="hljs-operator">=</span>stock<span class="hljs-number">-1</span> <span class="hljs-keyword">where</span> id<span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">and</span> stock<span class="hljs-operator">&amp;</span>gt;<span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>上面的update语句通过stock&gt;0进行乐观锁的控制，在执行时，会在一次原子操作中查询stock的值，并扣减一。</p><h1 id="解决方案三：分布式锁"><a href="#解决方案三：分布式锁" class="headerlink" title="解决方案三：分布式锁"></a>解决方案三：分布式锁</h1><p>除了在数据库层面加锁，我们还可以通过在内存中加锁，实现分布式锁。例如我们可以在Redis中设置一个锁，拿到锁的线程抢购成功，拿不到锁的抢购失败。</p><p>Redis的setnx方法可以实现锁机制，key不存在时创建，并设置value，返回值为1；key存在时直接返回0。线程调用setnx方法成功返回1认为加锁成功，其他线程要等到当前线程业务操作完成释放锁后，才能再次调用setnx加锁成功。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Long</span> <span class="hljs-variable">TIMEOUT_SECOUND</span> <span class="hljs-operator">=</span> <span class="hljs-number">120000L</span>;<br><span class="hljs-type">Jedis</span> <span class="hljs-variable">client</span> <span class="hljs-operator">=</span> jedisPool.getResource();<br><span class="hljs-comment">//线程设置lock锁成功</span><br><span class="hljs-keyword">while</span>(client.setnx(&amp;quot;lock&amp;quot;,String.valueOf(System.currentTimeMillis())) == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-type">Long</span> <span class="hljs-variable">lockTime</span> <span class="hljs-operator">=</span> Long.valueOf(client.get(&amp;quot;lock&amp;quot;));<br><span class="hljs-comment">//持有锁超时后自动释放锁</span><br><span class="hljs-keyword">if</span> (lockTime!=<span class="hljs-literal">null</span> &amp;amp;&amp;amp; System.currentTimeMillis() &amp;gt; lockTime+TIMEOUT_SECOUND)&#123;<br>client.del(&amp;quot;lock&amp;quot;);<br><br>&#125;<br>Thread.sleep(<span class="hljs-number">10000</span>);<br><br>&#125;<br>......<br>......<br>client.del(&amp;quot;lock&amp;quot;);<br></code></pre></td></tr></table></figure><h1 id="解决方案四：Redis原子操作"><a href="#解决方案四：Redis原子操作" class="headerlink" title="解决方案四：Redis原子操作"></a>解决方案四：Redis原子操作</h1><p>虽然通过以上方按可以防止库存超卖，但是高并发情况下对数据库进行频繁操作，会造成严重的性能问题。因此我们必须在前端对请求进行限制。</p><p>我们可以在Redis中设置一个队列key为商品的id，队列的长度为商品库存量。每次请求到达时pop出一个元素，这样拿到元素的请求即认为秒杀成功，后续通过MQ发送消息异步完成数据库减库存操作。没有拿到元素的请求即认为秒杀失败。</p><p>由于Redis是工作线程是单线程的，而list的pop操作是原子性的，因此并发的请求都被串行化了，库存就不会超卖了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取商品库存</span><br><span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> redisTemplate.opsForList().leftPop(goodsStock);<br><span class="hljs-keyword">if</span>(token == <span class="hljs-literal">null</span>)&#123;<br>log.info(&amp;quot;&amp;gt;&amp;gt;&amp;gt;商品已售空&amp;quot;);<br><span class="hljs-keyword">return</span> setResultError(&amp;quot;亲，该秒杀已经售空，请下次再来!&amp;quot;);<br><br>&#125;<br><span class="hljs-comment">//异步发送MQ消息，执行数据库操作</span><br>sendSecondKillMsg(goodsId, userId);<br></code></pre></td></tr></table></figure><p>…<br>原文链接：<a href="https://blog.csdn.net/yishihuakai/article/details/104581576">https://blog.csdn.net/yishihuakai/article/details/104581576</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>几套好看的美化框CSS</title>
    <link href="/2021/05/16/%E5%87%A0%E5%A5%97%E5%A5%BD%E7%9C%8B%E7%9A%84%E7%BE%8E%E5%8C%96%E6%A1%86CSS/"/>
    <url>/2021/05/16/%E5%87%A0%E5%A5%97%E5%A5%BD%E7%9C%8B%E7%9A%84%E7%BE%8E%E5%8C%96%E6%A1%86CSS/</url>
    
    <content type="html"><![CDATA[<p>&gt; 新技能GET感谢zmki小伙伴</p><p><img src="/upload/79af1c468b846726c87cc1afeada45a3.jpg"><br><strong>CSS代码</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-comment">/*WordPress宇宙超级无敌美化框 by:zmki  www.zmki.cn/5458.html*/</span><br><span class="hljs-selector-id">#zm_mhz</span>,<span class="hljs-selector-id">#zm_xgh</span>,<span class="hljs-selector-id">#zm_tkzj</span>,<span class="hljs-selector-id">#zm_xyz</span>,<span class="hljs-selector-id">#zm_gll</span> ,<span class="hljs-selector-id">#zm_xty</span>,<span class="hljs-selector-id">#zm_yyz</span>,<span class="hljs-selector-id">#zm_szh</span>,<span class="hljs-selector-id">#zm_wbk</span>&#123;<br>    <span class="hljs-comment">/*圆角值,在此定义*/</span><br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>;<br>&#125;<br><span class="hljs-comment">/*迷幻紫*/</span><br><span class="hljs-selector-id">#zm_mhz</span>&#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#555555</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">35px</span>;<br>    <span class="hljs-comment">/*border-radius: 10px;*/</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">190</span>, <span class="hljs-number">196</span>, <span class="hljs-number">252</span>), -<span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">189</span>, <span class="hljs-number">196</span>, <span class="hljs-number">252</span>);<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#8EC5FC</span>;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">62deg</span>,<span class="hljs-number">#8EC5FC</span> <span class="hljs-number">0%</span>,<span class="hljs-number">#E0C3FC</span> <span class="hljs-number">100%</span>);<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(<span class="hljs-number">62deg</span>,<span class="hljs-number">#8EC5FC</span> <span class="hljs-number">0%</span>,<span class="hljs-number">#E0C3FC</span> <span class="hljs-number">100%</span>);<br>&#125;<br><span class="hljs-comment">/*西瓜红*/</span><br><span class="hljs-selector-id">#zm_xgh</span>&#123;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#555555</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">35px</span>;<br>    <span class="hljs-comment">/*border-radius: 10px;*/</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">176</span>, <span class="hljs-number">172</span>), -<span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">161</span>, <span class="hljs-number">174</span>);<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ff9a8b66</span>;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">220deg</span>,<span class="hljs-number">#FF9A8B</span> <span class="hljs-number">0%</span>,<span class="hljs-number">#ff6a8838</span> <span class="hljs-number">55%</span>,<span class="hljs-number">#FF99AC</span> <span class="hljs-number">100%</span>);<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(<span class="hljs-number">220deg</span>,<span class="hljs-number">#ff9a8b7a</span> <span class="hljs-number">0%</span>,<span class="hljs-number">#ff6a88ab</span> <span class="hljs-number">55%</span>,<span class="hljs-number">#ff99ac82</span> <span class="hljs-number">100%</span>);<br>&#125;<br><span class="hljs-comment">/*华为P30 天空之境*/</span><br><span class="hljs-selector-id">#zm_tkzj</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#555555</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">35px</span>;<br>    <span class="hljs-comment">/*border-radius: 10px;*/</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">253</span>, <span class="hljs-number">223</span>, <span class="hljs-number">234</span>), -<span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">215</span>, <span class="hljs-number">240</span>, <span class="hljs-number">243</span>);<br>    <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#FFDEE9</span>;<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>(<span class="hljs-number">0deg</span>,<span class="hljs-number">#ffdee9c4</span> <span class="hljs-number">0%</span>,<span class="hljs-number">#b5fffc8f</span> <span class="hljs-number">100%</span>);<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">-webkit-linear-gradient</span>(<span class="hljs-number">0deg</span>,<span class="hljs-number">#ffdee9c4</span> <span class="hljs-number">0%</span>,<span class="hljs-number">#b5fffc8f</span> <span class="hljs-number">100%</span>);<br>&#125;<br><span class="hljs-comment">/*小宇宙*/</span><br><span class="hljs-selector-id">#zm_xyz</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#eeeeee</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">35px</span>;<br>    <span class="hljs-comment">/*border-radius: 10px;*/</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">12</span>, <span class="hljs-number">85</span>, <span class="hljs-number">141</span>), -<span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">10</span>, <span class="hljs-number">58</span>, <span class="hljs-number">93</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>( circle <span class="hljs-number">263px</span> at <span class="hljs-number">100.2%</span> <span class="hljs-number">3%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">12</span>,<span class="hljs-number">85</span>,<span class="hljs-number">141</span>,<span class="hljs-number">1</span>) <span class="hljs-number">31.1%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">205</span>,<span class="hljs-number">181</span>,<span class="hljs-number">93</span>,<span class="hljs-number">1</span>) <span class="hljs-number">36.4%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">244</span>,<span class="hljs-number">102</span>,<span class="hljs-number">90</span>,<span class="hljs-number">1</span>) <span class="hljs-number">50.9%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">199</span>,<span class="hljs-number">206</span>,<span class="hljs-number">187</span>,<span class="hljs-number">1</span>) <span class="hljs-number">60.7%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">249</span>,<span class="hljs-number">140</span>,<span class="hljs-number">69</span>,<span class="hljs-number">1</span>) <span class="hljs-number">72.5%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">12</span>,<span class="hljs-number">73</span>,<span class="hljs-number">116</span>,<span class="hljs-number">1</span>) <span class="hljs-number">72.6%</span> );<br>&#125;<br><span class="hljs-comment">/*橄榄绿*/</span><br><span class="hljs-selector-id">#zm_gll</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#eeeeee</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">35px</span>;<br>    <span class="hljs-comment">/*border-radius: 10px;*/</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">68</span>, <span class="hljs-number">110</span>, <span class="hljs-number">92</span>), -<span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">204</span>, <span class="hljs-number">212</span>, <span class="hljs-number">163</span>);<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">linear-gradient</span>( <span class="hljs-number">102deg</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">68</span>,<span class="hljs-number">110</span>,<span class="hljs-number">92</span>,<span class="hljs-number">1</span>) <span class="hljs-number">17.4%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">107</span>,<span class="hljs-number">156</span>,<span class="hljs-number">120</span>,<span class="hljs-number">1</span>) <span class="hljs-number">49.3%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">154</span>,<span class="hljs-number">183</span>,<span class="hljs-number">130</span>,<span class="hljs-number">1</span>) <span class="hljs-number">83.4%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">247</span>,<span class="hljs-number">237</span>,<span class="hljs-number">191</span>,<span class="hljs-number">1</span>) <span class="hljs-number">110.3%</span> );<br>&#125;<br><span class="hljs-comment">/*小太阳*/</span><br><span class="hljs-selector-id">#zm_xty</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">35px</span>;<br>     <span class="hljs-comment">/*border-radius: 10px; */</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">253</span>, <span class="hljs-number">223</span>, <span class="hljs-number">234</span>), -<span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">215</span>, <span class="hljs-number">240</span>, <span class="hljs-number">243</span>);<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>( circle farthest-corner at -<span class="hljs-number">8.9%</span> <span class="hljs-number">51.2%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">124</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-number">0%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">124</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-number">15.9%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">163</span>,<span class="hljs-number">77</span>,<span class="hljs-number">1</span>) <span class="hljs-number">15.9%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>,<span class="hljs-number">163</span>,<span class="hljs-number">77</span>,<span class="hljs-number">1</span>) <span class="hljs-number">24.4%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">19</span>,<span class="hljs-number">30</span>,<span class="hljs-number">37</span>,<span class="hljs-number">1</span>) <span class="hljs-number">24.5%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">19</span>,<span class="hljs-number">30</span>,<span class="hljs-number">37</span>,<span class="hljs-number">1</span>) <span class="hljs-number">66%</span> );<br>&#125;<br><span class="hljs-comment">/*优雅紫*/</span><br><span class="hljs-selector-id">#zm_yyz</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">35px</span>;<br>    <span class="hljs-comment">/*border-radius: 10px;*/</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">175</span>, <span class="hljs-number">160</span>, <span class="hljs-number">208</span>), -<span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">177</span>, <span class="hljs-number">161</span>, <span class="hljs-number">207</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>( circle farthest-corner at <span class="hljs-number">10%</span> <span class="hljs-number">20%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">95</span>,<span class="hljs-number">117</span>,<span class="hljs-number">227</span>,<span class="hljs-number">1</span>) <span class="hljs-number">0%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">188</span>,<span class="hljs-number">167</span>,<span class="hljs-number">205</span>,<span class="hljs-number">1</span>) <span class="hljs-number">90%</span> );<br>&#125;<br><span class="hljs-comment">/*深邃黑*/</span><br><span class="hljs-selector-id">#zm_szh</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#c7c7c7</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">35px</span>;<br>    <span class="hljs-comment">/*border-radius: 5px;*/</span><br>    <span class="hljs-attribute">box-shadow</span>: <span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgb</span>(<span class="hljs-number">155</span>, <span class="hljs-number">170</span>, <span class="hljs-number">185</span>), -<span class="hljs-number">6px</span> <span class="hljs-number">0</span> <span class="hljs-number">12px</span> -<span class="hljs-number">5px</span> <span class="hljs-built_in">rgba</span>(<span class="hljs-number">177</span>, <span class="hljs-number">161</span>, <span class="hljs-number">207</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">radial-gradient</span>( circle farthest-corner at <span class="hljs-number">10%</span> <span class="hljs-number">20%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>) <span class="hljs-number">0%</span>, <span class="hljs-built_in">rgba</span>(<span class="hljs-number">64</span>,<span class="hljs-number">64</span>,<span class="hljs-number">64</span>,<span class="hljs-number">1</span>) <span class="hljs-number">90.2%</span> );<br>&#125;<br><span class="hljs-comment">/*无边框*/</span><br><span class="hljs-selector-id">#zm_wbk</span> &#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#000000</span>;<br>    <span class="hljs-attribute">overflow</span>: hidden;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">10px</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">15px</span> <span class="hljs-number">35px</span>;<br>&#125;<br><span class="hljs-selector-id">#zm_xyz</span> <span class="hljs-selector-tag">a</span> , <span class="hljs-selector-id">#zm_gll</span> <span class="hljs-selector-tag">a</span>&#123;<br>     <span class="hljs-attribute">color</span>: <span class="hljs-number">#eeeeee</span>;<br>&#125;<br><span class="hljs-selector-id">#zm_szh</span> <span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#c7c7c7</span>;    <br>&#125;<br><span class="hljs-selector-id">#zm_xty</span> <span class="hljs-selector-tag">a</span>, <span class="hljs-selector-id">#zm_yyz</span> <span class="hljs-selector-tag">a</span>&#123;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#ffffff</span>;<br>&#125;<br> <br></code></pre></td></tr></table></figure><p><strong>调用代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-symbol">&amp;lt;</span>div id=<span class="hljs-symbol">&amp;quot;</span>zm_mhz<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span> 迷幻紫<span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>div id=<span class="hljs-symbol">&amp;quot;</span>zm_xgh<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span> 西瓜红<span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>div id=<span class="hljs-symbol">&amp;quot;</span>zm_tkzj<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span>天空之境<span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>div id=<span class="hljs-symbol">&amp;quot;</span>zm_xyz<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span>小宇宙<span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>div id=<span class="hljs-symbol">&amp;quot;</span>zm_gll<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span>撖榄绿<span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>div id=<span class="hljs-symbol">&amp;quot;</span>zm_xty<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span>小太阳<span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>div id=<span class="hljs-symbol">&amp;quot;</span>zm_yyz<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span>优雅紫<span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>div id=<span class="hljs-symbol">&amp;quot;</span>zm_szh<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span>深邃黑<span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>div id=<span class="hljs-symbol">&amp;quot;</span>zm_wbk<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span>无边框<span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><br> <br></code></pre></td></tr></table></figure><p>文章来源于:<a href="https://www.abcio.cn/C/350.html">https://www.abcio.cn/C/350.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ll 命令排序详解</title>
    <link href="/2021/05/16/ll%20%E5%91%BD%E4%BB%A4%E6%8E%92%E5%BA%8F%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/05/16/ll%20%E5%91%BD%E4%BB%A4%E6%8E%92%E5%BA%8F%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">ll </span> 默认按照文件名字母顺序排序，A在最前<br><span class="hljs-keyword">ll </span>-SX  按照文件类型排序，扩展名首字母排序，文件夹最前<br><span class="hljs-keyword">ll </span>-St  按照创建时间排序，最近的最前<br><span class="hljs-keyword">ll </span>-SS  按照大小排序，最大的最前<br></code></pre></td></tr></table></figure><p>选项</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs perl">-S按文件大小排序<br>      --<span class="hljs-keyword">sort</span> = WORD按WORD而不是名称排序：无（-U），大小（-S），<br>  时间（-t），版本（-v），扩展名（-X）<br>      --<span class="hljs-keyword">time</span> =带有-l的WORD，将时间显示为WORD而不是默认值<br>  修改时间：一次或访问或使用（-u）<br>  ctime或状态（-c）；也使用指定的时间<br>  作为排序键，如果--<span class="hljs-keyword">sort</span> = <span class="hljs-keyword">time</span><br>      --<span class="hljs-keyword">time</span>-style =带有-l的样式，使用样式STYLE显示时间：<br>  全ISO，长ISO，ISO，区域设置或+ FORMAT;<br>  FORMAT的解释方式类似于<span class="hljs-string">&#x27;date&#x27;</span>；如果格式<br>  是FORMAT1 &amp;<span class="hljs-keyword">lt</span>;newline&amp;<span class="hljs-keyword">gt</span>; FORMAT2，则FORMAT1适用<br>  非最新文件，FORMAT2到最近文件；<br>  如果STYLE带有<span class="hljs-string">&#x27;posix-&#x27;</span>前缀，则为STYLE<br>  仅在POSIX语言环境外生效<br>  -t按修改时间排序，最新的优先<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>shell脚本输出带颜色字体</title>
    <link href="/2021/05/10/shell%E8%84%9A%E6%9C%AC%E8%BE%93%E5%87%BA%E5%B8%A6%E9%A2%9C%E8%89%B2%E5%AD%97%E4%BD%93/"/>
    <url>/2021/05/10/shell%E8%84%9A%E6%9C%AC%E8%BE%93%E5%87%BA%E5%B8%A6%E9%A2%9C%E8%89%B2%E5%AD%97%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<p>输出特效格式控制：*<br>\033[0m*  关闭所有属性 *<br>\033[1m*  设置高亮度 *<br>\03[4m*  下划线 *<br>\033[5m*  闪烁 *<br>\033[7m*  反显 *<br>\033[8m*  消隐 *<br>\033[30m  –  \033[37m*  设置前景色 *<br>\033[40m  –  \033[47m*  设置背景色</p><p>光标位置等的格式控制：<br>\033[nA  光标上移n行<br>\03[nB  光标下移n行<br>\033[nC  光标右移n行<br>\033[nD  光标左移n行<br>\033[y;xH设置光标位置<br>\033[2J  清屏<br>\033[K  清除从光标到行尾的内容<br>\033[s  保存光标位置<br>\033[u  恢复光标位置<br>\033[?25l  隐藏光标  </p><p>\33[?25h  显示光标</p><p>整理：<br>  编码 颜色&#x2F;动作<br>　　0  重新设置属性到缺省设置<br>　　1  设置粗体<br>　　2  设置一半亮度(模拟彩色显示器的颜色)<br>　　4  设置下划线(模拟彩色显示器的颜色)<br>　　5  设置闪烁<br>　　7  设置反向图象<br>　　22 设置一般密度<br>　　24 关闭下划线<br>　　25 关闭闪烁<br>　　27 关闭反向图象<br>　　30 设置黑色前景<br>　　31 设置红色前景<br>　　32 设置绿色前景<br>　　33 设置棕色前景<br>　　34 设置蓝色前景<br>　　35 设置紫色前景<br>　　36 设置青色前景<br>　　37 设置白色前景<br>　　38 在缺省的前景颜色上设置下划线<br>　　39 在缺省的前景颜色上关闭下划线<br>　　40 设置黑色背景<br>　　41 设置红色背景<br>　　42 设置绿色背景<br>　　43 设置棕色背景<br>　　44 设置蓝色背景<br>　　45 设置紫色背景<br>　　46 设置青色背景<br>　　47 设置白色背景<br>　　49 设置缺省黑色背景<br>特效可以叠加，需要使用“;”隔开，例如：闪烁+下划线+白底色+黑字为  \033[5;4;47;30m闪烁+下划线+白底色+黑字为\033[0m<br>下面是一段小例子</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#下面是字体输出颜色及终端格式控制</span><br><span class="hljs-comment">#字体色范围：30-37</span><br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[30m 黑色字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[31m 红色字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[32m 绿色字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[33m 黄色字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[34m 蓝色字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[35m 紫色字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[36m 天蓝字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[37m 白色字 \033[0m&amp;quot;<br><span class="hljs-comment">#字背景颜色范围：40-47</span><br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[40;37m 黑底白字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[41;30m 红底黑字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[42;34m 绿底蓝字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[43;34m 黄底蓝字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[44;30m 蓝底黑字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[45;30m 紫底黑字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[46;30m 天蓝底黑字 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[47;34m 白底蓝字 \033[0m&amp;quot;<br><br><span class="hljs-comment">#控制选项说明</span><br><span class="hljs-comment">#\033[0m 关闭所有属性</span><br><span class="hljs-comment">#\033[1m 设置高亮度</span><br><span class="hljs-comment">#\033[4m 下划线</span><br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[4;31m 下划线红字 \033[0m&amp;quot;<br><span class="hljs-comment">#闪烁</span><br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[5;34m 红字在闪烁 \033[0m&amp;quot;<br><span class="hljs-comment">#反影</span><br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[8m 消隐 \033[0m &amp;quot;<br><br><span class="hljs-comment">#\033[30m-\033[37m 设置前景色</span><br><span class="hljs-comment">#\033[40m-\033[47m 设置背景色</span><br><span class="hljs-comment">#\033[nA光标上移n行</span><br><span class="hljs-comment">#\033[nB光标下移n行</span><br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[4A 光标上移4行 \033[0m&amp;quot;<br><span class="hljs-comment">#\033[nC光标右移n行</span><br><span class="hljs-comment">#\033[nD光标左移n行</span><br><span class="hljs-comment">#\033[y;xH设置光标位置</span><br><span class="hljs-comment">#\033[2J清屏</span><br><span class="hljs-comment">#\033[K清除从光标到行尾的内容</span><br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[K 清除光标到行尾的内容 \033[0m&amp;quot;<br><span class="hljs-comment">#\033[s 保存光标位置</span><br><span class="hljs-comment">#\033[u 恢复光标位置</span><br><span class="hljs-comment">#\033[?25| 隐藏光标</span><br><span class="hljs-comment">#\033[?25h 显示光标</span><br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[?25l 隐藏光标 \033[0m&amp;quot;<br><span class="hljs-built_in">echo</span> -e &amp;quot;\033[?25h 显示光标 \033[0m&amp;quot;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SSH设置公钥实现免密登录</title>
    <link href="/2021/05/04/SSH%E8%AE%BE%E7%BD%AE%E5%85%AC%E9%92%A5%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
    <url>/2021/05/04/SSH%E8%AE%BE%E7%BD%AE%E5%85%AC%E9%92%A5%E5%AE%9E%E7%8E%B0%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<p>&gt; 前提准备： 机器A需要使用免密登录连接机器B。测试机器为笔记本一台【wsl2 ubuntu】， centos7.6一台</p><h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="步骤一、首先在机器A上执行下面的命令"><a href="#步骤一、首先在机器A上执行下面的命令" class="headerlink" title="步骤一、首先在机器A上执行下面的命令"></a>步骤一、首先在机器A上执行下面的命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>执行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">root@DESKTOP-1SDORV4:~/.ssh# ssh-keygen -t rsa<br>Generating public/private rsa key pair.<br>Enter file in which to save the key (/root/.ssh/id_rsa):<br>/root/.ssh/id_rsa already exists.<br>Overwrite (y/n)? y<br>Enter passphrase (empty for no passphrase):<br>Enter same passphrase again:<br>Your identification has been saved in /root/.ssh/id_rsa<br>Your public key has been saved in /root/.ssh/id_rsa.pub<br>The key fingerprint is:<br>SHA256:u5Su/vifiFGxYSj8B6+7kLBAgX1iPrSL0scpPK6E4JM root@DESKTOP-1SDORV4<br>The key&amp;#039;s randomart image is:<br>+---[RSA 3072]----+<br>|.o               |<br>|. *..  .         |<br>| = +o o +        |<br>|. +  o + +       |<br>|o+.+ .. S        |<br>|*.Bo+. + o       |<br>|oE.+o o +        |<br>|. o  . B o .     |<br>|..   .B=*.o      |<br>+----[SHA256]-----+<br>root@DESKTOP-1SDORV4:~/.ssh#<br></code></pre></td></tr></table></figure><p>然后会在当前用户家目录下的<code>.ssh</code>文件夹下生成一个<code>id_rsa.pub</code>的文件，执行下面的命令复制文本内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure><h2 id="步骤二、登录机器B"><a href="#步骤二、登录机器B" class="headerlink" title="步骤二、登录机器B"></a>步骤二、登录机器B</h2><p>进入用户家目录的<code>.ssh</code>目录，新建或者修改<code>authorized_keys</code> 文件，将准备中的<code>key</code> 粘贴进去，保存。</p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">root</span>@DESKTOP-<span class="hljs-number">1</span>SDORV4:~/.ssh# ssh user@chengyao.xyz<br><span class="hljs-attribute">Last</span> failed login: Tue May  <span class="hljs-number">4</span> <span class="hljs-number">16</span>:<span class="hljs-number">46</span>:<span class="hljs-number">04</span> CST <span class="hljs-number">2021</span> from <span class="hljs-number">175.190.126.17</span>* <span class="hljs-literal">on</span> ssh:notty<br><span class="hljs-attribute">There</span> were <span class="hljs-number">6</span> failed login attempts since the last successful login.<br><span class="hljs-attribute">Last</span> login: Tue May  <span class="hljs-number">4</span> <span class="hljs-number">16</span>:<span class="hljs-number">40</span>:<span class="hljs-number">39</span> <span class="hljs-number">2021</span> from <span class="hljs-number">111.19.83.22</span>*<br><br><span class="hljs-attribute">Welcome</span> to Alibaba Cloud Elastic Compute Service !<br><br><span class="hljs-attribute">manpath</span>: can&amp;#<span class="hljs-number">039</span>;t set the locale; make sure $LC_* and $LANG are correct<span class="hljs-meta"></span><br><span class="hljs-meta">[user@iZ2zeir6up2905ofunx6tdZ ~]#</span><br></code></pre></td></tr></table></figure><p>至此说明你的免密登录成功了。</p><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>在查看网上相关资料的时候发现很多人出了一些莫名奇妙的问题，有的人给的解决方案是将<code>.ssh</code>目录的权限设置为<code>0700</code>,将下面的文件权限设置为<code>0600</code> ，大家遇到问题可以检查下是不是权限的问题。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ssh 与远程机器保持心跳（linux）</title>
    <link href="/2021/05/03/ssh%20%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%BF%9D%E6%8C%81%E5%BF%83%E8%B7%B3%EF%BC%88linux%EF%BC%89/"/>
    <url>/2021/05/03/ssh%20%E4%B8%8E%E8%BF%9C%E7%A8%8B%E6%9C%BA%E5%99%A8%E4%BF%9D%E6%8C%81%E5%BF%83%E8%B7%B3%EF%BC%88linux%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>在连接远程SSH服务的时候，经常会发生长时间后的断线，或者无响应（无法再键盘输入）。<br>总体来说有两个方法：<br>一、客户端定时发送心跳<br>1.putty、SecureCRT、XShell都有这个功能，设置请自行搜索</p><p>2.此外在Linux下：</p><p>#修改本机&#x2F;etc&#x2F;ssh&#x2F;ssh_config<br>vim &#x2F;etc&#x2F;ssh&#x2F;ssh_config</p><h1 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ServerAliveInterval</span> <span class="hljs-number">30</span><br><span class="hljs-attribute">ServerAliveCountMax</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>即每隔30秒，向服务器发出一次心跳。若超过100次请求，都没有发送成功，则会主动断开与服务器端的连接。</p><p>二、服务器端定时向客户端发送心跳（一劳永逸）</p><h1 id="修改服务器端-ssh配置-x2F-etc-x2F-ssh-x2F-sshd-config"><a href="#修改服务器端-ssh配置-x2F-etc-x2F-ssh-x2F-sshd-config" class="headerlink" title="修改服务器端 ssh配置 &#x2F;etc&#x2F;ssh&#x2F;sshd_config"></a>修改服务器端 ssh配置 &#x2F;etc&#x2F;ssh&#x2F;sshd_config</h1><p>vim &#x2F;etc&#x2F;ssh&#x2F;sshd_config</p><h1 id="添加-1"><a href="#添加-1" class="headerlink" title="添加"></a>添加</h1><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ClientAliveInterval</span> <span class="hljs-number">30</span><br><span class="hljs-attribute">ClientAliveCountMax</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>ClientAliveInterval表示每隔多少秒，服务器端向客户端发送心跳，是的，你没看错。</p><p>下面的ClientAliveInterval表示上述多少次心跳无响应之后，会认为Client已经断开。</p><p>所以，总共允许无响应的时间是60*3&#x3D;180秒。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Systemctl和service、chkconfig命令的关系</title>
    <link href="/2021/05/01/Systemctl%E5%92%8Cservice%E3%80%81chkconfig%E5%91%BD%E4%BB%A4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <url>/2021/05/01/Systemctl%E5%92%8Cservice%E3%80%81chkconfig%E5%91%BD%E4%BB%A4%E7%9A%84%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h1><p>&gt; systemctl命令：是一个systemd工具，主要负责控制systemd系统和服务管理器。</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">systemctl</span> <span class="hljs-built_in">list-units</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">start</span> <span class="hljs-string">firewalld</span> <span class="hljs-string">systemctl</span> <span class="hljs-string">restart</span> <span class="hljs-string">firewalld</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">stop</span> <span class="hljs-string">fitrwalld</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">disable</span> <span class="hljs-string">firewalld</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">enable</span> <span class="hljs-string">firewalld</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">is-active</span> <span class="hljs-string">firewall</span><br><span class="hljs-string">systemctl</span> <span class="hljs-string">is-enabled</span> <span class="hljs-string">firewalldsystemctl</span> <span class="hljs-string">status</span> <span class="hljs-string">firewalld</span><br></code></pre></td></tr></table></figure><h1 id="service"><a href="#service" class="headerlink" title="service"></a>service</h1><p>&gt;service命令：可以启动、停止、重新启动和关闭系统服务，还可以显示所有系统服务的当前状态。</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs fortran">service network restart/start/<span class="hljs-keyword">stop</span><br>service network <span class="hljs-keyword">status</span><br>service --<span class="hljs-keyword">status</span>-<span class="hljs-built_in">all</span> [补充]<br></code></pre></td></tr></table></figure><h1 id="chkconfig"><a href="#chkconfig" class="headerlink" title="chkconfig"></a>chkconfig</h1><p>&gt;chkconfig命令：是管理系统服务(service)的命令行工具。所谓系统服务(service)，就是随系统启动而启动，随系统关闭而关闭的程序。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">chkconfig</span> ntpd <span class="hljs-literal">on</span>/<span class="hljs-literal">off</span>/reset(永久关闭某个服务)<br><br>chkconfig list<br></code></pre></td></tr></table></figure><p>systemctl命令是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起。<br>systemctl是RHEL 7 的服务管理工具中主要的工具，它融合之前service和chkconfig的功能于一体。可以使用它永久性或只在当前会话中启用&#x2F;禁用服务。<br>所以systemctl命令是service命令和chkconfig命令的集合和代替。</p><p>来源：<a href="https://www.cnblogs.com/hx1998/p/10923993.html">https://www.cnblogs.com/hx1998/p/10923993.html</a> [有补充]</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux基本命令grep egrep fgrep zgrep用法以及正则表达式</title>
    <link href="/2021/05/01/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4grep%20egrep%20fgrep%20zgrep%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2021/05/01/linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4grep%20egrep%20fgrep%20zgrep%E7%94%A8%E6%B3%95%E4%BB%A5%E5%8F%8A%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="一、grep、egrep、fgrep命令"><a href="#一、grep、egrep、fgrep命令" class="headerlink" title="一、grep、egrep、fgrep命令"></a>一、grep、egrep、fgrep命令</h1><p> 本文中主要介绍了<code>linux</code>系统下<code>grep</code> <code>egrep</code> <code>fgrep</code>命令和正则表达式的基本参数和使用格式、方法。</p><h2 id="1-1、基本定义："><a href="#1-1、基本定义：" class="headerlink" title="1.1、基本定义："></a>1.1、基本定义：</h2><blockquote><p>grep（global search regular RE ) and print out the line,全面搜索正则表达式并把行打印出来）是一种强大的文本搜索工具，它只能使用基本的正则表达式来搜索文本，并把匹配的行打印出来。</p></blockquote><ol><li><p>grep是很常见也很常用的命令，它的主要功能是进行字符串数据的比较，然后符合用户需求的字符串打印出来，但是主意，grep在数据中查找一个字符串时，是以“整行”为单位进行数据筛选的。</p></li><li><p>egrep命令等同于grep -E，利用此命令可以使用扩展的正则表达式对文本进行搜索，并把符合用户需求的字符串打印出来。</p></li><li><p>fgrep命令等同于grep -F，它利用固定的字符串来对文本进行搜索，但不支持正则表达式的引用，所以此命令的执行速度也最快。</p></li></ol><h2 id="1-2、命令基本用法"><a href="#1-2、命令基本用法" class="headerlink" title="1.2、命令基本用法"></a>1.2、命令基本用法</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">grep [<span class="hljs-keyword">option</span>] <span class="hljs-string">&#x27;搜索字符串&#x27;</span> filename<br></code></pre></td></tr></table></figure><blockquote><p>grep常用选项：</p></blockquote><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a :在二进制文件中，以文本文件的方式搜索数据</span><br><br><span class="hljs-deletion">-c :计算找到&#x27;搜索字符串&#x27;的次数</span><br><br><span class="hljs-deletion">-i :忽略大小写</span><br><br><span class="hljs-deletion">-v :反向查找，即显示没有&#x27;搜索字符串&#x27;内容的那行</span><br><br><span class="hljs-deletion">-o :只显示被模式匹配的字符串</span><br><br><span class="hljs-deletion">-n :输出行号</span><br><br><span class="hljs-deletion">--colour（color）:颜色显示</span><br></code></pre></td></tr></table></figure><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-A：显示匹配到字符那行的后面n行</span><br><br><span class="hljs-deletion">-B：显示匹配到字符那行的前面n行</span><br><br><span class="hljs-deletion">-C：显示匹配到字符那行的前后n行</span><br></code></pre></td></tr></table></figure><h1 id="二、正则表达式"><a href="#二、正则表达式" class="headerlink" title="二、正则表达式"></a>二、正则表达式</h1><h2 id="2-1、基本定义："><a href="#2-1、基本定义：" class="headerlink" title="2.1、基本定义："></a>2.1、基本定义：</h2><blockquote><p>正则表达使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。在很多文本编辑器里，正则表达式通常被用来检索、替换那些符合某个模式的文本。简而言之，正则表达式就是处理字符串的方法，以行为单位进行字符串的处理，通过一些特殊符号的辅助，可以让用户轻松搜索&#x2F;替换某特定的字符串。</p></blockquote><p>正则表达式分为两类：基本的正则表达式和扩展的正则表达式。</p><h2 id="2-2、正则表达式详细介绍"><a href="#2-2、正则表达式详细介绍" class="headerlink" title="2.2、正则表达式详细介绍"></a>2.2、正则表达式详细介绍</h2><h3 id="2-2-1、基本的正则表达式："><a href="#2-2-1、基本的正则表达式：" class="headerlink" title="2.2.1、基本的正则表达式："></a>2.2.1、基本的正则表达式：</h3><p>   （1）元字符：</p><p>​      . :匹配任意单个字符</p><p>​       fg：查找包含student且student后面带一个字符的行</p><p>​       grep ‘student.’ &#x2F;etc&#x2F;passwd （模式可以用单引号和双引号，如果模式中要做变量替换时则必须用双引）   </p><p>​      [] :匹配指定范围内的任意单个字符,[abc],[a-z],[0-9],[a-zA-Z]</p><p>​        fg：查找带有数字的行</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;[0-9]&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p>​      [^] :匹配指定范围外的任意单个字符</p><p>​        fg：查找没有小写字母的行。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;[^a-z]&#x27;</span> <span class="hljs-regexp">/etc/i</span>nittab<br></code></pre></td></tr></table></figure><p><code>[:space:]</code>: 表示空白字符<br><code>[:punct:]</code>: 表示所有标点符号的集合<br><code>[:lower:]</code>: 表示所有的小写字母<br><code>[:upper:]</code>: 表示所有的大写字母<br><code>[:alpha:]</code>: 表示大小写字母<br><code>[:digit:]</code>: 表示数子<br><code>[:alnum:]</code>: 表示数字和大小写字母—–使用格式:alnum:等</p><p>   （2）次数匹配：</p><p>​      *  :匹配其前面的字符任意次</p><p>​        fg：查找root出现0次或0次以上的行</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;root*&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p>​      .* :任意字符 </p><p>​        fg：查找包含root的行</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;root.*&#x27;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><p>​      ?：匹配其前面的字符1次或0次</p><p>​      {m,n} :匹配其前字符最少m，最多n次）</p><p>​    (3) 字符锚定：</p><p>​      ^:锚定行首，此字符后面的任意内容必须出现在行首</p><p>​        fg：查找行首以#开头的行</p><p>​        grep ‘^#’ &#x2F;etc&#x2F;inittab</p><p>​      $:锚定行尾，此字符前面的任意内容必须出现在行尾</p><p>​        fg：查找行首以root结尾的行</p><p>​        grep ‘root$’ &#x2F;etc&#x2F;inittab  </p><p>​      ^$:锚定空白行，可以统计空白行</p><p>​      &lt;或者\b:锚定词首，其后面的任意字符必须做为单词首部出现</p><p>​        fg:查找root且root前面不包含任何字符的行</p><p>​         grep ‘\</p><p>​      &gt;或者\b:锚定词尾，其前面的任意字符必须做为单词尾部出现             fg：\ 查找root单词  grep “&quot; &#x3D;grep “\broot\b”</p><h3 id="2-2-2、扩展的正则表达式："><a href="#2-2-2、扩展的正则表达式：" class="headerlink" title="2.2.2、扩展的正则表达式："></a>2.2.2、扩展的正则表达式：</h3><p>​     扩展的正则表达只是在基本的正则表达上作出了小小的一点修改，其修改如下：</p><p> 在扩展的正则表达中把( ) 写成()、{ } 写成{ }，另外加入了+：次数匹配，匹配其前面的字符至少出现一次，无上限、|: 或者(二取一），其余的都一样， 基本正则表达式，使用( ) { } . ? |都需要转义,在扩展正则表达中不需要加\，（这里测试了以下|是需要转义的）其详细信息如下：</p><p>​     (1) 字符匹配的命令和用法与基本正则表达式的用法相同，这里不再重复阐述。</p><p>​     (2) 次数匹配：</p><p>​       * :匹配其前面字符的任意次</p><p>​       ？:匹配其前面字符的0此或着1此</p><p>​       + :匹配其前面字符至少1此</p><p>​         fg：至少一个空白符： ‘[[:space:]]+’</p><p>​       {m,n} :匹配其前面字符m到n次</p><p>​     (3) 字符锚定的用法和基本正则表达式的用法相同，在此不再阐述。</p><p>​     （4）特殊字符：</p><p>​        | : 代表或者的意思。</p><p>​          fg：grep -E ‘c|cat’ file：表示在文件file内查找包含c或者cat</p><p>​        .:\表示转义字符，此表示符号.</p><h1 id="三、grep命令利用小实例"><a href="#三、grep命令利用小实例" class="headerlink" title="三、grep命令利用小实例"></a>三、grep命令利用小实例</h1><p>(1)显示&#x2F;etc&#x2F;inittab 中以#开头，且后面跟一个或者多个空白符，而后又跟了任意非空白符的行</p><p>grep ‘#[[:space:]]*[^[:space:]]’ &#x2F;etc&#x2F;inittab</p><p>(2) 输出不是数字开关的行grep ‘^[^0-9]’</p><p>&#x2F;etc&#x2F;passwd</p><p>(3)输出行首是1或2</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;^\(1\|2\)&#x27;</span> <span class="hljs-regexp">/etc/i</span>nittab<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -E <span class="hljs-string">&#x27;^(1|2)&#x27;</span> <span class="hljs-regexp">/etc/i</span>nittab<br></code></pre></td></tr></table></figure><p>(4)查找前面是rc中间接任意字符而后跟&#x2F;rc</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;.*\(rc\).*\/\1.*&#x27;</span> <span class="hljs-regexp">/etc/i</span>nittab<br></code></pre></td></tr></table></figure><p>(5）取出当前电脑上的IP</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">ifconfig |<span class="hljs-keyword">grep</span> -A <span class="hljs-number">1</span> <span class="hljs-string">&quot;^eth0&quot;</span> |<span class="hljs-keyword">grep</span> <span class="hljs-comment">&quot;\&lt;[0-9.]\&#123;1,\&#125; |cut -d: -f2</span><br></code></pre></td></tr></table></figure><p>(6)查找当前系统上名字为student（必须出现在行首）的用户账户的相关信息，文件为&#x2F;etc&#x2F;passwd</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> <span class="hljs-string">&quot;^student&quot;</span> <span class="hljs-regexp">/etc/</span>passwd<br></code></pre></td></tr></table></figure><h1 id="zgrep"><a href="#zgrep" class="headerlink" title="zgrep"></a>zgrep</h1><p><a href="https://blog.csdn.net/weixin_40720226/article/details/90609293">http://einverne.github.io/post/2017/11/zgrep-grep-gz-file.html</a></p><p>Linux 下按照正则过滤文本的命令 <a href="https://so.csdn.net/so/search?q=grep&spm=1001.2101.3001.7020">grep</a> 非常强大，grep 能够把正则匹配的行打印出来。而 zgrep 则能够对压缩包内容进行正则匹配。zgrep 全称是 search compressed files for a regular expression</p><p>grep 的命令格式是</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grep <span class="hljs-selector-attr">[option]</span> pattern files<br></code></pre></td></tr></table></figure><p>他的工作方式是，在一个或者多个文件中根据正则搜索匹配内容，将搜索的结果输出到标准输出，不更改源文件内容。</p><h2 id="grep-常用的一些选项"><a href="#grep-常用的一些选项" class="headerlink" title="grep 常用的一些选项"></a>grep 常用的一些选项</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-i   忽略字符大小写区别-v   显示不包含正则的所有行</span><br></code></pre></td></tr></table></figure><p> 关于更多的 grep 的内容可以参考另外一篇文章，zgrep 和 grep 用法类似，不过操作的对象是压缩的内容。支持 bzip2，gzip，lzip， xz 等等。</p><h2 id="zgrep-使用"><a href="#zgrep-使用" class="headerlink" title="zgrep 使用"></a>zgrep 使用</h2><p>但如果想要过滤 Nginx 的 access_log.gz 的压缩文件的内容，如果先解压，然后过滤出有用的文本，再把文件压缩回去，这就变的非常不方便。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">gunzip access_log.gzgrep <span class="hljs-string">&quot;/api&quot;</span> access_loggzip access_log<br></code></pre></td></tr></table></figure><p>需要使用三个命令来实现文件的过滤，其实 Linux 下可以使用 <code>zgrep</code> 来一步完成</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">zgrep <span class="hljs-string">&quot;/api&quot;</span> access_log.<span class="hljs-property">gz</span><br></code></pre></td></tr></table></figure><p>和 grep 类似， <code>zgrep</code> 也可以指定多个文件同时进行搜索过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">zgrep <span class="hljs-string">&quot;/api&quot;</span> access_log.<span class="hljs-property">gz</span> access_log_1.<span class="hljs-property">gz</span><br></code></pre></td></tr></table></figure><h2 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h2><p>既然提到了不解压搜索压缩包内容，<code>.gz</code> 的文件可以使用 <code>zgrep</code> ，而对于 <code>.tar.gz</code> 文件</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs perl">zcat access.tar.gz | <span class="hljs-keyword">grep</span> -a <span class="hljs-string">&#x27;/api&#x27;</span>zgrep -a <span class="hljs-string">&quot;/api&quot;</span> access.tar.gz<br></code></pre></td></tr></table></figure><p>其实这些带 <code>z</code> 的命令都包含在 Zutils 这个工具包中，这个工具包还提供了</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">zcat  解压文件并将内容输出到标准输出zcmp  解压文件并且 <span class="hljs-type">byte</span> <span class="hljs-keyword">by</span> <span class="hljs-type">byte</span> 比较两个文件zdiff 解压文件并且 line <span class="hljs-keyword">by</span> line 比较两个文件zgrep 解压文件并且根据正则搜索文件内容ztest - Tests integrity <span class="hljs-keyword">of</span> compressed files.zupdate - Recompresses files <span class="hljs-keyword">to</span> lzip format.<br></code></pre></td></tr></table></figure><p>这些命令支持 bzip2, gzip, lzip and xz 格式。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux sed 命令</title>
    <link href="/2021/05/01/Linux%20sed%20%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/05/01/Linux%20sed%20%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Linux sed 命令是利用脚本来处理文本文件。</p><p>sed 可依照脚本的指令来处理、编辑文本文件。</p><p>Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sed <span class="hljs-selector-attr">[-hnV]</span><span class="hljs-selector-attr">[-e&lt;script&gt;]</span><span class="hljs-selector-attr">[-f&lt;script文件&gt;]</span><span class="hljs-selector-attr">[文本文件]</span><br></code></pre></td></tr></table></figure><p><strong>参数说明</strong>：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">-e&lt;<span class="hljs-keyword">script</span>&gt;或<span class="hljs-comment">--expression=&lt;script&gt; 以选项中指定的script来处理输入的文本文件。</span><br>-f&lt;<span class="hljs-keyword">script</span>文件&gt;或<span class="hljs-comment">--file=&lt;script文件&gt; 以选项中指定的script文件来处理输入的文本文件。</span><br>-h或<span class="hljs-comment">--help 显示帮助。</span><br>-n或<span class="hljs-comment">--quiet或--silent 仅显示script处理后的结果。</span><br>-V或<span class="hljs-comment">--version 显示版本信息。</span><br></code></pre></td></tr></table></figure><p><strong>动作说明</strong>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> ：新增， <span class="hljs-selector-tag">a</span> 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～<br>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！<br>d ：删除，因为是删除啊，所以 d 后面通常不接任何东西；<br><span class="hljs-selector-tag">i</span> ：插入， <span class="hljs-selector-tag">i</span> 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；<br><span class="hljs-selector-tag">p</span> ：打印，亦即将某个选择的数据印出。通常 <span class="hljs-selector-tag">p</span> 会与参数 sed -n 一起运行～<br>s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 <span class="hljs-number">1</span>,<span class="hljs-number">20s</span>/old/new/g 就是啦！<br></code></pre></td></tr></table></figure><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>在testfile文件的第四行后添加一行，并将结果输出到标准输出，在命令行提示符下输入如下命令：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">sed -e <span class="hljs-number">4</span>a\<span class="hljs-keyword">new</span><span class="hljs-type">Line</span> testfile <br></code></pre></td></tr></table></figure><p>首先查看testfile中的内容如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">$ <span class="hljs-keyword">cat</span> testfile #查看testfile 中的内容  <br>HELLO LINUX!  <br>Linux <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> free unix-<span class="hljs-built_in">type</span> opterating <span class="hljs-built_in">system</span>.  <br>This <span class="hljs-keyword">is</span> <span class="hljs-keyword">a</span> linux testfile!  <br>Linux test <br></code></pre></td></tr></table></figure><p>使用sed命令后，输出结果如下：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haxe">$ sed -e <span class="hljs-number">4</span>a\<span class="hljs-keyword">new</span><span class="hljs-type">line</span> testfile <span class="hljs-meta">#使用sed 在第四行后添加新字符串  </span><br>HELLO LINUX! <span class="hljs-meta">#testfile文件原有的内容  </span><br>Linux is a free unix-type opterating system.  <br>This is a linux testfile!  <br>Linux test  <br><span class="hljs-keyword">new</span><span class="hljs-type">line</span> <br></code></pre></td></tr></table></figure><h3 id="以行为单位的新增-x2F-删除"><a href="#以行为单位的新增-x2F-删除" class="headerlink" title="以行为单位的新增&#x2F;删除"></a>以行为单位的新增&#x2F;删除</h3><p>将 &#x2F;etc&#x2F;passwd 的内容列出并且列印行号，同时，请将第 2~5 行删除！</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">[root<span class="hljs-variable">@www</span> ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;2,5d&#x27;</span><br><span class="hljs-number">1</span> <span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-number">6</span> <span class="hljs-symbol">sync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:sync</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/bin/sync</span><br><span class="hljs-number">7</span> <span class="hljs-symbol">shutdown:</span><span class="hljs-symbol">x:</span><span class="hljs-number">6</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:shutdown</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/sbin/shutdown</span><br>.....(后面省略).....<br></code></pre></td></tr></table></figure><p>sed 的动作为 ‘2,5d’ ，那个 d 就是删除！因为 2-5 行给他删除了，所以显示的数据就没有 2-5 行罗～ 另外，注意一下，原本应该是要下达 sed -e 才对，没有 -e 也行啦！同时也要注意的是， sed 后面接的动作，请务必以 ‘’ 两个单引号括住喔！</p><p>只要删除第 2 行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">nl <span class="hljs-regexp">/etc/</span>passwd | sed <span class="hljs-string">&#x27;2d&#x27;</span> <br></code></pre></td></tr></table></figure><p>要删除第 3 到最后一行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">nl <span class="hljs-regexp">/etc/</span>passwd | sed <span class="hljs-string">&#x27;3,$d&#x27;</span> <br></code></pre></td></tr></table></figure><p>在第二行后(亦即是加在第三行)加上『drink tea?』字样！</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">[root<span class="hljs-variable">@www</span> ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;2a drink tea&#x27;</span><br><span class="hljs-number">1</span> <span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-number">2</span> <span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/sbin/nologin</span><br>drink tea<br><span class="hljs-number">3</span> <span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/sbin/nologin</span><br>.....(后面省略).....<br></code></pre></td></tr></table></figure><p>那如果是要在第二行前</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">nl <span class="hljs-regexp">/etc/</span>passwd | sed <span class="hljs-string">&#x27;2i drink tea&#x27;</span> <br></code></pre></td></tr></table></figure><p>如果是要增加两行以上，在第二行后面加入两行字，例如 <strong>Drink tea or …..</strong> 与 <strong>drink beer?</strong></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ruby">[root<span class="hljs-variable">@www</span> ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;2a Drink tea or ......\</span><br>&gt; drink beer <span class="hljs-string">?&#x27;</span><br><span class="hljs-number">1</span> <span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-number">2</span> <span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/sbin/nologin</span><br>Drink tea <span class="hljs-keyword">or</span> ......<br>drink beer ?<br><span class="hljs-number">3</span> <span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/sbin/nologin</span><br>.....(后面省略).....<br></code></pre></td></tr></table></figure><p>每一行之间都必须要以反斜杠<code>\</code>来进行新行的添加喔！所以，上面的例子中，我们可以发现在第一行的最后面就有 <code>\</code>存在。</p><h3 id="以行为单位的替换与显示"><a href="#以行为单位的替换与显示" class="headerlink" title="以行为单位的替换与显示"></a>以行为单位的替换与显示</h3><p>将第2-5行的内容取代成为『No 2-5 number』呢？</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">[root<span class="hljs-variable">@www</span> ~]<span class="hljs-comment"># nl /etc/passwd | sed &#x27;2,5c No 2-5 number&#x27;</span><br><span class="hljs-number">1</span> <span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-title class_">No</span> <span class="hljs-number">2</span><span class="hljs-number">-5</span> number<br><span class="hljs-number">6</span> <span class="hljs-symbol">sync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:sync</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/bin/sync</span><br>.....(后面省略).....<br></code></pre></td></tr></table></figure><p>透过这个方法我们就能够将数据整行取代了！</p><p>仅列出 &#x2F;etc&#x2F;passwd 文件内的第 5-7 行</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs elixir">[root<span class="hljs-variable">@www</span> ~]<span class="hljs-comment"># nl /etc/passwd | sed -n &#x27;5,7p&#x27;</span><br><span class="hljs-number">5</span> <span class="hljs-symbol">lp:</span><span class="hljs-symbol">x:</span><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">7</span><span class="hljs-symbol">:lp</span><span class="hljs-symbol">:/var/spool/lpd</span><span class="hljs-symbol">:/sbin/nologin</span><br><span class="hljs-number">6</span> <span class="hljs-symbol">sync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">5</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:sync</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/bin/sync</span><br><span class="hljs-number">7</span> <span class="hljs-symbol">shutdown:</span><span class="hljs-symbol">x:</span><span class="hljs-number">6</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:shutdown</span><span class="hljs-symbol">:/sbin</span><span class="hljs-symbol">:/sbin/shutdown</span><br></code></pre></td></tr></table></figure><p>可以透过这个 sed 的以行为单位的显示功能， 就能够将某一个文件内的某些行号选择出来显示。</p><h3 id="数据的搜寻并显示"><a href="#数据的搜寻并显示" class="headerlink" title="数据的搜寻并显示"></a>数据的搜寻并显示</h3><p>搜索 &#x2F;etc&#x2F;passwd有root关键字的行</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs elixir">nl /etc/passwd | sed <span class="hljs-string">&#x27;/root/p&#x27;</span><br><span class="hljs-number">1</span>  <span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-number">1</span>  <span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br><span class="hljs-number">2</span>  <span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/bin/sh</span><br><span class="hljs-number">3</span>  <span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/bin/sh</span><br><span class="hljs-number">4</span>  <span class="hljs-symbol">sys:</span><span class="hljs-symbol">x:</span><span class="hljs-number">3</span><span class="hljs-symbol">:</span><span class="hljs-number">3</span><span class="hljs-symbol">:sys</span><span class="hljs-symbol">:/dev</span><span class="hljs-symbol">:/bin/sh</span><br><span class="hljs-number">5</span>  <span class="hljs-symbol">sync:</span><span class="hljs-symbol">x:</span><span class="hljs-number">4</span><span class="hljs-symbol">:</span><span class="hljs-number">65534</span><span class="hljs-symbol">:sync</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/bin/sync</span><br>....下面忽略 <br></code></pre></td></tr></table></figure><p>如果root找到，除了输出所有行，还会输出匹配行。</p><p>使用-n的时候将只打印包含模板的行。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">nl /etc/passwd | sed -n <span class="hljs-string">&#x27;/root/p&#x27;</span><br><span class="hljs-number">1</span>  <span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/bash</span><br></code></pre></td></tr></table></figure><h3 id="数据的搜寻并删除"><a href="#数据的搜寻并删除" class="headerlink" title="数据的搜寻并删除"></a>数据的搜寻并删除</h3><p>删除&#x2F;etc&#x2F;passwd所有包含root的行，其他行输出</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs elixir">nl /etc/passwd | sed  <span class="hljs-string">&#x27;/root/d&#x27;</span><br><span class="hljs-number">2</span>  <span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/bin/sh</span><br><span class="hljs-number">3</span>  <span class="hljs-symbol">bin:</span><span class="hljs-symbol">x:</span><span class="hljs-number">2</span><span class="hljs-symbol">:</span><span class="hljs-number">2</span><span class="hljs-symbol">:bin</span><span class="hljs-symbol">:/bin</span><span class="hljs-symbol">:/bin/sh</span><br>....下面忽略<br><span class="hljs-comment">#第一行的匹配root已经删除了</span><br></code></pre></td></tr></table></figure><h3 id="数据的搜寻并执行命令"><a href="#数据的搜寻并执行命令" class="headerlink" title="数据的搜寻并执行命令"></a>数据的搜寻并执行命令</h3><p>搜索&#x2F;etc&#x2F;passwd,找到root对应的行，执行后面花括号中的一组命令，每个命令之间用分号分隔，这里把bash替换为blueshell，再输出这行：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir">nl /etc/passwd | sed -n <span class="hljs-string">&#x27;/root/&#123;s/bash/blueshell/;p;q&#125;&#x27;</span>    <br><span class="hljs-number">1</span>  <span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/blueshell</span><br></code></pre></td></tr></table></figure><p>最后的q是退出。</p><h3 id="数据的搜寻并替换"><a href="#数据的搜寻并替换" class="headerlink" title="数据的搜寻并替换"></a>数据的搜寻并替换</h3><p>除了整行的处理模式之外， sed 还可以用行为单位进行部分数据的搜寻并取代。基本上 sed 的搜寻与替代的与 vi 相当的类似！他有点像这样：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sed</span> <span class="hljs-string">&#x27;s/要被取代的字串/新的字串/g&#x27;</span><br></code></pre></td></tr></table></figure><p>先观察原始信息，利用 &#x2F;sbin&#x2F;ifconfig 查询 IP</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs elixir">[root<span class="hljs-variable">@www</span> ~]<span class="hljs-comment"># /sbin/ifconfig eth0</span><br>eth0 <span class="hljs-title class_">Link</span> <span class="hljs-symbol">encap:</span><span class="hljs-title class_">Ethernet</span> <span class="hljs-title class_">HWaddr</span> <span class="hljs-number">00</span><span class="hljs-symbol">:</span><span class="hljs-number">90</span><span class="hljs-symbol">:CC</span><span class="hljs-symbol">:A6</span><span class="hljs-symbol">:</span><span class="hljs-number">34</span><span class="hljs-symbol">:</span><span class="hljs-number">84</span><br>inet <span class="hljs-symbol">addr:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.100</span> <span class="hljs-symbol">Bcast:</span><span class="hljs-number">192.168</span>.<span class="hljs-number">1.255</span> <span class="hljs-symbol">Mask:</span><span class="hljs-number">255.255</span>.<span class="hljs-number">255.0</span><br>inet6 <span class="hljs-symbol">addr:</span> fe80::<span class="hljs-number">290</span><span class="hljs-symbol">:ccff</span><span class="hljs-symbol">:fea6</span><span class="hljs-symbol">:</span><span class="hljs-number">3484</span>/<span class="hljs-number">64</span> <span class="hljs-symbol">Scope:</span><span class="hljs-title class_">Link</span><br><span class="hljs-title class_">UP</span> <span class="hljs-title class_">BROADCAST</span> <span class="hljs-title class_">RUNNING</span> <span class="hljs-title class_">MULTICAST</span> <span class="hljs-symbol">MTU:</span><span class="hljs-number">1500</span> <span class="hljs-symbol">Metric:</span><span class="hljs-number">1</span><br>.....(以下省略).....<br></code></pre></td></tr></table></figure><p>本机的ip是192.168.1.100。</p><p>将 IP 前面的部分予以删除</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-string">[root@www ~]</span># /sbin/ifconfig eth0 | grep &#x27;inet addr&#x27; | sed &#x27;s/^.*addr://g&#x27;<br><span class="hljs-number">192.168.1.100</span> Bcast:<span class="hljs-number">192</span>.<span class="hljs-number">168</span>.<span class="hljs-number">1</span>.<span class="hljs-number">255</span> Mask:<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">255</span>.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>接下来则是删除后续的部分，亦即： 192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0</p><p>将 IP 后面的部分予以删除</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">[root@www ~]# <span class="hljs-regexp">/sbin/i</span>fconfig eth0 | <span class="hljs-keyword">grep</span> <span class="hljs-string">&#x27;inet addr&#x27;</span> | sed <span class="hljs-string">&#x27;s/^.*addr://g&#x27;</span> | sed <span class="hljs-string">&#x27;s/Bcast.*$//g&#x27;</span><br><span class="hljs-number">192.168</span>.<span class="hljs-number">1.100</span><br></code></pre></td></tr></table></figure><h3 id="多点编辑"><a href="#多点编辑" class="headerlink" title="多点编辑"></a>多点编辑</h3><p>一条sed命令，删除&#x2F;etc&#x2F;passwd第三行到末尾的数据，并把bash替换为blueshell</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir">nl /etc/passwd | sed -e <span class="hljs-string">&#x27;3,$d&#x27;</span> -e <span class="hljs-string">&#x27;s/bash/blueshell/&#x27;</span><br><span class="hljs-number">1</span>  <span class="hljs-symbol">root:</span><span class="hljs-symbol">x:</span><span class="hljs-number">0</span><span class="hljs-symbol">:</span><span class="hljs-number">0</span><span class="hljs-symbol">:root</span><span class="hljs-symbol">:/root</span><span class="hljs-symbol">:/bin/blueshell</span><br><span class="hljs-number">2</span>  <span class="hljs-symbol">daemon:</span><span class="hljs-symbol">x:</span><span class="hljs-number">1</span><span class="hljs-symbol">:</span><span class="hljs-number">1</span><span class="hljs-symbol">:daemon</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/bin/sh</span><br></code></pre></td></tr></table></figure><p>-e表示多点编辑，第一个编辑命令删除&#x2F;etc&#x2F;passwd第三行到末尾的数据，第二条命令搜索bash替换为blueshell。</p><h3 id="直接修改文件内容-危险动作"><a href="#直接修改文件内容-危险动作" class="headerlink" title="直接修改文件内容(危险动作)"></a>直接修改文件内容(危险动作)</h3><p>sed 可以直接修改文件的内容，不必使用管道命令或数据流重导向！ 不过，由於这个动作会直接修改到原始的文件，所以请你千万不要随便拿系统配置来测试！ 我们还是使用文件 regular_express.txt 文件来测试看看吧！</p><p>regular_express.txt 文件内容如下：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[root@www ~]# cat regular_express.txt <br>runoob.<br>google.<br>taobao.<br>facebook.<br>zhihu-<br>weibo-<br></code></pre></td></tr></table></figure><p>利用 sed 将 regular_express.txt 内每一行结尾若为 . 则换成 !</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs autoit">[root<span class="hljs-symbol">@www</span> ~]<span class="hljs-meta"># sed -i <span class="hljs-string">&#x27;s/\.$/\!/g&#x27;</span> regular_express.txt</span><br>[root<span class="hljs-symbol">@www</span> ~]<span class="hljs-meta"># cat regular_express.txt </span><br>runoob!<br>google!<br>taobao!<br>facebook!<br>zhihu-<br>weibo-<br></code></pre></td></tr></table></figure><p>:q:q</p><p>利用 sed 直接在 regular_express.txt 最后一行加入 <strong># This is a test</strong>:</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@www ~]<span class="hljs-comment"># sed -i &#x27;$a # This is a test&#x27; regular_express.txt</span><br>[root@www ~]<span class="hljs-comment"># cat regular_express.txt </span><br>runoob!<br>google!<br>taobao!<br>facebook!<br>zhihu-<br>weibo-<br><span class="hljs-comment"># This is a test</span><br></code></pre></td></tr></table></figure><p>由于$ 代表的是最后一行，而 a 的动作是新增，因此该文件最后新增 <strong># This is a test</strong>！</p><p>sed 的 <strong>-i</strong> 选项可以直接修改文件内容，这功能非常有帮助！举例来说，如果你有一个 100 万行的文件，你要在第 100 行加某些文字，此时使用 vim 可能会疯掉！因为文件太大了！那怎办？就利用 sed 啊！透过 sed 直接修改&#x2F;取代的功能，你甚至不需要使用 vim 去修订！</p><p>笔记</p><p>追加行的说明：</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">sed -e <span class="hljs-number">4</span>a\<span class="hljs-keyword">new</span><span class="hljs-type">line</span> testfile<br></code></pre></td></tr></table></figure><p>a 动作是在匹配的行之后追加字符串，追加的字符串中可以包含换行符（实现追加多行的情况）。</p><p>追加一行的话前后都不需要添加换行符 <strong>\n</strong>，只有追加多行时在行与行之间才需要添加换行符(最后一行最后也无需添加，添加的话会多出一个空行)。</p><p>man sed 信息：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">Append <span class="hljs-keyword">text</span>, which has <span class="hljs-keyword">each</span> embedded newline preceded <span class="hljs-keyword">by</span> <span class="hljs-keyword">a</span> <span class="hljs-literal">backslash</span>.<br></code></pre></td></tr></table></figure><p>例如：</p><p>4 行之后添加一行：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sed</span> -e <span class="hljs-string">&#x27;4 a newline&#x27;</span> testfile<br></code></pre></td></tr></table></figure><p>4 行之后追加 2 行：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sed</span> -e <span class="hljs-string">&#x27;4 a newline\nnewline2&#x27;</span> testfile<br></code></pre></td></tr></table></figure><p>4 行之后追加 3 行(2 行文字和 1 行空行)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">sed</span> -e <span class="hljs-string">&#x27;4 a newline\nnewline2\n&#x27;</span> testfile<br></code></pre></td></tr></table></figure><p>4 行之后追加 1 行空行：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autoit"><span class="hljs-meta">#错误：sed -e <span class="hljs-string">&#x27;4 a \n&#x27;</span> testfile</span><br>sed -e <span class="hljs-string">&#x27;4 a \ &#x27;</span> testfile 实际上<br></code></pre></td></tr></table></figure><p>实际上是插入了一个含有一个空格的行，插入一个完全为空的空行没有找到方法（不过应该没有这个需求吧，都要插入行了插入空行干嘛呢？）</p><p>添加空行：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 可以添加一个完全为空的空行</span><br><span class="hljs-attribute">sed</span> <span class="hljs-string">&#x27;4 a \\&#x27;</span><br><br><span class="hljs-comment"># 可以添加两个完全为空的空行</span><br>sed <span class="hljs-string">&#x27;4 a \\n&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="统计log中某一时间段的数量-没有测试"><a href="#统计log中某一时间段的数量-没有测试" class="headerlink" title="统计log中某一时间段的数量[没有测试]"></a>统计log中某一时间段的数量[没有测试]</h2><p><code>sed -n &#39;/2017-01-04 11:00:00/,/2017-01-04 11:20:55/p&#39;  ejabberd.log</code></p><p>来源：<a href="https://www.runoob.com/linux/linux-comm-sed.html">https://www.runoob.com/linux/linux-comm-sed.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux find 命令</title>
    <link href="/2021/05/01/Linux%20find%20%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/05/01/Linux%20find%20%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>Linux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span>   path   -option   [   -<span class="hljs-built_in">print</span> ]   [ -exec   -ok   command ]   &#123;&#125; \;<br></code></pre></td></tr></table></figure><p><strong>参数说明</strong> :</p><p>find 根据下列规则判断 path 和 expression，在命令列上第一个 - ( ) , ! 之前的部份为 path，之后的是 expression。如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用 -print 为预设 expression。</p><p>expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。</p><p>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件</p><p>-amin n : 在过去 n 分钟内被读取过</p><p>-anewer file : 比文件 file 更晚被读取过的文件</p><p>-atime n : 在过去n天内被读取过的文件</p><p>-cmin n : 在过去 n 分钟内被修改过</p><p>-cnewer file :比文件 file 更新的文件</p><p>-ctime n : 在过去n天内被修改过的文件</p><p>-empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name</p><p>-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写</p><p>-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</p><p>-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。</p><p>-type c : 文件类型是 c 的文件。</p><p>d: 目录</p><p>c: 字型装置文件</p><p>b: 区块装置文件</p><p>p: 具名贮列</p><p>f: 一般文件</p><p>l: 符号连结</p><p>s: socket</p><p>-pid n : process id 是 n 的文件</p><p>你可以使用 ( ) 将运算式分隔，并使用下列运算。</p><p>exp1 -and exp2</p><p>! expr</p><p>-not expr</p><p>exp1 -or exp2</p><p>exp1, exp2</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将当前目录及其子目录下所有文件后缀为 <strong>.c</strong> 的文件列出来:</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-meta"># find . -name <span class="hljs-string">&quot;*.c&quot;</span></span><br></code></pre></td></tr></table></figure><p>将目前目录其其下子目录中所有一般文件列出</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"># <span class="hljs-built_in">find</span> . -<span class="hljs-built_in">type</span> f<br></code></pre></td></tr></table></figure><p>将当前目录及其子目录下所有最近 20 天内更新过的文件列出:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta"># find . -ctime -20</span><br></code></pre></td></tr></table></figure><p>查找 &#x2F;var&#x2F;log 目录中更改时间在 7 日以前的普通文件，并在删除之前询问它们：</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel"># <span class="hljs-built_in">find</span> /<span class="hljs-built_in">var</span>/<span class="hljs-built_in">log</span> -<span class="hljs-built_in">type</span> f -mtime +<span class="hljs-number">7</span> -ok rm &#123;&#125; \;<br></code></pre></td></tr></table></figure><p>查找当前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">find . -<span class="hljs-built_in">type</span> f -perm 644 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">ls</span> -l &#123;&#125; \;</span><br></code></pre></td></tr></table></figure><p>查找系统中所有文件长度为 0 的普通文件，并列出它们的完整路径：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">find / -<span class="hljs-built_in">type</span> f -size 0 -<span class="hljs-built_in">exec</span> <span class="hljs-built_in">ls</span> -l &#123;&#125; \;</span><br></code></pre></td></tr></table></figure><p>来源：<a href="https://www.runoob.com/linux/linux-comm-find.html">https://www.runoob.com/linux/linux-comm-find.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu的messages Log开启</title>
    <link href="/2021/04/21/Ubuntu%E7%9A%84messages%20Log%E5%BC%80%E5%90%AF/"/>
    <url>/2021/04/21/Ubuntu%E7%9A%84messages%20Log%E5%BC%80%E5%90%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="ubuntu开启messages-log"><a href="#ubuntu开启messages-log" class="headerlink" title="ubuntu开启messages log"></a>ubuntu开启messages log</h1><p><code>less /etc/rsyslog.d/50-default.conf </code></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">#*.=<span class="hljs-keyword">info</span>;*.=<span class="hljs-keyword">notice</span>;*.=warn;\<br>#       auth,authpriv.<span class="hljs-keyword">none</span>;\<br>#       cron,daemon.<span class="hljs-keyword">none</span>;\<br>#       mail,news.<span class="hljs-keyword">none</span>          -/var/<span class="hljs-keyword">log</span>/messages<br></code></pre></td></tr></table></figure><p>删掉以上部分的注释，重启<code>rsyslog</code></p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service rsyslog restart</span><br></code></pre></td></tr></table></figure><h1 id="使用以下命令查看log文件"><a href="#使用以下命令查看log文件" class="headerlink" title="使用以下命令查看log文件"></a>使用以下命令查看<code>log</code>文件</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">tail -f /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/messages<br></code></pre></td></tr></table></figure><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">tail <span class="hljs-number">-10</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/messages<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CURL命令用法介绍</title>
    <link href="/2021/04/19/CURL%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
    <url>/2021/04/19/CURL%E5%91%BD%E4%BB%A4%E7%94%A8%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="输出状态码"><a href="#输出状态码" class="headerlink" title="输出状态码"></a>输出状态码</h1><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">curl -I -m <span class="hljs-number">10</span> -o <span class="hljs-regexp">/dev/</span><span class="hljs-keyword">null</span> -s -w %&#123;http_code&#125; www.baidu.com<br></code></pre></td></tr></table></figure><ul><li>-I 仅测试HTTP头</li><li>-m 10 最多查询10s</li><li>-o &#x2F;dev&#x2F;null 屏蔽原有输出信息</li><li>-s silent 模式，不输出任何东西</li><li>-w %{http_code} 控制额外输出</li></ul><p>-w 参数如下</p><ul><li>url_effective 最终获取的url地址，尤其是当你指定给curl的地址存在301跳转，且通过-L继续追踪的情形。</li><li>http_code http状态码，如200成功,301转向,404未找到,500服务器错误等。(The numerical response code that was found in the last retrieved HTTP(S) or FTP(s) transfer. In 7.18.2 the alias response_code was added to show the same info.)</li><li>http_connect The numerical code that was found in the last response (from a proxy) to a curl CONNECT request. (Added in 7.12.4)</li><li>time_total 总时间，按秒计。精确到小数点后三位。 （The total time, in seconds, that the full operation lasted. The time will be displayed with millisecond resolution.）</li><li>time_namelookup DNS解析时间,从请求开始到DNS解析完毕所用时间。(The time, in seconds, it took from the start until the name resolving was completed.)</li><li>time_connect 连接时间,从开始到建立TCP连接完成所用时间,包括前边DNS解析时间，如果需要单纯的得到连接时间，用这个time_connect时间减去前边time_namelookup时间。以下同理，不再赘述。(The time, in seconds, it took from the start until the TCP connect to the remote host (or proxy) was completed.)</li><li>time_appconnect 连接建立完成时间，如SSL&#x2F;SSH等建立连接或者完成三次握手时间。(The time, in seconds, it took from the start until the SSL&#x2F;SSH&#x2F;etc connect&#x2F;handshake to the remote host was completed. (Added in 7.19.0))</li><li>time_pretransfer 从开始到准备传输的时间。(The time, in seconds, it took from the start until the file transfer was just about to begin. This includes all pre-transfer commands and negotiations that are specific to the particular protocol(s) involved.)</li><li>time_redirect 重定向时间，包括到最后一次传输前的几次重定向的DNS解析，连接，预传输，传输时间。(The time, in seconds, it took for all redirection steps include name lookup, connect, pretransfer and transfer before the final transaction was started. time_redirect shows the complete execution time for multiple redirections. (Added in 7.12.3))</li><li>time_starttransfer 开始传输时间。在发出请求之后，Web 服务器返回数据的第一个字节所用的时间(The time, in seconds, it took from the start until the first byte was just about to be transferred. This includes time_pretransfer and also the time the server needed to calculate the result.)</li><li>size_download 下载大小。(The total amount of bytes that were downloaded.)</li><li>size_upload 上传大小。(The total amount of bytes that were uploaded.)</li><li>size_header 下载的header的大小(The total amount of bytes of the downloaded headers.)</li><li>size_request 请求的大小。(The total amount of bytes that were sent in the HTTP request.)</li><li>speed_download 下载速度，单位-字节每秒。(The average download speed that curl measured for the complete download. Bytes per second.)</li><li>speed_upload 上传速度,单位-字节每秒。(The average upload speed that curl measured for the complete upload. Bytes per second.)</li><li>content_type 就是content-Type，不用多说了，这是一个访问我博客首页返回的结果示例(text&#x2F;html; charset&#x3D;UTF-8)；(The Content-Type of the requested document, if there was any.)</li><li>num_connects 最近的的一次传输中创建的连接数目。Number of new connects made in the recent transfer. (Added in 7.12.3)</li><li>num_redirects 在请求中跳转的次数。Number of redirects that were followed in the request. (Added in 7.12.3)</li><li>redirect_url When a HTTP request was made without -L to follow redirects, this variable will show the actual URL a redirect would take you to. (Added in 7.18.2)</li><li>ftp_entry_path 当连接到远程的ftp服务器时的初始路径。The initial path libcurl ended up in when logging on to the remote FTP server. (Added in 7.15.4)</li><li>ssl_verify_result ssl认证结果，返回0表示认证成功。( The result of the SSL peer certificate verification that was requested. 0 means the verification was successful. (Added in 7.19.0))</li></ul><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p>以下是使用curl诊断服务器到微信api服务器的网络访问情况</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -o /dev/null -s -w &quot;time_connect: %&#123;time_connect&#125;\ntime_starttransfer: %&#123;time_starttransfer&#125;\ntime_nslookup:%&#123;time_namelookup&#125;\ntime_total: %&#123;time_total&#125;\n&quot; &quot;https://api.weixin.qq.com&quot;<br></code></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">time_connect: 0.154<br>time_starttransfer: 0.243<br>time_nslookup:0.150<br>time_total: 0.243<br></code></pre></td></tr></table></figure><p>说明: 以上显示网络连接时间为0.154秒（其中DNS解析为0.150秒），总体请求0.243秒。DNS解析出现故障的概率在正式环境中比较高，所以在诊断时候千万别漏了time_namelookup这个参数。</p><p>参考：<br><a href="https://curl.haxx.se/docs/manpage.html">https://curl.haxx.se/docs/manpage.html</a><br><a href="http://digdeeply.org/archives/05102012.html">http://digdeeply.org/archives/05102012.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>echo -e 命令详解</title>
    <link href="/2021/04/18/echo%20-e%20%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/04/18/echo%20-e%20%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>echo在php中是输入那么在linux中是不是也是输入呢，当然echo在linux也是输入不过它的用法比php强大多了可以带参数及一些东西，下面我们来看一篇关于linux echo命令介绍及-n、-e参数详解吧，具体如下所示。</p><p>echo命令用于在shell中打印shell变量的值，或者直接输出指定的字符串。linux的echo命令，在shell编程中极为常用, 在终端下打印变量value的时候也是常常用到的，因此有必要了解下echo的用法echo命令的功能是在显示器上显示一段文字，一般起到一个提示的作用。</p><p>语法</p><p>echo(选项)(参数)选项</p><p>-e：激活转义字符。使用-e选项时，若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：</p><p>•\a 发出警告声；<br>•\b 删除前一个字符；<br>•\c 最后不加上换行符号；<br>•\f 换行但光标仍旧停留在原来的位置；<br>•\n 换行且光标移至行首；<br>•\r 光标移至行首，但不换行；<br>•\t 插入tab；<br>•\v 与\f相同；<br>•\ 插入\字符；<br>•\nnn 插入nnn（八进制）所代表的ASCII字符；<br>参数</p><p>变量：指定要打印的变量。</p><p>实例</p><p>用echo命令打印带有色彩的文字：</p><p>文字色：</p><p>echo -e &quot;\e[1;31mThis is red text\e[0m&quot;<br>This is red text•\e[1;31m 将颜色设置为红色<br>•\e[0m 将颜色重新置回<br>颜色码：重置&#x3D;0，黑色&#x3D;30，红色&#x3D;31，绿色&#x3D;32，黄色&#x3D;33，蓝色&#x3D;34，洋红&#x3D;35，青色&#x3D;36，白色&#x3D;37</p><p>背景色：</p><p>echo -e &quot;\e[1;42mGreed Background\e[0m&quot;<br>Greed Background颜色码：重置&#x3D;0，黑色&#x3D;40，红色&#x3D;41，绿色&#x3D;42，黄色&#x3D;43，蓝色&#x3D;44，洋红&#x3D;45，青色&#x3D;46，白色&#x3D;47</p><p>文字闪动：</p><p>echo -e &quot;\033[37;31;5mMySQL Server Stop…\033[39;49;0m&quot;<br>红色数字处还有其他数字参数：0 关闭所有属性、1 设置高亮度（加粗）、4 下划线、5 闪烁、7 反显、8 消隐</p><p>echo -n 不换行输出<br>$echo -n &quot;123&quot;<br>$echo &quot;456&quot;</p><p>最终输出<br>123456</p><p>而不是<br>123<br>456<br>echo -e 处理特殊字符</p><p>若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出：</p><p>\a 发出警告声；<br>\b 删除前一个字符；<br>\c 最后不加上换行符号；<br>\f 换行但光标仍旧停留在原来的位置；<br>\n 换行且光标移至行首；<br>\r 光标移至行首，但不换行；<br>\t 插入tab；<br>\v 与\f相同；<br>\ 插入\字符；<br>\nnn 插入nnn（八进制）所代表的ASCII字符；</p><p>下面举例说明一下：</p><p>$echo -e &quot;a\bdddd&quot;  &#x2F;&#x2F;前面的a会被擦除<br>dddd</p><p>$echo -e &quot;a\adddd&quot; &#x2F;&#x2F;输出同时会发出报警声音<br>adddd</p><p>$echo -e &quot;a\ndddd&quot; &#x2F;&#x2F;自动换行<br>a<br>dddd</p><p>我们在使用linux的过程中，经常会去下载安装包，下载时候的那个进度提示是不是比较好玩，下载进度的百分比在不断变化，利用echo -e和-n参数我们也可以实现这个效果了。</p><hr><p>echo -e &quot;\033[背景颜色;字体颜色m字符串\033[0m<br>格式: echo -e &quot;\033[字背景颜色;字体颜色m字符串\033[0m&quot; </p><p>例如:<br>echo -e &quot;\033[41;36m something here \033[0m&quot; </p><p>其中41的位置代表底色, 36的位置是代表字的颜色 </p><p>那些ascii code 是对颜色调用的始末.<br>\033[ ; m …… \033[0m </p><p>字背景颜色范围:40—-49<br>40:黑<br>41:深红<br>42:绿<br>43:黄色<br>44:蓝色<br>45:紫色<br>46:深绿<br>47:白色 </p><p>字颜色:30———–39<br>30:黑<br>31:红<br>32:绿<br>33:黄<br>34:蓝色<br>35:紫色<br>36:深绿<br>37:白色 </p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;ANSI控制码的说明<br>\33[0m 关闭所有属性<br>\33[1m 设置高亮度<br>\33[4m 下划线<br>\33[5m 闪烁<br>\33[7m 反显<br>\33[8m 消隐<br>\33[30m – \33[37m 设置前景色<br>\33[40m – \33[47m 设置背景色<br>\33[nA 光标上移n行<br>\33[nB 光标下移n行<br>\33[nC 光标右移n行<br>\33[nD 光标左移n行<br>\33[y;xH设置光标位置<br>\33[2J 清屏<br>\33[K 清除从光标到行尾的内容<br>\33[s 保存光标位置<br>\33[u 恢复光标位置<br>\33[?25l 隐藏光标<br>\33[?25h 显示光标</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js获取当前位置的地理坐标（经纬度）</title>
    <link href="/2021/04/16/js%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87%EF%BC%88%E7%BB%8F%E7%BA%AC%E5%BA%A6%EF%BC%89/"/>
    <url>/2021/04/16/js%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E4%BD%8D%E7%BD%AE%E7%9A%84%E5%9C%B0%E7%90%86%E5%9D%90%E6%A0%87%EF%BC%88%E7%BB%8F%E7%BA%AC%E5%BA%A6%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span>(navigator.geolocation) &#123;<br>    navigator.geolocation.getCurrentPosition(<br>        <span class="hljs-keyword">function</span> (<span class="hljs-params">position</span>) &#123;  <br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( position.coords.longitude );<br>            <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( position.coords.latitude );<br>        &#125;,<br>        <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>           throw(e.message);<br>        &#125;<br>    ) <br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>vim中正则表达式（关于magic）</title>
    <link href="/2021/04/15/vim%E4%B8%AD%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E5%85%B3%E4%BA%8Emagic%EF%BC%89/"/>
    <url>/2021/04/15/vim%E4%B8%AD%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%88%E5%85%B3%E4%BA%8Emagic%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>毋庸多言，在vim中正则表达式得到了十分广泛的应用。最常用的 &#x2F; 和 :s 命令中，正则表达式都是不可或缺的。下面对vim中的正则表达式的一些难点进行说明</p></blockquote><h1 id="关于magic"><a href="#关于magic" class="headerlink" title="关于magic"></a>关于magic</h1><p>vim中有个<b style="color:red">magic</b>的设定，设定方法为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">set</span> magic             <span class="hljs-comment">&quot; 设置magic</span><br>:<span class="hljs-keyword">set</span> nomagic           <span class="hljs-comment">&quot; 取消magic</span><br>:h magic               <span class="hljs-comment">&quot; 查看帮助</span><br></code></pre></td></tr></table></figure><p>vim毕竟是个编辑器，正则表达式中包含的大量元字符如果原封不动地引用（像perl那样），势必会给不懂正则表达式的人造成麻烦，比如 &#x2F;foo(1) 命令，大多数人都用它来查找foo(1)这个字符串，但如果按照正则表达式来解释，被查找的对象就成了 foo1 了。</p><p>于是，vim就规定，正则表达式的元字符必须用反斜杠进行转义才行，如上面的例子，如果确实要用正则表达式，就应当写成 &#x2F;foo&#x2F;(1&#x2F;) 。但是，像 . * 这种极其常用的元字符，都加上反斜杠就太麻烦了。而且，众口难调，有些人喜欢用正则表达式，有些人不喜欢用……</p><p>为了解决这个问题，vim设置了 magic 这个东西。简单地说， magic就是设置哪些元字符要加反斜杠哪些不用加的。简单来说：</p><ul><li><strong>magic</strong> (&#x2F;m)：除了 $ . * ^ 之外其他元字符都要加反斜杠。</li><li><strong>nomagic</strong> (&#x2F;M)：除了 $ ^ 之外其他元字符都要加反斜杠。</li></ul><p>这个设置也可以在正则表达式中通过 &#x2F;m &#x2F;M 开关临时切换。 &#x2F;m 后面的正则表达式会按照 magic 处理，&#x2F;M 后面的正则表达式按照 nomagic 处理，而忽略实际的magic设置。</p><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//m</span>.*          <span class="hljs-comment"># 查找任意字符串</span><br><span class="hljs-regexp">//</span>M.*          <span class="hljs-comment"># 查找字符串 .* （点号后面跟个星号）</span><br></code></pre></td></tr></table></figure><p>另外还有更强大的 &#x2F;v 和 &#x2F;V。</p><ul><li><strong>&#x2F;v</strong> （即 very magic 之意）：任何元字符都不用加反斜杠</li><li><strong>&#x2F;V</strong> （即 very nomagic 之意）：任何元字符都必须加反斜杠</li></ul><p>例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>v(a.c)&#123;<span class="hljs-number">3</span>&#125;$   <span class="hljs-comment"># 查找行尾的abcaccadc</span><br><span class="hljs-regexp">//m</span>(a.c)&#123;<span class="hljs-number">3</span>&#125;$   <span class="hljs-comment"># 查找行尾的(abc)&#123;3&#125;</span><br><span class="hljs-regexp">//</span>M(a.c)&#123;<span class="hljs-number">3</span>&#125;$   <span class="hljs-comment"># 查找行尾的(a.c)&#123;3&#125;</span><br><span class="hljs-regexp">//</span>V(a.c)&#123;<span class="hljs-number">3</span>&#125;$   <span class="hljs-comment"># 查找任意位置的(a.c)&#123;3&#125;$</span><br></code></pre></td></tr></table></figure><p>默认设置是 magic，vim也推荐大家都使用magic的设置，在有特殊需要时，直接通过 &#x2F;v&#x2F;m&#x2F;M&#x2F;V 即可。</p><p>本文下面使用的元字符都是 magic 模式下的。</p><h1 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h1><p>vim的量词与perl相比一点也不逊色。</p><table><thead><tr><th>vim</th><th>Perl</th><th>意义</th></tr></thead><tbody><tr><td>*</td><td>*</td><td>0个或多个(匹配优先)</td></tr><tr><td>&#x2F;+</td><td>+</td><td>1个或多个(匹配优先)</td></tr><tr><td>&#x2F;? 或 &#x2F;&#x3D;</td><td>?</td><td>0个或1个(匹配优先)，&#x2F;?不能在 ? 命令（逆向查找）中使用</td></tr><tr><td>&#x2F;{n,m}</td><td>{n,m}</td><td>n个到m个(匹配优先)</td></tr><tr><td>&#x2F;{n,}</td><td>{n,}</td><td>最少n个(匹配优先)</td></tr><tr><td>&#x2F;{,m}</td><td>{,m}</td><td>最多m个(匹配优先)</td></tr><tr><td>&#x2F;{n}</td><td>{n}</td><td>恰好n个</td></tr><tr><td>&#x2F;{-n,m}</td><td>{n,m}?</td><td>n个到m个(忽略优先)</td></tr><tr><td>&#x2F;{-}</td><td>*?</td><td>0个或多个(忽略优先)</td></tr><tr><td>&#x2F;{-1,}</td><td>+?</td><td>1个或多个(忽略优先)</td></tr><tr><td>&#x2F;{-,1}</td><td>??</td><td>0个或1个(忽略优先)</td></tr></tbody></table><p>从上表中可见，vim的忽略优先量词不像perl的 *? +? ?? 那样，而是统一使用 &#x2F;{- 实现的。这大概跟忽略优先量词不常用有关吧。</p><h1 id="环视和固化分组"><a href="#环视和固化分组" class="headerlink" title="环视和固化分组"></a>环视和固化分组</h1><p>vim居然还支持环视和固化分组的功能，强大，赞一个 <img src="http://tech.idv2.com/2008/07/08/vim-regexp/images/face/bigsmile.png" alt=":D"> 关于环视的解释请参考Yurii的<a href="http://www.douban.com/subject/2154713/">《精通正则表达式》</a> 一书吧。</p><table><thead><tr><th>vim</th><th>Perl</th><th>意义</th></tr></thead><tbody><tr><td>&#x2F;@&#x3D;</td><td>(?&#x3D;</td><td>顺序环视</td></tr><tr><td>&#x2F;@!</td><td>(?!</td><td>顺序否定环视</td></tr><tr><td>&#x2F;@&lt;&#x3D;</td><td>(?&lt;&#x3D;</td><td>逆序环视</td></tr><tr><td>&#x2F;@&lt;!</td><td>(?&lt;!</td><td>逆序否定环视</td></tr><tr><td>&#x2F;@&gt;</td><td>(?&gt;</td><td>固化分组</td></tr><tr><td>&#x2F;%(atom&#x2F;)</td><td>(?:</td><td>非捕获型括号</td></tr></tbody></table><p>和perl稍有不同的是，vim中的环视和固化分组的模式的位置与perl不同。例如，查找紧跟在 foo 之后的 bar，perl将模式写在环视的括号内，而vim将模式写在环视的元字符之前。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Perl的写法</span><br><span class="hljs-regexp">/(?&lt;=foo)bar/</span><br><br><span class="hljs-comment"># vim的写法</span><br><span class="hljs-regexp">//</span>(foo<span class="hljs-regexp">/)/</span>@&lt;=bar<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何设计可以动态扩容缩容的分库分表方案</title>
    <link href="/2021/04/07/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%8F%AF%E4%BB%A5%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9%E7%BC%A9%E5%AE%B9%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E6%96%B9%E6%A1%88/"/>
    <url>/2021/04/07/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E5%8F%AF%E4%BB%A5%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9%E7%BC%A9%E5%AE%B9%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p><img src="/upload/75932a005c95e3bd1d321a432720cf85.png"><br>    设定好几台数据库服务器，每台服务器上几个库，每个库多少个表，推荐是32库 * 32表。</p><p>　　比如4台服务器，每台服务器上8个库，每个库32张表。</p><p>　　路由的规则，orderId%32 &#x3D; 库，orderId &#x2F; 32 %32 &#x3D; 表</p><p>　　扩容的时候，申请增加更多的数据库服务器，装好mysql，倍数扩容，4台服务器，扩到8台服务器，16台服务器</p><p>　　由dba负责将原先数据库服务器的库，迁移到新的数据库服务器上去，很多工具，库迁移，比较便捷</p><p>　　我们这边就是修改一下配置，调整迁移的库所在数据库服务器的地址</p><p>　　重新发布系统，上线，原先的路由规则变都不用变，直接可以基于2倍的数据库服务器的资源，继续进行线上系统的提供服务</p><p>转自：中华石杉Java工程师面试突击</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>dubbo支持哪些通信协议和序列化协议</title>
    <link href="/2021/04/07/dubbo%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E5%92%8C%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/04/07/dubbo%E6%94%AF%E6%8C%81%E5%93%AA%E4%BA%9B%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE%E5%92%8C%E5%BA%8F%E5%88%97%E5%8C%96%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="dubbo支持的通信协议"><a href="#dubbo支持的通信协议" class="headerlink" title="dubbo支持的通信协议"></a>dubbo支持的通信协议</h1><p><strong>dubbo协议</strong></p><p>　　dubbo:&#x2F;&#x2F;192.168.0.1:20188</p><p>　　默认就是走dubbo协议的，单一长连接，NIO异步通信，基于hessian作为序列化协议</p><p>　　适用的场景就是：传输数据量很小（每次请求在100kb以内），但是并发量很高</p><p>　　为了要支持高并发场景，一般是服务提供者就几台机器，但是服务消费者有上百台，可能每天调用量达到上亿次！此时用长连接是最合适的，就是跟每个服务消费者维持一个长连接就可以，可能总共就100个连接。然后后面直接基于长连接NIO异步通信，可以支撑高并发请求。</p><p>　　否则如果上亿次请求每次都是短连接的话，服务提供者会扛不住。</p><p>　　而且因为走的是单一长连接，所以传输数据量太大的话，会导致并发能力降低。所以一般建议是传输数据量很小，支撑高并发访问。</p><p> <img src="/upload/34f698b8c637d38880fff8a377121c97.png"></p><p><strong>rmi协议</strong></p><p>　　走java二进制序列化，多个短连接，适合消费者和提供者数量差不多，适用于文件的传输，一般较少用</p><p><strong>hessian协议</strong></p><p>　　走hessian序列化协议，多个短连接，适用于提供者数量比消费者数量还多，适用于文件的传输，一般较少用</p><p><strong>http协议</strong></p><p>　　走json序列化</p><p><strong>webservice</strong></p><p>　　走SOAP文本序列化</p><h1 id="dubbo支持的序列化协议"><a href="#dubbo支持的序列化协议" class="headerlink" title="dubbo支持的序列化协议"></a>dubbo支持的序列化协议</h1><p>　　dubbo实际基于不同的通信协议，支持hessian、java二进制序列化、json、SOAP文本序列化多种序列化协议。</p><p>　　但是hessian是其默认的序列化协议。</p><p>转自：中华石杉Java工程师面试突击</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ActiveMQ、RabbitMQ、RocketMQ、Kafka有什么优点和缺点</title>
    <link href="/2021/04/07/ActiveMQ%E3%80%81RabbitMQ%E3%80%81RocketMQ%E3%80%81Kafka%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%82%B9%E5%92%8C%E7%BC%BA%E7%82%B9/"/>
    <url>/2021/04/07/ActiveMQ%E3%80%81RabbitMQ%E3%80%81RocketMQ%E3%80%81Kafka%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E7%82%B9%E5%92%8C%E7%BC%BA%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h1><p>　　<strong>单机吞吐量：</strong>万级</p><p>　　<strong>topic数量都吞吐量的影响：</strong></p><p>　　<strong>时效性：</strong>ms级</p><p>　　<strong>可用性：</strong>高，基于主从架构实现高可用性</p><p>　　<strong>消息可靠性：</strong>有较低的概率丢失数据</p><p>　　<strong>功能支持：</strong>MQ领域的功能极其完备</p><p>　　<strong>总结：</strong></p><p>　　　　非常成熟，功能强大，在早些年业内大量的公司以及项目中都有应用  </p><p>　　　　偶尔会有较低概率丢失消息  </p><p>　　　　现在社区以及国内应用都越来越少，官方社区现在对ActiveMQ 5.x维护越来越少，几个月才发布一个版本  </p><p>　　　　主要是基于解耦和异步来用的，较少在大规模吞吐的场景中使用</p><h1 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h1><p>　　<strong>单机吞吐量：</strong>万级</p><p>　　<strong>topic数量都吞吐量的影响：</strong></p><p>　　<strong>时效性：</strong>微秒级，延时低是一大特点。</p><p>　　<strong>可用性：</strong>高，基于主从架构实现高可用性</p><p>　　<strong>消息可靠性：</strong></p><p>　　<strong>功能支持：</strong>基于erlang开发，所以并发能力很强，性能极其好，延时很低</p><p>　　<strong>总结：</strong>　　</p><p>　　　　erlang语言开发，性能极其好，延时很低；  </p><p>　　　　吞吐量到万级，MQ功能比较完备  </p><p>　　　　开源提供的管理界面非常棒，用起来很好用  </p><p>　　　　社区相对比较活跃，几乎每个月都发布几个版本分  </p><p>　　　　在国内一些互联网公司近几年用rabbitmq也比较多一些  但是问题也是显而易见的，RabbitMQ确实吞吐量会低一些，这是因为他做的实现机制比较重。  </p><p>　　　　erlang开发，很难去看懂源码，基本职能依赖于开源社区的快速维护和修复bug。  </p><p>　　　　rabbitmq集群动态扩展会很麻烦，不过这个我觉得还好。其实主要是erlang语言本身带来的问题。很难读源码，很难定制和掌控。</p><h1 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h1><p>　　<strong>单机吞吐量：</strong>十万级</p><p>　　<strong>topic数量都吞吐量的影响：</strong>topic可以达到几百，几千个的级别，吞吐量会有较小幅度的下降。可支持大量topic是一大优势。</p><p>　　<strong>时效性：</strong>ms级</p><p>　　<strong>可用性：</strong>非常高，分布式架构</p><p>　　<strong>消息可靠性：</strong>经过参数优化配置，消息可以做到0丢失</p><p>　　<strong>功能支持：</strong>MQ功能较为完善，还是分布式的，扩展性好</p><p>　　<strong>总结：</strong></p><p>　　　　接口简单易用，可以做到大规模吞吐，性能也非常好，分布式扩展也很方便，社区维护还可以，可靠性和可用性都是ok的，还可以支撑大规模的topic数量，支持复杂MQ业务场景  </p><p>　　　　而且一个很大的优势在于，源码是java，我们可以自己阅读源码，定制自己公司的MQ，可以掌控  </p><p>　　　　社区活跃度相对较为一般，不过也还可以，文档相对来说简单一些，然后接口这块不是按照标准JMS规范走的有些系统要迁移需要修改大量代码  </p><h1 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h1><p>　　<strong>单机吞吐量：</strong>十万级，最大的优点，就是吞吐量高。</p><p>　　<strong>topic数量都吞吐量的影响：</strong>topic从几十个到几百个的时候，吞吐量会大幅度下降。所以在同等机器下，kafka尽量保证topic数量不要过多。如果要支撑大规模topic，需要增加更多的机器资源</p><p>　　<strong>时效性：</strong>ms级</p><p>　　<strong>可用性：</strong>非常高，kafka是分布式的，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</p><p>　　<strong>消息可靠性：</strong>经过参数优化配置，消息可以做到0丢失</p><p>　　<strong>功能支持：</strong>功能较为简单，主要支持简单的MQ功能，在大数据领域的实时计算以及日志采集被大规模使用</p><p>　　<strong>总结：</strong></p><p>　　　　kafka的特点其实很明显，就是仅仅提供较少的核心功能，但是提供超高的吞吐量，ms级的延迟，极高的可用性以及可靠性，而且分布式可以任意扩展  </p><p>　　　　同时kafka最好是支撑较少的topic数量即可，保证其超高吞吐量  </p><p>　　　　kafka唯一的一点劣势是有可能消息重复消费，那么对数据准确性会造成极其轻微的影响，在大数据领域中以及日志采集中，这点轻微影响可以忽略</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a><strong>最后</strong></h1><p>　　一般的业务系统要引入MQ，最早大家都用ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃</p><p>　　后来大家开始用RabbitMQ，但是确实erlang语言阻止了大量的java工程师去深入研究和掌控他，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；</p><p>　　不过现在确实越来越多的公司，会去用RocketMQ，确实很不错，但是要想好社区万一突然黄掉的风险</p><p>　　所以中小型公司，技术实力较为一般，技术挑战不是特别高，用RabbitMQ是不错的选择；大型公司，基础架构研发实力较强，用RocketMQ是很好的选择</p><p>　　如果是大数据领域的实时计算、日志采集等场景，用Kafka是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范</p><p>转自：中华石杉Java工程师面试突击</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Vscode使用小技巧</title>
    <link href="/2021/04/07/Vscode%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <url>/2021/04/07/Vscode%E4%BD%BF%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="vscode删除重复行并排序-96"><a href="#vscode删除重复行并排序-96" class="headerlink" title="vscode删除重复行并排序&#96;"></a>vscode删除重复行并排序&#96;</h1><p>安装插件:<code>Transformer</code></p><p><code>ctrl + a</code> 全选文字<br><code>ctrl + shift + P</code> 打开命令窗口<br>输入：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Transform:Unique Lines <span class="hljs-regexp">//</span>删除重复行<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">Transform:<span class="hljs-built_in">Sort</span> Lines <span class="hljs-comment">//排序</span><br></code></pre></td></tr></table></figure><p>更多功能，查看插件页面，有<code>git</code>动画示例</p><p><code>vscode</code>删除行前的空格</p><p>输入<code>^\s</code><br>选择使用正则表达式<br><code>vscode</code>删除行尾的空格</p><p>输入<code>\s$</code><br>选择使用正则表达式</p><h1 id="VScode多行编辑的设置"><a href="#VScode多行编辑的设置" class="headerlink" title="VScode多行编辑的设置"></a>VScode多行编辑的设置</h1><p>VScode对多行编辑有两种模式。</p><p>第一种模式</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">Alt+<span class="hljs-built_in">Shift</span>   竖列选择<br></code></pre></td></tr></table></figure><p>这种模式下只可以选择竖列，不可以随意插入光标。所以只限制于同一列且不间隔的情况下。</p><p>第二种模式</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">Shift</span>+Ctrl 竖列选择<br>Ctrl+光标点击 选择多个编辑位点<br></code></pre></td></tr></table></figure><p>这种模式下不仅可以选择竖列，同时还可以在多个地方插入光标。</p><p>两种模式的切换<br>使用<code>Shift+Ctrl+p</code>快捷键调用查询输入栏，输入<code>cursor</code>，列表中会出现“切换多行修改键”这个选项。选择这个选项就可以在两种模式下切换。</p><h1 id="同时选中多个相同字符-多行-编辑"><a href="#同时选中多个相同字符-多行-编辑" class="headerlink" title="同时选中多个相同字符 多行 编辑"></a>同时选中多个相同字符 多行 编辑</h1><blockquote><p>ctrl + shift + L</p></blockquote><p>同时选中多个相同的字符使用步骤如下，比如：冒号</p><ol><li>使用鼠标选中  冒号</li><li>ctrl + shift + L</li><li>使用键盘左右箭头 ← → 可以移动至需要位置</li><li>输入需要的数值</li></ol><blockquote><p>alt + 鼠标左键点击单个选择</p></blockquote><p>同时选中多行不同位置使用步骤如下，比如：冒号</p><ol><li>按住alt + 鼠标左键选择第一行目标位置</li><li>重复第一步，选择目标行目标位置</li><li>使用键盘左右箭头 ← → 可以移动至需要位置</li><li>输入需要的数值</li></ol><blockquote><p>alt + shift + 鼠标左键竖拉</p></blockquote><blockquote><p>IDEA 选中多行相同的内容，快捷键ctrl+alt+shift+j</p></blockquote><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>选中字母后多次按下 ALT + J 选中多个相同的字母</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式断言 - (?!), (?:), (?=)</title>
    <link href="/2021/04/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%96%AD%E8%A8%80%20-%20(%EF%80%BF!),%20(%EF%80%BF%EF%80%BA),%20(%EF%80%BF=)/"/>
    <url>/2021/04/06/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%96%AD%E8%A8%80%20-%20(%EF%80%BF!),%20(%EF%80%BF%EF%80%BA),%20(%EF%80%BF=)/</url>
    
    <content type="html"><![CDATA[<p>一个断言就是一个对当前匹配位置之前或之后的字符的测试， 它不会实际消耗任何字符。简单的断言代码有\b、\B、 \A、 \Z、\z、 ^、$ 等，在 转义序列(反斜线) 中有描述。 更加复杂的断言以子组的方式编码。 它有两种类型： 前瞻断言(从当前位置向前测试)和后瞻断言(从当前位置向后测试)。</p><p>一个断言子组的匹配还是通过普通方式进行的， 不同在于它不会导致当前的匹配点发生改变。 前瞻断言中的正面断言(断言此匹配为真)以 ”(?&#x3D;” 开始，消极断言以 ”(?!” 开头。比如， \w+(?&#x3D;;) 匹配一个单词紧跟着一个分号但是匹配结果不会包含分号， foo(?!bar) 匹配所有后面没有紧跟 ”bar” 的 ”foo” 字符串。 注意一个类似的模式 (?!foo)bar 它不能用于查找之前出现所有不是 ”foo” 的 ”bar” 匹配， 它会查找到任意的 ”bar” 出现的情况， 因为 (?!foo) 这个断言在接下来三个字符时 ”bar” 的时候是永远都 true 的。 前瞻断言需要达到的就是这样的效果。</p><p>后瞻断言中的正面断言以”(?&lt;&#x3D;”开始, 消极断言以”(?&lt;!”开始。比如， (?&lt;!foo)bar 用于查找任何前面不是 ”foo” 的 ”bar”。 后瞻断言的内容被严格限制为只能用于匹配定长字符串。但是，如果有多个可选分支， 它们不需要拥有相同的长度。比如 (?&lt;&#x3D;bullock|donkey) 是允许的， 但是 (?&lt;!dogs?|cats?) 将会引发一个编译期的错误。在最上级分支可以匹配不同长度的字符串是允许的。 相比较于 perl 5.005 而言，它会要求多个分支使用相同长度的字符串匹配。 (?&lt;&#x3D;ab(c|de)) 这样的断言是不允许的， 因为它单个的顶级分支可以匹配两个不同的长度， 但是它可以接受使用两个顶级分支的写法 (?&lt;&#x3D;abc|abde) 这样的断言实现， 对于每个可选分支，暂时将当前位置移动到尝试匹配的当前位置之前的固定宽度处。 如果在当前没有足够的字符就视为匹配失败。后瞻断言与一次性子组结合使用可以用来匹配字符串结尾； 一个例子就是在一次性子组上给出字符串结尾。</p><p>多个断言(任意顺序)可以同时出现。 比如 (?&lt;&#x3D;\d{3})(?&lt;!999)foo 匹配前面有三个数字但不是 ”999” 的字符串 ”foo”。注意， 每个断言独立应用到对目标字符串该点的匹配。 首先它会检查前面的三位都是数字， 然后检查这三位不是 ”999”。 这个模式不能匹配 ”foo” 前面有三位数字然后紧跟 3 位非 999 共 6 个字符的字符串，比如， 它不匹配 ”123abcfoo”。 匹配 ”123abcfoo” 这个字符串的模式可以是 (?&lt;&#x3D;\d{3}…)(?&lt;!999)foo。</p><p>这种情况下，第一个断言查看(当前匹配点)前面的 6 个字符，检查前三个是数字， 然后第二个断言检查(当前匹配点)前三个字符不是 ”999”。</p><p>断言可以以任意复杂度嵌套。 比如 (?&lt;&#x3D;(?&lt;!foo)bar)baz 匹配前面有 ”bar” 但是 ”bar” 前面没有 ”foo” 的 ”baz”。 另外一个模式 (?&lt;&#x3D;\d{3}…(?&lt;!999))foo 则匹配前面有三个数字字符紧跟 3 个不是 999 的任意字符的 ”foo”。</p><p>断言子组时非捕获子组，并且不能用量词修饰， 因为对同一件事做多次断言是没有意义的.如果所有的断言都包含一个捕获子组， 那么为了在整个模式中捕获子组计数的目的，它们都会被计算在内。然而， 子字符串的捕获仅可以用于正面断言，因为对于消极的断言是没有意义的。</p><p>将断言计算在内，可以拥有的最大子组数量是 200 个。</p><blockquote><p>以上来自： <a href="https://www.php.net/manual/zh/regexp.reference.assertions.php">https://www.php.net/manual/zh/regexp.reference.assertions.php</a></p></blockquote><figure class="highlight lisp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lisp">(?<span class="hljs-symbol">:pattern</span>) <br></code></pre></td></tr></table></figure><p>非获取匹配，匹配pattern但不获取匹配结果，不进行存储供以后使用。这在使用或字符“(|)”来组合一个模式的各个部分是很有用。例如“industr(?:y|ies)”就是一个比“industry|industries”更简略的表达式。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name">?=pattern</span>)<br></code></pre></td></tr></table></figure><p>非获取匹配，正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如，“Windows(?&#x3D;95|98|NT|2000)”能匹配“Windows2000”中的“Windows”，但不能匹配“Windows3.1”中的“Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name">?!pattern</span>)<br></code></pre></td></tr></table></figure><p>非获取匹配，正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串，该匹配不需要获取供以后使用。例如“Windows(?!95|98|NT|2000)”能匹配“Windows3.1”中的“Windows”，但不能匹配“Windows2000”中的“Windows”。<br>(?&lt;&#x3D;pattern)<br>非获取匹配，反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;&#x3D;95|98|NT|2000)Windows”能匹配“2000Windows”中的“Windows”，但不能匹配“3.1Windows”中的“Windows”。</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clojure">(<span class="hljs-name">?&lt;!pattern</span>)<br></code></pre></td></tr></table></figure><p>非获取匹配，反向否定预查，与正向否定预查类似，只是方向相反。例如“(?&lt;!95|98|NT|2000)Windows”能匹配“3.1Windows”中的“Windows”，但不能匹配“2000Windows”中的“Windows”。这个地方不正确，有问题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">(?&lt;=1)<span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><p>匹配前面不是1的test</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">// 前瞻：<br><span class="hljs-built_in">exp1</span>(?=<span class="hljs-built_in">exp2</span>) 查找<span class="hljs-built_in">exp2</span>前面的<span class="hljs-built_in">exp1</span><span class="hljs-comment"></span><br><span class="hljs-comment">// 后顾：</span><br>(?&lt;=<span class="hljs-built_in">exp2</span>)<span class="hljs-built_in">exp1</span> 查找<span class="hljs-built_in">exp2</span>后面的<span class="hljs-built_in">exp1</span><span class="hljs-comment"></span><br><span class="hljs-comment">// 负前瞻：</span><br><span class="hljs-built_in">exp1</span>(?!<span class="hljs-built_in">exp2</span>) 查找后面不是<span class="hljs-built_in">exp2</span>的<span class="hljs-built_in">exp1</span><span class="hljs-comment"></span><br><span class="hljs-comment">// 负后顾：</span><br>(?&lt;!<span class="hljs-built_in">exp2</span>)<span class="hljs-built_in">exp1</span> 查找前面不是<span class="hljs-built_in">exp2</span>的<span class="hljs-built_in">exp1</span><br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-string">&quot;中国人&quot;</span>.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/(?&lt;=中国)人/</span>, <span class="hljs-string">&quot;rr&quot;</span>) <span class="hljs-comment">// 匹配中国人中的人，将其替换为rr，结果为 中国rr</span><br><span class="hljs-string">&quot;法国人&quot;</span>.<span class="hljs-built_in">replace</span>(<span class="hljs-regexp">/(?&lt;=中国)人/</span>, <span class="hljs-string">&quot;rr&quot;</span>) <span class="hljs-comment">// 结果为 法国人，因为人前面不是中国，所以无法匹配到</span><br></code></pre></td></tr></table></figure><p>要理解?:则需要理解捕获分组和非捕获分组的概念：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scss">()表示捕获分组，()会把每个分组里的匹配的值保存起来，使用<span class="hljs-variable">$n</span>(n是一个数字，表示第n个捕获组的内容)<br>(?:)表示非捕获分组，和捕获分组唯一的区别在于，非捕获分组匹配的值不会保存起来<br></code></pre></td></tr></table></figure><p>举例：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 数字格式化 <span class="hljs-number">1</span>,<span class="hljs-number">123</span>,<span class="hljs-number">000</span><br><span class="hljs-string">&quot;1234567890&quot;</span>.replace(<span class="hljs-regexp">/\B(?=(?:\d&#123;3&#125;)+(?!\d))/g</span>,<span class="hljs-string">&quot;,&quot;</span>) <span class="hljs-regexp">//</span> 结果：<span class="hljs-number">1</span>,<span class="hljs-number">234</span>,<span class="hljs-number">567</span>,<span class="hljs-number">890</span>，匹配的是后面是<span class="hljs-number">3</span>*n个数字的非单词边界(\B)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Shell笔记</title>
    <link href="/2021/04/05/Shell%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/05/Shell%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>#let</p><blockquote><p>let 命令是 BASH 中用于计算的工具，用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量。如果表达式中包含了空格或其他特殊字符，则必须引起来。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">let arg [arg ...]<br></code></pre></td></tr></table></figure><h2 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h2><p>自加操作：<code>let no++</code></p><p>自减操作：<code>let no--</code></p><p>简写形式 <code>let no+=10</code>，<code>let no-=20</code>，分别等同于 <code>let no=no+10</code>，<code>let no=no-20</code>。</p><p>以下实例计算 a 和 b 两个表达式，并输出结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>let a=5+4<br>let b=9-3 <br>echo $a $b<br></code></pre></td></tr></table></figure><p>上条命令执行成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ $? -eq 0 ]; <span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;OK&quot;</span><br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs shell">-s file　　　　　文件大小非0时为真<br>[ -f &quot;somefile&quot; ] ：判断是否是一个文件<br><br>[ -x &quot;/bin/ls&quot; ] ：判断/bin/ls是否存在并有可执行权限<br><br>[ -n &quot;$var&quot; ] ：判断$var变量是否有值<br><br>[ &quot;$a&quot; = &quot;$b&quot; ] ：判断$a和$b是否相等 <br><br>-r file　　　　　用户可读为真<br><br>-w file　　　　　用户可写为真<br><br>-x file　　　　　用户可执行为真<br><br>-f file　　　　　文件为正规文件为真<br><br>-d file　　　　　文件为目录为真<br><br>-c file　　　　　文件为字符特殊文件为真<br><br>-b file　　　　　文件为块特殊文件为真<br><br>-s file　　　　　文件大小非0时为真　　　　-s file true if the file has nonzero size<br><br>-t file　　　　　当文件描述符(默认为1)指定的设备为终端时为真<br><br> <br><br>-a file exists.<br>-b file exists and is a block special file.<br>-c file exists and is a character special file.<br>-d file exists and is a directory.<br>-e file exists (just the same as -a).<br>-f file exists and is a regular file.<br>-g file exists and has its setgid(2) bit set.<br>-G file exists and has the same group ID as this process.<br>-k file exists and has its sticky bit set.<br>-L file exists and is a symbolic link.<br>-n string length is not zero.<br>-o Named option is set on.<br>-O file exists and is owned by the user ID of this process.<br>-p file exists and is a first in, first out (FIFO) special file or<br>named pipe.<br>-r file exists and is readable by the current process.<br>-s file exists and has a size greater than zero.<br>-S file exists and is a socket.<br>-t file descriptor number fildes is open and associated with a<br>terminal device.<br>-u file exists and has its setuid(2) bit set.<br>-w file exists and is writable by the current process.<br>-x file exists and is executable by the current process.<br>-z string length is zero.<br></code></pre></td></tr></table></figure><p><strong>shell判断字符串为空的方法</strong></p><p>Linux 下判断字符串是否为空，可以使用两个参数：</p><p>● -z ：判断 string 是否是空串</p><p>● -n ：判断 string 是否是非空串</p><p>例子：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">#!/bin/sh<span class="hljs-string">``</span> <span class="hljs-string">` `</span><span class="hljs-symbol">STRING</span>=<span class="hljs-string">``</span> <span class="hljs-string">` `</span>if<span class="hljs-string">` `</span>[ -z <span class="hljs-string">``</span><span class="hljs-string">&quot;$STRING&quot;</span><span class="hljs-string">` `</span>]; then<span class="hljs-string">``</span> <span class="hljs-string">``</span>echo<span class="hljs-string">` `</span><span class="hljs-string">&quot;STRING is empty&quot;</span><span class="hljs-string">``</span>fi<span class="hljs-string">``</span> <span class="hljs-string">` `</span>if<span class="hljs-string">` `</span>[ -n <span class="hljs-string">``</span><span class="hljs-string">&quot;$STRING&quot;</span><span class="hljs-string">` `</span>]; then<span class="hljs-string">``</span> <span class="hljs-string">``</span>echo<span class="hljs-string">` `</span><span class="hljs-string">&quot;STRING is not empty&quot;</span><span class="hljs-string">``</span>fi<span class="hljs-string">``</span> <span class="hljs-string">` `</span>root@desktop:~# ./zerostring.sh <span class="hljs-string">``</span><span class="hljs-symbol">STRING</span> is <span class="hljs-string">``</span>empty<br></code></pre></td></tr></table></figure><p>注：在进行字符串比较时， 用引号将字符串界定起来 ，是一个非常好的习惯！</p><p>其他方法：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">if` `[ ``<span class="hljs-string">&quot;$str&quot;</span>` `= ``<span class="hljs-string">&quot;&quot;</span>` `]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式匹配&amp;quot;非&amp;quot;，以及&amp;quot;非&amp;quot;字符串的匹配</title>
    <link href="/2021/04/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D&amp;quot;%E9%9D%9E&amp;quot;%EF%BC%8C%E4%BB%A5%E5%8F%8A&amp;quot;%E9%9D%9E&amp;quot;%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8C%B9%E9%85%8D/"/>
    <url>/2021/04/04/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%8C%B9%E9%85%8D&amp;quot;%E9%9D%9E&amp;quot;%EF%BC%8C%E4%BB%A5%E5%8F%8A&amp;quot;%E9%9D%9E&amp;quot;%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8C%B9%E9%85%8D/</url>
    
    <content type="html"><![CDATA[<p>#写法介绍<br>首先，正则表达式的&quot;非&quot;，代表不想匹配某个字符。</p><p>比如字符串 helloword123，&#x2F;[^0-9]+&#x2F;g 可以匹配非数字，即匹配结果为 helloword；</p><p>同样的，&#x2F;[^he]+&#x2F;g 可以匹配非h非e的字符，匹配结果为lloword123；</p><p>那么 &#x2F;[^hello]&#x2F;g 呢？乍一看可能会以为能匹配word123，其实不然，[^] 内的多个字符是&quot;或&quot;的关系存在的，即它们并不是一个整体，&#x2F;[^hello]&#x2F;g 表示 非h非e非l非o，并不能理解为 非(hello)，所以匹配结果是 w 和 rd123。</p><p>道理我们都懂，可我们就是想匹配非某个字符串呢？比如某一字符串若是含有hello则无匹配，若是不含hello则匹配，写成[^hello]是显然不行的，[^(hello)] 呢？其实不起作用。</p><p>这时我们需要用到正则表达式的断言——(?!pattern) 零宽负向先行断言 或者 (?&lt;!pattern) 零宽负向后行断言 均可。</p><p>这里只介绍一种写法，大家可以都去尝试一下。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/^((?!hello).)+$/</span><br></code></pre></td></tr></table></figure><p>由于断言 (?!hello)是不占位的，后跟的 . 在原位置匹配任意字符，再用括号将其括起来，用+重复一次或多次，前后加上^和$，若是字符串中存在hello，则匹配到h字符之前的时候，断言(?!hello)匹配失败，正则匹配结果为false， 若是字符串中不存在hello，则匹配结果是整个字符串。</p><p>#用法实战</p><p>##匹配&amp;和;之间不含有test的字符</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">str = <span class="hljs-symbol">&amp;quot;</span>hello<span class="hljs-symbol">&amp;amp;</span>nbsp;<span class="hljs-symbol">&amp;amp;</span>test1;test<span class="hljs-symbol">&amp;amp;</span>qout;<span class="hljs-symbol">&amp;quot;</span>;<br></code></pre></td></tr></table></figure><p>正则表达式：<code>/&amp;amp;((?!test).)+;/g</code></p><p>匹配结果：<code>&amp;amp;nbsp;</code> 和 <code>&amp;amp;qout;</code></p><h2 id="匹配不含有-amp-lt-img-amp-gt-标签的-amp-lt-div-amp-gt-amp-lt-div-amp-gt-标签"><a href="#匹配不含有-amp-lt-img-amp-gt-标签的-amp-lt-div-amp-gt-amp-lt-div-amp-gt-标签" class="headerlink" title="匹配不含有&amp;lt;img&amp;gt;标签的&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;标签"></a>匹配不含有<code>&amp;lt;img&amp;gt;</code>标签的<code>&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;</code>标签</h2><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams">str = &amp;quot;&amp;<span class="hljs-keyword">lt</span>;<span class="hljs-built_in">div</span> id=<span class="hljs-string">&#x27;1&#x27;</span>&amp;<span class="hljs-keyword">gt</span>;&amp;<span class="hljs-keyword">lt</span>;img class=<span class="hljs-string">&#x27;xx&#x27;</span>&amp;<span class="hljs-keyword">gt</span>;&amp;<span class="hljs-keyword">lt</span>;/<span class="hljs-built_in">div</span>&amp;<span class="hljs-keyword">gt</span>;&amp;<span class="hljs-keyword">lt</span>;<span class="hljs-built_in">div</span> id=<span class="hljs-string">&#x27;1&#x27;</span>&amp;<span class="hljs-keyword">gt</span>;&amp;<span class="hljs-keyword">lt</span>;input type=<span class="hljs-string">&#x27;&#x27;</span>text&amp;quot;&amp;<span class="hljs-keyword">gt</span>;&amp;<span class="hljs-keyword">lt</span>;/<span class="hljs-built_in">div</span>&amp;<span class="hljs-keyword">gt</span>;&amp;quot;;<br></code></pre></td></tr></table></figure><p>正则表达式：<code> /&amp;lt;div[^&amp;gt;]*&amp;gt;((?!&amp;lt;img[^&amp;gt;]*&amp;gt;).)+&amp;lt;/div&amp;gt;/g</code></p><p>匹配结果：<code>&amp;lt;div id=&#39;1&#39;&amp;gt;&amp;lt;input type=&#39;&#39;text&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;</code></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux下登录Oracle命令行时删除键^H解决方法</title>
    <link href="/2021/04/04/Linux%E4%B8%8B%E7%99%BB%E5%BD%95Oracle%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%97%B6%E5%88%A0%E9%99%A4%E9%94%AE%5EH%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2021/04/04/Linux%E4%B8%8B%E7%99%BB%E5%BD%95Oracle%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%97%B6%E5%88%A0%E9%99%A4%E9%94%AE%5EH%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>在linux服务器下登录oracle的控制台，如果输入错误，想用删除键删除时却不能删除，打出的是^H的字符。</p><h4 id="方法1："><a href="#方法1：" class="headerlink" title="方法1："></a><strong>方法1：</strong></h4><p>用如下的命令可以使删除键生效：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> stty <span class="hljs-built_in">erase</span> ^H1<br></code></pre></td></tr></table></figure><p>恢复以前的设置的命令是：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> stty <span class="hljs-built_in">erase</span> ^？<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h4 id="方法2："><a href="#方法2：" class="headerlink" title="方法2："></a><strong>方法2：</strong></h4><p>利用rlwrap工具解决：</p><p>1、安装rlwrap和readline库</p><p>CentOS下可以用EPEL的yum源直接安装，步骤如下：</p><p>（1）RHEL&#x2F;CentOS&#x2F;SL Linux 6.x 下安装 EPEL6 yum源：</p><p>32位系统选择：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">rpm -ivh http://download.fedoraproject.org/pub/epel/6/i386/epel-release-6-8.noarch.rpm1</span><br></code></pre></td></tr></table></figure><p>64位系统选择：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">rpm -ivh http://download.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm1</span><br></code></pre></td></tr></table></figure><p>导入key：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># rpm --<span class="hljs-keyword">import</span> <span class="hljs-regexp">/etc/</span>pki<span class="hljs-regexp">/rpm-gpg/</span>RPM-GPG-KEY-EPEL-<span class="hljs-number">61</span><br></code></pre></td></tr></table></figure><p>默认会在&#x2F;etc&#x2F;yum.repos.d&#x2F;下创建epel.repo和epel-testing.repo两个配置文件。</p><p>（2）安装rlwrap和readline：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># yum install rlwrap readline readline-devel1</span><br></code></pre></td></tr></table></figure><p>其他Linux发行版如果源里没有rlwrap和readline的（如SUSE企业版默认没有这两个包），要分别下载这两个源码包编译安装一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">wget ftp://ftp.gnu.org/gnu/readline/readline-6.2.tar.gz</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">tar zxvf readline-6.2.tar.gz</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> readline-6.2/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">./configure</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">make</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">make install</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">wget http://utopia.knoware.nl/~hlub/rlwrap/rlwrap-0.37.tar.gz</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">tar zxvf rlwrap-0.37.tar.gz</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> rlwrap-0.37/</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">./configure</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">make</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">make install1234567891011121314</span><br></code></pre></td></tr></table></figure><p>（3）设置sqlplus的系统别名：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># vim <span class="hljs-regexp">/home/</span>oracle/.bash_profile1<br></code></pre></td></tr></table></figure><p>在头部或尾部添加：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">alias <span class="hljs-attribute">sqlplus</span>=<span class="hljs-string">&#x27;rlwrap sqlplus&#x27;</span><br>alias <span class="hljs-attribute">rman</span>=<span class="hljs-string">&#x27;rlwrap rman&#x27;</span>12<br></code></pre></td></tr></table></figure><p>退出oracle用户再重新登录就ok了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP的闭包</title>
    <link href="/2021/04/03/PHP%E7%9A%84%E9%97%AD%E5%8C%85/"/>
    <url>/2021/04/03/PHP%E7%9A%84%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<p>#减少foreach的循环的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;?php<br><br><span class="hljs-comment">// 一个基本的购物车，包括一些已经添加的商品和每种商品的数量。</span><br><span class="hljs-comment">// 其中有一个方法用来计算购物车中所有商品的总价格。该方法使用了一个closure作为回调函数。</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cart</span> </span>&#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PRICE_BUTTER</span> = <span class="hljs-number">1.00</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PRICE_MILK</span>   = <span class="hljs-number">3.00</span>;<br>    <span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PRICE_EGGS</span>   = <span class="hljs-number">6.95</span>;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$products</span> = [];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params"><span class="hljs-variable">$product</span>, <span class="hljs-variable">$quantity</span></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&amp;gt;products[<span class="hljs-variable">$product</span>] = <span class="hljs-variable">$quantity</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getQuantity</span>(<span class="hljs-params"><span class="hljs-variable">$product</span></span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&amp;gt;products[<span class="hljs-variable">$product</span>]) ? <span class="hljs-variable language_">$this</span>-&amp;gt;products[<span class="hljs-variable">$product</span>] : <span class="hljs-literal">FALSE</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTotal</span>(<span class="hljs-params"><span class="hljs-variable">$tax</span></span>) </span>&#123;<br>        <span class="hljs-variable">$total</span> = <span class="hljs-number">0.00</span>;<br><br>        <span class="hljs-variable">$callback</span> =<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$quantity</span>, <span class="hljs-variable">$product</span></span>) <span class="hljs-keyword">use</span> (<span class="hljs-params"><span class="hljs-variable">$tax</span>, &amp;amp;<span class="hljs-variable">$total</span></span>) </span>&#123;<br>            <span class="hljs-variable">$pricePerItem</span> = <span class="hljs-title function_ invoke__">constant</span>(<span class="hljs-keyword">__CLASS__</span> . &amp;quot;::<span class="hljs-variable constant_">PRICE_</span>&amp;quot; .<br>                <span class="hljs-title function_ invoke__">strtoupper</span>(<span class="hljs-variable">$product</span>));<br>            <span class="hljs-variable">$total</span> += (<span class="hljs-variable">$pricePerItem</span> * <span class="hljs-variable">$quantity</span>) * (<span class="hljs-variable">$tax</span> + <span class="hljs-number">1.0</span>);<br>        &#125;;<br><br>        <span class="hljs-title function_ invoke__">array_walk</span>(<span class="hljs-variable">$this</span>-&amp;gt;products, <span class="hljs-variable">$callback</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$total</span>, <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$my_cart</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cart</span>;<br><br><span class="hljs-comment">// 往购物车里添加条目</span><br><span class="hljs-variable">$my_cart</span>-&amp;gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">&#x27;butter&#x27;</span>, <span class="hljs-number">1</span>);<br><span class="hljs-variable">$my_cart</span>-&amp;gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">&#x27;milk&#x27;</span>, <span class="hljs-number">3</span>);<br><span class="hljs-variable">$my_cart</span>-&amp;gt;<span class="hljs-title function_ invoke__">add</span>(<span class="hljs-string">&#x27;eggs&#x27;</span>, <span class="hljs-number">6</span>);<br><br><span class="hljs-comment">// 打出出总价格，其中有 5% 的销售税.</span><br><span class="hljs-keyword">print</span> <span class="hljs-variable">$my_cart</span>-&amp;gt;<span class="hljs-title function_ invoke__">getTotal</span>(<span class="hljs-number">0.05</span>) . &amp;quot;\n&amp;quot;;<br><span class="hljs-comment">// The result is 54.29</span><br>?&amp;gt;<br></code></pre></td></tr></table></figure><p> 这里如果我们改造getTotal函数必然要使用到foreach</p><h1 id="减少函数的参数"><a href="#减少函数的参数" class="headerlink" title="减少函数的参数"></a>减少函数的参数</h1><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-variable">&amp;lt</span>;?php<br>function html($code, $id = <span class="hljs-variable">&amp;quot</span>;<span class="hljs-variable">&amp;quot</span>;, $class = <span class="hljs-variable">&amp;quot</span>;<span class="hljs-variable">&amp;quot</span>;) &#123;<br>    <span class="hljs-keyword">if</span> ($id !== <span class="hljs-variable">&amp;quot</span>;<span class="hljs-variable">&amp;quot</span>;) &#123;<br>        $id = <span class="hljs-variable">&amp;quot</span>; id = \<span class="hljs-variable">&amp;quot</span>;$id\<span class="hljs-variable">&amp;quot</span>;<span class="hljs-variable">&amp;quot</span>;;<br>    &#125;<br>    $class = ($class !== <span class="hljs-variable">&amp;quot</span>;<span class="hljs-variable">&amp;quot</span>;) ? <span class="hljs-variable">&amp;quot</span>; class =\<span class="hljs-variable">&amp;quot</span>;$class\<span class="hljs-variable">&amp;quot</span>;<span class="hljs-variable">&amp;quot</span>; : <span class="hljs-variable">&amp;quot</span>;<span class="hljs-variable">&amp;gt</span>;<span class="hljs-variable">&amp;quot</span>;;<br>    $open = <span class="hljs-variable">&amp;quot</span>;<span class="hljs-variable">&amp;lt</span>;$code$id$class<span class="hljs-variable">&amp;quot</span>;;<br>    $close = <span class="hljs-variable">&amp;quot</span>;<span class="hljs-variable">&amp;lt</span>;/$code<span class="hljs-variable">&amp;gt</span>;<span class="hljs-variable">&amp;quot</span>;;<br>    <span class="hljs-keyword">return</span> function ($inner = <span class="hljs-variable">&amp;quot</span>;<span class="hljs-variable">&amp;quot</span>;) use ($open, $close) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">&amp;quot</span>;$open$inner$close<span class="hljs-variable">&amp;quot</span>;;&#125;;<br>&#125;<br>?<span class="hljs-variable">&amp;gt</span>;<br></code></pre></td></tr></table></figure><p>  如果是使用平时的方法，我们会把inner放到html函数参数中，这样不管是代码阅读还是使用都不如使用闭包</p><h1 id="解除递归函数"><a href="#解除递归函数" class="headerlink" title="解除递归函数"></a>解除递归函数</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;?php<br><br><span class="hljs-variable">$fib</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"><span class="hljs-variable">$n</span></span>) <span class="hljs-keyword">use</span> (<span class="hljs-params">&amp;amp;<span class="hljs-variable">$fib</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$n</span> == <span class="hljs-number">0</span> || <span class="hljs-variable">$n</span> == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$fib</span>(<span class="hljs-variable">$n</span> - <span class="hljs-number">1</span>) + <span class="hljs-variable">$fib</span>(<span class="hljs-variable">$n</span> - <span class="hljs-number">2</span>);<br>&#125;;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$fib</span>(<span class="hljs-number">2</span>) . &amp;quot;\n&amp;quot;; <span class="hljs-comment">// 2</span><br><span class="hljs-variable">$lie</span> = <span class="hljs-variable">$fib</span>;<br><span class="hljs-variable">$fib</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);&#125;; <span class="hljs-comment">//rewrite $fib variable</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$lie</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// error because $fib is referenced by closure</span><br><br>?&amp;gt;<br></code></pre></td></tr></table></figure><p>  注意上题中的use使用了&amp;，这里不使用&amp;会出现错误fib(fib(n-1)是找不到function的（前面没有定义fib的类型）</p><p>  所以想使用闭包解除循环函数的时候就需要使用</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xquery">&amp;<span class="hljs-literal">lt</span>;?php<br><span class="hljs-variable">$recursive</span> = <span class="hljs-keyword">function</span> () use (&amp;amp;<span class="hljs-variable">$recursive</span>) &#123;<br>// The <span class="hljs-keyword">function</span> <span class="hljs-literal">is</span> now available <span class="hljs-keyword">as</span> <span class="hljs-variable">$recursive</span><br>&#125;<br>?&amp;<span class="hljs-literal">gt</span>;<br></code></pre></td></tr></table></figure><h1 id="关于延迟绑定"><a href="#关于延迟绑定" class="headerlink" title="关于延迟绑定"></a>关于延迟绑定</h1><p>  如果你需要延迟绑定use里面的变量，你就需要使用引用(&amp;)，否则在定义的时候就会做一份拷贝放到use中 &#x2F;&#x2F;理解use(&amp;$var)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;?php<br><br><span class="hljs-variable">$result</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$one</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$result</span>);<br>&#125;;<br><span class="hljs-variable">$two</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) <span class="hljs-keyword">use</span> (<span class="hljs-params"><span class="hljs-variable">$result</span></span>) </span>&#123;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$result</span>);<br>&#125;;<br><span class="hljs-variable">$three</span> = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) <span class="hljs-keyword">use</span> (<span class="hljs-params">&amp;amp;<span class="hljs-variable">$result</span></span>) </span>&#123;<br>    <span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-variable">$result</span>);<br>&#125;;<br><span class="hljs-variable">$result</span>++;<br><span class="hljs-variable">$one</span>(); <span class="hljs-comment">// outputs NULL: $result is not in scope</span><br><span class="hljs-variable">$two</span>(); <span class="hljs-comment">// outputs int(0): $result was copied</span><br><span class="hljs-variable">$three</span>(); <span class="hljs-comment">// outputs int(1)</span><br></code></pre></td></tr></table></figure><p>  使用引用和不使用引用就代表了是调用时赋值，还是申明时候赋值</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP中的Session</title>
    <link href="/2021/04/03/PHP%E4%B8%AD%E7%9A%84Session/"/>
    <url>/2021/04/03/PHP%E4%B8%AD%E7%9A%84Session/</url>
    
    <content type="html"><![CDATA[<h1 id="一、session预定义常量"><a href="#一、session预定义常量" class="headerlink" title="一、session预定义常量"></a>一、session预定义常量</h1><p>个人感觉PHP 最大的特点就是功能的实现都靠提供的函数扩展，函数扩展都是根据功能分大类的，session只是其中的一个扩展。</p><p>该扩展中定义了一些常量，可在PHP 编译或运行时动态载入时可用：</p><h2 id="1、SID-string"><a href="#1、SID-string" class="headerlink" title="1、SID(string)"></a><strong>1、SID(string)</strong></h2><p>包含着会话名及会话ID 的常量，格式为&quot;name&#x3D;ID&quot;，如果会话ID 已经在恰当的会话cookie 中设定时则为空字符串。和session_id() 返回的是同一个ID。</p><h2 id="2、PHP-SESSION-DISABLED-int"><a href="#2、PHP-SESSION-DISABLED-int" class="headerlink" title="2、PHP_SESSION_DISABLED(int)"></a><strong>2、PHP_SESSION_DISABLED(int)</strong></h2><p>自PHP 5.4.0起可用。如果会话已禁用，则返回session_status（）的值。</p><h2 id="3、PHP-SESSION-NONE-int"><a href="#3、PHP-SESSION-NONE-int" class="headerlink" title="3、PHP_SESSION_NONE(int)"></a><strong>3、PHP_SESSION_NONE(int)</strong></h2><p>自PHP 5.4.0起可用。在会话已启用，但还没有会话时返回session_status（）的值。</p><h2 id="4、PHP-SESSION-ACTIVE-int"><a href="#4、PHP-SESSION-ACTIVE-int" class="headerlink" title="4、PHP_SESSION_ACTIVE(int)"></a><strong>4、PHP_SESSION_ACTIVE(int)</strong></h2><p>自PHP 5.4.0起可用。在会话已启用，并存在会话时返回session_status（）的值。</p><p>注：会话在PHP中默认为激活（启用）。</p><p>session常量动态定义的，网友：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ruby">var_dump(<span class="hljs-keyword">defined</span>(<span class="hljs-string">&#x27;SID&#x27;</span>));  <span class="hljs-regexp">//</span> bool(<span class="hljs-literal">false</span>) - Not <span class="hljs-keyword">defined</span>...<br>session_start();<br>var_dump(<span class="hljs-keyword">defined</span>(<span class="hljs-string">&#x27;SID&#x27;</span>));  <span class="hljs-regexp">//</span> bool(<span class="hljs-literal">true</span>) - Defined now!<br></code></pre></td></tr></table></figure><p><strong>自己测试了下，结果两个都是bool(true)，应该是自己的问题。之后随后重新建一个php文档，执行：</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;?php<br><span class="hljs-keyword">echo</span> SID;          <span class="hljs-comment">//提示使用了未定义常量</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">echo</span> SID;          <span class="hljs-comment">//显示&amp;quot;name=UID&amp;quot;样式字符串。说明确实是动态定义，因为没有会话就没有会话的UID.</span><br>?&amp;gt;<br></code></pre></td></tr></table></figure><h1 id="二、基本用法"><a href="#二、基本用法" class="headerlink" title="二、基本用法"></a><strong>二、基本用法</strong></h1><p>通过为每个独立用户分配唯一的会话 ID，可以实现针对不同用户分别存储数据的功能。 会话通常被用来在多个页面请求之间保存及共享信息。  一般来说，会话 ID 通过 cookie 的方式发送到浏览器，并且在服务器端也是通过会话 ID 来取回会话中的数据。 如果请求中不包含会话 ID 信息，那么 PHP 就会创建一个新的会话，并为新创建的会话分配新的 ID。</p><p>会话的工作流程很简单。当开始一个会话时，PHP 会尝试从请求中查找会话 ID （通常通过会话 cookie）， 如果请求中不包含会话 ID 信息，PHP 就会创建一个新的会话。 会话开始之后，PHP 就会将会话中的数据设置到 <a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a> 变量中。 当 PHP 停止的时候，它会自动读取 <a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a> 中的内容，并将其进行序列化， 然后发送给会话保存管理器器来进行保存。</p><p>默认情况下，PHP 使用内置的文件会话保存管理器（<code>files</code>）来完成会话的保存。 也可以通过配置项<a href="http://php.net/manual/zh/session.configuration.php#ini.session.save-handler">session.save_handler</a> 来修改所要采用的会话保存管理器。 对于文件会话保存管理器，会将会话数据保存到配置项<a href="http://php.net/manual/zh/session.configuration.php#ini.session.save-path">session.save_path</a> 所指定的位置。</p><p>可以通过调用函数 <a href="http://php.net/manual/zh/function.session-start.php">session_start()</a> 来手动开始一个会话。 如果配置项 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.auto-start">session.auto_start</a> 设置为<code>1</code>， 那么请求开始的时候，会话会自动开始。</p><p>PHP 脚本执行完毕之后，会话会自动关闭。 同时，也可以通过调用函数 <a href="http://php.net/manual/zh/function.session-write-close.php">session_write_close()</a> 来手动关闭会话。</p><p>Example #1 在 <a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a> 中注册变量。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&amp;lt;<span class="hljs-string">?p</span>hp session_start(); <span class="hljs-keyword">if</span> (!isset(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;count&#x27;</span>])) &#123;  <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;count&#x27;</span>] = <span class="hljs-number">0</span>; &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;count&#x27;</span>]++; &#125;<span class="hljs-string">?&amp;</span>gt;<br></code></pre></td></tr></table></figure><p>Example #2 从 <a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a> 中反注册变量。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">&amp;lt;<span class="hljs-string">?p</span>hp session_start(); unset(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;count&#x27;</span>]);<span class="hljs-string">?&amp;</span>gt;<br></code></pre></td></tr></table></figure><p><strong>Caution</strong></p><p>千万不要使用 unset($_SESSION) 来复位超级变量 <a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>， 因为这样会导致无法继续在 <a href="http://php.net/manual/zh/reserved.variables.session.php">$_SESSION</a>中注册会话变量。</p><p><strong>Warning</strong></p><p>由于无法将一个引用恢复到另外一个变量， 所以不可以将引用保存到会话变量中。</p><p><strong>Warning</strong></p><p>如果会话中存在和全局变量同名的变量，那么 register_globals 会导致全局变量被会话变量覆盖。 更多信息请参考 <a href="http://php.net/manual/zh/security.globals.php">注册全局变量</a>。</p><p>&gt; Note:<br>&gt;<br>&gt; 无论是通过调用函数 <a href="http://php.net/manual/zh/function.session-start.php">session_start()</a> 手动开启会话， 还是使用配置项 <a href="http://php.net/manual/zh/session.configuration.php#ini.session.auto-start">session.auto_start</a> 自动开启会话， 对于基于文件的会话数据保存（PHP 的默认行为）而言， 在会话开始的时候都会给会话数据文件加锁， 直到 PHP 脚本执行完毕或者显式调用 <a href="http://php.net/manual/zh/function.session-write-close.php">session_write_close()</a> 来保存会话数据。 在此期间，其他脚本不可以访问同一个会话数据文件。<br>&gt;<br>&gt; 对于大量使用 Ajax 或者并发请求的网站而言，这可能是一个严重的问题。 解决这个问题最简单的做法是如果修改了会话中的变量， 那么应该尽快调用 <a href="http://php.net/manual/zh/function.session-write-close.php">session_write_close()</a> 来保存会话数据并释放文件锁。 还有一种选择就是使用支持并发操作的会话保存管理器来替代文件会话保存管理器。</p><p>理解：由于HTTP 的不可维持性（执行一段php脚本，实际上进行了一次http  通信），每段php脚本执行完时，会话会自动自动关闭。即同一时刻，只有一个php脚本访问到该session及其数据文件。为了保证每个php脚本访问到的session及其数据文件都是最新的，每次对该session的数据修改都应该及时保存进数据文件中，这在大量Ajax  应用中非常重要。</p><p><strong>总结session：</strong></p><p>1、session_destroy()：常用方法。</p><p>2、unset($_SESSION)：终结必杀，使用后无法继续使用$_SESSION 注册会话变量，所以一般不能用，算不上真正的方法。</p><p>网上的另一种方法，思路和删除cookie一样，没有具体实践，不知可行否：</p><p> 3、setcookie(session_name(),session_id(),time() -8000000,..);</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>FastCGI</title>
    <link href="/2021/04/03/FastCGI/"/>
    <url>/2021/04/03/FastCGI/</url>
    
    <content type="html"><![CDATA[<p>#什么是CGI</p><p>CGI全称&quot;通用网关接口&quot;（Common Gateway Interface），用于HTTP服务器与其它机器上的程序服务通信交流的一种工具，CGI程序须运行在网络服务器上。</p><p>传统CGI接口方式的主要缺点是性能较差，因为每次HTTP服务器遇到动态程序时都需要重启解析器来执行解析，然后结果被返回给HTTP服务器。这在处理高并发访问几乎是不可用的，因此就诞生了FastCGI。另外传统的CGI接口方式安全性也很差。</p><h1 id="什么是FastCGI"><a href="#什么是FastCGI" class="headerlink" title="什么是FastCGI"></a>什么是FastCGI</h1><p>FastCGI是一个可伸缩地、高速地在HTTP服务器和动态脚本语言间通信的接口（FastCGI接口在Linux下是socket（可以是文件socket，也可以是ip  socket）），主要优点是把动态语言和HTTP服务器分离开来。多数流行的HTTP服务器都支持FastCGI，包括Apache、Nginx和lightpd。</p><p>同时，FastCGI也被许多脚本语言所支持，比较流行的脚本语言之一为PHP。FastCGI接口方式采用C&#x2F;S架构，可以将HTTP服务器和脚本解析服务器分开，同时在脚本解析服务器上启动一个或多个脚本解析守护进程。当HTTP服务器每次遇到动态程序时，可以将其直接交付给FastCGI进程执行，然后将得到的结构返回给浏览器。这种方式可以让HTTP服务器专一地处理静态请求或者将动态脚本服务器的结果返回给客户端，这在很大程度上提高了整个应用系统的性能。</p><p>FastCGI的重要特点：</p><ul><li>1、FastCGI是HTTP服务器和动态脚本语言间通信的接口或者工具。</li><li>2、FastCGI优点是把动态语言解析和HTTP服务器分离开来。</li><li>3、Nginx、Apache、Lighttpd以及多数动态语言都支持FastCGI。</li><li>4、FastCGI接口方式采用C&#x2F;S架构，分为客户端（HTTP服务器）和服务端（动态语言解析服务器）。</li><li>5、PHP动态语言服务端可以启动多个FastCGI的守护进程。</li><li>6、HTTP服务器通过FastCGI客户端和动态语言FastCGI服务端通信。</li></ul><h1 id="Nginx-FastCGI的运行原理"><a href="#Nginx-FastCGI的运行原理" class="headerlink" title="Nginx FastCGI的运行原理"></a>Nginx FastCGI的运行原理</h1><p>Nginx不支持对外部动态程序的直接调用或者解析，所有的外部程序（包括PHP）必须通过FastCGI接口来调用。FastCGI接口在Linux下是socket（可以是文件socket，也可以是ip  socket）。为了调用CGI程序，还需要一个FastCGI的wrapper，这个wrapper绑定在某个固定socket(套接字)上，如端口或者文件socket。当Nginx将CGI请求发送给这个socket的时候，通过FastCGI接口，wrapper接收到请求，然后派生出一个新的线程，这个线程调用解释器或者外部程序处理脚本并读取返回数据；接着，wrapper再将返回的数据通过FastCGI接口，沿着固定的socket传递给Nginx；最后，Nginx将返回的数据发送给客户端，这就是Nginx+FastCGI的整个运作过程。</p><p><img src="/upload/9dbd80f8c27ed29c5f4a56bef49928df.jpg"></p><p>Nginx+FastCGI运作过程</p><p>FastCGI的主要优点是把动态语言和HTTP服务器分离开来，是Nginx专一处理静态请求和向后转发动态请求，而PHP&#x2F;PHP-FPM服务器专一解析PHP动态请求。</p><h1 id="附："><a href="#附：" class="headerlink" title="附："></a>附：</h1><p><img src="/upload/ebf1720484cb52564bc499a7d0927c29.jpg"></p><p>ngnix配置解释</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>URI和URL的区别比较与理解</title>
    <link href="/2021/04/03/URI%E5%92%8CURL%E7%9A%84%E5%8C%BA%E5%88%AB%E6%AF%94%E8%BE%83%E4%B8%8E%E7%90%86%E8%A7%A3/"/>
    <url>/2021/04/03/URI%E5%92%8CURL%E7%9A%84%E5%8C%BA%E5%88%AB%E6%AF%94%E8%BE%83%E4%B8%8E%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>#什么是URI</p><p>URI，通一资源标志符(Uniform Resource Identifier， URI)，表示的是web上每一种可用的资源，如 HTML文档、图像、视频片段、程序等都由一个URI进行标识的。</p><p>#URI的结构组成</p><p>URI通常由三部分组成：</p><p>①资源的命名机制；</p><p>②存放资源的主机名；</p><p>③资源自身的名称。</p><p>（注意：这只是一般URI资源的命名方式，只要是可以唯一标识资源的都被称为URI，上面三条合在一起是URI的充分不必要条件）</p><p>#URI举例</p><p>如：<a href="https://www.chengyao.xyz/notes/edit/152">https://www.chengyao.xyz/notes/edit/152</a></p><p>我们可以这样解释它：</p><p>①这是一个可以通过https协议访问的资源，</p><p>②位于主机 <a href="http://www.chengyao.xyz上,/">www.chengyao.xyz上，</a></p><p>③通过“&#x2F;notes&#x2F;edit&#x2F;152”可以对该资源进行唯一标识（注意，这个不一定是完整的路径）</p><p>注意：以上三点只不过是对实例的解释，以上三点并不是URI的必要条件，URI只是一种概念，怎样实现无所谓，只要它唯一标识一个资源就可以了。</p><h1 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h1><p>URL是URI的一个子集。它是Uniform Resource Locator的缩写，译为“统一资源定位 符”。</p><p>通俗地说，URL是Internet上描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上。</p><p>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL是URI概念的一种实现方式。</p><p>URL的一般格式为(带方括号[]的为可选项)：</p><p>protocol :&#x2F;&#x2F; hostname[:port] &#x2F; path &#x2F; [;parameters][?query]#fragment</p><p>URL的格式由三部分组成： </p><p>①第一部分是协议(或称为服务方式)。</p><p>②第二部分是存有该资源的主机IP地址(有时也包括端口号)。</p><p>③第三部分是主机资源的具体地址，如目录和文件名等。</p><p>第一部分和第二部分用“:&#x2F;&#x2F;”符号隔开，</p><p>第二部分和第三部分用“&#x2F;”符号隔开。</p><p>第一部分和第二部分是不可缺少的，第三部分有时可以省略。 </p><h1 id="URI和URL之间的区别"><a href="#URI和URL之间的区别" class="headerlink" title="URI和URL之间的区别"></a>URI和URL之间的区别</h1><p>从上面的例子来看，你可能觉得URI和URL可能是相同的概念，其实并不是，URI和URL都定义了资源是什么，但URL还定义了该如何访问资源。URL是一种具体的URI，它是URI的一个子集，它不仅唯一标识资源，而且还提供了定位该资源的信息。URI 是一种语义上的抽象概念，可以是绝对的，也可以是相对的，而URL则必须提供足够的信息来定位，是绝对的。</p><p>更新:看了一下大家的疑问,其实大家对uri可以认为只是唯一识别的编号,类似于大家的身份证号,而url就是身份证住址+姓名,这样是不是就很明显了~~</p><p>更新2:针对大部分同学的疑问，其实纠结的就是URI到底是什么，怎么它就是URI不是URL了，其实文章中都已交代，只要能唯一标识资源的就是URI，在URI的基础上给出其资源的访问方式的就是URL，这是最简单的总结了，希望对大家有所帮助，祝好~~</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入、XSS以及CSRF分别是什么？</title>
    <link href="/2021/04/03/SQL%E6%B3%A8%E5%85%A5%E3%80%81XSS%E4%BB%A5%E5%8F%8ACSRF%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2021/04/03/SQL%E6%B3%A8%E5%85%A5%E3%80%81XSS%E4%BB%A5%E5%8F%8ACSRF%E5%88%86%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>#SQL注入</p><p>SQL注入是属于注入式攻击，这种攻击是因为在项目中没有将代码与数据（比如用户敏感数据）隔离，在读取数据的时候，错误的将数据作为代码的一部分执行而导致的。</p><p>典型的例子就是当对SQL语句进行字符串拼接的时候，直接使用未转义的用户输入内容作为变量。这时，只要在sql语句的中间做修改，比如加上drop、delete等关键字，执行之后后果不堪设想。</p><p>说到这里，那么该怎么处理这种情况呢？三个方面：</p><p>1、过滤用户输入参数中的特殊字符，降低风险。</p><p>2、禁止通过字符串拼接sql语句，要严格使用参数绑定来传入参数。</p><p>3、合理使用数据库框架提供的机制。就比如Mybatis提供的传入参数的方式 #{}，禁止使用${}，后者相当于是字符串拼接sql，要使用参数化的语句。</p><p>总结下，就是要正确使用参数化绑定sql变量。</p><p>#XSS</p><p>XSS：跨站脚本攻击，Cross-Site Scripting，为了和前端的css避免重名，简称为XSS，是指通过技术手段，向正常用户请求的HTML页面中插入恶意脚本，执行。</p><p>这种攻击主要是用于信息窃取和破坏等目的。比如2011年的微博XSS攻击事件，攻击者利用了微博发布功能中未对action-data漏洞做有效的过滤，在发布微博信息的时候带上了包含攻击脚本的URL，用户访问就会加载恶意脚本，导致大量用户被攻击。</p><p>关于防范XSS上，主要就是通过对用户输入的数据做过滤或者是转义，可以使用框架提供的工具类HtmlUtil。另外前端在浏览器展示数据的时候，要使用安全的API展示数据。比如使用innerText而不是innerHTML。</p><p>#CSRF</p><p>跨站请求伪造，在用户并不知情的情况下，冒充用户发送请求，在当前已经登录的web网站上执行恶意操作，比如恶意发帖，修改密码等。</p><p>大致来看，与XSS有重合的地方，前者是黑客盗用用户浏览器中的登录信息，冒充用户去执行操作。后者是在正常用户请求的HTML中放入恶意代码，XSS问题出在用户数据没有转义，过滤；CSRF问题出现在HTTP接口没有防范不守信用的调用。</p><p>#防范CSRF的漏洞方式</p><p>1、CSRF Token验证，利用浏览器的同源限制，在HTTP接口执行前验证Cookie中的Token，验证通过才会继续执行请求。</p><p>2、人机交互，例如短信验证码、界面的滑块。</p><p>以上就是什么是SQL注入、XSS和CSRF？的详细内容，更多请关注php中文网其它相关文章！</p><p>#PHP如何防止XSS攻击</p><p>PHP防止XSS跨站脚本攻击的方法:<strong>是针对非法的HTML代码包括单双引号等，使用htmlspecialchars()函数</strong> 。</p><p>在使用htmlspecialchars()函数的时候注意第二个参数, 直接用htmlspecialchars($string) 的话,第二个参数默认是ENT_COMPAT,函数默认只是转化双引号(“), 不对单引号(‘)做转义.</p><p>所以,htmlspecialchars函数更多的时候要加上第二个参数, 应该这样用: htmlspecialchars($string,ENT_QUOTES).当然,如果需要不转化任何引号,用htmlspecialchars($string,ENT_NOQUOTES).</p><p>另外, 尽量少用htmlentities, 在全部英文的时候htmlentities和htmlspecialchars没有区别,都可以达到目的.但是,中文情况下, htmlentities却会转化所有的html代码，连同里面的它无法识别的中文字符也给转化了。</p><p>htmlentities和htmlspecialchars这两个函数对 ‘之类的字符串支持不好,都不能转化, 所以用htmlentities和htmlspecialchars转化的字符串只能防止XSS攻击,不能防止SQL注入攻击.</p><p>所有有打印的语句如echo，print等 在打印前都要使用htmlentities() 进行过滤，这样可以防止Xss，注意中文要写出htmlentities($name,ENT_NOQUOTES,GB2312) 。</p><p> (1).网页不停地刷新 <code>&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0&amp;quot;&amp;gt;</code></p><p> (2).嵌入其它网站的链接 &lt;iframe src&#x3D;<a href="http://xxxx/">http://xxxx</a> width&#x3D;250 height&#x3D;250&gt;&lt;&#x2F;iframe&gt;  除了通过正常途径输入XSS攻击字符外，还可以绕过JavaScript校验，通过修改请求达到XSS攻击的目的.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;?php<br><span class="hljs-comment">//php防注入和XSS攻击通用过滤</span><br><span class="hljs-variable">$_GET</span>     &amp;amp;&amp;amp; <span class="hljs-title function_ invoke__">SafeFilter</span>(<span class="hljs-variable">$_GET</span>);<br><span class="hljs-variable">$_POST</span>    &amp;amp;&amp;amp; <span class="hljs-title function_ invoke__">SafeFilter</span>(<span class="hljs-variable">$_POST</span>);<br><span class="hljs-variable">$_COOKIE</span>  &amp;amp;&amp;amp; <span class="hljs-title function_ invoke__">SafeFilter</span>(<span class="hljs-variable">$_COOKIE</span>);<br>  <br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">SafeFilter</span> (<span class="hljs-params">&amp;amp;<span class="hljs-variable">$arr</span></span>) </span><br><span class="hljs-function"></span>&#123;<br>   <span class="hljs-variable">$ra</span>=<span class="hljs-title function_ invoke__">Array</span>(<span class="hljs-string">&#x27;/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/&#x27;</span>,<span class="hljs-string">&#x27;/script/&#x27;</span>,<span class="hljs-string">&#x27;/javascript/&#x27;</span>,<span class="hljs-string">&#x27;/vbscript/&#x27;</span>,<span class="hljs-string">&#x27;/expression/&#x27;</span>,<span class="hljs-string">&#x27;/applet/&#x27;</span><br>   ,<span class="hljs-string">&#x27;/meta/&#x27;</span>,<span class="hljs-string">&#x27;/xml/&#x27;</span>,<span class="hljs-string">&#x27;/blink/&#x27;</span>,<span class="hljs-string">&#x27;/link/&#x27;</span>,<span class="hljs-string">&#x27;/style/&#x27;</span>,<span class="hljs-string">&#x27;/embed/&#x27;</span>,<span class="hljs-string">&#x27;/object/&#x27;</span>,<span class="hljs-string">&#x27;/frame/&#x27;</span>,<span class="hljs-string">&#x27;/layer/&#x27;</span>,<span class="hljs-string">&#x27;/title/&#x27;</span>,<span class="hljs-string">&#x27;/bgsound/&#x27;</span><br>   ,<span class="hljs-string">&#x27;/base/&#x27;</span>,<span class="hljs-string">&#x27;/onload/&#x27;</span>,<span class="hljs-string">&#x27;/onunload/&#x27;</span>,<span class="hljs-string">&#x27;/onchange/&#x27;</span>,<span class="hljs-string">&#x27;/onsubmit/&#x27;</span>,<span class="hljs-string">&#x27;/onreset/&#x27;</span>,<span class="hljs-string">&#x27;/onselect/&#x27;</span>,<span class="hljs-string">&#x27;/onblur/&#x27;</span>,<span class="hljs-string">&#x27;/onfocus/&#x27;</span>,<br>   <span class="hljs-string">&#x27;/onabort/&#x27;</span>,<span class="hljs-string">&#x27;/onkeydown/&#x27;</span>,<span class="hljs-string">&#x27;/onkeypress/&#x27;</span>,<span class="hljs-string">&#x27;/onkeyup/&#x27;</span>,<span class="hljs-string">&#x27;/onclick/&#x27;</span>,<span class="hljs-string">&#x27;/ondblclick/&#x27;</span>,<span class="hljs-string">&#x27;/onmousedown/&#x27;</span>,<span class="hljs-string">&#x27;/onmousemove/&#x27;</span><br>   ,<span class="hljs-string">&#x27;/onmouseout/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseover/&#x27;</span>,<span class="hljs-string">&#x27;/onmouseup/&#x27;</span>,<span class="hljs-string">&#x27;/onunload/&#x27;</span>);<br>     <br>   <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$arr</span>))<br>   &#123;<br>     <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$arr</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&amp;gt; <span class="hljs-variable">$value</span>) <br>     &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$value</span>))<br>        &#123;<br>          <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">get_magic_quotes_gpc</span>())  <span class="hljs-comment">//不对magic_quotes_gpc转义过的字符使用addslashes(),避免双重转义。</span><br>          &#123;<br>             <span class="hljs-variable">$value</span>  = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$value</span>); <span class="hljs-comment">//给单引号（&#x27;）、双引号（&amp;quot;）、反斜线（\）与 NUL（NULL 字符）</span><br>             <span class="hljs-comment">#加上反斜线转义</span><br>          &#125;<br>          <span class="hljs-variable">$value</span>       = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-variable">$ra</span>,<span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-variable">$value</span>);     <span class="hljs-comment">//删除非打印字符，粗暴式过滤xss可疑字符串</span><br>          <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]     = <span class="hljs-title function_ invoke__">htmlentities</span>(<span class="hljs-title function_ invoke__">strip_tags</span>(<span class="hljs-variable">$value</span>)); <span class="hljs-comment">//去除 HTML 和 PHP 标记并转换为 HTML 实体</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          <span class="hljs-title function_ invoke__">SafeFilter</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$key</span>]);<br>        &#125;<br>     &#125;<br>   &#125;<br>&#125;<br>?&amp;gt;<br><span class="hljs-variable">$str</span> = <span class="hljs-string">&#x27;www.90boke.com&amp;lt;meta http-equiv=&amp;quot;refresh&amp;quot; content=&amp;quot;0;&amp;quot;&amp;gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">SafeFilter</span> (<span class="hljs-variable">$str</span>); <span class="hljs-comment">//如果你把这个注释掉，提交之后就会无休止刷新</span><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$str</span>;<br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs xquery">//------------------------------php防注入和XSS攻击通用过滤-----Start--------------------------------------------//<br><span class="hljs-keyword">function</span> string_remove_xss(<span class="hljs-variable">$html</span>) &#123;<br>    preg_match_all(&amp;quot;/\&amp;<span class="hljs-literal">lt</span>;([^\&amp;<span class="hljs-literal">lt</span>;]+)\&amp;<span class="hljs-literal">gt</span>;/<span class="hljs-literal">is</span>&amp;quot;, <span class="hljs-variable">$html</span>, <span class="hljs-variable">$ms</span>);<br> <br>    <span class="hljs-variable">$searchs</span>[] = <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>;<br>    <span class="hljs-variable">$replaces</span>[] = <span class="hljs-string">&#x27;&amp;amp;lt;&#x27;</span>;<br>    <span class="hljs-variable">$searchs</span>[] = <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>;<br>    <span class="hljs-variable">$replaces</span>[] = <span class="hljs-string">&#x27;&amp;amp;gt;&#x27;</span>;<br> <br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ms</span>[<span class="hljs-number">1</span>]) &#123;<br>        <span class="hljs-variable">$allowtags</span> = <span class="hljs-string">&#x27;img|a|font|div|table|tbody|caption|tr|td|th|br|p|b|strong|i|u|em|span|ol|ul|li|blockquote&#x27;</span>;<br>        <span class="hljs-variable">$ms</span>[<span class="hljs-number">1</span>] = array_unique(<span class="hljs-variable">$ms</span>[<span class="hljs-number">1</span>]);<br>        foreach (<span class="hljs-variable">$ms</span>[<span class="hljs-number">1</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$value</span>) &#123;<br>            <span class="hljs-variable">$searchs</span>[] = &amp;quot;&amp;amp;<span class="hljs-literal">lt</span>;&amp;quot;.<span class="hljs-variable">$value</span>.&amp;quot;&amp;amp;<span class="hljs-literal">gt</span>;&amp;quot;;<br> <br>            <span class="hljs-variable">$value</span> = str_replace(<span class="hljs-string">&#x27;&amp;amp;amp;&#x27;</span>, <span class="hljs-string">&#x27;_uch_tmp_str_&#x27;</span>, <span class="hljs-variable">$value</span>);<br>            <span class="hljs-variable">$value</span> = string_htmlspecialchars(<span class="hljs-variable">$value</span>);<br>            <span class="hljs-variable">$value</span> = str_replace(<span class="hljs-string">&#x27;_uch_tmp_str_&#x27;</span>, <span class="hljs-string">&#x27;&amp;amp;amp;&#x27;</span>, <span class="hljs-variable">$value</span>);<br> <br>            <span class="hljs-variable">$value</span> = str_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/*&#x27;</span>), <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/.&#x27;</span>), <span class="hljs-variable">$value</span>);<br>            <span class="hljs-variable">$skipkeys</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;onabort&#x27;</span>,<span class="hljs-string">&#x27;onactivate&#x27;</span>,<span class="hljs-string">&#x27;onafterprint&#x27;</span>,<span class="hljs-string">&#x27;onafterupdate&#x27;</span>,<span class="hljs-string">&#x27;onbeforeactivate&#x27;</span>,<span class="hljs-string">&#x27;onbeforecopy&#x27;</span>,<span class="hljs-string">&#x27;onbeforecut&#x27;</span>,<span class="hljs-string">&#x27;onbeforedeactivate&#x27;</span>,<br>                    <span class="hljs-string">&#x27;onbeforeeditfocus&#x27;</span>,<span class="hljs-string">&#x27;onbeforepaste&#x27;</span>,<span class="hljs-string">&#x27;onbeforeprint&#x27;</span>,<span class="hljs-string">&#x27;onbeforeunload&#x27;</span>,<span class="hljs-string">&#x27;onbeforeupdate&#x27;</span>,<span class="hljs-string">&#x27;onblur&#x27;</span>,<span class="hljs-string">&#x27;onbounce&#x27;</span>,<span class="hljs-string">&#x27;oncellchange&#x27;</span>,<span class="hljs-string">&#x27;onchange&#x27;</span>,<br>                    <span class="hljs-string">&#x27;onclick&#x27;</span>,<span class="hljs-string">&#x27;oncontextmenu&#x27;</span>,<span class="hljs-string">&#x27;oncontrolselect&#x27;</span>,<span class="hljs-string">&#x27;oncopy&#x27;</span>,<span class="hljs-string">&#x27;oncut&#x27;</span>,<span class="hljs-string">&#x27;ondataavailable&#x27;</span>,<span class="hljs-string">&#x27;ondatasetchanged&#x27;</span>,<span class="hljs-string">&#x27;ondatasetcomplete&#x27;</span>,<span class="hljs-string">&#x27;ondblclick&#x27;</span>,<br>                    <span class="hljs-string">&#x27;ondeactivate&#x27;</span>,<span class="hljs-string">&#x27;ondrag&#x27;</span>,<span class="hljs-string">&#x27;ondragend&#x27;</span>,<span class="hljs-string">&#x27;ondragenter&#x27;</span>,<span class="hljs-string">&#x27;ondragleave&#x27;</span>,<span class="hljs-string">&#x27;ondragover&#x27;</span>,<span class="hljs-string">&#x27;ondragstart&#x27;</span>,<span class="hljs-string">&#x27;ondrop&#x27;</span>,<span class="hljs-string">&#x27;onerror&#x27;</span>,<span class="hljs-string">&#x27;onerrorupdate&#x27;</span>,<br>                    <span class="hljs-string">&#x27;onfilterchange&#x27;</span>,<span class="hljs-string">&#x27;onfinish&#x27;</span>,<span class="hljs-string">&#x27;onfocus&#x27;</span>,<span class="hljs-string">&#x27;onfocusin&#x27;</span>,<span class="hljs-string">&#x27;onfocusout&#x27;</span>,<span class="hljs-string">&#x27;onhelp&#x27;</span>,<span class="hljs-string">&#x27;onkeydown&#x27;</span>,<span class="hljs-string">&#x27;onkeypress&#x27;</span>,<span class="hljs-string">&#x27;onkeyup&#x27;</span>,<span class="hljs-string">&#x27;onlayoutcomplete&#x27;</span>,<br>                    <span class="hljs-string">&#x27;onload&#x27;</span>,<span class="hljs-string">&#x27;onlosecapture&#x27;</span>,<span class="hljs-string">&#x27;onmousedown&#x27;</span>,<span class="hljs-string">&#x27;onmouseenter&#x27;</span>,<span class="hljs-string">&#x27;onmouseleave&#x27;</span>,<span class="hljs-string">&#x27;onmousemove&#x27;</span>,<span class="hljs-string">&#x27;onmouseout&#x27;</span>,<span class="hljs-string">&#x27;onmouseover&#x27;</span>,<span class="hljs-string">&#x27;onmouseup&#x27;</span>,<span class="hljs-string">&#x27;onmousewheel&#x27;</span>,<br>                    <span class="hljs-string">&#x27;onmove&#x27;</span>,<span class="hljs-string">&#x27;onmoveend&#x27;</span>,<span class="hljs-string">&#x27;onmovestart&#x27;</span>,<span class="hljs-string">&#x27;onpaste&#x27;</span>,<span class="hljs-string">&#x27;onpropertychange&#x27;</span>,<span class="hljs-string">&#x27;onreadystatechange&#x27;</span>,<span class="hljs-string">&#x27;onreset&#x27;</span>,<span class="hljs-string">&#x27;onresize&#x27;</span>,<span class="hljs-string">&#x27;onresizeend&#x27;</span>,<span class="hljs-string">&#x27;onresizestart&#x27;</span>,<br>                    <span class="hljs-string">&#x27;onrowenter&#x27;</span>,<span class="hljs-string">&#x27;onrowexit&#x27;</span>,<span class="hljs-string">&#x27;onrowsdelete&#x27;</span>,<span class="hljs-string">&#x27;onrowsinserted&#x27;</span>,<span class="hljs-string">&#x27;onscroll&#x27;</span>,<span class="hljs-string">&#x27;onselect&#x27;</span>,<span class="hljs-string">&#x27;onselectionchange&#x27;</span>,<span class="hljs-string">&#x27;onselectstart&#x27;</span>,<span class="hljs-string">&#x27;onstart&#x27;</span>,<span class="hljs-string">&#x27;onstop&#x27;</span>,<br>                    <span class="hljs-string">&#x27;onsubmit&#x27;</span>,<span class="hljs-string">&#x27;onunload&#x27;</span>,<span class="hljs-string">&#x27;javascript&#x27;</span>,<span class="hljs-string">&#x27;script&#x27;</span>,<span class="hljs-string">&#x27;eval&#x27;</span>,<span class="hljs-string">&#x27;behaviour&#x27;</span>,<span class="hljs-string">&#x27;expression&#x27;</span>,<span class="hljs-string">&#x27;style&#x27;</span>,<span class="hljs-string">&#x27;class&#x27;</span>);<br>            <span class="hljs-variable">$skipstr</span> = implode(<span class="hljs-string">&#x27;|&#x27;</span>, <span class="hljs-variable">$skipkeys</span>);<br>            <span class="hljs-variable">$value</span> = preg_replace(<span class="hljs-keyword">array</span>(&amp;quot;/(<span class="hljs-variable">$skipstr</span>)/i&amp;quot;), <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-variable">$value</span>);<br>            <span class="hljs-keyword">if</span> (!preg_match(&amp;quot;/^[\/|\s]?(<span class="hljs-variable">$allowtags</span>)(\s+|$)/<span class="hljs-literal">is</span>&amp;quot;, <span class="hljs-variable">$value</span>)) &#123;<br>                <span class="hljs-variable">$value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>            &#125;<br>            <span class="hljs-variable">$replaces</span>[] =<span class="hljs-built_in"> empty</span>(<span class="hljs-variable">$value</span>) ? <span class="hljs-string">&#x27;&#x27;</span> : &amp;quot;&amp;<span class="hljs-literal">lt</span>;&amp;quot; . str_replace(<span class="hljs-string">&#x27;&amp;amp;quot;&#x27;</span>, <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>, <span class="hljs-variable">$value</span>) . &amp;quot;&amp;<span class="hljs-literal">gt</span>;&amp;quot;;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$html</span> = str_replace(<span class="hljs-variable">$searchs</span>, <span class="hljs-variable">$replaces</span>, <span class="hljs-variable">$html</span>);<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$html</span>;<br>&#125;<br>//php防注入和XSS攻击通用过滤 <br><span class="hljs-keyword">function</span> string_htmlspecialchars(<span class="hljs-variable">$string</span>, <span class="hljs-variable">$flags</span> = null) &#123;<br>    <span class="hljs-keyword">if</span> (is_array(<span class="hljs-variable">$string</span>)) &#123;<br>        foreach (<span class="hljs-variable">$string</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&amp;<span class="hljs-literal">gt</span>; <span class="hljs-variable">$val</span>) &#123;<br>            <span class="hljs-variable">$string</span>[<span class="hljs-variable">$key</span>] = string_htmlspecialchars(<span class="hljs-variable">$val</span>, <span class="hljs-variable">$flags</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$flags</span> === null) &#123;<br>            <span class="hljs-variable">$string</span> = str_replace(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;&amp;amp;&#x27;</span>, <span class="hljs-string">&#x27;&amp;quot;&#x27;</span>, <span class="hljs-string">&#x27;&amp;lt;&#x27;</span>, <span class="hljs-string">&#x27;&amp;gt;&#x27;</span>), <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;&amp;amp;amp;&#x27;</span>, <span class="hljs-string">&#x27;&amp;amp;quot;&#x27;</span>, <span class="hljs-string">&#x27;&amp;amp;lt;&#x27;</span>, <span class="hljs-string">&#x27;&amp;amp;gt;&#x27;</span>), <span class="hljs-variable">$string</span>);<br>            <span class="hljs-keyword">if</span> (strpos(<span class="hljs-variable">$string</span>, <span class="hljs-string">&#x27;&amp;amp;amp;#&#x27;</span>) !==<span class="hljs-built_in"> false</span>) &#123;<br>                <span class="hljs-variable">$string</span> = preg_replace(<span class="hljs-string">&#x27;/&amp;amp;amp;((#(\d&#123;3,5&#125;|x[a-fA-F0-9]&#123;4&#125;));)/&#x27;</span>, <span class="hljs-string">&#x27;&amp;amp;\\1&#x27;</span>, <span class="hljs-variable">$string</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (PHP_VERSION &amp;<span class="hljs-literal">lt</span>; <span class="hljs-string">&#x27;5.4.0&#x27;</span>) &#123;<br>                <span class="hljs-variable">$string</span> = htmlspecialchars(<span class="hljs-variable">$string</span>, <span class="hljs-variable">$flags</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (!defined(<span class="hljs-string">&#x27;CHARSET&#x27;</span>) || (strtolower(CHARSET) == <span class="hljs-string">&#x27;utf-8&#x27;</span>)) &#123;<br>                    <span class="hljs-variable">$charset</span> = <span class="hljs-string">&#x27;UTF-8&#x27;</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-variable">$charset</span> = <span class="hljs-string">&#x27;ISO-8859-1&#x27;</span>;<br>                &#125;<br>                <span class="hljs-variable">$string</span> = htmlspecialchars(<span class="hljs-variable">$string</span>, <span class="hljs-variable">$flags</span>, <span class="hljs-variable">$charset</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$string</span>;<br>&#125;<br><br>//------------------php防注入和XSS攻击通用过滤-----End--------------------------------------------//<br></code></pre></td></tr></table></figure><h1 id="PHP中的设置"><a href="#PHP中的设置" class="headerlink" title="PHP中的设置"></a>PHP中的设置</h1><p>PHP5.2以上版本已支持HttpOnly参数的设置，同样也支持全局的HttpOnly的设置，在php.ini中</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">----------------------------------------------------- </span><br> <span class="hljs-keyword">session</span>.cookie_httponly = <br><span class="hljs-comment">-----------------------------------------------------</span><br></code></pre></td></tr></table></figure><p>设置其值为1或者TRUE，来开启全局的Cookie的HttpOnly属性，当然也支持在代码中来开启： </p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-variable">&amp;lt</span>;?php ini_set(<span class="hljs-variable">&amp;quot</span>;session.cookie_httponly<span class="hljs-variable">&amp;quot</span>;, 1);   <br>// <span class="hljs-keyword">or</span> session_set_cookie_params(0, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>, TRUE);   <br>?<span class="hljs-variable">&amp;gt</span>;<br></code></pre></td></tr></table></figure><p>Cookie操作函数setcookie函数和setrawcookie函数也专门添加了第7个参数来做为HttpOnly的选项，开启方法为： </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;?php  <br><span class="hljs-title function_ invoke__">setcookie</span>(&amp;quot;abc&amp;quot;, &amp;quot;test&amp;quot;, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">TRUE</span>);   <br><span class="hljs-title function_ invoke__">setrawcookie</span>(&amp;quot;abc&amp;quot;, &amp;quot;test&amp;quot;, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">TRUE</span>);  <br>?&amp;gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ajax请求</title>
    <link href="/2021/04/02/ajax%E8%AF%B7%E6%B1%82/"/>
    <url>/2021/04/02/ajax%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h1 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h1><h2 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a><strong>XMLHttpRequest 对象</strong></h2><p>　　XMLHttpRequest对象是ajax的基础,XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。目前所有浏览器都支持XMLHttpRequest</p><table><thead><tr><th>方  法</th><th>描  述</th></tr></thead><tbody><tr><td>abort()</td><td>停止当前请求</td></tr><tr><td>getAllResponseHeaders()</td><td>把HTTP请求的所有响应首部作为键&#x2F;值对返回</td></tr><tr><td>getResponseHeader(“header”)</td><td>返回指定首部的串值</td></tr><tr><td>open(“method”,”URL”,[asyncFlag],[“userName”],[“password”])</td><td>建立对服务器的调用。method参数可以是GET、POST或PUT。url参数可以是相对URL或绝对URL。这个方法还包括3个可选的参数，是否异步，用户名，密码</td></tr><tr><td>send(content)</td><td>向服务器发送请求</td></tr><tr><td>setRequestHeader(“header”, “value”)</td><td>把指定首部设置为所提供的值。在设置任何首部之前必须先调用open()。设置header并和请求一起发送 (‘post’方法一定要 )</td></tr></tbody></table><p>post 需要在open后设置header ，需要发送数据直接传递给xhr.send的第一个参数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">xhr.set<span class="hljs-constructor">RequestHeader(&#x27;Content-Type&#x27;,&#x27;<span class="hljs-params">application</span><span class="hljs-operator">/</span><span class="hljs-params">x</span>-<span class="hljs-params">www</span>-<span class="hljs-params">form</span>-<span class="hljs-params">urlencoded</span>&#x27;)</span>;<br></code></pre></td></tr></table></figure><p>关键字：<code>responseText,</code> <code>readyState</code>, <code>onreadystatechange</code></p><h2 id="Jq的ajax方法"><a href="#Jq的ajax方法" class="headerlink" title="Jq的ajax方法"></a>Jq的ajax方法</h2><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$.get(<span class="hljs-string">&#x27;http://www.aaa.com&#x27;</span>,data,<span class="hljs-keyword">function</span>(<span class="hljs-params">data,status</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&#x27;success&#x27;</span> === status)&#123;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(data);<br>&#125;<br>&#125;,<span class="hljs-string">&#x27;json&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>dataType</code> 可以是<code>text</code>,<code>html</code>,<code>xml</code>,<code>script</code>,<code>json</code>,<code>jsonp</code> 将添加一个 “?callback&#x3D;?” 到 URL 来规定回调,POST方式类似使用$.post</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs js">$.<span class="hljs-title function_">ajax</span>(&#123;<br><span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://www.aaa.com&#x27;</span>,<br><span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;GET&#x27;</span>,<br><span class="hljs-attr">dataType</span>:<span class="hljs-string">&#x27;json&#x27;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;bbb&#x27;</span>&#125;,<br>    <span class="hljs-attr">traditional</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//如果你想要用传统的方式来序列化数据，那么就设置为 true。请参考工具分类下面的 jQuery.param 方法。</span><br>    <span class="hljs-attr">timeout</span>:<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-comment">//设置请求超时时间（毫秒）。此设置将覆盖全局设置。</span><br>    <span class="hljs-attr">scriptCharset</span>:<span class="hljs-string">&#x27;string&#x27;</span>,<span class="hljs-comment">//只有当请求时 dataType 为 &quot;jsonp&quot; 或 &quot;script&quot;，并且 type 是 &quot;GET&quot; 才会用于强制修改 charset。通常只在本地和远程的内容编码不同时使用。</span><br><span class="hljs-attr">async</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//true为异步</span><br>    <span class="hljs-attr">processData</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//默认值: true。默认情况下，通过data选项传递进来的数据，如果是一个对象(技术上讲只要不是字符串)，都会处理转化成一个查询字符串，以配合默认内容类型 &quot;application/x-www-form-urlencoded&quot;。如果要发送 DOM 树信息或其它不希望转换的信息，请设置为 false。</span><br>    <span class="hljs-attr">ifModified</span>:<span class="hljs-literal">false</span>,<span class="hljs-comment">//仅在服务器数据改变时获取新数据。默认值: false。使用 HTTP 包 Last-Modified 头信息判断。在 jQuery 1.4 中，它也会检查服务器指定的 &#x27;etag&#x27; 来确定数据没有被修改过。</span><br>    <span class="hljs-attr">global</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//是否触发全局 AJAX 事件。默认值: true。设置为 false 将不会触发全局 AJAX 事件，如 ajaxStart 或 ajaxStop 可用于控制不同的 Ajax 事件。</span><br>    <span class="hljs-attr">cache</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">//默认值: true，dataType 为 script 和 jsonp 时默认为 false。设置为 false 将不缓存此页面。</span><br>    <span class="hljs-attr">contentType</span>:<span class="hljs-string">&#x27;applicate/x-www-form-urlencoded&#x27;</span>, <span class="hljs-comment">//默认值</span><br>    <span class="hljs-attr">context</span>:<span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>, <span class="hljs-comment">//这个对象用于设置 Ajax 相关回调函数的上下文。也就是说，让回调函数内 this 指向这个对象（如果不设定这个参数，那么 this 就指向调用本次 AJAX 请求时传递的 options 参数）。比如指定一个 DOM 元素作为 context 参数，这样就设置了 success 回调函数的上下文为这个 DOM 元素。</span><br>    <span class="hljs-attr">xhr</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-comment">//需要返回一个 XMLHttpRequest 对象。默认在 IE 下是 ActiveXObject 而其他情况下是 XMLHttpRequest 。用于重写或者提供一个增强的 XMLHttpRequest 对象。这个参数在 jQuery 1.3 以前不可用。</span><br>    &#125;<br>    <span class="hljs-attr">dataFilter</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">data,Type</span>)&#123;<br>        <br>    &#125;,<br>    <span class="hljs-attr">beforeSend</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">XHR</span>)&#123;<br>        <br>    &#125;,<br><span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br><br>&#125;,<br>    <span class="hljs-attr">error</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>        <br>    &#125;,<br>    <span class="hljs-attr">complete</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">XHR, TS</span>)&#123;<br>        <span class="hljs-comment">//请求完成后回调函数 (请求成功或失败之后均调用)。</span><br>    &#125;,<br>    <span class="hljs-attr">jsonpCallback</span>:<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-comment">//为 jsonp 请求指定一个回调函数名。这个值将用来取代 jQuery 自动生成的随机函数名。这主要用来让 jQuery 生成度独特的函数名，这样管理请求更容易，也能方便地提供回调函数和错误处理。你也可以在想让浏览器缓存 GET 请求的时候，指定这个回调函数名。</span><br>    <span class="hljs-attr">password</span>:<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-comment">//用于响应 HTTP 访问认证请求的密码</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="getScript"><a href="#getScript" class="headerlink" title="getScript"></a>getScript</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-constructor">$(<span class="hljs-params">selector</span>)</span>.get<span class="hljs-constructor">Script(<span class="hljs-params">url</span>,<span class="hljs-params">success</span>(<span class="hljs-params">response</span>,<span class="hljs-params">status</span>)</span>)<br></code></pre></td></tr></table></figure><p>getScript() 方法使用 AJAX 的 HTTP GET 请求获取和执行 JavaScript。 </p><ul><li><em>status</em> - 包含请求的状态（”success”、”notmodified”、”error”、”timeout”、”parsererror”）</li></ul><p>fetch</p><p>es6新语法fetch().then()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><br><span class="hljs-comment">//GET请求</span><br><span class="hljs-keyword">var</span> httpGet = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">getUrl</span>) &#123;<br>    <span class="hljs-keyword">var</span> opts = &#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span> <span class="hljs-comment">// 强制加入凭据头</span><br>    &#125;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(getUrl, opts).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">text</span>();<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">responseText</span>) =&gt;</span> &#123;<br>        result = responseText;<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br><br>    &#125;);<br>    <span class="hljs-keyword">return</span> result;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//下载</span><br><span class="hljs-keyword">var</span> httpDownLoadFile = <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">getUrl, fileName</span>) &#123;<br>    <span class="hljs-keyword">var</span> opts = &#123;<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,<br>        <span class="hljs-attr">credentials</span>: <span class="hljs-string">&#x27;include&#x27;</span> <span class="hljs-comment">// 强制加入凭据头</span><br>    &#125;<br>    <span class="hljs-keyword">await</span> <span class="hljs-title function_">fetch</span>(getUrl, opts).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> response.<span class="hljs-title function_">blob</span>();<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">blob</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">var</span> url = <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">createObjectURL</span>(blob);<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;a&#x27;</span>);<br>        a.<span class="hljs-property">href</span> = url;<br>        a.<span class="hljs-property">download</span> = fileName;<br>        a.<span class="hljs-title function_">click</span>();<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">URL</span>.<span class="hljs-title function_">revokeObjectURL</span>(url);<br>    &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br><br>    &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="一些发送请求后可以执行的方法"><a href="#一些发送请求后可以执行的方法" class="headerlink" title="一些发送请求后可以执行的方法:"></a>一些发送请求后可以执行的方法:</h2><ul><li>always():一定会执行</li><li>catch():执行出错时执行(本体 object)</li><li>done():执行成功时执行</li><li>failed():执行出错时执行(服务器拒绝)</li><li>pipe():过滤方法</li><li>progress():当对象生成进度通知时，调用添加处理程序。</li><li>Promise():返回Object(延迟)的Promise（承诺）对象。</li><li>state():确定一个Object（延迟）对象的当前状态。</li><li>then():当（延迟）对象解决，拒绝或仍在进行中时，调用添加处理程序。</li></ul><blockquote><p>es6 新增fetch().then()</p></blockquote><h2 id="formData"><a href="#formData" class="headerlink" title="formData"></a>formData</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#file_upload&#x27;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;change&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>      <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>;<br>      <span class="hljs-keyword">var</span> files = <span class="hljs-variable language_">this</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-keyword">var</span> form = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>form.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;file&#x27;</span>,files);<br></code></pre></td></tr></table></figure><p>onclick&#x3D;”return function(){}” 当function返回true执行默认行为为false不执行</p><h1 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h1><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-built_in">fetch</span>(<span class="hljs-string">&#x27;https://...&#x27;</span>, &#123;<br>    method: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-selector-tag">body</span>: JSON<span class="hljs-selector-class">.stringify</span>(base),<br>    headers: &#123;<br>      <span class="hljs-string">&#x27;Content-Type&#x27;</span>: <span class="hljs-string">&#x27;application/json&#x27;</span><br>    &#125;<br>  &#125;)<span class="hljs-selector-class">.then</span>(<span class="hljs-built_in">function</span>(data) &#123;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PostgreSQL Copy 命令</title>
    <link href="/2021/04/02/PostgreSQL%20Copy%20%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/04/02/PostgreSQL%20Copy%20%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<p>COPY –  在表和文件之间拷贝数据</p><p>Synopsis<br>COPY tablename [ ( column [, …] ) ] FROM { ‘filename’ | STDIN } [ [ WITH ] [ BINARY ] [ OIDS ] [ DELIMITER [ AS ] ‘delimiter’ ] [ NULL [ AS ] ‘null string’ ] [ CSV [ QUOTE [ AS ] ‘quote’ ] [ ESCAPE [ AS ] ‘escape’ ] [ FORCE NOT NULL column [, …] ] COPY tablename [ ( column [, …] ) ] TO { ‘filename’ | STDOUT } [ [ WITH ] [ BINARY ] [ OIDS ] [ DELIMITER [ AS ] ‘delimiter’ ] [ NULL [ AS ] ‘null string’ ] [ CSV [ QUOTE [ AS ] ‘quote’ ] [ ESCAPE [ AS ] ‘escape’ ] [ FORCE QUOTEcolumn [, …] ]</p><p>描述<br>COPY 在 PostgreSQL表和标准文件系统文件之间交换数据。 COPY TO 把一个表的所有内容都拷贝到一个文件， 而 COPY FROM 从一个文件里拷贝数据到一个表里（把数据附加到表中已经存在的内容里）。</p><p>如果声明了一个字段列表，COPY 将只在文件和表之间拷贝声明的字段的数据。 如果表中有任何不在字段列表里的字段，那么 COPY FROM 将为那些字段插入缺省值。</p><p>带文件名的 COPY 指示 PostgreSQL 服务器直接从文件中读写数据。 如果声明了文件名，那么该文件必须为服务器可见，而且文件名必须从服务器的角度声明。如果声明的是STDIN 或 STDOUT，数据通过连接在客户前端和服务器之间流动。</p><p>参数<br>tablename<br>现存表的名字（可以有模式修饰）。</p><p>column<br>可选的待拷贝字段列表。如果没有声明字段列表，那么将使用所有字段。</p><p>filename<br>输入或输出文件的绝对路径名。</p><p>STDIN<br>声明输入是来自客户端应用。</p><p>STDOUT<br>声明输入前往客户端应用。</p><p>BINARY<br>使用二进制格式存储和读取，而不是以文本的方式。 在二进制模式下，不能声明 DELIMITERS，NULL 或者 CSV选项。</p><p>OIDS<br>声明为每行拷贝内部对象标识（OID）。 （如果给那些没有 OID 的表声明了 OIDS 选项，则抛出一个错误。）</p><p>delimiter<br>用于在文件中每行中分隔各个字段的单个字符。 在文本模式下，缺省是水平制表符（tab），在 CSV 模式下是一个逗号。</p><p>null string<br>个代表 NULL 值的字串。在文本模式下缺省是 \N （反斜杠-N）， 在 CSV 模式下是一个没有引号的空值。 如果你不想区分空值和空字串，那么即使在文本模式下可能你也会用一个空字串。</p><p>注意: 在使用 COPY FROM 的时候，任何匹配这个字串的字串将被存储为 NULL 值， 所以你应该确保你用的字串和COPY TO相同。</p><p>CSV<br>打开逗号分隔变量（CSV）模式。</p><p>quote<br>声明 CSV 模式里的引号字符。缺省是双引号。</p><p>escape<br>声明在 CSV 模式下应该出现在数据里 QUOTE 字符值前面的字符。 缺省是 QUOTE 值（通常是双引号）。</p><p>FORCE QUOTE<br>在 CSV COPY TO 模式下，强制在每个声明的字段周围对所有非 NULL 值都使用引号包围。 NULL 从不会被引号包围。</p><p>FORCE NOT NULL<br>在 CSV COPY FROM 模式下，把声明的每个字段都当作它们有引号包围来处理， 因此就没有 NULL 值。对于在CSV 模式下的缺省空字串（’’）， 这样导致一个缺失的数值当作一个零长字串输入。</p><p>注意<br>COPY 只能用于表，不能用于视图。</p><p>BINARY 关键字将强制使用二进制对象而不是文本存储&#x2F;读取所有数据。 这样做在一定程度上比传统的拷贝命令快，但二进制拷贝文件在不同机器体系间的植性不是很好。</p><p>你对任何要COPY TO 出来的数据必须有选取数据的权限，对任何要 COPY FROM 入数据的表必须有插入权限。</p><p>COPY 命令里面的文件必须是由服务器直接读或写的文件，而不是由客户端应用读写。 因此，它们必须位于数据库服务器上或者可以为数据库服务器所访问，而不是由客户端做这些事情。 它们必须是PostgreSQL用户（服务器运行的用户 ID）可以访问到并且可读或者可写，而不是客户端。 COPY 到一个命名文件是只允许数据库超级用户进行的，因为它允许读写任意服务器有权限访问的文件。</p><p>不要混淆 COPY 和 psql 指令 \copy。 \copy 调用 COPY FROM STDIN 或者 COPY TO STDOUT， 然后把数据抓取&#x2F;存储到一个 psql 客户端可以访问的文件中。 因此，使用 \copy 的时候，文件访问权限是由客户端而不是服务器端决定的。</p><p>我们建议在 COPY 里的文件名字总是使用绝对路径。 在 COPY TO 的时候是由服务器强制进行的， 但是对于COPY FROM，你的确有从一个声明为相对路径的文件里读取的选择。 该路径将解释为相对于服务器的工作目录（在数据目录里的什么地方），而不是客户端的工作目录。</p><p>COPY FROM 会激活所有触发器和检查约束。不过，不会激活规则。</p><p>COPY 输入和输出是被 DateStyle 影响的。 为了和其它 PostgreSQL 安装移植，（它们可能用的不是缺省DateStyle 设置）， 我们应该在使用 COPY 前把 DateStyle 设置为ISO。</p><p>COPY 在第一个错误处停下来。这些在 COPY TO中不应该导致问题， 但在 COPY FROM 时目的表会已经接收到早先的行， 这些行将不可见或不可访问，但是仍然会占据磁盘空间。 如果你碰巧是拷贝很大一块数据文件的话， 积累起来，这些东西可能会占据相当大的一部分磁盘空间。你可以调用 VACUUM 来恢复那些磁盘空间。</p><p>文件格式</p><p>文本格式<br>当不带 BINARY 或者 CSV 选项使用 COPY 时， 读写的文件是一个文本文件，每行代表表中一个行。 行中的列（字段）用分隔符分开。 字段值本身是由与每个字段类型相关的输出函数生成的字符串， 或者是输入函数可接受的字串。 数据中使用特定的空值字串表示那些为 NULL 的字段。 如果输入文件的任意行包含比预期多或者少的字段，那么 COPY FROM将抛出一个错误。 如果声明了 OIDS，那么 OID 将作为第一个字段读写， 放在所有用户字段前面。</p><p>数据的结束可以用一个只包含反斜杠和句点（.）的行表示。 如果从文件中读取数据，那么数据结束的标记是不必要的， 因为文件结束起的作用就很好了；但是在 3.0 之前的客户端协议里，如果在客户端应用之间拷贝数据， 那么必须要有结束标记。</p><p>反斜杠字符（\）可以用在 COPY 里给那些会有歧义的字符进行逃逸（否则那些字符会被当做行或者字段分隔符处理）。 特别是下面的字符如果是字段值的一部分时，必须前缀一个反斜杠：反斜杠本身，换行符，回车，以及当前分隔符。</p><p>声明的空字串被 COPY TO 不加任何反斜杠发送；与之相对，COPY FROM 在删除反斜杠之前拿它的输入与空字串比较。因此，像 \N 这样的空字串不会和实际数据值 \N 之间混淆（因为后者会表现成 \N）。</p><p>COPY FROM 识别下列特殊反斜杠序列：</p><p>序列<br>代表物</p><p>\b<br>反斜杠 (ASCII 8)</p><p>\f<br>进纸 (ASCII 12)</p><p>\n<br>换行符 (ASCII 10)</p><p>\r<br>回车 (ASCII 13)</p><p>\t<br>Tab (ASCII 9)</p><p>\v<br>垂直制表符 (ASCII 11)</p><p>\digits<br>反斜杠后面跟着一到三个八进制数，表示ASCII值为该数的字符</p><p>目前，COPY TO 将绝不会发出一个八进制反斜杠序列， 但是它的确使用了上面列出的其它字符用于控制字符。</p><p>绝对不要把反斜杠放在一个数据字符N或者句点（.）前面。 这样的组合将分别被误认为是空字串或者数据结束标记。 另外一个没有在上面的表中列出的反斜杠字符就是它自己。</p><p>我们强烈建议生成 COPY 数据的应用把换行符和回车分别转换成 \n 和 \r 序列。 目前我们可以用一个反斜杠和一个回车表示一个数据回车，以及用一个反斜杠和一个换行符表示一个数据换行符。 不过，这样的表示在将来的版本中缺省时可能不会被接受。 并且，如果在不同机器之间传递 COPY 文件，也是非常容易出错的 （比如在 Unix 和 Windows 之间）。</p><p>COPY TO 将再每行的结尾是用一个 Unix 风格的换行符(&quot;\n&quot;)， 或者是在 Microsoft Windows 上运行的服务器上用（&quot;\r\n&quot;）标记一行终止，但只是用于COPY到服务器文件里； 为了在不同平台之间一致，COPY TO STDOUT总是发送 &quot;\n&quot;，不管服务器平台是什么。 COPY FROM 可以处理那些以回车符，或者换行符，或者回车换行符作为行结束的数据。 为了减少在数据中出现的未逃逸的新行或者回车导致的错误，如果输入的行结尾不像上面这些符号， COPY FROM 会发出警告。</p><p>CSV 格式<br>这个格式用于输入和输出逗号分隔数值（CSV）文件格式， 许多其它程序都用这个文件格式，比如电子报表。这个模式下生成并识别逗号分隔的 CSV 逃逸机制， 而不是使用PostgreSQL 标准文本模式的逃逸。</p><p>每条记录的值都是用 DELIMITER 字符分隔的。 如果数值本身包含分隔字符，QUOTE 字符，NULL 字串， 一个回车，或者进行字符，那么整个数值用 QUOTE 字符前缀和后缀（包围）， 并且数值里任何 QUOTE 字符或者ESCAPE 字符都前导逃逸字符。 你也可以使用 FORCE QUOTE 在输出非 NULL 的指定字段值时强制引号包围。</p><p>CSV 格式没有标准的办法区分一个 NULL 值和一个空字串。 PostgreSQL 的 COPY 通过引号包围来处理这些。 一个当作 NULL 输出的 NULL 值是没有引号包围的， 而匹配 NULL字串的数据值是用引号包围的。 因此，使用缺省设置时，一个 NULL 是写做一个无引号包围的空字串， 而一个空字串写做双引号包围（&quot;&quot;）。读取数值也遵循类似的规则。 你可以使用 FORCE NOT NULL 来避免为特定字段进行 NULL 比较。</p><p>注意: CSV 模式可以识别和生成带有引号包围的回车和进行（hang）的 CVS 文件。 因此这些文件并不像文本模式的文件那样严格地每个数据行一行。 不过，如果任何字段本身包含并不匹配 CVS 文件本身的换行符序列， 那么 PostgreSQL 会拒绝 COPY 输入。通常，输入包含行结束符的数据的时候，用文本或者二进制格式比 CSV 更安全。</p><p>注意: 许多程序生成奇怪的并且有时候不正确的 CVS 文件， 所以这个文件格式更像一种惯用格式，而不是一种标准。 因此你可能碰到一些不能使用这个机制输入的文件，而 COPY 也可能生成一些其它程序不能处理的文件。</p><p>二进制格式<br>在PostgreSQL 7.4 中的 COPY BINARY 的文件格式做了变化。新格式由一个文件头，零或多条元组， 以及文件尾组成。文件头和数据现在是网络字节序。</p><p>文件头<br>文件头由 15 个字节的固定域组成，后面跟着一个变长的头扩展区。 固定域是：</p><p>签名<br>11-字节的序列 &quot;PGBCOPY\n\377\r\n\0&quot; — 请注意字节零是签名是要求的一部分。 （使用这个签名是为了让我们能够很容易看出文件是否已经被一个非 8 位安全的转换器给糟蹋了。 这个签名会被行结尾转换过滤器，删除字节零，删除高位，或者奇偶的改变而改变。）</p><p>标志域<br>32 位整数掩码表示该文件格式的重要方面。 位是从 0（LSB）到 31 （MSB）编码的 — 请注意这个域是以网络字节序存储的（高位在前）， 后继的整数都是如此。位 16 - 31 是保留用做关键文件格式信息的； 如果读者发现一个不认识的位出现在这个范围内，那么它应该退出。 位 0-15 都保留为标志向后兼容的格式使用；读者可以忽略这个范围内的不认识的位。目前只定义了一个标志位，而其它的必须是零：</p><p>Bit 16<br>如果为 1，那么在数据中包括了 OID；如果为 0，则没有</p><p>头扩展范围长度<br>32 位整数，以字节计的头剩余长度，不包括自身。目前，它是零， 后面紧跟第一条元组。对该格式的更多的修改都将允许额外的数据出现在头中。 读者应该忽略任何它不知道该如何处理的头扩展数据。</p><p>头扩展数据是一个用来保留一个自定义的数据序列块用的。这个标志域无意告诉读者扩展区的内容是什么。头扩展的具体设计内容留给以后的版本用。</p><p>这样设计就允许向下兼容头附加（增加头扩展块，或者设置低位序标志位）以及非向下兼容修改（设置高位标志位以标识这样的修改， 并且根据需要向扩展区域增加支持数据）。</p><p>元组<br>每条元组都以一个 16 位整数计数开头，该计数是元组中字段的数目。 （目前，在一个表里的每条元组都有相同的计数，但可能不会永远这样。） 然后后面不断出现元组中的各个字段，字段先是一个 32 位的长度字，后面跟着那么长的字段数据。 （长度字并不包括自己，并且可以为零。）一个特例是：-1 表示一个 NULL 字段值。 在 NULL 情况下，后面不会跟着数值字节。</p><p>在数据域之间没有对奇填充或者任何其它额外的数据。</p><p>目前，一个 COPY BINARY 文件里的所有数据值都假设是二进制格式的（格式代码为一）。 预计将来的扩展可能增加一个头域，允许为每个字段声明格式代码。</p><p>为了判断实际元组数据的正确的二进制格式，你应该阅读 PostgreSQL 源代码， 特别是该字段数据类型的*send 和 *recv 函数（典型的函数可以在源代码的src&#x2F;backend&#x2F;utils&#x2F;adt&#x2F; 目录找到）。</p><p>如果在文件中包括了 OID，那么该 OID 域立即跟在字段计数字后面。 它是一个普通的字段，只不过它没有包括在字段计数。但它包括长度字 — 这样就允许我们不用花太多的劲就可以处理 4 字节和 8 字节的 OID，并且如果某个家伙允许 OID 是可选的话，那么还可以把 OID 显示成空。</p><p>文件尾<br>文件尾包括保存着 -1 的一个 16 位整数字。这样就很容易与一条元组的域计数字相区分。</p><p>如果一个域计数字既不是 -1 也不是预期的字段的数目，那么读者应该报错。 这样就提供了对丢失与数据的同步的额外的检查。</p><p>例子<br>下面的例子把一个表拷贝到客户端， 使用竖直条（|）作为域分隔符：</p><p>COPY country TO STDOUT WITH DELIMITER ‘|’;<br>从一个 Unix 文件中拷贝数据到一个country表中：</p><p>COPY country FROM ‘&#x2F;usr1&#x2F;proj&#x2F;bray&#x2F;sql&#x2F;country_data’;<br>下面是一个可以从 STDIN 中拷贝数据到表中的例子：</p><p>AF AFGHANISTAN AL ALBANIA DZ ALGERIA ZM ZAMBIA ZW ZIMBABWE<br>请注意在这里每行里的空白实际上是一个水平制表符 tab。</p><p>下面的是同样的数据，在一台 Linux&#x2F;i586 机器上以二进制形式输出。 这些数据是用 Unix 工具 od -c 过滤之后输出的。 该表有三个字段；第一个是 char(2)， 第二个是text， 第三个是integer。所有的行在第三个域都是一个 null 值。</p><p>0000000 P G C O P Y \n 377 \r \n \0 \0 \0 \0 \0 \0 0000020 \0 \0 \0 \0 003 \0 \0 \0 002 A F \0 \0 \0 013 A 0000040 F G H A N I S T A N 377 377 377 377 \0 003 0000060 \0 \0 \0 002 A L \0 \0 \0 007 A L B A N I 0000100 A 377 377 377 377 \0 003 \0 \0 \0 002 D Z \0 \0 \0 0000120 007 A L G E R I A 377 377 377 377 \0 003 \0 \0 0000140 \0 002 Z M \0 \0 \0 006 Z A M B I A 377 377 0000160 377 377 \0 003 \0 \0 \0 002 Z W \0 \0 \0 \b Z I 0000200 M B A B W E 377 377 377 377 377 377</p><p>兼容性<br>在 SQL 标准里没有 COPY 语句。</p><p>PostgreSQL 7.3 以前使用下面的语法，现在仍然支持：</p><p>COPY [ BINARY ] tablename [ WITH OIDS ] FROM { ‘filename’ | STDIN } [ [USING] DELIMITERS ‘delimiter’ ] [ WITH NULL AS ‘null string’ ] COPY [ BINARY ] tablename [ WITH OIDS ] TO { ‘filename’ | STDOUT } [ [USING] DELIMITERS ‘delimiter’ ] [ WITH NULL AS ‘null string’ ]<br>————————————————<br>版权声明：本文为CSDN博主「DemonHunter211」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/kwame211/article/details/75968013">https://blog.csdn.net/kwame211/article/details/75968013</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Perl学习笔记</title>
    <link href="/2021/04/02/Perl%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/04/02/Perl%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>scalar(@_)； 可以取数组长度  $a &#x3D; @a; 数组大小</p><p>local 给全局变量分配临时值在局部使用</p><p>state 关键字需要使用use feture &quot;state&quot;;</p><p>使用时间转换函数需要引入</p><p>use POSIX fw(strftime);</p><p>strftime &quot;%a&quot; ,localtime;</p><p>ref可以用来判断变量的类型</p><p>使用\$,\@,\%,\*,\&amp; 来引用，使用$, @ 或 % 来去掉引用，类似于c中的指针，引用函数只需要\&amp;函数名即可（$cref &#x3D; \&amp;function_name），再使用引用调用函数&amp;$cref()</p><p>uc &#x2F; lc 转换大小写</p><p>$param &#x3D;~ s&#x2F;^ <em>(.</em>?) *$&#x2F;$1&#x2F; 使用正则替换，可以使用后向引用</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Oracle</title>
    <link href="/2021/04/02/Oracle/"/>
    <url>/2021/04/02/Oracle/</url>
    
    <content type="html"><![CDATA[<p>查询建表语句 ：select dbms_metadata.get_ddl(‘TABLE’,’name’) from dual;</p><p>查看存储过程： select dbms_metadata.get_ddl(‘PROCEDURE’,’BSA_PROC_FTP_MGMT’,’CLARO’) from dual;</p><h4 id="trunc"><a href="#trunc" class="headerlink" title="trunc()"></a>trunc()</h4><p>下面日期操作有误，仅做参考</p><p>1.select trunc(sysdate) from dual –2013-01-06 今天的日期为2013-01-06<br>2.select trunc(sysdate, ‘mm’) from dual –2013-01-01 返回当月第一天.<br>3.select trunc(sysdate,’yy’) from dual –2013-01-01 返回当年第一天<br>4.select trunc(sysdate,’dd’) from dual –2013-01-06 返回当前年月日<br>5.select trunc(sysdate,’yyyy’) from dual –2013-01-01 返回当年第一天<br>6.select trunc(sysdate,’d’) from dual –2013-01-06 (星期天)返回当前星期的第一天<br>7.select trunc(sysdate, ‘hh’) from dual –2013-01-06 17:00:00 当前时间为17:35<br>8.select trunc(sysdate, ‘mi’) from dual –2013-01-06 17:35:00 TRUNC()函数没有秒的精确</p><p>&#x2F;*<br>TRUNC（number,num_digits）<br>Number 需要截尾取整的数字。<br>Num_digits 用于指定取整精度的数字。Num_digits 的默认值为 0。<br>TRUNC()函数截取时不进行四舍五入<br>*&#x2F;<br>9.select trunc(123.458) from dual –123<br>10.select trunc(123.458,0) from dual –123<br>11.select trunc(123.458,1) from dual –123.4<br>12.select trunc(123.458,-1) from dual –120<br>13.select trunc(123.458,-4) from dual –0<br>14.select trunc(123.458,4) from dual –123.458<br>15.select trunc(123) from dual –123<br>16.select trunc(123,1) from dual –123<br>17.select trunc(123,-1) from dual –120</p><p>oracle数据库控制台的删除变成^H的解决办法</p><p>在linux服务器下登录oracle的控制台，如果输入错误，想用删除键删除时却不能删除，打出的是^H的字符。</p><p>用如下的命令可以使删除键生效：</p><p>$ stty erase ^H</p><p>恢复以前的设置的命令是：</p><p>$  stty erase ^？</p><p>select table_name from all_tables; 查看所有表</p><p>select table_name from user_tables; 查看用户表</p><p>desc table_name; 查看表结构</p><p>select * from table_name where rownum &lt; 10; 查看前rownum 小于10的数据</p><p>ROWNUM是一个序列，bai是oracle数据库du从数据文件或缓冲区中读取数据的顺序。它取得第一条记录则rownum值为1，第二条为2，依次类推。ROWNUM是一个序列，是oracle数据库从数据文件或缓冲区中读取数据的顺序。它取得第一条记录则rownum值为1，第二条为2，依次类推。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux下使用Vim常用的一些命令</title>
    <link href="/2021/03/30/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8Vim%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/"/>
    <url>/2021/03/30/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8Vim%E5%B8%B8%E7%94%A8%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="方法一-：块选择模式"><a href="#方法一-：块选择模式" class="headerlink" title="方法一 ：块选择模式"></a>方法一 ：块选择模式</h2><p>批量注释：</p><p>Ctrl + v 进入块选择模式，然后移动光标选中你要注释的行，再按大写的I进入行首插入模式输入注释符号如 &#x2F;&#x2F; 或 #，输入完毕之后，按两下ESC，Vim会自动将你选中的所有行首都加上注释，保存退出完成注释。</p><p>取消注释：</p><p>Ctrl + v 进入块选择模式，选中你要删除的行首的注释符号，注意&#x2F;&#x2F; 要选中两个，选好之后按d即可删除注释，ESC保存退出。</p><h2 id="方法二-替换命令"><a href="#方法二-替换命令" class="headerlink" title="方法二 替换命令"></a>方法二 替换命令</h2><p>批量注释：</p><p>使用下面命令在指定的行首添加注释：</p><p>:起始行号,结束行号s&#x2F;^&#x2F;注释符&#x2F;g</p><p>取消注释：</p><p>:起始行号,结束行号s&#x2F;^注释符&#x2F;&#x2F;g</p><p>例子：</p><p>在10 - 20行添加 &#x2F;&#x2F; 注释</p><p>:10,20s#^#&#x2F;&#x2F;#g</p><p>在10 - 20行删除 &#x2F;&#x2F; 注释</p><p>:10,20s#^&#x2F;&#x2F;##g</p><p>在10 - 20行添加 # 注释</p><p>:10,20s&#x2F;^&#x2F;#&#x2F;g</p><p>在10 - 20行删除 # 注释</p><p>:10,20s&#x2F;^&#x2F;#&#x2F;g</p><blockquote><p>注意：替换方法的例子中正则的分割符使用的是相反的符号，如果匹配&#x2F;&#x2F; 那么使用 #作分隔符这样不需要对&#x2F;作转义处理，节省输入次数。</p></blockquote><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:s/return/ret/g</span><br><span class="hljs-symbol">:%s/return/ret/g</span><br></code></pre></td></tr></table></figure><h1 id="快速清空文件"><a href="#快速清空文件" class="headerlink" title="快速清空文件"></a>快速清空文件</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">gg</span> <span class="hljs-comment"># 跳到行首</span><br>dG <span class="hljs-comment"># 删除直到末尾</span><br></code></pre></td></tr></table></figure><h1 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h1><p>行首</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ctrl</span> + v<br></code></pre></td></tr></table></figure><p>按向下箭头选中行，按 &gt; 或者 &lt; 调整缩进</p><h1 id="括号寻找"><a href="#括号寻找" class="headerlink" title="括号寻找"></a>括号寻找</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>光标移动到第一个括号位置，按下%将跳到相应的闭合括号位置</p><h1 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h1><h2 id="删除后原位置留空"><a href="#删除后原位置留空" class="headerlink" title="删除后原位置留空"></a>删除后原位置留空</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ctrl + v <br>上下左右箭头选中<br>按下D<br></code></pre></td></tr></table></figure><h2 id="删除后内容上移"><a href="#删除后内容上移" class="headerlink" title="删除后内容上移"></a>删除后内容上移</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">ctrl + v <br>上下左右箭头选中<br>按下:d 或者:%d<br></code></pre></td></tr></table></figure><h1 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">gg<br>ctrl + v <br>G <br>=<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gg=G<br></code></pre></td></tr></table></figure><p>缩进</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">:10,100&lt; //将10到100行向左缩进<br></code></pre></td></tr></table></figure><p>可以使用<code>:set shiftwidth = 2</code>设置缩进，也可以放在<code>.vimrc</code>中</p><h1 id="删除一个单词"><a href="#删除一个单词" class="headerlink" title="删除一个单词"></a>删除一个单词</h1><p>通常要先将光标移动到单词头部，在末行模式按下<code>b</code>即可，再按下<code>dw</code>即可删除。或者直接输入<code>daw</code>删除单词。另外还有一个删除字符<code>x</code>可以在末行模式使用</p><h1 id="删除光标后的内容"><a href="#删除光标后的内容" class="headerlink" title="删除光标后的内容"></a>删除光标后的内容</h1><p>直接<code>D</code></p><h1 id="剪切内容，下面的内容上移"><a href="#剪切内容，下面的内容上移" class="headerlink" title="剪切内容，下面的内容上移"></a>剪切内容，下面的内容上移</h1><p><code>v</code> &#x2F; <code>ctrl + v</code> 选中<br><code>:d</code> 回车<br><code>p</code> 粘贴</p><h1 id="单词间移动"><a href="#单词间移动" class="headerlink" title="单词间移动"></a>单词间移动</h1><p><code>w</code>&#x2F;<code>e</code> 后， <code>b</code>前</p><h1 id="vim-折行"><a href="#vim-折行" class="headerlink" title="vim 折行"></a>vim 折行</h1><h2 id="折叠方式"><a href="#折叠方式" class="headerlink" title="折叠方式"></a>折叠方式</h2><p>可用选项 ‘foldmethod’ 来设定折叠方式：set fdm&#x3D;*****。<br>有 6 种方法来选定折叠：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">manual       手工定义折叠<br><span class="hljs-built_in">indent</span>       更多的缩进表示更高级别的折叠<br>expr         用表达式来定义折叠<br><span class="hljs-keyword">syntax</span>       用语法高亮来定义折叠<br>diff         对没有更改的文本进行折叠<br>marker       对文中的标志折叠<br></code></pre></td></tr></table></figure><blockquote><p>注意，每一种折叠方式不兼容，如不能即用expr又用marker方式，我主要轮流使用indent和marker方式进行折叠。</p></blockquote><p>使用时，用：set fdm&#x3D;marker 命令来设置成marker折叠方式（fdm是foldmethod的缩写）。<br>要使每次打开vim时折叠都生效，则在.vimrc文件中添加设置，如添加：set fdm&#x3D;syntax，就像添加其它的初始化设置一样。</p><h2 id="折叠命令"><a href="#折叠命令" class="headerlink" title="折叠命令"></a>折叠命令</h2><p>选取了折叠方式后，我们就可以对某些代码实施我们需要的折叠了，由于我使用indent和marker稍微多一些，故以它们的使用为例：<br>如果使用了indent方式，vim会自动的对大括号的中间部分进行折叠，我们可以直接使用这些现成的折叠成果。<br>在可折叠处（大括号中间）：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">zc    折叠<br>zC    对所在范围内所有嵌套的折叠点进行折叠<br>zo    展开折叠<br>zO    对所在范围内所有嵌套的折叠点展开<br><span class="hljs-string">[z    到当前打开的折叠的开始处。</span><br><span class="hljs-string">]</span>z    到当前打开的折叠的末尾处。<br>zj    向下移动。到达下一个折叠的开始处。关闭的折叠也被计入。<br>zk    向上移动到前一折叠的结束处。关闭的折叠也被计入。<br></code></pre></td></tr></table></figure><p>当使用marker方式时，需要用标计来标识代码的折叠，系统默认是<code>&#123;&#123;&#123;`和`&#125;&#125;&#125;</code>，最好不要改动之：）<br>我们可以使用下面的命令来创建和删除折叠：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gcode">zf     创建折叠，比如在marker方式下： zf<span class="hljs-number">56</span>G，创建从当前行起到<span class="hljs-number">56</span>行的代码折叠； <span class="hljs-number">10</span>zf或<span class="hljs-number">10</span>zf+或zf<span class="hljs-number">10</span>↓，创建从当前行起到后<span class="hljs-number">10</span>行的代码折叠。 <span class="hljs-number">10</span>zf-或zf<span class="hljs-number">10</span>↑，创建从当前行起到之前<span class="hljs-number">10</span>行的代码折叠。 在括号处zf<span class="hljs-meta">%</span>，创建从当前行起到对应的匹配的括号上去（（），&#123;&#125;，[]，&lt;&gt;等）。<br>zd     删除 <span class="hljs-comment">(delete)</span> 在光标下的折叠。仅当 <span class="hljs-string">&#x27;foldmethod&#x27;</span> 设为 <span class="hljs-string">&quot;manual&quot;</span> 或 <span class="hljs-string">&quot;marker&quot;</span> 时有效。<br>zD     循环删除 <span class="hljs-comment">(Delete)</span> 光标下的折叠，即嵌套删除折叠。 仅当 <span class="hljs-string">&#x27;foldmethod&#x27;</span> 设为 <span class="hljs-string">&quot;manual&quot;</span> 或 <span class="hljs-string">&quot;marker&quot;</span> 时有效。<br>zE     除去 <span class="hljs-comment">(Eliminate)</span> 窗口里“所有”的折叠。 仅当 <span class="hljs-string">&#x27;foldmethod&#x27;</span> 设为 <span class="hljs-string">&quot;manual&quot;</span> 或 <span class="hljs-string">&quot;marker&quot;</span> 时有效。<br></code></pre></td></tr></table></figure><h1 id="查看-x2F-修改十六进制或者二进制文件等"><a href="#查看-x2F-修改十六进制或者二进制文件等" class="headerlink" title="查看&#x2F;修改十六进制或者二进制文件等"></a>查看&#x2F;修改十六进制或者二进制文件等</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">hexdump <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">xxd <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">vim -<span class="hljs-selector-tag">b</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-class">.txt</span><br></code></pre></td></tr></table></figure><p>xxd是linux的一个命令，vim可以通过”!”来调用外部命令，其功能就是进行十六进制的dump或者反之。</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-symbol">:%</span>!od <br><span class="hljs-symbol">:%</span>!xxd<br><span class="hljs-symbol">:%</span>!xxd -r <span class="hljs-number">16</span>进制转为<span class="hljs-number">2</span>进制<br></code></pre></td></tr></table></figure><p>参考：<a href="http://blog.chinaunix.net/uid-29767867-id-4413135.html">http://blog.chinaunix.net/uid-29767867-id-4413135.html</a><br>推荐：<a href="https://blog.csdn.net/xxxxxx91116/article/details/8042312">https://blog.csdn.net/xxxxxx91116/article/details/8042312</a></p><h2 id="执行shell脚本报错-x2F-usr-x2F-bin-x2F-env-‘bash-r’-No-such-file-or-directory"><a href="#执行shell脚本报错-x2F-usr-x2F-bin-x2F-env-‘bash-r’-No-such-file-or-directory" class="headerlink" title="执行shell脚本报错&#x2F;usr&#x2F;bin&#x2F;env: ‘bash\r’: No such file or directory"></a>执行shell脚本报错&#x2F;usr&#x2F;bin&#x2F;env: ‘bash\r’: No such file or directory</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">vim release.sh<br>:<span class="hljs-built_in">set</span> ff # 查看fileformat 应该是dos<br>:<span class="hljs-built_in">set</span> <span class="hljs-attribute">ff</span>=unix # 设置为unix<br>:wq<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP笔记</title>
    <link href="/2021/03/10/php%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/03/10/php%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ol><li><p>iconv(‘charset in’,’charset out’,$str); mb_convert_encoding($str,’charsetout’,’charsetin’);</p></li><li><p>get_class_methods() 获取类方法，需要传递一个类名字符串 例如 People::class &#x2F; ‘People’ ，get_class_vars() 获取类属性同上 。以上两个方法只能获取类中的public属性和方法。get_object_vars()</p></li><li><p>set_exception_handler()</p></li><li><p>ord() 返回字符串首个字符的ACSCII</p></li><li><p>array_fill() 填充数组，range() 生成一个范围的数组</p></li><li><p>json_encode($arr,JSON_UNESCAPED_UNICODE) #256 将unicode转为汉字</p></li><li><p>zip_open()</p></li><li><p>strpos 这类函数需要注意判断时候使用&#x3D;&#x3D;&#x3D;false ,并且搜索值都要为字符串，数字要用引号</p></li><li><p>array_map($call,$arr) $call 只接受一个参数即数组的值 array_walk($arr,$call) $call接受两个参数即数组的值和键,preg_replace_callback() 这三个函数容易和闭包用在一起</p></li><li><p>pack()  unpack()</p></li><li><p>call_user_func() call_user_fuc_array()  第一个参数可以是数组形式的一个类&#x2F;实例的方法，例如[‘test’,’eat’] 表示test类的eat方法，或者[$a,’eat’]表示$a实例的eat方法</p></li><li><p>compact()  extract()从数组中将变量导入到符号表</p></li><li><p>php7新特性 $a??$b等同于isset($a) ? $a:$b,$a?:$b 等同于!empty($a) ? $a:$b</p></li><li><p>array_shift() array_pop() array_unshift() array_push()</p></li><li><p>array_merge_recursive() 不会对键进行覆盖而是相同键名递归组成一个数组</p></li><li><p>substr_count统计“子字符串”在“原始字符串中出现的次数</p></li><li><p>CLASS获取当前类名，get_class(对象)获取类名，get_called_class() 多用在继承的子类中获取主调类</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$class_name</span> = <span class="hljs-title function_ invoke__">get_called_class</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>[<span class="hljs-variable">$class_name</span>])) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>[<span class="hljs-variable">$class_name</span>];<br>        &#125;<br>        <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>[<span class="hljs-variable">$class_name</span>] = <span class="hljs-keyword">new</span> <span class="hljs-variable">$class_name</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$instance</span>[<span class="hljs-variable">$class_name</span>];<br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>constant() 返回一个常量的值</p></li><li><p>abs()取得绝对值</p></li><li><p>str_pad() 填补奇数位则右边优先，sprintf(”%05d”,1) 右边补零5个， sprintf(”%01.3f”,1);用一个小数点后最少三位不足三位补零，小数点前最少一位，不足一位补零的浮点数格式化后边的参数，sprintf(format,arg1,arg2,arg++) </p></li><li><p>php可变参数个数，或者使用func_get_args() func_get_arg() func_num_args()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params">...<span class="hljs-variable">$a</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$a</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-title function_ invoke__">test</span>(<span class="hljs-number">10</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure></li><li><p>strlen()计算的是字符串的总字节数，mb_strlen()计算字符个数；gbk中文1.5个（单个时占2个）；utf中文占1个字符（开启mbstring扩展，二是要指定字符集）。</p></li><li><p>http_build_query()函数的作用是使用给出的关联（或下标）数组生成一个经过 URL-encode 的请求字符串。</p></li><li><p>PHP中的ignore_user_abort函数是当用户关掉终端后脚本不停止仍然在执行，可以用它来实现计划任务与持续进程</p></li><li><p>eval()</p></li><li><p>unset() 引用变量时候会检查变量是否还存在引用，存在的话之销毁该变量而不销毁变量的值</p></li><li><p>realpath(‘..’) dirname()  getcwd()  </p></li><li><p>session_set_cookie_params();</p></li><li><p>获取header ：get_headers() ,$http_response_header ,stream_get_meta_data() ,curl扩展</p></li><li><p>ob_start()</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;one&#x27;</span>;<br><span class="hljs-variable">$data</span>[] = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br><span class="hljs-title function_ invoke__">ob_flush</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;two&#x27;</span>;<br><span class="hljs-variable">$data</span>[] = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br><span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure></li><li><p>quotemeta() 函数在字符串中某些预定义的字符前添加反斜杠。</p></li></ol><p>预定义的字符：</p><ul><li>句号（.）</li><li>反斜杠（\）</li><li>加号（+）</li><li>星号（*）</li><li>问号（?）</li><li>方括号（[]）</li><li>脱字号（^）</li><li>美元符号（$）</li><li>圆括号（()）</li></ul><p><strong>提示：</strong>该函数可用于转义拥有特殊意义的字符，比如 SQL 中的 ( )、[ ] 以及 * 。</p><p><strong>注释：</strong>该函数是二进制安全的。</p><h1 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h1><ol><li><p>缓存控制中间件</p></li><li><p>算力（也称哈希率）是比特币网络处理能力的度量单位。即为计算机（<a href="https://baike.baidu.com/item/CPU/120556">CPU</a>）计算哈希函数输出的速度。比特币网络必须为了安全目的而进行密集的数学和加密相关操作。 例如，当网络达到10Th&#x2F;s的哈希率时，意味着它可以每秒进行10万亿次计算。</p></li><li><p>迭代是重复反馈过程的活动，其目的通常是为了逼近所需目标或结果。每一次对过程的重复称为一次“迭代”，而每一次迭代得到的结果会作为下一次迭代的初始值。</p><p>重复执行一系列运算步骤，从前面的量依次求出后面的量的过程。此过程的每一次结果，都是由对前一次所得结果施行相同的运算步骤得到的。例如利用迭代法*求某一数学问题的解。</p><p>对计算机特定程序中需要反复执行的子程序*(一组指令)，进行一次重复，即重复执行程序中的循环，直到满足某条件为止，亦称为迭代。（php迭代器）生成器是一个简单的迭代器</p></li><li><p>URI（Uniform Resource Identifier统一资源标识符）标识抽象或者物理资源的紧凑字符串</p><p>URL（Uniform Resource Locator统一资源定位器）定位资源主要访问机制的字符串</p><p>URN（Uniform Resource Name[统一资源名称）通过特定命名空间中的唯一名称或ID来标识资源</p><p>例如：身份证号是URN,家庭地址就是URL。</p></li><li><p>权重：一指某一因素或指标相对于某一事物的重要程度，其不同于一般的比重，体现的不仅仅是某一因素或指标所占的百分比，强调的是因素或指标的相对重要程度，倾向于贡献度或重要性。通常，权重可通过划分多个层次指标进行判断和计算，常用的方法包括层次分析法、模糊法、模糊层次分析法和专家评价法等；二指贡献度；三指权利、大权。</p></li><li><p>汉字的ASCII</p><p>汉字的ASCII是负数是因为你错误使用有符号的整型观察它，它实质上不是负数。</p><p>相关问题细节如下：</p><ol><li><p>英文标准的ASCII码中只有128个符号，只需要7位，但是计算机分配存储的最基本单位是字节，至少是8位，因此最高位为0；</p></li><li><p>因此常见的西文符号的ASCII都是在0-127之间，无论是有符号还是无符号去观察它们，都是正的。</p></li><li><p>中文的符号远超过256个，因此用一个字节不能存储汉字，早期的GB2312采用了两个字节。</p></li><li><p>但是很麻烦的问题是一个汉字用两个字节存储在计算机中后，和两个西文字母的ASCII混淆，为了避免这个混淆，汉字两个字节的最高位都是1。</p></li><li><p>如果用有符号的数去读取一个汉字的内容，最高位的1正好和负号位置相同，因此此时就会发现汉字的内吗是负的。</p><p>实质上汉字应该用字符型而不是整型去读取和显示它。## 术语</p></li></ol></li></ol><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>HttpOnly可选,设置了HttpOnly属性的cookie不能使用,JavaScript 经由Document.cookie属性,XMLHttpRequest和Request APIs进行访问，以防范跨站脚本攻击(xSS)。</p><p>1.如何设计一个高并发的系统<br>①数据库的优化，包括合理的事务隔离级别、SQL语句优化、索引的优化使用缓存，尽量减少数据库IO</p><p>考虑到当前的局限性，在MySQL 5.7的生存期内将继续支持查询缓存。MySQL 8.0将不支持查询缓存，并且鼓励用户升级以使用服务器端查询重写或ProxySQL作为中间人缓存。<br><a href="https://mysqlserverteam.com/mysql-8-0-retiring-support-for-the-query-cache/">MySQL 8.0：不再支持查询缓存</a></p><p>分布式数据库、分布式缓存服务器的负载均衡</p><ol><li><p>php如何实现保存网络图片（代码）</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_exists_S3</span>(<span class="hljs-params"><span class="hljs-variable">$url</span></span>)</span><br><span class="hljs-function"> </span>&#123;    <br><span class="hljs-variable">$state</span> = @<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$url</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//获取网络资源的字符内容</span><br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$state</span>)&#123;        <br><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;dMYHis&quot;</span>).<span class="hljs-string">&#x27;.jpg&#x27;</span>;<span class="hljs-comment">//文件名称生成</span><br><br>        <span class="hljs-title function_ invoke__">ob_start</span>();<span class="hljs-comment">//打开输出</span><br><br>        <span class="hljs-title function_ invoke__">readfile</span>(<span class="hljs-variable">$url</span>);<span class="hljs-comment">//输出图片文件</span><br><br>        <span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<span class="hljs-comment">//得到浏览器输出</span><br><br>        <span class="hljs-title function_ invoke__">ob_end_clean</span>();<span class="hljs-comment">//清除输出并关闭</span><br><br>        <span class="hljs-variable">$size</span> = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$img</span>);<span class="hljs-comment">//得到图片大小</span><br><br>        <span class="hljs-variable">$fp2</span> = @<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;a&quot;</span>);        <br><br>        <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fp2</span>, <span class="hljs-variable">$img</span>);<span class="hljs-comment">//向当前目录写入图片文件，并重新命名</span><br><br>        <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fp2</span>);        <br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    &#125; <span class="hljs-keyword">else</span>&#123;        <br><br>           <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>           &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure></li><li><p>ASCII : 0 -&gt; 48 A -&gt; 65 a -&gt; 97</p></li><li><p>是一条错误的笔记</p></li><li><p>在utf8mb4编码下英文占用1字节，一般汉字占用3字节， emoji表情占用4字节。可以使用length(字段)或者char_length(字段)查询长度</p></li><li><p>优先级 算比逻条赋[赋值大于and|or]逗 </p></li><li><p>GD库1.6.2版以前支持GIF格式，但因GIF格式使用LZW演算法牵涉专利权，因此在GD1.6.2版之后不支持GIF的格式。如果你是WINDOWS的环境，你只要进入PHP.INI文件找到extension&#x3D;php_gd2.dll，将#去除，重启APACHE即可，如果你是Linux环境，又想支持GIF，PNG，JPEG，你需要去<a href="http://www.libpng.org/pub/png/libpng.html">下载libpng</a>，<a href="http://www.zlib.net/">zlib</a>，以及<a href="http://www.freetype.org/">freetype字体</a>并安装。</p></li><li><p>一般视为无差，utc是以原子时计时，更加精准，适应现代社会的精确计时。不过一般使用不需要精确到秒时，视为等同。gmt是前世界标准时，utc是现世界标准时。每年格林尼治天文台会发调时信息，基于utc。格林尼治bai标准时间（GMT，旧译“格林威治平du均时间”或“zhi格林威治标准时间”）是指位于伦敦郊区的dao皇家格林尼治天文台的标准时间，因为本初子午线被定义在通过那里的经线。UTC表示世界协调时 GMT表示东八区，中国时区，协调世界时(UTC)  英文：Coordinated Universal Time ，别称：世界统一时间，世界标准时间，国际协调时间， 协调世界时，又称世界统一时间，世界标准时间，国际协调时间，简称UTC。它从英文“Coordinated Universal Time”／法文“Temps Universel Cordonné”而来。GMT（Greenwish Mean Time 格林威治平时），这是UTC的民间名称。GMT&#x3D;UTC。</p></li><li><p>短语运算符 $a &gt; 0 &amp;&amp; echo ‘$a &gt; 0’;</p></li><li><p>用ini_set修改session.save_handler要把 “session.auto_start &#x3D; 1 改成 session.auto_start &#x3D; 0 </p></li><li><p>常量和变量的性能上的区别：简单数据类型如整数等，常量编译采用立即数方式，要快一点，也节约空间；变量采用间接寻址，慢一两个周期，需要额外空间。如果是复杂数据类型，例如字符串就差不多了。</p></li><li><p>使用系统类需要加到根空间即\线，才能调用根空间的类。或者引入use \PDO,下面就可以不写斜线。异常类也需要加斜线或者引入，出错终止需要封锁运行</p></li><li><p><code>self</code>调用静态方法时(本类)，是在子类未实例化调用之前就已经绑定完毕，所以原先在父类中指向的就是父类中的方法。而<code>static</code>是在实例化的时候才进行绑定指向的是此时实例化的类，也就是子类。</p></li><li><p>计算机字长指的是计算机一次能处理的二进制数的位数，例如16，32，64位，这样的一个数称为一个字，类似的还有双字，多字。</p></li><li><p>正数的原码法码和补码相同，负数的反码为原码除了符号位之外的数字取反之后加1，补码是为了让计算机更好的计算减法，同时统一符号位和整数位。</p></li><li><p>在不开启 持久链接 PDO::ATTR_PERSISTENT  情况下脚本结束的时候会自动关闭连接</p></li><li><p>Heredoc :PHP定界符的作用就是按照原样，包括换行格式什么的，输出在其内部的东西；2.在PHP定界符中的任何特殊字符都不需要转义；3.PHP定界符中的PHP变量会被正常的用其值来替换。这个可以用来保存大段的文本比较有用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&lt;&lt;&lt;EOT</span><br><span class="hljs-string">//内容</span><br><span class="hljs-string">EOT</span>; <span class="hljs-comment">//前面不能有任何空格或缩进</span><br></code></pre></td></tr></table></figure></li><li><p>静态局部变量的初始化是在编译时进行的，因此在程序开始执行的时候就始终存在，也就是说它的生命期为整个源程序，但是其作用域仍与自动变量相同。在定义时用常量或者常量表达式进行赋值。未赋值编译时系统自动赋值为0。静态局部变量具有可继承性。 </p></li><li><p>TP数据库操作，Db类插入数据的insert里第二个参数，传入ture，怎么做到有数据就更新，没有数据就插入</p><p>replace into 跟 insert 功能类似，不同点在于：replace into 首先尝试插入数据到表中，如果发现表中已经有此行数据（根据主键或者唯一索引判断）则先删除此行数据，然后插入新的数据。 否则，直接插入新数据。<br>要注意的是：插入数据的表必须有主键或者是唯一索引！否则的话，replace into 会直接插入数据，这将导致表中出现重复的数据。</p></li></ol><h2 id="PHP静态类型变量的销毁"><a href="#PHP静态类型变量的销毁" class="headerlink" title="PHP静态类型变量的销毁"></a>PHP静态类型变量的销毁</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Teacher</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-built_in">static</span> <span class="hljs-variable">$_instance</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$_props</span> = [];<br>    <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>       <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;666&#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getInstance</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">empty</span>(<span class="hljs-built_in">self</span>::<span class="hljs-variable">$_instance</span>)) &#123;<br>            <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-built_in">self</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">self</span>::<span class="hljs-variable">$_instance</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setProperty</span>(<span class="hljs-params"><span class="hljs-variable">$key</span>, <span class="hljs-variable">$val</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;_props[<span class="hljs-variable">$key</span>] = <span class="hljs-variable">$val</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getProperty</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;_props[<span class="hljs-variable">$key</span>];<br>    &#125;<br>&#125;<br><span class="hljs-variable">$t1</span> = <span class="hljs-title class_">Teacher</span>::<span class="hljs-title function_ invoke__">getInstance</span>();<br><span class="hljs-variable">$t1</span>-&gt;<span class="hljs-title function_ invoke__">setProperty</span>(<span class="hljs-string">&#x27;name&#x27;</span>, <span class="hljs-string">&#x27;lily&#x27;</span>);<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$t1</span>);<br><span class="hljs-comment">//var_dump($t1);</span><br><span class="hljs-variable">$t2</span> = <span class="hljs-title class_">Teacher</span>::<span class="hljs-title function_ invoke__">getInstance</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$t2</span>-&gt;<span class="hljs-title function_ invoke__">getProperty</span>(<span class="hljs-string">&#x27;name&#x27;</span>);<br></code></pre></td></tr></table></figure><p>上例代码中虽然unset了$t1但是$t2仍能取到name的值。但如果不是单例模式是动态的对象存储时则不行。</p><p>如果在函数中 <strong>unset()</strong> 一个静态变量，那么在函数内部此静态变量将被销毁。但是，当再次调用此函数时，此静态变量将被复原为上次被销毁之前的值。来源：<a href="http://php.net/manual/zh/function.unset.php">http://php.net/manual/zh/function.unset.php</a></p><p>所以，我们要注销一个静态变量，需要重新静态定义该变量为null。</p><p>参考如下 ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">static</span> <span class="hljs-variable">$test</span>;<br>    <span class="hljs-variable">$test</span>++;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$test</span> . <span class="hljs-string">&quot; &quot;</span>); <span class="hljs-comment">//1</span><br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$test</span>);<br>    <span class="hljs-variable">$test</span> = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">echo</span>(<span class="hljs-variable">$test</span> . <span class="hljs-string">&quot; &quot;</span>);  <span class="hljs-comment">//2</span><br>&#125;<br><span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-title function_ invoke__">test</span>();<br><span class="hljs-title function_ invoke__">test</span>();<br></code></pre></td></tr></table></figure><p>输出 ：1 2 2 2 3 2</p><p>因为每次定义static $test时被销毁的值被重新拿了回来并继续向下+1；而下方的$test在函数结束一次调用后即被销毁。</p><p>##获取文件格式码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br><span class="hljs-variable">$bin</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span><br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-variable">$strInfo</span> = @<span class="hljs-title function_ invoke__">unpack</span>(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);<br><span class="hljs-variable">$typeCode</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);<br></code></pre></td></tr></table></figure><h2 id="bindParam和bindValue的区别"><a href="#bindParam和bindValue的区别" class="headerlink" title="bindParam和bindValue的区别"></a>bindParam和bindValue的区别</h2><ol><li><p>PDOStatement::bindParam不能绑定常量，而bindValue可以绑定常量 如 $stm-&gt;bindParam(“:sex”,$sex); &#x2F;&#x2F;正确  $stm-&gt;bindParam(“:sex”,”female”); &#x2F;&#x2F;错误  $stm-&gt;bindValue(“:sex”,$sex); &#x2F;&#x2F;正确  $stm-&gt;bindValue(“:sex”,”female”); &#x2F;&#x2F;正确</p></li><li><p>bindParam 变量被以引用方式绑定到点位符上,而且仅仅当调用PDOStatement::execute()时才会去计算具体被绑定变量在PDOStatement::execute()被调用时的值. 例如，使用bindParam方式：</p></li></ol><p>bindColumn bindValue bindParam</p><p>bindparam只能传递引用，而bindvalue可以传递值或者引用</p><h2 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf()"></a>sprintf()</h2><p>参数 <em>format</em> 是转换的格式，以百分比符号 (“%”) 开始到转换字符结束。下面的可能的 <em>format</em>值：</p><ul><li>%% - 返回百分比符号</li><li>%b - 二进制数</li><li>%c - 依照 ASCII 值的字符</li><li>%d - 带符号十进制数</li><li>%e - 可续计数法（比如 1.5e+3）</li><li>%u - 无符号十进制数</li><li>%f - 浮点数(local settings aware)</li><li>%F - 浮点数(not local settings aware)</li><li>%o - 八进制数</li><li>%s - 字符串</li><li>%x - 十六进制数（小写字母）</li><li>%X - 十六进制数（大写字母）</li></ul><p>arg1, arg2, ++ 等参数将插入到主字符串中的百分号 (%) 符号处。该函数是逐步执行的。在第一个 % 符号中，插入 arg1，在第二个 % 符号处，插入 arg2，依此类推。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>   <br><span class="hljs-variable">$number</span> = <span class="hljs-number">123</span>;<br><span class="hljs-variable">$txt</span> = <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%f&quot;</span>,<span class="hljs-variable">$number</span>); <br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$txt</span>;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>\3. 格式数字 number_format()</p><p>保留两位小数并且四舍五入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$num</span> = <span class="hljs-number">123213.8889</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%.2f&quot;</span>, <span class="hljs-variable">$num</span>);<br></code></pre></td></tr></table></figure><p>   保留两位小数并且不四舍五入</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$num</span> = <span class="hljs-number">123213.666666</span>;   <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%.2f&quot;</span>,<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">sprintf</span>(<span class="hljs-string">&quot;%.3f&quot;</span>, <span class="hljs-variable">$num</span>), <span class="hljs-number">0</span>, -<span class="hljs-number">2</span>));  <br></code></pre></td></tr></table></figure><p>php进一法取整</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">ceil</span>(<span class="hljs-number">4.3</span>);    <span class="hljs-comment">// 5   </span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">ceil</span>(<span class="hljs-number">9.999</span>);  <span class="hljs-comment">// 10  </span><br></code></pre></td></tr></table></figure><p>php舍去法，取整数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">floor</span>(<span class="hljs-number">4.3</span>);   <span class="hljs-comment">// 4 </span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">floor</span>(<span class="hljs-number">9.999</span>); <span class="hljs-comment">// 9  </span><br></code></pre></td></tr></table></figure><p>预定义接口</p><p><code>Traversable</code> 可遍历接口<br><code>Countable</code> 可count接口</p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><p>XSS又叫CSS（cross-site script）,跨站脚本攻击。恶意攻击者往Web页面里插入恶意html代码，当用户浏览该页时，嵌入其中Web里面的html代码会被执行，从而达到恶意用户的特殊目的</p><h5 id="办法：htmlspecialchars"><a href="#办法：htmlspecialchars" class="headerlink" title="办法：htmlspecialchars()"></a>办法：<code>htmlspecialchars()</code></h5><p><code>htmlspecialchars()</code>把一些预定义的字符转换为html实体。</p><h3 id="PHP包含"><a href="#PHP包含" class="headerlink" title="PHP包含"></a>PHP包含</h3><h4 id="include和require"><a href="#include和require" class="headerlink" title="include和require"></a>include和require</h4><p>include与require语句用于在执行流中插入卸载其他文件中的有用的代码。<br>include和require除了处理错误的方式不同之外，在其他地方都是相同的</p><ul><li>require生成一个致命错误(E_COMPILE_ERROR),在错误发生后脚本会停止执行</li><li>include生成一个警告(E_WARNING)，在错误发生后脚本会继续执行</li></ul><h5 id="include-once及require-once只引入一次，且使用后失效，多次引入也只能使用一次"><a href="#include-once及require-once只引入一次，且使用后失效，多次引入也只能使用一次" class="headerlink" title="include_once及require_once只引入一次，且使用后失效，多次引入也只能使用一次"></a><code>include_once</code>及<code>require_once</code>只引入一次，且使用后失效，多次引入也只能使用一次</h5><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>cookie常用于识别用户。是一种服务器留在用户计算机上的小文件，当同一台计算机通过浏览器请求页面时，这台计算机将会发送cookie<br>创建Cookie:<code>setcookie(name,value,expire,path,domain)</code><br>取回cookie的值：<code>$_COOKIE</code><br>使用 <code>isset()</code>函数确认是否已经设置了cookie</p><h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>session变量用于存储关于用户会话(session)的信息，或者更改用户会话的设置。<br>session变量存储单一用户的信息，并对于应用程序中所有页面都是可用的。<br>session通过在服务器生存储用户信息以便随后使用，会话信息是临时的，在用户离开网站后将被删除。<br>session工作机制：为每个访客创建一个唯一的id（UID），并基于这个UID来存储变量。UID存储在cookie中，或者通过URL进行传导<br>开启session:<code>session_start()</code><br>存储和获得session变量：<code>$_SESSION</code><br>销毁session：<code>unset()</code>或者<code>session_destroy()</code>（session_destroy彻底重置session，将失去所有的session数据）</p><h3 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h3><h4 id="基本的错误处理-使用die-函数"><a href="#基本的错误处理-使用die-函数" class="headerlink" title="基本的错误处理:使用die()函数"></a>基本的错误处理:使用die()函数</h4><h4 id="创建自定义错误处理器"><a href="#创建自定义错误处理器" class="headerlink" title="创建自定义错误处理器"></a>创建自定义错误处理器</h4><p>语法：<br><code>error_function(error_level,error_message,error_file,error_line,error_context)</code></p><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">error_level</td><td align="left">必需。为用户定义的错误规定错误报告级别</td></tr><tr><td align="left">error_message</td><td align="left">必需。为用户定义的错误规定错误消息</td></tr><tr><td align="left">error_file</td><td align="left">可选。规定错误发声的文件名</td></tr><tr><td align="left">error_line</td><td align="left">可选。规定错误发生的行号</td></tr><tr><td align="left">error_context</td><td align="left">可选。规定一个数组，包含了当错误发生时在用的每个变量和值</td></tr></tbody></table><h4 id="设置错误处理程序"><a href="#设置错误处理程序" class="headerlink" title="设置错误处理程序"></a>设置错误处理程序</h4><p>PHP的默认错误处理程序是内建的错误处理程序。可以修改错误处理程序，使其仅应用到某些错误，这样脚本就能以不同的方式处理不同的错误。<br><code>set_error_handler(eorr_name,error_level)</code></p><h4 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h4><p>默认情况下，根据在php.ini中的error_log配置，使用error_log()函数，可以向指定文件或远程目的地发送错误记录</p><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><p>异常处理用于在指定的错误发生时改变脚本的正常流程。<br>当异常发生时，通常会：</p><ul><li>当前代码状态被保存</li><li>代码执行被切换到预定义（自定义）的异常处理器函数</li><li>根据情况，处理其也会从保存的代码状态重新开始执行代码，种植脚本执行，或从代码中另外的位置继续执行脚本</li></ul><p><strong>注意</strong>：异常应该仅仅在错误情况下使用，而不应该用在一个指定的点跳转到代码的另一个位置</p><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p>过滤器用于验证和过滤来自非安全来源的数据<br>测试、验证和过滤用户输入或自定义数据是任何Web应用程序的重要组成部分</p><h4 id="为什么使用过滤器？"><a href="#为什么使用过滤器？" class="headerlink" title="为什么使用过滤器？"></a>为什么使用过滤器？</h4><p>几乎所有的Web应用程序都以来外部的输入。这些数据通常来自用户或其他应用程序。通过使用过滤器，能够保证应用程序获取正确的输入类型。<br>什么是外部数据？</p><ul><li>来自表单的输入数据</li><li>Cookies</li><li>Web services data</li><li>服务器变量</li><li>数据库查询结果</li></ul><h4 id="函数和过滤器"><a href="#函数和过滤器" class="headerlink" title="函数和过滤器"></a>函数和过滤器</h4><p>过滤变量，函数：</p><ul><li><code>filter_var()</code>通过一个指定的过滤器来过滤单一的变量</li><li><code>filter_var_array()</code>通过相同或不同的顾虑其来过滤多个变量</li><li><code>filter_input</code>获取一个输入变量，并对它进行过滤</li><li><code>filter_input_array</code>获取多个输入变量，并通过相同的或不同的过滤器对它们进行过滤</li></ul><h4 id="Validating-和-Sanitizing"><a href="#Validating-和-Sanitizing" class="headerlink" title="Validating 和 Sanitizing"></a>Validating 和 Sanitizing</h4><p>Validating过滤器：</p><ul><li>用于验证用户输入</li><li>严格的格式规则</li><li>成功则返回预期的类型，否则返回false</li></ul><p>Sanlitizing过滤器：</p><ul><li>用于允许或禁止字符串中指定的字符</li><li>无数据格式规则</li><li>始终返回字符串</li></ul><p><a href="http://blog.kaiot.xyz/read/52.html">http://blog.kaiot.xyz/read/52.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP判断文件是不是图片</title>
    <link href="/2021/03/07/PHP%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E6%98%AF%E4%B8%8D%E6%98%AF%E5%9B%BE%E7%89%87/"/>
    <url>/2021/03/07/PHP%E5%88%A4%E6%96%AD%E6%96%87%E4%BB%B6%E6%98%AF%E4%B8%8D%E6%98%AF%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>&gt; php判断文件是不是图片的方法：1、利用getimagesize函数获取图片信息，然后进行判断；2、读取图片的前2个字节，然后进行判断；3、利用exif_imagetype函数实现判断。</p><h1 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h1><p>利用 <code>getimagesize</code> 函数获取图片信息，然后进行判断：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;?php<br><br><span class="hljs-comment">/* Author @ Huoty</span><br><span class="hljs-comment">* Date @ 2015-11-24 16:59:26</span><br><span class="hljs-comment">* Brief @</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$types</span> = <span class="hljs-string">&#x27;.gif|.jpeg|.png|.bmp&#x27;</span>; <span class="hljs-comment">//定义检查的图片类型</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$info</span> = @<span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$filename</span>)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">image_type_to_extension</span>(<span class="hljs-variable">$info</span>[<span class="hljs-string">&#x27;2&#x27;</span>]);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$types</span>, <span class="hljs-variable">$ext</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">isImage</span>(<span class="hljs-string">&#x27;isimg.txt&#x27;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">isImage</span>(<span class="hljs-string">&#x27;1.jpg&#x27;</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;是图片&#x27;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;不是图片&#x27;</span>;<br>&#125;<br>?&amp;gt;<br></code></pre></td></tr></table></figure><h1 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h1><p>读取图片的前 2 个字节，然后判断是不是图片：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;?php<br><br><span class="hljs-comment">/* Author @ Huoty</span><br><span class="hljs-comment">* Date @ 2015-11-25 16:42:38</span><br><span class="hljs-comment">* Brief @</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//判断上传的是不是图片</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImg</span>(<span class="hljs-params"><span class="hljs-variable">$fileName</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$fileName</span>, &amp;quot;rb&amp;quot;);<br>    <span class="hljs-variable">$bin</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">// 只读2字节</span><br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$strInfo</span> = @<span class="hljs-title function_ invoke__">unpack</span>(&amp;quot;C2chars&amp;quot;, <span class="hljs-variable">$bin</span>);<br>    <span class="hljs-variable">$typeCode</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>] . <span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);<br>    <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$typeCode</span> == <span class="hljs-number">255216</span> <span class="hljs-comment">/*jpg*/</span> || <span class="hljs-variable">$typeCode</span> == <span class="hljs-number">7173</span> <span class="hljs-comment">/*gif*/</span> || <span class="hljs-variable">$typeCode</span> == <span class="hljs-number">13780</span> <span class="hljs-comment">/*png*/</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$typeCode</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// echo &#x27;&amp;quot;仅允许上传jpg/jpeg/gif/png格式的图片！&#x27;;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">isImg</span>(&amp;quot;<span class="hljs-number">1</span>.jpg&amp;quot;)) &#123;<br>    <span class="hljs-keyword">echo</span> &amp;quot;是图片&amp;quot;;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> &amp;quot;不是图片&amp;quot;;<br>&#125;<br><br>?&amp;gt;<br></code></pre></td></tr></table></figure><h1 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h1><p>最后一种方法是利用 exif_imagetype 函数，该函数用于判断一个图像的类型，采用这种方法更加简单。读取一个图像的第一个字节并检查其签名。 如果发现了恰当的签名则返回一个对应的常量，否则返回 FALSE。返回值和 getimagesize() 返回的数组中的索引 2 的值是一样的，但该函数要快得多。</p><p>该函数的返回值常量定义如下：</p><ol><li>IMAGETYPE_GIF</li><li>IMAGETYPE_JPEG</li><li>IMAGETYPE_PNG</li><li>IMAGETYPE_SWF</li><li>IMAGETYPE_PSD</li><li>IMAGETYPE_BMP</li><li>IMAGETYPE_TIFF_II（Intel 字节顺序）</li><li>IMAGETYPE_TIFF_MM（Motorola 字节顺序）</li><li>IMAGETYPE_JPC</li><li>IMAGETYPE_JP2</li><li>IMAGETYPE_JPX</li><li>IMAGETYPE_JB2</li><li>IMAGETYPE_SWC</li><li>IMAGETYPE_IFF</li><li>IMAGETYPE_WBMP</li><li>IMAGETYPE_XBM</li></ol><p>示例：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;?php<br><br><span class="hljs-comment">/* Author @ Huoty</span><br><span class="hljs-comment">* Date @ 2015-11-25 16:53:04</span><br><span class="hljs-comment">* Brief @</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-variable">$mimetype</span> = <span class="hljs-title function_ invoke__">exif_imagetype</span>(&amp;quot;<span class="hljs-number">1</span>.jpg&amp;quot;);<br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$mimetype</span> == IMAGETYPE_GIF || <span class="hljs-variable">$mimetype</span> == IMAGETYPE_JPEG || <span class="hljs-variable">$mimetype</span> == IMAGETYPE_PNG || <span class="hljs-variable">$mimetype</span> == IMAGETYPE_BMP) &#123;<br>    <span class="hljs-keyword">echo</span> &amp;quot;是图片&amp;quot;;<br>&#125;<br><br>?&amp;gt;<br></code></pre></td></tr></table></figure><p>[原文地址](<a href="https://www.php.cn/php-ask-460801.html">https://www.php.cn/php-ask-460801.html</a> &quot;原文地址&quot;)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux shell中2&amp;gt;&amp;amp;1的含义解释 （全网最全，看完就懂）</title>
    <link href="/2021/03/01/Linux%20shell%E4%B8%AD2&amp;gt;&amp;amp;1%E7%9A%84%E5%90%AB%E4%B9%89%E8%A7%A3%E9%87%8A%20%EF%BC%88%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8%EF%BC%8C%E7%9C%8B%E5%AE%8C%E5%B0%B1%E6%87%82%EF%BC%89/"/>
    <url>/2021/03/01/Linux%20shell%E4%B8%AD2&amp;gt;&amp;amp;1%E7%9A%84%E5%90%AB%E4%B9%89%E8%A7%A3%E9%87%8A%20%EF%BC%88%E5%85%A8%E7%BD%91%E6%9C%80%E5%85%A8%EF%BC%8C%E7%9C%8B%E5%AE%8C%E5%B0%B1%E6%87%82%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="A-首先了解下1和2在Linux中代表什么"><a href="#A-首先了解下1和2在Linux中代表什么" class="headerlink" title="A.首先了解下1和2在Linux中代表什么"></a>A.首先了解下1和2在Linux中代表什么</h1><p>在Linux系统中0 1 2是一个文件描述符</p><table><thead><tr><th>名称</th><th>代码</th><th>操作符</th><th>Java中表示</th><th>Linux 下文件描述符（Debian 为例)</th></tr></thead><tbody><tr><td>标准输入(stdin)</td><td>0</td><td>&lt; 或 &lt;&lt;</td><td>System.in</td><td>&#x2F;dev&#x2F;stdin -&gt; &#x2F;proc&#x2F;self&#x2F;fd&#x2F;0 -&gt; &#x2F;dev&#x2F;pts&#x2F;0</td></tr><tr><td>标准输出(stdout)</td><td>1</td><td>&gt;, &gt;&gt;, 1&gt; 或 1&gt;&gt;</td><td>System.out</td><td>&#x2F;dev&#x2F;stdout -&gt; &#x2F;proc&#x2F;self&#x2F;fd&#x2F;1 -&gt; &#x2F;dev&#x2F;pts&#x2F;0</td></tr><tr><td>标准错误输出(stderr)</td><td>2</td><td>2&gt; 或 2&gt;&gt;</td><td>System.err</td><td>&#x2F;dev&#x2F;stderr -&gt; &#x2F;proc&#x2F;self&#x2F;fd&#x2F;2 -&gt; &#x2F;dev&#x2F;pts&#x2F;0</td></tr></tbody></table><p>上面表格引用自<a href="https://yanbin.blog/linux-input-output-redirection/">这里</a><br>从上表看的出来，我们平时使用的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &amp;quot;hello&amp;quot; &amp;gt; t.log<br></code></pre></td></tr></table></figure><p>其实也可以写成</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &amp;quot;hello&amp;quot; 1&amp;gt; t.log<br></code></pre></td></tr></table></figure><h1 id="B-关于2-gt-amp-1的含义"><a href="#B-关于2-gt-amp-1的含义" class="headerlink" title="B.关于2&gt;&amp;1的含义"></a>B.关于2&gt;&amp;1的含义</h1><p>（关于输入&#x2F;输出重定向本文就不细说了，不懂的可以参考这里，主要是要了解&gt; &lt; &lt;&lt; &gt;&gt; &lt;&amp; &gt;&amp; 这6个符号的使用）</p><p>含义：将标准错误输出重定向到标准输出<br>符号&gt;&amp;是一个整体，不可分开，分开后就不是上述含义了。<br>比如有些人可能会这么想：2是标准错误输入，1是标准输出，&gt;是重定向符号，那么&quot;将标准错误输出重定向到标准输出&quot;是不是就应该写成&quot;2&gt;1&quot;就行了？是这样吗？<br>如果是尝试过，你就知道2&gt;1的写法其实是将标准错误输出重定向到名为&quot;1&quot;的文件里去了<br>写成2&amp;&gt;1也是不可以的<br>C.为什么2&gt;&amp;1要放在后面<br>考虑如下一条shell命令</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">nohup java -jar app.jar <span class="hljs-symbol">&amp;gt;</span>log 2<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;amp;</span>1 <span class="hljs-symbol">&amp;amp;</span><br></code></pre></td></tr></table></figure><p>(最后一个&amp;表示把条命令放到后台执行，不是本文重点，不懂的可以自行Google)<br>为什么2&gt;&amp;1一定要写到&gt;log后面，才表示标准错误输出和标准输出都定向到log中？<br>我们不妨把1和2都理解是一个指针,然后来看上面的语句就是这样的：</p><ol><li>本来1—–&gt;屏幕 （1指向屏幕）</li><li>执行&gt;log后， 1—–&gt;log (1指向log)</li><li>执行2&gt;&amp;1后， 2—–&gt;1 (2指向1，而1指向log,因此2也指向了log)</li></ol><p>再来分析下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nohup java -jar app.jar 2&amp;gt;&amp;amp;1 &amp;gt;log &amp;amp;<br></code></pre></td></tr></table></figure><ol><li>本来1—–&gt;屏幕 （1指向屏幕）</li><li>执行2&gt;&amp;1后， 2—–&gt;1 (2指向1，而1指向屏幕,因此2也指向了屏幕)</li><li>执行&gt;log后， 1—–&gt;log (1指向log，2还是指向屏幕)</li></ol><p>所以这就不是我们想要的结果。<br><strong>简单做个试验测试下上面的想法</strong>：<br>java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Htest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(&amp;quot;out1&amp;quot;);<br>        System.err.println(&amp;quot;error1&amp;quot;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>javac编译后运行下面指令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">java Htest 2<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;amp;</span>1 <span class="hljs-symbol">&amp;gt;</span> log<br></code></pre></td></tr></table></figure><p>你会在终端上看到只输出了&quot;error1&quot;，log文件中则只有&quot;out1&quot;</p><p>D.每次都写&quot;&gt;log 2&gt;&amp;1&quot;太麻烦，能简写吗？<br>有以下两种简写方式</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;amp;</span><span class="hljs-symbol">&amp;gt;</span>log<br><br><span class="hljs-symbol">&amp;amp;</span>log<br></code></pre></td></tr></table></figure><p>比如上面小节中的写法就可以简写为：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">nohup <span class="hljs-keyword">java </span>-<span class="hljs-keyword">jar </span>app.<span class="hljs-keyword">jar </span>&amp;amp<span class="hljs-comment">;&amp;gt;log &amp;amp;</span><br></code></pre></td></tr></table></figure><p>上面两种方式都和<code>&amp;gt;log 2&amp;gt;&amp;amp;1</code>一个语义。<br>那么 上面两种方式中&amp;&gt;和&gt;&amp;有区别吗？<br><strong>语义上是没有任何区别的，但是第一中方式是最佳选择，一般使用第一种</strong></p><p>参考：<br><a href="https://unix.stackexchange.com/questions/89386/what-is-symbol-and-in-unix-linux">https://unix.stackexchange.com/questions/89386/what-is-symbol-and-in-unix-linux</a><br><a href="https://superuser.com/questions/335396/what-is-the-difference-between-and-in-bash">https://superuser.com/questions/335396/what-is-the-difference-between-and-in-bash</a><br>————————————————<br>版权声明：本文为CSDN博主「一个行走的民」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/zhaominpro/article/details/82630528">https://blog.csdn.net/zhaominpro/article/details/82630528</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>composer使用笔记</title>
    <link href="/2021/02/13/composer%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/02/13/composer%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget https://mirrors.cloud.tencent.com/composer/composer.phar<br>mv composer.phar  /usr/local/bin/composer<br></code></pre></td></tr></table></figure><p>#更换源</p><blockquote><p>首先要分清楚是局部换源还是全局换源</p></blockquote><h2 id="1、局部换源-仅对当前项目有效"><a href="#1、局部换源-仅对当前项目有效" class="headerlink" title="1、局部换源(仅对当前项目有效)"></a>1、局部换源(仅对当前项目有效)</h2><p>在当前项目下的composer.json中添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;repositories&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;composer&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://packages.example.com&quot;</span> <span class="hljs-comment">//第一个源</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;composer&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;http://packages.example.com&quot;</span> <span class="hljs-comment">//第二个源</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;git&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://git.url&quot;</span><br><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;path&quot;</span><span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/php/pacakge&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>寻找包的过程是先从第一个源中寻找，如果找不到就从第二个源中寻找，这里可以配置多个composer资源库</p><h2 id="2、全局换源"><a href="#2、全局换源" class="headerlink" title="2、全局换源"></a>2、全局换源</h2><p>打开命令行</p><h3 id="首先把默认的源给禁用掉"><a href="#首先把默认的源给禁用掉" class="headerlink" title="首先把默认的源给禁用掉"></a>首先把默认的源给禁用掉</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer config -g secure-http false<br></code></pre></td></tr></table></figure><h3 id="修改镜像源"><a href="#修改镜像源" class="headerlink" title="修改镜像源"></a>修改镜像源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/    # 阿里<br>composer config -g repos.packagist composer https://mirrors.cloud.tencent.com/composer/ # 腾讯<br></code></pre></td></tr></table></figure><h3 id="更换为原来的源"><a href="#更换为原来的源" class="headerlink" title="更换为原来的源"></a>更换为原来的源</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer config -g repo.packagist composer https://repo.packagist.org<br></code></pre></td></tr></table></figure><h3 id="修改成功后可以先查看一下配置"><a href="#修改成功后可以先查看一下配置" class="headerlink" title="修改成功后可以先查看一下配置"></a>修改成功后可以先查看一下配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer config -g -l<br></code></pre></td></tr></table></figure><h3 id="第二行repositories-packagist-org-url-如果是阿里的就代表成功"><a href="#第二行repositories-packagist-org-url-如果是阿里的就代表成功" class="headerlink" title="第二行repositories.packagist.org.url 如果是阿里的就代表成功"></a>第二行<code>repositories.packagist.org.url</code> 如果是阿里的就代表成功</h3><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><p>如果修改了全局的话 就不用再去项目下修改composer.json配置文件了</p><p>如果当前项目的composer.json已经配置过，那会是当前项目下指定的源</p><p>文章来源：<a href="https://www.cnblogs.com/death-satan/p/12153960.html" title="composer更换源">composer更换源</a></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>composer outdated </p><blockquote><p>更新命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer self-update --preview<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer update -vvv<br></code></pre></td></tr></table></figure><blockquote><p>清除缓存命令</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer clearcache<br></code></pre></td></tr></table></figure><blockquote><p>更新到composer2 </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer self-update --2 <br></code></pre></td></tr></table></figure><p>如果使用<code>apt</code>或者<code>yum</code>等方式安装可能需要其他方法具体见官方文档。</p><blockquote><p>搜索扩展包</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">composer search max/max<br></code></pre></td></tr></table></figure><p>#自动加载</p><blockquote><p>我们在开发项目中会经常用到第三方的类库插件，但是如果每次需要使用的时候都会在代码的某一处去引入，然后在实例化，这样做感觉很不方便，那么怎么实现自动加载呢，下面简单介绍使用composer实现自动加载：</p></blockquote><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p>安装地址（中国镜像）: <a href="https://pkg.phpcomposer.com/#how-to-install-composer">https://pkg.phpcomposer.com/#how-to-install-composer</a><br>根据它的说明一步一步进行安装</p><h2 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h2><p>新建一个目录，这个目录的名称是有要求的，当你看到有提示就说名你的命名不符合要求，该目录就是后面的项目目录！</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>打开命令行控制台cmd,进入工作目录,运行<code>composer</code>命令：<code>composer init</code><br>之后会提示你输入一些包名，作者等信息，运行后会生成一个composer.json文件</p><h2 id="Install"><a href="#Install" class="headerlink" title="Install"></a>Install</h2><p>执行composer install 安装会给你安装依赖，当然你的项目刚建立是没有依赖的，所以他会给你安装composer包，composer包的结构如下：</p><ul><li>vendor<ul><li>composer</li><li>autoload_classmap.php</li><li>autoload_namespaces.php</li><li>autoload_psr4.php</li><li>autoload_real.php</li><li>autoload_static.php<br>ClassLoader.php<br>installed.json<br>LICENSE<ul><li>autoload.php</li><li>composer.json</li></ul></li></ul></li></ul><p>在你的项目中引入autoload.php就可以进行自动加载了。</p><p>你可能需要手动修改&#x2F;添加一些东西</p><h2 id="自动加载"><a href="#自动加载" class="headerlink" title="自动加载"></a>自动加载</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>打开<code>composer.json</code>文件:<br>共有四种方式：</p><ol><li>PSR-0（不推荐使用);</li><li>PSR-4;</li><li>Class-map;</li><li>Files;</li></ol><p>下面演示PSR-4实现自动加载：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;autoload&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;psr-4&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;app\\&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;../application&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>其中app\表示..&#x2F;application 目录下的类的命名空间是app</p><h3 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h3><p>新建src目录，在目录下创建IndexController.php,php文件内容如下:</p><pre><code class="hljs">//设置命名空间namespace src;class IndexController&#123;    public function index()    &#123;        echo &#39;indexController&#39;;    &#125;&#125;</code></pre><h2 id="创建类"><a href="#创建类" class="headerlink" title="创建类"></a>创建类</h2><p>在work根目录创建index.php：</p><pre><code class="hljs">//引入vendor下的autoloas.phprequire &#39;vendor/autoload.php&#39;;//实例化对象$index = new src\\IndexController();//调用类中的方法$index-&gt;index();</code></pre><p>运行后会出现报错:</p><blockquote><p>class IndexController not fund</p></blockquote><p>打开控制台,进入到work文件目录,运行composer命令:</p><blockquote><p>composer dump-autoload</p></blockquote><p>在运行<code>work</code>下的<code>index.php</code>，不报错误信息说明已经成功实现自动加载了。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>在<code>work</code>下的<code>index.php</code>文件中我们实例化IndexController类的时,格式为<code>new src\IndexController();</code>;<br>如果命名空间较长的情况下，看起来不太方便，那我们可以用<code>use</code>来引入关键字，修改index.php代码如下：</p><pre><code class="hljs">use src\IndexController;//引入vendor下的autoloas.phprequire &#39;vendor/autoload.php&#39;;//修改后的实例化$index = new IndexController();//调用类中的方法$index-&gt;index();</code></pre><p>在运行index.php结果和上面一样。<br><strong>注意：</strong>在配置完<code>composer.json</code>以后一定要运行<code>composer dump-autoload [-o] </code>不然会出现<code>class not fund;</code><br>#踩坑</p><p>已经安装composer，写好composer.bat，并且设置好了path，在cmd下可以正常使用，但是在git-bash里面不行，显示如下提示：</p><p><code>bash: composer: command not found</code></p><p>原因很可能是composer文件没有可执行权限，git-bash是以linux shell方式运行的，linux和windows文件权限管理方式不太一样。切换到composer文件所在目录，执行如下命令修复权限：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 755 composer.bat<br></code></pre></td></tr></table></figure><p>可是我发现上面的命令没有效果，这就尴尬了</p><p>其实真正的原因是，git-bash 不识别 composer.bat 文件，需要新建一个 composer 文件，输入如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/usr/bin/env sh</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">php /path/to/composer.phar $*</span><br>php `dirname $0`/composer.phar $*<br></code></pre></td></tr></table></figure><p><code>#!/usr/bin/env sh</code> 有个这一行，git-bash 会自动识别为可执行文件，不需要也不能使用 chmod 命令修改权限。</p><h1 id="忽略平台要求"><a href="#忽略平台要求" class="headerlink" title="忽略平台要求"></a>忽略平台要求</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">composer install <span class="hljs-comment">--ignore-platform-reqs</span><br></code></pre></td></tr></table></figure><p>指定php版本运行composer</p><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">php</span> /<span class="hljs-string">usr</span>/<span class="hljs-string">bin</span>/<span class="hljs-string">composer</span> <span class="hljs-built_in">create-project</span> <span class="hljs-string">max</span>/<span class="hljs-string">max</span> .<br></code></pre></td></tr></table></figure><p>这里composer需要是完整路径。</p><h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p><a href="https://docs.phpcomposer.com/">https://docs.phpcomposer.com/</a></p><h1 id="版本约束"><a href="#版本约束" class="headerlink" title="版本约束"></a>版本约束</h1><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><p>可以使用通配符来设置版本。1.0.<em>相当于&gt;&#x3D;1.0 &lt;1.1。<br>例子：1.0.</em></p><h2 id="波浪号"><a href="#波浪号" class="headerlink" title="波浪号"></a>波浪号</h2><p>我们先通过后面这个例子去解释<del>操作符的用法：</del>1.2相当于&gt;&#x3D;1.2 &lt;2.0.0，而<del>1.2.3相当于&gt;&#x3D;1.2.3 &lt;1.3.0。对于使用Semantic Versioning作为版本号标准的项目来说，这种版本约束方式很实用。例如</del>1.2定义了最小的小版本号，然后你可以升级2.0以下的任何版本而不会出问题，因为按照Semantic Versioning的版本定义，小版本的升级不应该有兼容性的问题。简单来说，<del>定义了最小的版本，并且允许版本的最后一位版本号进行升级（没懂得话，请再看一边前面的例子）。<br>例子：</del>1.2</p><blockquote><p>需要注意的是，如果<del>作用在主版本号上，例如</del>1，按照上面的说法，Composer可以安装版本1以后的主版本，但是事实上是<del>1会被当作</del>1.0对待，只能增加小版本，不能增加主版本。</p></blockquote><h2 id="折音号"><a href="#折音号" class="headerlink" title="折音号 ^"></a>折音号 ^</h2><p>^操作符的行为跟Semantic Versioning有比较大的关联，它允许升级版本到安全的版本。例如，^1.2.3相当于&gt;&#x3D;1.2.3 &lt;2.0.0，因为在2.0版本前的版本应该都没有兼容性的问题。而对于1.0之前的版本，这种约束方式也考虑到了安全问题，例如^0.3会被当作&gt;&#x3D;0.3.0 &lt;0.4.0对待。<br>例子：^1.2.3</p><h2 id="版本稳定性"><a href="#版本稳定性" class="headerlink" title="版本稳定性"></a>版本稳定性</h2><p>如果你没有显式的指定版本的稳定性，Composer会根据使用的操作符，默认在内部指定为-dev或者-stable。例如：</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><table><thead><tr><th>名称</th><th>实例</th><th>说明</th></tr></thead><tbody><tr><td>不指定版本</td><td></td><td>根据当前Path环境变量中的php版本下载最合适的最新版</td></tr><tr><td>确切的版本</td><td>6.0.1</td><td>指定下载的具体版本号</td></tr><tr><td>范围 <br> &gt; <br> &lt; <br>!&#x3D;</td><td>&gt; 6.0，&lt; 6.0</td><td>指定版本范围，自动下载该范围中的最新版</td></tr><tr><td>通配符 *</td><td>5.<em>，6.0.</em></td><td>5.* 代表版本范围 [5, 6.0) <br> 6.0.* 代表版本范围 [6.0, 6.1)</td></tr><tr><td>赋值运算符（最低版本） ~</td><td>1.2，6.1.0</td><td>~1.2 代表版本范围 [1.2, 2.0) <br> ~6.1.0 代表版本范围 [6.1.0, 6.2)</td></tr><tr><td>脱字号版本（最低版本） ^</td><td>^1.2.3</td><td>^1.2.3 代表版本范围 [1.2.3, 2.0.0)</td></tr></tbody></table><h2 id="约束内部约束"><a href="#约束内部约束" class="headerlink" title="约束内部约束"></a>约束内部约束</h2><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">1</span>.<span class="hljs-number">2</span>.<span class="hljs-number">3</span>=<span class="hljs-number">1.2.3.0</span>-stable<br>&gt;<span class="hljs-number">1</span>.<span class="hljs-number">2</span>&gt;<span class="hljs-number">1.2.0.0</span>-stable<br>&gt;=<span class="hljs-number">1</span>.<span class="hljs-number">2</span>&gt;=<span class="hljs-number">1.2.0.0</span>-dev<br>&gt;=<span class="hljs-number">1</span>.<span class="hljs-number">2</span>-stable&gt;=<span class="hljs-number">1.2.0.0</span>-stable<br>&lt;<span class="hljs-number">1</span>.<span class="hljs-number">3</span>&lt;<span class="hljs-number">1.3.0.0</span>-dev<br>&lt;=<span class="hljs-number">1</span>.<span class="hljs-number">3</span>&lt;=<span class="hljs-number">1.3.0.0</span>-stable<br><span class="hljs-number">1</span> - <span class="hljs-number">2</span>&gt;=<span class="hljs-number">1.0.0.0</span>-dev &lt;<span class="hljs-number">3.0.0.0</span>-dev<br>~<span class="hljs-number">1</span>.<span class="hljs-number">3</span>&gt;=<span class="hljs-number">1.3.0.0</span>-dev &lt;<span class="hljs-number">2.0.0.0</span>-dev<br><span class="hljs-number">1</span>.<span class="hljs-number">4</span>.*&gt;=<span class="hljs-number">1.4.0.0</span>-dev &lt;<span class="hljs-number">1.5.0.0</span>-dev<br></code></pre></td></tr></table></figure><p>例子：1.0 - 2.0<br>如果你想指定版本只要稳定版本，你可以在版本后面添加后缀-stable。<br>minimum-stability 配置项定义了包在选择版本时对稳定性的选择的默认行为。默认是stable。它的值如下（按照稳定性排序）：dev，alpha，beta，RC和stable。除了修改这个配置去修改这个默认行为，我们还可以通过稳定性标识（例如@stable和@dev）来安装一个相比于默认配置不同稳定性的版本。例如：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs perl">&#123;<br>    <span class="hljs-string">&quot;require&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;monolog/monolog&quot;</span>: <span class="hljs-string">&quot;1.0.*@beta&quot;</span>,<br>        <span class="hljs-string">&quot;acme/foo&quot;</span>: <span class="hljs-string">&quot;@dev&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>版本测试: <a href="https://semver.madewithlove.com/">https://semver.madewithlove.com/</a> ,地址可能会变更,可以参考composer官方文档</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux lsof命令详解</title>
    <link href="/2021/01/28/linux%20lsof%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <url>/2021/01/28/linux%20lsof%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>#简介<br>lsof(list open files)是一个列出当前系统打开文件的工具。在linux环境下，任何事物都以文件的形式存在，通过文件不仅仅可以访问常规数据，还可以访问网络连接和硬件。所以如传输控制协议 (TCP) 和用户数据报协议 (UDP) 套接字等，系统在后台都为该应用程序分配了一个文件描述符，无论这个文件的本质如何，该文件描述符为应用程序与基础操作系统之间的交互提供了通用接口。因为应用程序打开文件的描述符列表提供了大量关于这个应用程序本身的信息，因此通过lsof工具能够查看这个列表对系统监测以及排错将是很有帮助的。</p><p>#输出信息含义<br>在终端下输入lsof即可显示系统打开的文件，因为 lsof 需要访问核心内存和各种文件，所以必须以 root 用户的身份运行它才能够充分地发挥其功能。</p><p>直接输入lsof部分输出为:</p><pre><code class="hljs">COMMAND     PID        USER   FD      TYPE             DEVICE SIZE/OFF       NODE NAME init          1        root  cwd       DIR                8,1     4096          2 / init          1        root  rtd       DIR                8,1     4096          2 / init          1        root  txt       REG                8,1   150584     654127 /sbin/init udevd       415        root    0u      CHR                1,3      0t0       6254 /dev/null udevd       415        root    1u      CHR                1,3      0t0       6254 /dev/null udevd       415        root    2u      CHR                1,3      0t0       6254 /dev/null udevd       690        root  mem       REG                8,1    51736     302589 /lib/x86_64-linux-gnu/libnss_files-2.13.so syslogd    1246      syslog    2w      REG                8,1    10187     245418 /var/log/auth.log syslogd    1246      syslog    3w      REG                8,1    10118     245342 /var/log/syslog dd         1271        root    0r      REG                0,3        0 4026532038 /proc/kmsg dd         1271        root    1w     FIFO               0,15      0t0        409 /run/klogd/kmsg dd         1271        root    2u      CHR                1,3      0t0       6254 /dev/null</code></pre><p>每行显示一个打开的文件，若不指定条件默认将显示所有进程打开的所有文件。</p><p>lsof输出各列信息的意义如下：</p><p>COMMAND：进程的名称 PID：进程标识符</p><p>USER：进程所有者</p><p>FD：文件描述符，应用程序通过文件描述符识别该文件。如cwd、txt等 TYPE：文件类型，如DIR、REG等</p><p>DEVICE：指定磁盘的名称</p><p>SIZE：文件的大小</p><p>NODE：索引节点（文件在磁盘上的标识）</p><p>NAME：打开文件的确切名称</p><p>FD 列中的文件描述符cwd 值表示应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改,txt 类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 &#x2F;sbin&#x2F;init 程序。</p><p>其次数值表示应用程序的文件描述符，这是打开该文件时返回的一个整数。如上的最后一行文件&#x2F;dev&#x2F;initctl，其文件描述符为 10。u 表示该文件被打开并处于读取&#x2F;写入模式，而不是只读 ® 或只写 (w) 模式。同时还有大写 的W 表示该应用程序具有对整个文件的写锁。该文件描述符用于确保每次只能打开一个应用程序实例。初始打开每个应用程序时，都具有三个文件描述符，从 0 到 2，分别表示标准输入、输出和错误流。所以大多数应用程序所打开的文件的 FD 都是从 3 开始。</p><p>与 FD 列相比，Type 列则比较直观。文件和目录分别称为 REG 和 DIR。而CHR 和 BLK，分别表示字符和块设备；或者 UNIX、FIFO 和 IPv4，分别表示 UNIX 域套接字、先进先出 (FIFO) 队列和网际协议 (IP) 套接字。</p><p>#常用参数<br>lsof语法格式是： lsof ［options］ filename</p><p>lsof abc.txt 显示开启文件abc.txt的进程 lsof -c abc 显示abc进程现在打开的文件 lsof -c -p 1234 列出进程号为1234的进程所打开的文件 lsof -g gid 显示归属gid的进程情况 lsof +d &#x2F;usr&#x2F;local&#x2F; 显示目录下被进程开启的文件 lsof +D &#x2F;usr&#x2F;local&#x2F; 同上，但是会搜索目录下的目录，时间较长 lsof -d 4 显示使用fd为4的进程 lsof -i 用以显示符合条件的进程情况 lsof -i[46] [protocol][@hostname|hostaddr][:service|port]   46 –&gt; IPv4 or IPv6   protocol –&gt; TCP or UDP   hostname –&gt; Internet host name   hostaddr –&gt; IPv4地址   service –&gt; &#x2F;etc&#x2F;service中的 service name (可以不止一个)   port –&gt; 端口号 (可以不止一个)</p><p>#lsof使用实例<br>##查找谁在使用文件系统</p><p>在卸载文件系统时，如果该文件系统中有任何打开的文件，操作通常将会失败。那么通过lsof可以找出那些进程在使用当前要卸载的文件系统，如下： # lsof &#x2F;GTES11&#x2F; COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME bash 4208 root cwd DIR 3,1 4096 2 &#x2F;GTES11&#x2F; vim 4230 root cwd DIR 3,1 4096 2 &#x2F;GTES11&#x2F; 在这个示例中，用户root正在其&#x2F;GTES11目录中进行一些操作。一个 bash是实例正在运行，并且它当前的目录为&#x2F;GTES11，另一个则显示的是vim正在编辑&#x2F;GTES11下的文件。要成功地卸载&#x2F;GTES11，应该在通知用户以确保情况正常之后，中止这些进程。 这个示例说明了应用程序的当前工作目录非常重要，因为它仍保持着文件资源，并且可以防止文件系统被卸载。这就是为什么大部分守护进程（后台进程）将它们的目录更改为根目录、或服务特定的目录（如 sendmail 示例中的 &#x2F;var&#x2F;spool&#x2F;mqueue）的原因，以避免该守护进程阻止卸载不相关的文件系统。</p><p>##恢复删除的文件</p><p>当Linux计算机受到入侵时，常见的情况是日志文件被删除，以掩盖攻击者的踪迹。管理错误也可能导致意外删除重要的文件，比如在清理旧日志时，意外地删除了数据库的活动事务日志。有时可以通过lsof来恢复这些文件。 当进程打开了某个文件时，只要该进程保持打开该文件，即使将其删除，它依然存在于磁盘中。这意味着，进程并不知道文件已经被删除，它仍然可以向打开该文件时提供给它的文件描述符进行读取和写入。除了该进程之外，这个文件是不可见的，因为已经删除了其相应的目录索引节点。 在&#x2F;proc 目录下，其中包含了反映内核和进程树的各种文件。&#x2F;proc目录挂载的是在内存中所映射的一块区域，所以这些文件和目录并不存在于磁盘中，因此当我们对这些文件进行读取和写入时，实际上是在从内存中获取相关信息。大多数与 lsof 相关的信息都存储于以进程的 PID 命名的目录中，即 &#x2F;proc&#x2F;1234 中包含的是 PID 为 1234 的进程的信息。每个进程目录中存在着各种文件，它们可以使得应用程序简单地了解进程的内存空间、文件描述符列表、指向磁盘上的文件的符号链接和其他系统信息。lsof 程序使用该信息和其他关于内核内部状态的信息来产生其输出。所以lsof 可以显示进程的文件描述符和相关的文件名等信息。也就是我们通过访问进程的文件描述符可以找到该文件的相关信息。 当系统中的某个文件被意外地删除了，只要这个时候系统中还有进程正在访问该文件，那么我们就可以通过lsof从&#x2F;proc目录下恢复该文件的内容。 假如由于误操作将&#x2F;var&#x2F;log&#x2F;messages文件删除掉了，那么这时要将&#x2F;var&#x2F;log&#x2F;messages文件恢复的方法如下： 首先使用lsof来查看当前是否有进程打开&#x2F;var&#x2F;logmessages文件，如下： # lsof |grep &#x2F;var&#x2F;log&#x2F;messages syslogd 1283 root 2w REG 3,3 5381017 1773647 &#x2F;var&#x2F;log&#x2F;messages (deleted) 从上面的信息可以看到 PID 1283（syslogd）打开文件的文件描述符为 2。同时还可以看到&#x2F;var&#x2F;log&#x2F;messages已经标记被删除了。因此我们可以在 &#x2F;proc&#x2F;1283&#x2F;fd&#x2F;2 （fd下的每个以数字命名的文件表示进程对应的文件描述符）中查看相应的信息，如下： # head -n 10 &#x2F;proc&#x2F;1283&#x2F;fd&#x2F;2 Aug 4 13:50:15 holmes86 syslogd 1.4.1: restart. Aug 4 13:50:15 holmes86 kernel: klogd 1.4.1, log source &#x3D; &#x2F;proc&#x2F;kmsg started. Aug 4 13:50:15 holmes86 kernel: Linux version 2.6.22.1-8 (<a href="mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#x65;&#118;&#x65;&#114;&#x65;&#115;&#x74;&#98;&#117;&#105;&#108;&#100;&#x65;&#x72;&#46;&#108;&#x69;&#x6e;&#117;&#x78;&#45;&#x72;&#101;&#x6e;&#x2e;&#x6f;&#114;&#x67;">&#x72;&#x6f;&#x6f;&#x74;&#64;&#x65;&#118;&#x65;&#114;&#x65;&#115;&#x74;&#98;&#117;&#105;&#108;&#100;&#x65;&#x72;&#46;&#108;&#x69;&#x6e;&#117;&#x78;&#45;&#x72;&#101;&#x6e;&#x2e;&#x6f;&#114;&#x67;</a>) (gcc version 4.2.0) #1 SMP Wed Jul 18 11:18:32 EDT 2007 Aug 4 13:50:15 holmes86 kernel: BIOS-provided physical RAM map: Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 0000000000000000 - 000000000009f000 (usable) Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 000000000009f000 - 00000000000a0000 (reserved) Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 0000000000100000 - 000000001f7d3800 (usable) Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 000000001f7d3800 - 0000000020000000 (reserved) Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 00000000e0000000 - 00000000f0007000 (reserved) Aug 4 13:50:15 holmes86 kernel: BIOS-e820: 00000000f0008000 - 00000000f000c000 (reserved) 从上面的信息可以看出，查看 &#x2F;proc&#x2F;8663&#x2F;fd&#x2F;15 就可以得到所要恢复的数据。如果可以通过文件描述符查看相应的数据，那么就可以使用 I&#x2F;O 重定向将其复制到文件中，如: cat &#x2F;proc&#x2F;1283&#x2F;fd&#x2F;2 &gt; &#x2F;var&#x2F;log&#x2F;messages 对于许多应用程序，尤其是日志文件和数据库，这种恢复删除文件的方法非常有用。</p><p>可以列出被进程所打开的文件的信息。被打开的文件可以是</p><p>1.普通的文件，2.目录  3.网络文件系统的文件，4.字符设备文件  5.(函数)共享库  6.管道，命名管道 7.符号链接</p><p>8.底层的socket字流，网络socket，unix域名socket</p><p>9.在linux里面，大部分的东西都是被当做文件的…..还有其他很多</p><p>#怎样使用lsof</p><p>这里主要用案例的形式来介绍lsof 命令的使用</p><p>1.列出所有打开的文件:</p><p>lsof</p><p>备注: 如果不加任何参数，就会打开所有被打开的文件，建议加上一下参数来具体定位</p><ol start="2"><li>查看谁正在使用某个文件</li></ol><p>lsof   &#x2F;filepath&#x2F;file</p><p>3.递归查看某个目录的文件信息</p><p>lsof +D &#x2F;filepath&#x2F;filepath2&#x2F;</p><p>备注: 使用了+D，对应目录下的所有子目录和文件都会被列出</p><ol start="4"><li>比使用+D选项，遍历查看某个目录的所有文件信息 的方法</li></ol><p>lsof | grep ‘&#x2F;filepath&#x2F;filepath2&#x2F;’</p><ol start="5"><li>列出某个用户打开的文件信息</li></ol><p>lsof  -u username</p><p>备注: -u 选项，u其实是user的缩写</p><ol start="6"><li>列出某个程序所打开的文件信息</li></ol><p>lsof -c mysql</p><p>备注: -c 选项将会列出所有以mysql开头的程序的文件，其实你也可以写成lsof | grep mysql,但是第一种方法明显比第二种方法要少打几个字符了</p><ol start="7"><li>列出多个程序多打开的文件信息</li></ol><p>lsof -c mysql -c apache</p><ol start="8"><li>列出某个用户以及某个程序所打开的文件信息</li></ol><p>lsof -u test -c mysql</p><ol start="9"><li>列出除了某个用户外的被打开的文件信息</li></ol><p>lsof   -u ^root</p><p>备注：^这个符号在用户名之前，将会把是root用户打开的进程不让显示</p><ol start="10"><li>通过某个进程号显示该进行打开的文件</li></ol><p>lsof -p 1</p><ol start="11"><li>列出多个进程号对应的文件信息</li></ol><p>lsof -p 123,456,789</p><ol start="12"><li>列出除了某个进程号，其他进程号所打开的文件信息</li></ol><p>lsof -p ^1</p><p>13 . 列出所有的网络连接</p><p>lsof -i</p><ol start="14"><li>列出所有tcp 网络连接信息</li></ol><p>lsof  -i tcp</p><ol start="15"><li>列出所有udp网络连接信息</li></ol><p>lsof  -i udp</p><ol start="16"><li>列出谁在使用某个端口</li></ol><p>lsof -i :3306</p><ol start="17"><li>列出谁在使用某个特定的udp端口</li></ol><p>lsof -i udp:55</p><p>特定的tcp端口</p><p>lsof -i tcp:80</p><ol start="18"><li>列出某个用户的所有活跃的网络端口</li></ol><p>lsof  -a -u test -i</p><ol start="19"><li>列出所有网络文件系统</li></ol><p>lsof -N</p><p>20.域名socket文件</p><p>lsof -u</p><p>21.某个用户组所打开的文件信息</p><p>lsof -g 5555</p><ol start="22"><li>根据文件描述列出对应的文件信息</li></ol><p>lsof -d description(like 2)</p><ol start="23"><li>根据文件描述范围列出文件信息</li></ol><p>lsof -d 2-3</p><p>#实用命令</p><p>lsof <code>which httpd</code> &#x2F;&#x2F;那个进程在使用apache的可执行文件 lsof &#x2F;etc&#x2F;passwd &#x2F;&#x2F;那个进程在占用&#x2F;etc&#x2F;passwd lsof &#x2F;dev&#x2F;hda6 &#x2F;&#x2F;那个进程在占用hda6 lsof &#x2F;dev&#x2F;cdrom &#x2F;&#x2F;那个进程在占用光驱 lsof -c sendmail &#x2F;&#x2F;查看sendmail进程的文件使用情况 lsof -c courier -u ^zahn &#x2F;&#x2F;显示出那些文件被以courier打头的进程打开，但是并不属于用户zahn lsof -p 30297 &#x2F;&#x2F;显示那些文件被pid为30297的进程打开 lsof -D &#x2F;tmp 显示所有在&#x2F;tmp文件夹中打开的instance和文件的进程。但是symbol文件并不在列<br>lsof -u1000 &#x2F;&#x2F;查看uid是100的用户的进程的文件使用情况 lsof -utony &#x2F;&#x2F;查看用户tony的进程的文件使用情况 lsof -u^tony &#x2F;&#x2F;查看不是用户tony的进程的文件使用情况(^是取反的意思) lsof -i &#x2F;&#x2F;显示所有打开的端口 lsof -i:80 &#x2F;&#x2F;显示所有打开80端口的进程 lsof -i -U &#x2F;&#x2F;显示所有打开的端口和UNIX domain文件 lsof -i UDP@[url]<a href="http://www.akadia.com:123/">www.akadia.com:123</a> &#x2F;&#x2F;显示那些进程打开了到<a href="http://www.akadia.com的udp的123(ntp)端口的链接/">www.akadia.com的UDP的123(ntp)端口的链接</a> lsof -i <a href="mailto:&#116;&#x63;&#112;&#64;&#x6f;&#x68;&#x61;&#x68;&#x61;&#46;&#107;&#115;&#x2e;&#101;&#100;&#x75;&#x2e;&#x74;&#x77;">&#116;&#x63;&#112;&#64;&#x6f;&#x68;&#x61;&#x68;&#x61;&#46;&#107;&#115;&#x2e;&#101;&#100;&#x75;&#x2e;&#x74;&#x77;</a>:ftp -r &#x2F;&#x2F;不断查看目前ftp连接的情况(-r，lsof会永远不断的执行，直到收到中断信号,+r，lsof会一直执行，直到没有档案被显示,缺省是15s刷新) lsof -i <a href="mailto:&#x74;&#x63;&#112;&#64;&#x6f;&#104;&#x61;&#x68;&#97;&#x2e;&#107;&#115;&#46;&#101;&#100;&#x75;&#46;&#x74;&#x77;">&#x74;&#x63;&#112;&#64;&#x6f;&#104;&#x61;&#x68;&#97;&#x2e;&#107;&#115;&#46;&#101;&#100;&#x75;&#46;&#x74;&#x77;</a>:ftp -n &#x2F;&#x2F;lsof -n 不将IP转换为hostname，缺省是不加上-n参数</p><p>来自：[CNBLOGS](<a href="https://www.cnblogs.com/sparkbj/p/7161669.html">https://www.cnblogs.com/sparkbj/p/7161669.html</a> &quot;CNBLOGS&quot;)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>order by 语句对null字段的默认排序</title>
    <link href="/2021/01/19/order%20by%20%E8%AF%AD%E5%8F%A5%E5%AF%B9null%E5%AD%97%E6%AE%B5%E7%9A%84%E9%BB%98%E8%AE%A4%E6%8E%92%E5%BA%8F/"/>
    <url>/2021/01/19/order%20by%20%E8%AF%AD%E5%8F%A5%E5%AF%B9null%E5%AD%97%E6%AE%B5%E7%9A%84%E9%BB%98%E8%AE%A4%E6%8E%92%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<p>1.oracle 结论 (null 最大)</p><ul><li>order by colum asc 时，null默认被放在最后</li><li>order by colum desc 时，null默认被放在最前</li><li>nulls first 时，强制null放在最前，不为null的按声明顺序[asc|desc]进行排序</li><li>nulls last 时，强制null放在最后，不为null的按声明顺序[asc|desc]进行排序</li></ul><p>2.mysql,sql server 结论 (null 最小)<br>order by colum asc 时，null默认被放在最前<br>order by colum desc 时，null默认被放在最后<br>ORDER BY IF(ISNULL(update_date),0,1) null被强制放在最前，不为null的按声明顺序[asc|desc]进行排序<br>ORDER BY IF(ISNULL(update_date),1,0) null被强制放在最后，不为null的按声明顺序[asc|desc]进行排序</p><pre><code class="hljs">SELECT * FROM t1 where 1=1 ORDER BY IF(ISNULL(order_index),1,0),order_index asc,create_time desc</code></pre><p>mysql nulls first nulls last解决方案<br>nulls first:</p><p>order by IF(ISNULL(my_field),0,1),my_field;<br>nulls last:</p><p>order by IF(ISNULL(my_field),1,0),my_field;<br>ISNULL函数当my_field字段为空是，返回1，当不为空时返回0</p><p>IF函数，如果第一个表达式为真，则返回第二个参数的值，否则，返回第三个参数的值。</p><p>EXTRACT(unit FROM date) </p><p>pgsql null排在有值的行前面还是后面通过语法来指定 </p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">--null值在前</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tablename <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">nulls first</span>;<br><span class="hljs-comment">--null值在后</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tablename <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">nulls last</span>;<br><span class="hljs-comment">--null在前配合desc使用</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tablename <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span> <span class="hljs-keyword">nulls first</span>;<br><span class="hljs-comment">--null在后配合desc使用</span><br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> tablename <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> id <span class="hljs-keyword">desc</span> <span class="hljs-keyword">nulls last</span>;<br>举例:<br><span class="hljs-keyword">null</span>值在后,先按照count1降序排列,count1相同再按照count2降序排列<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> count1 <span class="hljs-keyword">desc</span> <span class="hljs-keyword">nulls last</span>, count2  <span class="hljs-keyword">desc</span> <span class="hljs-keyword">nulls last</span>;<br></code></pre></td></tr></table></figure><p>mysql的null值排序和pgsql相反<br><a href="https://www.w3school.com.cn/sql/func_extract.asp">https://www.w3school.com.cn/sql/func_extract.asp</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>收集的一些英文句子和短语</title>
    <link href="/2021/01/16/%E6%94%B6%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E8%8B%B1%E6%96%87%E5%8F%A5%E5%AD%90%E5%92%8C%E7%9F%AD%E8%AF%AD/"/>
    <url>/2021/01/16/%E6%94%B6%E9%9B%86%E7%9A%84%E4%B8%80%E4%BA%9B%E8%8B%B1%E6%96%87%E5%8F%A5%E5%AD%90%E5%92%8C%E7%9F%AD%E8%AF%AD/</url>
    
    <content type="html"><![CDATA[<h1 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h1><blockquote><p>I am not afraid of tomorrow for I have seen yesterday and I love today.</p></blockquote><p>我不害怕明天，因为我经历过昨天，又热爱今天。</p><blockquote><p>The value of life lies not length of days,but in the use of the make of them.</p></blockquote><p>生命的价值不在于能活多少天，而在于我们如何利用这些日子。</p><blockquote><p>Courage is the ladder on which all the other virtues mount.</p></blockquote><p>勇气是其他美德攀登的梯子。</p><blockquote><p>Better to light one candle than to curse the darkness.</p></blockquote><p>与其诅咒黑暗，不如燃起蜡烛。</p><blockquote><p>You don’t love a girl because she is beautiful, but she is beautiful because you love her.</p></blockquote><p>你不是因为她美丽而爱他，而他却因为你的爱而美丽。</p><blockquote><p>Love alone could waken love!</p></blockquote><p>只有爱才能唤醒爱。</p><blockquote><p>Maybe God wants us to meet a few wrong people before meeting the right one ,so that when we finally meet the person,we will know how to be grateful.</p></blockquote><p>在遇到梦中之人之前，上天也许会安排我们先遇到别的人；在我们终于遇见心仪的人时，便应当心存感激。</p><blockquote><p>Enjoy when you can, and endure when you must.</p></blockquote><p>能享受时可进行，须忍耐时当坚持。</p><blockquote><p>Friendship is a sheltering tree.</p></blockquote><p>友情犹如大树，为你遮风挡雨。</p><blockquote><p>We have to dare to be ourselves ,however frightening or strange that self may prove to be.</p></blockquote><p>我们必须勇于做自己，不管这个自己有多可怕，有多诡异。</p><blockquote><p>A friend is one of the nicest things you can have,an one of the best things you can be .</p></blockquote><p>拥有朋友时最美好的一件事，成为别人的朋友是最美妙的一件事。</p><h1 id="短语"><a href="#短语" class="headerlink" title="短语"></a>短语</h1><ul><li>attached to</li><li>approved </li><li>reminder shortly</li><li>renewal</li></ul><h1 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h1><p>maven 行家，专家</p><p>continuous 持续的</p><p>integration 集成</p><p>delivery 交付</p><h1 id="英语俚语"><a href="#英语俚语" class="headerlink" title="英语俚语"></a>英语俚语</h1><p>dog persion 喜欢狗的人<br>cat persion 习惯猫的人<br>people persion 喜欢和人打交道的人</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>npm &amp; yarn 更换源等常用命令或操作</title>
    <link href="/2021/01/09/npm%20&amp;%20yarn%20%E6%9B%B4%E6%8D%A2%E6%BA%90%E7%AD%89%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%88%96%E6%93%8D%E4%BD%9C/"/>
    <url>/2021/01/09/npm%20&amp;%20yarn%20%E6%9B%B4%E6%8D%A2%E6%BA%90%E7%AD%89%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%88%96%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h1><blockquote><p>由于node下载第三方依赖包是从国外服务器下载，虽然没有被墙，但是下载的速度是非常的缓慢且有可能会出现异常。<br>所以为了提高效率，我们还是把npm的镜像源替换成淘宝的镜像源。有几种方式供我们选择</p></blockquote><h2 id="使用cnpm"><a href="#使用cnpm" class="headerlink" title="使用cnpm"></a>使用cnpm</h2><p>使用阿里定制的cnpm命令行工具代替默认的npm，输入以下代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g cnpm --registry=https://registry.npm.taobao.org <br>cnpm -v      #检测是否安装成功<br></code></pre></td></tr></table></figure><p>安装成功之后，以后安装依赖包的方式和npm的是一样的，只是npm的命令换成是cnpm就可以了</p><p>假如你已经习惯了使用npm的安装方式的，不想去下载阿里的cnpm命令工具的话，很简单，我们直接将node的仓库地址换成淘宝仓库地址即可</p><h2 id="单次使用"><a href="#单次使用" class="headerlink" title="单次使用"></a>单次使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --registry=https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h2 id="永久使用"><a href="#永久使用" class="headerlink" title="永久使用"></a>永久使用</h2><p>在开发react-native的时候，不要使用cnpm！cnpm安装的模块路径比较奇怪，packager不能正常识别。所以，为了方便开发，我们最好是直接永久使用淘宝的镜像源</p><p>直接命令行的设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>手动修改设置</p><p>1.打开<code>.npmrc</code>文件（<code>C:\Program Files\nodejs\node_modules\npm\npmrc</code>，没有的话可以使用git命令行建一个(<code>touch .npmrc</code>)，用<code>cmd</code>命令建会报错）<br>2.增加 </p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">registry =https:<span class="hljs-regexp">//</span>registry.npm.taobao.org<br></code></pre></td></tr></table></figure><p>即可。</p><p>检测是否修改成功</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 配置后可通过下面方式来验证是否成功</span><br>npm config <span class="hljs-keyword">list</span><br>npm config get registry<br>npm info express<br></code></pre></td></tr></table></figure><p>注：如果想还原npm仓库地址的话，只需要在把地址配置成npm镜像就可以了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm config set registry https://registry.npmjs.org/<br></code></pre></td></tr></table></figure><h1 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a>yarn</h1><h2 id="yarn-add"><a href="#yarn-add" class="headerlink" title="yarn add"></a>yarn add</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">yarn add [package]@[version]<br></code></pre></td></tr></table></figure><p> 这将安装您的<code>dependencies</code>中的一个或多个包。<br> 用 <code>--dev</code> 或 <code>-D</code> 会在 <code>devDependencies</code> 里安装一个或多个包。</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">yarn</span> <span class="hljs-meta">global</span> <span class="hljs-keyword">add</span> &lt;package...&gt; <span class="hljs-comment">//全局安装依赖</span><br></code></pre></td></tr></table></figure><p> 对于绝大部分包来说，这是个坏习惯，因为它们是隐藏的。 最好本地安装你的依赖，这样它们都是明确的，每用你项目的人都能得到同样的依赖。<br> 注意：<code>yarn add global &lt;package...&gt;</code>会变成本地安装，注意顺序。</p><h2 id="yarn-cache"><a href="#yarn-cache" class="headerlink" title="yarn cache"></a>yarn cache</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">yarn cache <span class="hljs-built_in">dir</span><br></code></pre></td></tr></table></figure><p> 运行 <code>yarn cache dir</code> 会打印出当前的 <code>yarn</code>全局缓存在哪里。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">yarn cache list --pattern &lt;pattern&gt; <span class="hljs-regexp">//</span>列出匹配指定模式的已缓存的包<br></code></pre></td></tr></table></figure><p> 示例：yarn cache list –pattern “gulp-(match|newer)”</p><p>yarn cache clean<br> 运行此命令将清除全局缓存。 将在下次运行 yarn 或 yarn install 时重新填充。</p><h2 id="yarn-list"><a href="#yarn-list" class="headerlink" title="yarn list"></a>yarn list</h2><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">yarn list</span> <span class="hljs-title">[</span><span class="hljs-literal">--</span><span class="hljs-comment">depth</span><span class="hljs-title">]</span> <span class="hljs-title">[</span><span class="hljs-literal">--</span><span class="hljs-comment">pattern</span><span class="hljs-title">]</span><br></code></pre></td></tr></table></figure><p> 默认情况下，所有包和它们的依赖会被显示。 要限制依赖的深度，你可以给 list 命令添加一个标志 –depth 所需的深度。<br> 示例</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">yarn list <span class="hljs-attribute">--depth</span>=0<br></code></pre></td></tr></table></figure><h2 id="yarn-remove"><a href="#yarn-remove" class="headerlink" title="yarn remove"></a>yarn remove</h2><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">yarn <span class="hljs-built_in">remove</span> &lt;<span class="hljs-built_in">package</span>...&gt;<br></code></pre></td></tr></table></figure><p> 运行 <code>yarn remove foo</code> 会从你的直接依赖里移除名为 <code>foo</code> 的包，在此期间会更新你的 <code>package.json</code> 和 <code>yarn.lock</code> 文件。</p><h2 id="yarn-run"><a href="#yarn-run" class="headerlink" title="yarn run"></a>yarn run</h2><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">yarn <span class="hljs-built_in">run</span> [<span class="hljs-keyword">script</span>] [&lt;args&gt;]<br></code></pre></td></tr></table></figure><p> 如果你已经在你的包里定义了 <code>scripts</code>，这个命令会运行指定的 <code>[script]</code>。例如：<br> 运行这个命令会执行你的 <code>package.json</code> 里名为 <code>&quot;test&quot;</code> 的脚本。</p><h2 id="yarn-upgrade"><a href="#yarn-upgrade" class="headerlink" title="yarn upgrade"></a>yarn upgrade</h2><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">yarn upgrade [<span class="hljs-built_in">package</span> | <span class="hljs-built_in">package</span>@tag | <span class="hljs-built_in">package</span>@version | @scope/]... [<span class="hljs-comment">--ignore-engines] [--pattern]</span><br></code></pre></td></tr></table></figure><p> 可以选择指定一个或多个包名称。指定包名称时，将只升级这些包。未指定包名称时，将升级所有依赖项。</p><p>查看npm上已经全局安装的命令</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">npm list -g <span class="hljs-attribute">--depth</span>=0<br></code></pre></td></tr></table></figure><p>查看yarn 全局安装的根目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">yarn <span class="hljs-keyword">global</span> <span class="hljs-built_in">bin</span><br></code></pre></td></tr></table></figure><p> 查看npm 全局安装的根目录</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> bin<br></code></pre></td></tr></table></figure><p>yarn windows 安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">choco <span class="hljs-keyword">install</span> yarn<br></code></pre></td></tr></table></figure><p> 或者 </p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">scoop </span><span class="hljs-keyword">install </span>yarn<br></code></pre></td></tr></table></figure><p> 或者下载安装包</p><h2 id="yarn指定淘宝源"><a href="#yarn指定淘宝源" class="headerlink" title="yarn指定淘宝源"></a>yarn指定淘宝源</h2><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">yarn config <span class="hljs-keyword">set</span> <span class="hljs-keyword">registry</span> <span class="hljs-keyword">http</span>://<span class="hljs-keyword">registry</span>.npm.taobao.org<br></code></pre></td></tr></table></figure><p>原文链接：<a href="https://www.jianshu.com/p/f5d85e541a99">https://www.jianshu.com/p/f5d85e541a99</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache2 CGI 简单配置</title>
    <link href="/2021/01/04/Apache2%20CGI%20%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/"/>
    <url>/2021/01/04/Apache2%20CGI%20%E7%AE%80%E5%8D%95%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<p>&gt; 参考：<a href="http://httpd.apache.org/docs/2.4/howto/cgi.html">http://httpd.apache.org/docs/2.4/howto/cgi.html</a></p><h3 id="一，-CGI简介"><a href="#一，-CGI简介" class="headerlink" title="一， CGI简介"></a>一， CGI简介</h3><p>公共网关接口（Common Gateway Interface，CGI）是Web 服务器运行时外部程序的规范，按CGI 编写的程序可以扩展服务器功能。CGI 应用程序能与浏览器进行交互，还可通过数据API与数据库服务器等外部数据源进行通信，从数据库服务器中获取数据。格式化为HTML文档后，发送给浏览器，也可以将从浏览器获得的数据放到数据库中。几乎所有服务器都支持CGI，可用任何语言编写CGI，包括流行的Python、C、C ++、Java、VB 和Delphi 等。</p><h3 id="二，CGI-配置"><a href="#二，CGI-配置" class="headerlink" title="二，CGI 配置"></a>二，CGI 配置</h3><p>Apache2 中CGI的配置文件位于 &#x2F;etc&#x2F;apache2&#x2F;mods-available&#x2F; 中（mods-enabled “ 为常用的（也就是默认开启的）， ” mods-available “为不常用的（也就是默认不开启)）。我们只需要将mods-available文件夹中的  &quot; cgid.conf &quot;, &quot; cgid.load &quot;, &quot; cgi.load &quot;  软连接到mods-enabled 文件夹就可以了</p><pre><code class="hljs">sudo ln -s /etc/apache2/mods-available/cgid.conf /etc/apache2/mods-enabled/cgid.confsudo  ln -s /etc/apache2/mods-available/cgid.load /etc/apache2/mods-enabled/cgid.loadsudo  ln -s /etc/apache2/mods-available/cgi.load /etc/apache2/mods-enabled/cgi.load</code></pre><p>修改cgi.load的内容如下（vim &#x2F;etc&#x2F;apache2&#x2F;mods-available&#x2F;cgid.load ）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">LoadModule cgi_module /usr/lib/apache2/modules/mod_cgi.so     //默认有则不需要加<br>AddHandler cgi-script .cgi .pl .py .sh       // 我们加入这一句，使CGI支持 perl和python 和shell脚本<br></code></pre></td></tr></table></figure><h3 id="三，修改默认的cgi-bin的路径"><a href="#三，修改默认的cgi-bin的路径" class="headerlink" title="三，修改默认的cgi-bin的路径"></a>三，修改默认的cgi-bin的路径</h3><p>&gt; vim &#x2F;etc&#x2F;apache2&#x2F;conf-available&#x2F;serve-cgi-bin.conf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;IfModule mod_alias.c&amp;gt;<br>    &amp;lt;IfModule mod_cgi.c&amp;gt;<br>        Define ENABLE_USR_LIB_CGI_BIN<br>    &amp;lt;/IfModule&amp;gt;<br>    &amp;lt;IfModule mod_cgid.c&amp;gt;<br>        Define ENABLE_USR_LIB_CGI_BIN<br>    &amp;lt;/IfModule&amp;gt;<br>    &amp;lt;IfDefine ENABLE_USR_LIB_CGI_BIN&amp;gt;<br>        ScriptAlias /cgi-bin/ /<span class="hljs-keyword">var</span>/www/cgi-bin/<br>            &amp;lt;<span class="hljs-built_in">Directory</span> &amp;quot;/<span class="hljs-keyword">var</span>/www/cgi-bin&amp;quot;&amp;gt;<br>                AllowOverride None<br>                Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch Require all granted<br>            &amp;lt;/<span class="hljs-built_in">Directory</span>&amp;gt;<br>    &amp;lt;/IfDefine&amp;gt;<br>&amp;lt;/IfModule&amp;gt;<br></code></pre></td></tr></table></figure><h3 id="四，重启Apache2-服务"><a href="#四，重启Apache2-服务" class="headerlink" title="四，重启Apache2 服务"></a>四，重启Apache2 服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo service apache2 restart<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php中ob函数的用法</title>
    <link href="/2020/12/15/php%E4%B8%ADob%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2020/12/15/php%E4%B8%ADob%E5%87%BD%E6%95%B0%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p>与输出缓冲区有关的配置<br>　　在PHP.INI中,有两个跟缓冲区紧密相关的配置项<br>　　1.output_buffering<br>　　　　该配置直接影响的是php本身的缓冲区,有3种配置参数.on&#x2F;off&#x2F;xK(x为某个整型数值);<br>　　　　on - 开启缓冲区<br>　　　　off - 关闭缓冲区<br>　　　　256k - 开启缓冲区,而且当缓冲区的内容超过256k的时候,自动刷新缓冲区(把数据发送到apache);</p><p>　　2.implicit_flush<br>　　　　该配置直接影响apache的缓冲区,有2种配置参数. on&#x2F;off<br>　　　　on - 自动刷新apache缓冲区,也就是,当php发送数据到apache的缓冲区的时候,不需要等待其他指令,直接就把输出返回到浏览器<br>　　　　off - 不自动刷新apache缓冲区,接受到数据后,等待刷新指令</p><p>而默认直接是开启缓冲区的，所以我们可以直接不用ob_start()，所以我先把缓冲区关闭</p><p>下面几个函数的用法</p><ul><li>ob_start() - 打开缓冲区</li><li>ob_get_contents() - 返回输出缓冲区的内容</li><li>ob_flush() - 冲刷出（送出）输出缓冲区中的内容</li><li>ob_clean() - 清空（擦掉）输出缓冲区</li><li>ob_end_flush() - 冲刷出（送出）输出缓冲区内容并关闭缓冲</li><li>ob_end_clean() - 清空（擦除）缓冲区并关闭输出缓冲</li><li>flush() - 刷新输出缓冲</li></ul><p>　</p><p>&gt; ob_start()在服务器打开一个缓冲区来保存所有的输出。所以在任何时候使用echo ，输出都将被加入缓冲区中，直到程序运行结束或者使用ob_flush()来结束。然后在服务器中缓冲区的内容才会发送到浏览器，由浏览器来解析显示。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml">ob_start();<br><br>echo <span class="hljs-symbol">&amp;quot;</span>Hello <span class="hljs-symbol">&amp;quot;</span>;<br><br>$out1 = ob_get_contents();<br><br>echo <span class="hljs-symbol">&amp;quot;</span>World<span class="hljs-symbol">&amp;quot;</span>;<br><br>$out2 = ob_get_contents();123456789<br></code></pre></td></tr></table></figure><p>&gt; 输出：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">Hello</span> World1<br></code></pre></td></tr></table></figure><p>如果只是想要存储缓存区而不是输出的话加上ob_end_clean();</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sas">ob_start();<br><br>echo <span class="hljs-variable">&amp;quot</span>;Hello <span class="hljs-variable">&amp;quot</span>;;<br><br>$out1 = ob_get_contents();<br><br>echo <span class="hljs-variable">&amp;quot</span>;World<span class="hljs-variable">&amp;quot</span>;;<br><br>$out2 = ob_get_contents();<br><br>ob_end_clea<span class="hljs-meta">n</span>();1234567891011<br></code></pre></td></tr></table></figure><p>可以看到浏览器上没有任何输出，这时我们加上var_dump来看看out1、out2两个变量</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">ob<span class="hljs-constructor">_start()</span>;<br><br>echo &amp;quot;Hello &amp;quot;;<br><br>$out1 = ob<span class="hljs-constructor">_get_contents()</span>;<br><br>echo &amp;quot;World&amp;quot;;<br><br>$out2 = ob<span class="hljs-constructor">_get_contents()</span>;<br><br><br><br>ob<span class="hljs-constructor">_end_clean()</span>;<br>var<span class="hljs-constructor">_dump($<span class="hljs-params">out1</span>, $<span class="hljs-params">out2</span>)</span>;<span class="hljs-number">1234567891011121314</span><br></code></pre></td></tr></table></figure><p>&gt; 输出：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">string(6) <span class="hljs-symbol">&amp;quot;</span>Hello <span class="hljs-symbol">&amp;quot;</span> string(11) <span class="hljs-symbol">&amp;quot;</span>Hello World<span class="hljs-symbol">&amp;quot;</span>1<br></code></pre></td></tr></table></figure><p>&gt; 接下来讲ob_clean()跟ob_end_clean()的区别</p><p>&gt; 使用 ob_end_clean()</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sas">ob_start();<br><br>echo <span class="hljs-variable">&amp;quot</span>;Hello <span class="hljs-variable">&amp;quot</span>;;<br><br>$out1 = ob_get_contents();<br><br>echo <span class="hljs-variable">&amp;quot</span>;World1<span class="hljs-variable">&amp;quot</span>;;<br><br>$out2 = ob_get_contents();<br><br>ob_end_clea<span class="hljs-meta">n</span>();<br><br>echo <span class="hljs-variable">&amp;quot</span>;World2<span class="hljs-variable">&amp;lt</span>;br<span class="hljs-variable">&amp;gt</span>;<span class="hljs-variable">&amp;quot</span>;;<br>echo <span class="hljs-variable">&amp;quot</span>;World3<span class="hljs-variable">&amp;lt</span>;br<span class="hljs-variable">&amp;gt</span>;<span class="hljs-variable">&amp;quot</span>;;<br><br>$out3 = ob_get_contents();<br><br>var_dump($out3);123456789101112131415161718<br></code></pre></td></tr></table></figure><p>&gt; 输出：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">World2<br>World3<br><span class="hljs-function"><span class="hljs-title">bool</span><span class="hljs-params">(false)</span></span><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>&gt; 使用 ob_clean()</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs sas">ob_start();<br><br>echo <span class="hljs-variable">&amp;quot</span>;Hello <span class="hljs-variable">&amp;quot</span>;;<br><br>$out1 = ob_get_contents();<br><br>echo <span class="hljs-variable">&amp;quot</span>;World1<span class="hljs-variable">&amp;quot</span>;;<br><br>$out2 = ob_get_contents();<br><br>ob_clea<span class="hljs-meta">n</span>();<br><br>echo <span class="hljs-variable">&amp;quot</span>;World2<span class="hljs-variable">&amp;lt</span>;br<span class="hljs-variable">&amp;gt</span>;<span class="hljs-variable">&amp;quot</span>;;<br>echo <span class="hljs-variable">&amp;quot</span>;World3<span class="hljs-variable">&amp;lt</span>;br<span class="hljs-variable">&amp;gt</span>;<span class="hljs-variable">&amp;quot</span>;;<br><br>$out3 = ob_get_contents();<br><br>var_dump($out3);123456789101112131415161718<br></code></pre></td></tr></table></figure><p>&gt; 输出：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c">World2<br>World3<br>string(<span class="hljs-number">20</span>) <span class="hljs-meta">&amp;quot;World2</span><br>World3<br><span class="hljs-meta">&amp;quot;12345</span><br><br></code></pre></td></tr></table></figure><p>&gt; 这里我们对out3使用转义函数</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var<span class="hljs-constructor">_dump(<span class="hljs-params">htmlentities</span>($<span class="hljs-params">out3</span>)</span>);<span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>&gt; 输出：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">World<br>World<br>string(32) <span class="hljs-symbol">&amp;quot;</span>World<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span>World<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>123<br><br></code></pre></td></tr></table></figure><p>&gt; 解释</p><p>ob_end_clean() 跟ob_clean() 都是清空了缓冲区，不让echo输出到浏览器,这是共同点，而不同点是ob_end_clean()还关闭了缓冲区</p><p>&gt; 接下来讲ob_end_flush()跟ob_flush()跟flush()的区别</p><p>&gt; 使用ob_end_flush()</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">ob_start();<br><br>echo <span class="hljs-symbol">&amp;quot;</span>Hello<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br><br>$out1 = ob_get_contents();<br><br>echo <span class="hljs-symbol">&amp;quot;</span>World1<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br><br>$out2 = ob_get_contents();<br><br><br>ob_end_flush();<br><br>echo <span class="hljs-symbol">&amp;quot;</span>World2<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br>echo <span class="hljs-symbol">&amp;quot;</span>World3<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br><br>$out3 = ob_get_contents();<br><br><br>var_dump(htmlentities($out3));1234567891011121314151617181920<br><br></code></pre></td></tr></table></figure><p>&gt; 输出</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Hello</span><br><span class="hljs-attribute">World1</span><br><span class="hljs-attribute">World2</span><br><span class="hljs-attribute">World3</span><br><span class="hljs-attribute">string</span>(<span class="hljs-number">0</span>) &amp;quot;&amp;quot;<span class="hljs-number">12345</span><br><br></code></pre></td></tr></table></figure><p>补充：这里为了显示容易观察，我全部都给了<code> </code></p><p>&gt; 使用ob_flush()</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml">ob_start();<br><br>echo <span class="hljs-symbol">&amp;quot;</span>Hello<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br><br>$out1 = ob_get_contents();<br><br>echo <span class="hljs-symbol">&amp;quot;</span>World1<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br><br>$out2 = ob_get_contents();<br><br><br>ob__flush();<br><br>echo <span class="hljs-symbol">&amp;quot;</span>World2<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br>echo <span class="hljs-symbol">&amp;quot;</span>World3br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br><br>$out3 = ob_get_contents();<br><br><br>var_dump(htmlentities($out3));1234567891011121314151617181920<br><br></code></pre></td></tr></table></figure><p>&gt; 输出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">Hello<br>World1<br>World2<br>World3<br>string(32) <span class="hljs-symbol">&amp;quot;</span>World2<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span>World3<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>12345<br><br></code></pre></td></tr></table></figure><p>&gt; 使用flush()</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs xml">ob_start();<br><br>echo <span class="hljs-symbol">&amp;quot;</span>Hello<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br><br>$out1 = ob_get_contents();<br><br>echo <span class="hljs-symbol">&amp;quot;</span>World1<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br><br>$out2 = ob_get_contents();<br><br><br>flush();<br><br>echo <span class="hljs-symbol">&amp;quot;</span>World2<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br>echo <span class="hljs-symbol">&amp;quot;</span>World3br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>;<br><br>$out3 = ob_get_contents();<br><br><br>var_dump(htmlentities($out3));1234567891011121314151617181920<br></code></pre></td></tr></table></figure><p>&gt; 输出</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">Hello<br>World1<br>World2<br>World3<br>string(67) <span class="hljs-symbol">&amp;quot;</span>Hello<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span>World1<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span>World2<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span>World3<span class="hljs-symbol">&amp;lt;</span>br/<span class="hljs-symbol">&amp;gt;</span><span class="hljs-symbol">&amp;quot;</span>12345<br></code></pre></td></tr></table></figure><p>&gt; 区别</p><p>可以看出ob_end_flush() 是输出了缓冲区的内容并且关闭了缓冲区,而ob_flush()只是刷出了缓冲区内容，相当于将缓冲区清空，而flush()输出了缓冲区内容也没有将缓冲区清空，所以下面的缓冲区内容还会继续追加。</p><p>&gt; 总结</p><p>只能在实践中继续成长，有什么不对的地方望大家指出。</p><p><a href="https://blog.csdn.net/qq_33862778/article/details/80787510">https://blog.csdn.net/qq_33862778/article/details/80787510</a></p><p>header(&quot;Location:login.php&quot;)应该注意的几个问题<br>header(&quot;Location:login.php&quot;)应该注意的几个问题</p><p>header(&quot;Location:&quot;)作为php的转向语句。其实在使用中，他有几点需要注意的地方。</p><p>1、要求header前没有任何输出</p><p>但是很多时候在header前我们已经输出了好多东西了，此时如果再次header的话，显然是出错的，在这里我们启用了一个ob的概念，ob的意思是在服务器端先存储有关输出，等待适当的时机再输出，而不是像现在这样运行一句，输出一句,发现header语句就只能报错了。</p><p>具体的语句有： ob_start(); ob_end_clean();ob_flush();………</p><p>2、在header(&quot;Location:&quot;)后要及时exit</p><p>否则他是会继续执行的，虽然在浏览器端你看不到相应的数据出现，但是如果你进行抓包分析的话，你就会看到下面的语句也是在执行的。而且被输送到了浏览器客户端，只不过是没有被浏览器执行为html而已（浏览器执行了header进行了转向操作）。</p><p>所以,标准的使用方法是：</p><p>ob_start();</p><p>……..</p><p>if ( something ){</p><p>ob_end_clean();</p><p>header(&quot;Location: yourlocation&quot;)；</p><p>exit;</p><p>else{</p><p>……….</p><p>ob_flush(); &#x2F;&#x2F;可省略</p><p>要想在header前有输出的话，可以修改php.ini文件</p><p>output_handler &#x3D;mb_output_handler</p><p>或 output_handler &#x3D;on</p><p>Output Control 函数可以让你自由控制脚本中数据的输出。它非常地有用，特别是对于：当你想在数据已经输出后，再输出文件头的情况。输出控制函数不对使用 header() 或 setcookie(), 发送的文件头信息产生影响,只对那些类似于 echo() 和 PHP 代码的数据块有作用。<br>一、 相关函数简介：<br>1、Flush：刷新缓冲区的内容，输出。<br>函数格式：flush()<br>说明：这个函数经常使用，效率很高。<br>2、ob_start ：打开输出缓冲区<br>函数格式：void ob_start(void)<br>说明：当缓冲区激活时，所有来自PHP程序的非文件头信息均不会发送，而是保存在内部缓冲区。为了输出缓冲区的内容，可以使用ob_end_flush()或flush()输出缓冲区的内容。<br>3 、ob_get_contents ：返回内部缓冲区的内容。<br>使用方法：string ob_get_contents(void)<br>说明：这个函数会返回当前缓冲区中的内容，如果输出缓冲区没有激活，则返回 FALSE 。<br>4、ob_get_length：返回内部缓冲区的长度。<br>使用方法：int ob_get_length(void)<br>说明：这个函数会返回当前缓冲区中的长度；和ob_get_contents一样，如果输出缓冲区没有激活。则返回 FALSE。<br>5、ob_end_flush ：发送内部缓冲区的内容到浏览器，并且关闭输出缓冲区。<br>使用方法：void ob_end_flush(void)<br>说明：这个函数发送输出缓冲区的内容（如果有的话）。<br>6、ob_end_clean：删除内部缓冲区的内容，并且关闭内部缓冲区<br>使用方法：void ob_end_clean(void)<br>说明：这个函数不会输出内部缓冲区的内容而是把它删除！<br>7、ob_implicit_flush：打开或关闭绝对刷新<br>使用方法：void ob_implicit_flush ([int flag])<br>说明：使用过Perl的人都知道|&#x3D;x的意义，这个字符串可以打开&#x2F;关闭缓冲区，而obimplicitflush函数也和那个一样，默认为关闭缓冲区，打开绝对输出后，每个脚本输出都直接发送到浏览器，不再需要调用flush()obstart()开始输出缓冲,这时PHP停止输出,在这以后的输出都被转到一个内部的缓冲里.obgetcontents()这个函数返回内部缓冲的内容.这就等于把这些输出都变成了字符串.obgetlength()返回内部缓冲的长度.obendflush()结束输出缓冲,并输出缓冲里的内容.在这以后的输出都是正常输出.obendclean()结束输出缓冲,并扔掉缓冲里的内容.举个例子,vardump()函数输出一个变量的结构和内容,这在调试的时候很有用.但如果变量的内容里有&lt;,&gt;等HTML的特殊字符,输出到网页里就看不见了.怎么办呢?用输出缓冲函数能很容易的解决这个问题.obstart();vardump(var);<br>out&#x3D;obgetcontents();obendclean();这时vardump()的输出已经存在out 里了. 你可以现在就输出:<br>echo ‘&lt;pre&gt;’ . htmlspecialchars($out) . ‘&lt;&#x2F;pre&gt;’ ;<br>或者等到将来, 再或者把这个字符串送到模板(Template)里再输出.<br><a href="https://www.cnblogs.com/suizhikuo/archive/2012/11/26/2789101.html">https://www.cnblogs.com/suizhikuo/archive/2012/11/26/2789101.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>git 使用笔记</title>
    <link href="/2020/12/15/git%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/12/15/git%20%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs dsconfig"><span class="hljs-string">git</span> <span class="hljs-string">init</span><br><span class="hljs-string">git</span> <span class="hljs-string">config</span> -<span class="hljs-string">e</span> <span class="hljs-comment"># 编辑配置文件</span><br><span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">user</span>.<span class="hljs-string">name</span> <span class="hljs-string">&#x27;username&#x27;</span><br><span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">user</span>.<span class="hljs-string">email</span> <span class="hljs-string">&#x27;email&#x27;</span><br><span class="hljs-string">git</span> <span class="hljs-string">clone</span> [-<span class="hljs-string">b</span>] <span class="hljs-string">branch</span> <span class="hljs-string">xxx</span>.<span class="hljs-string">git</span> 拉取<br><span class="hljs-string">git</span> <span class="hljs-string">status</span> <br><span class="hljs-string">git</span> <span class="hljs-string">log</span> [-<span class="hljs-string">p</span>]/[-<span class="hljs-string">n</span>]  -<span class="hljs-built_in">--n代表数字</span><br><span class="hljs-string">git</span> <span class="hljs-string">log</span> <span class="hljs-built_in">--stat</span> ---简单信息<br><span class="hljs-string">git</span> <span class="hljs-string">log</span> <span class="hljs-built_in">--name-status</span>  ---可以显示新增、修改、删除的文件清单<br><span class="hljs-string">git</span> <span class="hljs-string">commit</span> [-<span class="hljs-string">m</span> <span class="hljs-string">&#x27;&#x27;</span>]<br><span class="hljs-string">git</span> <span class="hljs-string">push</span> 远程 本地<br><span class="hljs-string">git</span> <span class="hljs-string">pull</span> 远程 本地<br><span class="hljs-string">git</span> <span class="hljs-string">pull</span> <span class="hljs-string">origin</span> <span class="hljs-string">1</span>.<span class="hljs-string">x:dev </span>将远程<span class="hljs-string">origin</span>的<span class="hljs-string">1</span>.<span class="hljs-string">x</span>分支拉取到本地<span class="hljs-string">dev</span>分支<br><span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-string">origin</span> <span class="hljs-string">dev:1.</span><span class="hljs-string">x</span> 将本地<span class="hljs-string">dev</span>分支推送到远程<span class="hljs-string">1</span>.<span class="hljs-string">x</span>分支<br><span class="hljs-string">git</span> <span class="hljs-string">fetch</span> <span class="hljs-string">origin</span> <span class="hljs-string">test:example </span><span class="hljs-string">fetch</span>远程<span class="hljs-string">test</span>到本地<span class="hljs-string">example</span>(原本不存在)<br><span class="hljs-string">git</span> <span class="hljs-string">tag</span> <span class="hljs-string">test_tag</span> <span class="hljs-string">c809ddbf83939a89659e51dc2a5fe183af384233</span>　　　　//在某个<span class="hljs-string">commit</span> 上打<span class="hljs-string">tag</span><br><span class="hljs-string">git</span> <span class="hljs-string">tag</span> [<span class="hljs-string">tag</span>] 新建或者<span class="hljs-string">list</span> <span class="hljs-string">tag</span><br><span class="hljs-string">git</span> <span class="hljs-string">tag</span> -<span class="hljs-string">d</span> &lt;<span class="hljs-string">tag</span>&gt; 删除本地<span class="hljs-string">tag</span><br><span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-string">origin</span> :<span class="hljs-string">refs</span>/<span class="hljs-string">tags</span>/<span class="hljs-string">test_tag</span>　　　　//本地<span class="hljs-string">tag</span>删除了，再执行该句，删除线上<span class="hljs-string">tag</span><br><span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-string">origin</span> :&lt;<span class="hljs-string">tag</span>&gt;/&lt;<span class="hljs-string">branch</span>&gt; 删除远程<span class="hljs-string">tag</span>/分支<br><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-string">add</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://<span class="hljs-string">git</span>.<span class="hljs-string">com</span><br><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://&lt;<span class="hljs-string">token</span>&gt;@<span class="hljs-string">github</span>.<span class="hljs-string">com</span>/&lt;<span class="hljs-string">username</span>&gt;/&lt;<span class="hljs-string">repo</span>&gt;.<span class="hljs-string">git</span><br><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">set-url</span> <span class="hljs-built_in">--add</span> <span class="hljs-string">origin</span> <span class="hljs-string">https</span>://&lt;<span class="hljs-string">token</span>&gt;@<span class="hljs-string">github</span>.<span class="hljs-string">com</span>/&lt;<span class="hljs-string">username</span>&gt;/&lt;<span class="hljs-string">repo</span>&gt;.<span class="hljs-string">git</span> <span class="hljs-comment"># 添加多个</span><br><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-built_in">get-url</span> <span class="hljs-string">origin</span><br><span class="hljs-string">git</span> <span class="hljs-string">remote</span> -<span class="hljs-string">v</span> <span class="hljs-comment"># 列出所有</span><br><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-string">rename</span> 原名 新名<br><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-string">remove</span> 名字<br><span class="hljs-string">git</span> <span class="hljs-string">add</span> <span class="hljs-string">xx</span>命令可以将<span class="hljs-string">xx</span>文件添加到暂存区，如果有很多改动可以通过 <span class="hljs-string">git</span> <span class="hljs-string">add</span> -<span class="hljs-string">A</span> .来一次添加所有改变的文件。注意 -<span class="hljs-string">A</span> 选项后面还有一个句点。 <span class="hljs-string">git</span> <span class="hljs-string">add</span> -<span class="hljs-string">A</span>表示添加所有内容， <span class="hljs-string">git</span> <span class="hljs-string">add</span> . 表示添加新文件和编辑过的文件不包括删除的文件; <span class="hljs-string">git</span> <span class="hljs-string">add</span> -<span class="hljs-string">u</span> 表示添加编辑或者删除的文件，不包括新添加的文件<br><span class="hljs-string">git</span> <span class="hljs-string">commit</span> -<span class="hljs-string">m</span> <span class="hljs-string">&quot;提交注释&quot;</span><br><span class="hljs-string">git</span> <span class="hljs-string">branch</span> 查看本地所有分支<br><span class="hljs-string">git</span> <span class="hljs-string">branch</span> -<span class="hljs-string">r</span>查看远程所有分支  一般当前本地分支前带有“*”号且为绿色，远程分支为红色<br><span class="hljs-string">git</span> <span class="hljs-string">branch</span> -<span class="hljs-string">a</span><br><span class="hljs-string">git</span> <span class="hljs-string">branch</span> -<span class="hljs-string">vv</span><br><span class="hljs-string">git</span> <span class="hljs-string">branch</span> [-<span class="hljs-string">f</span>] &lt;<span class="hljs-string">branchname</span>&gt; 新建分支但是不切换<br><span class="hljs-string">git</span> <span class="hljs-string">branch</span> -<span class="hljs-string">d</span>[-<span class="hljs-string">D</span>] &lt;<span class="hljs-string">branchname</span>&gt;删除本地分支[强制(相当于 <span class="hljs-built_in">--delete</span> <span class="hljs-built_in">--force)]</span><br><span class="hljs-string">git</span> <span class="hljs-string">branch</span> -<span class="hljs-string">d</span> -<span class="hljs-string">r</span> &lt;<span class="hljs-string">branchname</span>&gt;删除远程分支，其中&lt;<span class="hljs-string">branchname</span>&gt;为本地分支名<br><span class="hljs-string">git</span> <span class="hljs-string">branch</span> (-<span class="hljs-string">m</span> | -<span class="hljs-string">M</span>) &lt;<span class="hljs-string">oldbranch</span>&gt; &lt;<span class="hljs-string">newbranch</span>&gt; //修改<span class="hljs-string">branch</span>名称<br><span class="hljs-string">git</span> <span class="hljs-string">checkout</span> -<span class="hljs-string">b</span> &lt;<span class="hljs-string">branchname</span>&gt; 新建并切换至新分支<br><span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-string">origin</span>  分支名称，一般使用：<span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-string">origin</span> <span class="hljs-string">master</span><br><span class="hljs-string">git</span> <span class="hljs-string">branch</span> <span class="hljs-built_in">--set-upstream</span> 本地关联远程分支<br><span class="hljs-string">git</span> <span class="hljs-string">push</span> <span class="hljs-built_in">--set-upstream</span> <span class="hljs-string">origin</span> <span class="hljs-string">master</span><br><span class="hljs-string">git</span> <span class="hljs-string">remote</span> <span class="hljs-string">rm</span><br><span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-built_in">--global</span> <span class="hljs-string">core</span>.<span class="hljs-string">autocrlf</span> <span class="hljs-string">false</span> 禁用<span class="hljs-string">Git</span>默认配置替换回车换行成统一的<span class="hljs-string">CRLF</span><br><span class="hljs-string">git</span> <span class="hljs-string">diff</span>  分支<span class="hljs-string">1</span> 分支<span class="hljs-string">2</span> <span class="hljs-built_in">--stat</span> （加上 <span class="hljs-built_in">--stat</span> 是显示文件列表, 否则是文件内容<span class="hljs-string">diff</span>）<br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> &lt;<span class="hljs-string">commitHash</span>&gt; 将<span class="hljs-string">commitHash</span>的提交应用于当前分支 <br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> &lt;<span class="hljs-string">branch</span>&gt; 会转移该分支的最新一次提交<br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> &lt;<span class="hljs-string">hash1</span>&gt; &lt;<span class="hljs-string">hash2</span>&gt; 转移这两次提交<br><span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> &lt;<span class="hljs-string">hash1</span>&gt;..&lt;<span class="hljs-string">hash10</span>&gt; 转移<span class="hljs-string">hash1</span>到<span class="hljs-string">hash10</span>的提交（<span class="hljs-string">hash1</span>必须比<span class="hljs-string">hash10</span>早，默认不包含<span class="hljs-string">1</span>, 如果要包含，需要&lt;<span class="hljs-string">hash1</span>^&gt;, 例如：<span class="hljs-string">git</span> <span class="hljs-string">cherry-pick</span> <span class="hljs-string">A</span>^..<span class="hljs-string">B</span> ）<br></code></pre></td></tr></table></figure><blockquote><p>更多cherry-pick用法可以参考：<a href="https://ruanyifeng.com/blog/2020/04/git-cherry-pick.html">https://ruanyifeng.com/blog/2020/04/git-cherry-pick.html</a> 或者官方文档</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">git cherry-pick <span class="hljs-comment">--help</span><br></code></pre></td></tr></table></figure><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css">-d  <span class="hljs-attr">--delete</span>：删除<br>-D  <span class="hljs-attr">--delete</span> <span class="hljs-attr">--force</span>的快捷键<br>-f  <span class="hljs-attr">--force</span>：强制<br>-m  <span class="hljs-attr">--move</span>：移动或重命名<br>-M  <span class="hljs-attr">--move</span> <span class="hljs-attr">--force</span>的快捷键<br>-r  <span class="hljs-attr">--remote</span>：远程<br>-<span class="hljs-selector-tag">a</span>  <span class="hljs-attr">--all</span>：所有<br></code></pre></td></tr></table></figure><h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><p>最近使用git pull的时候多次碰见下面的情况：</p><p>There is no tracking information for the current branch.<br>Please specify which branch you want to merge with.<br>See git-pull(1) for details.</p><p>git pull <remote> <branch></p><p>If you wish to set tracking information for this branch you can do so with:</p><p>git branch –set-upstream-to&#x3D;origin&#x2F;<branch> release</p><p>其实，输出的提示信息说的还是比较明白的。<br>使用git在本地新建一个分支后，需要做远程分支关联。如果没有关联，git会在下面的操作中提示你显示的添加关联。<br>关联目的是在执行git pull, git push操作时就不需要指定对应的远程分支，你只要没有显示指定，git pull的时候，就会提示你。<br>解决方法就是按照提示添加一下呗：<br>git branch –set-upstream-to&#x3D;origin&#x2F;remote_branch  your_branch<br>其中，origin&#x2F;remote_branch是你本地分支对应的远程分支；your_branch是你当前的本地分支。</p><h2 id="恢复到之前的文件"><a href="#恢复到之前的文件" class="headerlink" title="恢复到之前的文件"></a>恢复到之前的文件</h2><p>对于恢复修改的文件，就是将文件从仓库中拉到本地工作区，即 仓库区 —-&gt; 暂存区 —-&gt; 工作区。</p><p>对于修改的文件有两种情况：</p><ul><li>只是修改了文件，<em><strong>没有任何 git 操作</strong></em></li><li>修改了文件，并提交到<em><strong>暂存区</strong></em>（即编辑之后，gitadd但没有gitadd但没有 git commit -m ….）</li><li>修改了文件，并提交到<em><strong>仓库区</strong></em>（即编辑之后，gitadd和gitadd和 git commit -m ….）</li></ul><h3 id="情况I："><a href="#情况I：" class="headerlink" title="情况I："></a>情况I：</h3><p>只是修改了文件，<em><strong>没有任何 git 操作</strong></em>，直接一个命令就可回退：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal"><span class="hljs-variable">$ </span>git checkout -- aaa.txt <span class="hljs-comment"># aaa.txt为文件名</span><br></code></pre></td></tr></table></figure><h3 id="情况II："><a href="#情况II：" class="headerlink" title="情况II："></a>情况II：</h3><p>修改了文件，并提交到<em><strong>暂存区</strong></em>（即编辑之后，gitadd但没有 git commit -m ….）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> --oneline    <span class="hljs-comment"># 可以省略</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git reset HEAD    <span class="hljs-comment"># 回退到当前版本</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -- aaa.txt    <span class="hljs-comment"># aaa.txt为文件名</span></span><br></code></pre></td></tr></table></figure><h3 id="情况III："><a href="#情况III：" class="headerlink" title="情况III："></a>情况III：</h3><p>修改了文件，并提交到<em><strong>仓库区</strong></em>（即编辑之后，gitadd和gitadd和 git commit -m ….）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span> --oneline    <span class="hljs-comment"># 可以省略</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git reset HEAD^    <span class="hljs-comment"># 回退到上一个版本</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git checkout -- aaa.txt    <span class="hljs-comment"># aaa.txt为文件名</span></span><br></code></pre></td></tr></table></figure><blockquote><p>情况II 和 情况III 只有回退的版本不一样，</p></blockquote><p>对于 情况II，并没有 $ git commit，仓库版本也就不会更新和记录，所以回退的是当前版本</p><p>对于情况III，一旦 $ git commit，仓库版本就会更新并记录，所以要回退的也就是上一个版本</p><blockquote><p>git reset 版本号  —- 将暂缓区回退到指定版本</p></blockquote><p>根据 $ git log –oneline 显示的版本号（下图黄色的字），可以回退到任何一个版本，也可通过 HEAD 来指定版本（下图红色的字）。</p><h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><p>一、开发分支（dev）上的代码达到上线的标准后，要合并到 master 分支</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git checkout dev<br>git pull<br>git checkout <span class="hljs-keyword">master</span><br><span class="hljs-title">git</span> merge dev<br>git push -u origin <span class="hljs-literal">master</span><br></code></pre></td></tr></table></figure><p>二、当master代码改动了，需要更新开发分支（dev）上的代码</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">git checkout <span class="hljs-keyword">master</span> <br><span class="hljs-title">git</span> pull <br>git checkout dev<br>git merge <span class="hljs-keyword">master</span> <br><span class="hljs-title">git</span> push -u origin dev<br></code></pre></td></tr></table></figure><h2 id="删除已经add的文件"><a href="#删除已经add的文件" class="headerlink" title="删除已经add的文件"></a>删除已经add的文件</h2><p><code>git rm --cached &lt;文件路径&gt;</code>，不删除物理文件，仅将该文件从缓存中删除；</p><p><code>git rm --f &lt;文件路径&gt;</code>，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）。</p><p><code>git reset HEAD</code> 用版本库内容清空暂存区，（谨慎使用）</p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><h2 id="You-can-only-push-commits-that-were-committed-with-one-of-your-own-verified-emails"><a href="#You-can-only-push-commits-that-were-committed-with-one-of-your-own-verified-emails" class="headerlink" title="You can only push commits that were committed with one of your own verified emails."></a>You can only push commits that were committed with one of your own verified emails.</h2><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs subunit">remote: GitLab: You cannot push commits for &#x27;mailto:xxxx.sss@trip.com&#x27;. You can only push commits that were committed with one of your own verified emails.<br>To git.dev.sh.1kmb.com:amd.yes/hello-world.git<br> ! [remote rejected] master -&gt; master (pre-receive hook declined)<br><span class="hljs-keyword">error: </span>failed to push some refs to &#x27;git@git.dev.sh.1kmb.com:amd.yes/hello-world.git&#x27;<br></code></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">commit</span>的时候邮箱不一致<br></code></pre></td></tr></table></figure><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">$ </span><span class="language-bash">git <span class="hljs-built_in">log</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git reset --hard 9e76350248a46a16b68fef25d27e25fcd4d65312  <span class="hljs-comment"># 回滚到没错</span></span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">git config --global user.email <span class="hljs-string">&quot;你的邮箱地址&quot;</span></span><br>改下邮箱，重新conmmit<br></code></pre></td></tr></table></figure><h1 id="Github使用token"><a href="#Github使用token" class="headerlink" title="Github使用token"></a>Github使用token</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">git remote set-url origin https:<span class="hljs-comment">//&lt;token&gt;@github.com/&lt;username&gt;/&lt;repo&gt;.git</span><br></code></pre></td></tr></table></figure><h1 id="恢复版本"><a href="#恢复版本" class="headerlink" title="恢复版本"></a>恢复版本</h1><p>git 如何恢复到指定版本<br>查看git的提交版本和id 拿到需要恢复的版本号<br>　　　命令：git log　 </p><p>　　  2. 恢复到指定版本 </p><p>　　　命令：git reset –hard 44f994dd8fc1e10c9ed557824cae50d1586d0cb3   &#x2F;&#x2F;后面这一大串44f994dd8fc1e10c9ed557824cae50d1586d0cb3就是版本id</p><p>　　  3. 强制push</p><p>　　　命令：git push -f origin master</p><h1 id="【Git】pull遇到错误：error-Your-local-changes-to-the-following-files-would-be-overwritten-by-merge"><a href="#【Git】pull遇到错误：error-Your-local-changes-to-the-following-files-would-be-overwritten-by-merge" class="headerlink" title="【Git】pull遇到错误：error: Your local changes to the following files would be overwritten by merge:"></a>【Git】pull遇到错误：error: Your local changes to the following files would be overwritten by merge:</h1><p>首先取决于你是否想要保存本地修改。（是 &#x2F;否）</p><p><strong>是</strong><br>别急我们有如下三部曲</p><pre><code class="hljs">git stash  git pull origin master  git stash pop  </code></pre><p>git stash的时候会把你本地快照，然后git pull 就不会阻止你了，pull完之后这时你的代码并没有保留你的修改。惊了！ 别急，我们之前好像做了什么？</p><p>STASH<br>这时候执行git stash pop你去本地看会发现发生冲突的本地修改还在，这时候你该commit push啥的就悉听尊便了。</p><p><strong>否</strong><br>既然不想保留本地的修改，那好办。直接将本地的状态恢复到上一个commit id 。然后用远程的代码直接覆盖本地就好了。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">reset</span> --hard <br>git pull <span class="hljs-built_in">origin</span> master<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache substitute模块</title>
    <link href="/2020/11/23/Apache%20substitute%E6%A8%A1%E5%9D%97/"/>
    <url>/2020/11/23/Apache%20substitute%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<p>apache 的 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-symbol">&amp;lt;</span>location<span class="hljs-symbol">&amp;gt;</span><br><span class="hljs-symbol">&amp;lt;</span>/location<span class="hljs-symbol">&amp;gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">Substitute https:<span class="hljs-regexp">//</span>httpd.apache.org<span class="hljs-regexp">/docs/</span><span class="hljs-number">2.4</span><span class="hljs-regexp">/mod/m</span>od_substitute.html<br>RewriteCond<br></code></pre></td></tr></table></figure><p>开启substitute 需要加载substitute和filter模块,添加</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">AddOutputFilterByType <span class="hljs-built_in">SUBSTITUTE</span><br><span class="hljs-built_in">text</span>/html<br><span class="hljs-built_in">Substitute</span> s///[iqnf]<br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml">Substitute <span class="hljs-symbol">&amp;quot;</span>s|((?:\<span class="hljs-symbol">&amp;lt;</span>\s*/body\s*\<span class="hljs-symbol">&amp;gt;</span>\s*)\z)|\<br>     <span class="hljs-symbol">&amp;lt;</span>script type=\<span class="hljs-symbol">&amp;quot;</span>text/javascript\<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span>\<br>       (function () &#123;\<br>         var tagjs = document.createElement(\<span class="hljs-symbol">&amp;quot;</span>script\<span class="hljs-symbol">&amp;quot;</span>);\<br>         var s = document.getElementsByTagName(\<span class="hljs-symbol">&amp;quot;</span>script\<span class="hljs-symbol">&amp;quot;</span>)[0];\<br>         tagjs.async = true;\<br>         tagjs.src = \<span class="hljs-symbol">&amp;quot;</span>//s.tag.cn/tag.js#site=1234\<span class="hljs-symbol">&amp;quot;</span>;\<br>         s.parentNode.insertBefore(tagjs, s);\<br>       &#125;());\<br>     <span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span>\<br>     <span class="hljs-symbol">&amp;lt;</span>noscript<span class="hljs-symbol">&amp;gt;</span>\<br>       <span class="hljs-symbol">&amp;lt;</span>iframe src=\<span class="hljs-symbol">&amp;quot;</span>//b.tag.cn/iframe?c=1234\<span class="hljs-symbol">&amp;quot;</span> width=\<span class="hljs-symbol">&amp;quot;</span>1\<span class="hljs-symbol">&amp;quot;</span> height=\<span class="hljs-symbol">&amp;quot;</span>1\<span class="hljs-symbol">&amp;quot;</span> frameborder=\<span class="hljs-symbol">&amp;quot;</span>0\<span class="hljs-symbol">&amp;quot;</span> scrolling=\<span class="hljs-symbol">&amp;quot;</span>no\<span class="hljs-symbol">&amp;quot;</span> marginheight=\<span class="hljs-symbol">&amp;quot;</span>0\<span class="hljs-symbol">&amp;quot;</span> marginwidth=\<span class="hljs-symbol">&amp;quot;</span>0\<span class="hljs-symbol">&amp;quot;</span><span class="hljs-symbol">&amp;gt;</span>\<br>     <span class="hljs-symbol">&amp;lt;</span>/iframe<span class="hljs-symbol">&amp;gt;</span>\<br>     <span class="hljs-symbol">&amp;lt;</span>/noscript<span class="hljs-symbol">&amp;gt;</span>\<br>     <span class="hljs-symbol">&amp;lt;</span>/script<span class="hljs-symbol">&amp;gt;</span>\<br>     <span class="hljs-symbol">&amp;lt;</span>/body<span class="hljs-symbol">&amp;gt;</span>\<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>jQuery 学习笔记</title>
    <link href="/2020/11/19/jQuery%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/11/19/jQuery%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="去除表单空值"><a href="#去除表单空值" class="headerlink" title="去除表单空值"></a>去除表单空值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input&quot;</span>, <span class="hljs-string">&quot;#submForm&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>$(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>() == <span class="hljs-string">&quot;&quot;</span> &amp;&amp; $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">remove</span>();<br>&#125;)<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$(<span class="hljs-string">&quot;input:text[value=&quot;</span><span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&quot;#submForm&quot;</span>).<span class="hljs-built_in">remove</span>();<br></code></pre></td></tr></table></figure><h1 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> serialized = $(<span class="hljs-string">&quot;#submForm&quot;</span>).serialize()<br></code></pre></td></tr></table></figure><p>获取表单所有值$(“form”).serialize()</p><h1 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h1><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade">$(document).ready(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&quot;#myForm&quot;</span>).submit(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>$(this).<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;:input&quot;</span>).<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> $.<span class="hljs-built_in">trim</span>(this.value).<span class="hljs-built_in">length</span> &gt; <span class="hljs-number">0</span><br>    &#125;).serialize();<br>    alert(<span class="hljs-string">&quot;JavaScript done&quot;</span>);<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>$.trim() 函数用于去除字符串两端的空白字符</p><h1 id="jQuery-监听元素内容变化的方法"><a href="#jQuery-监听元素内容变化的方法" class="headerlink" title="jQuery 监听元素内容变化的方法"></a>jQuery 监听元素内容变化的方法</h1><blockquote><p>我们可以用 onchange 事件来完成元素值发生改变触发的监听。但是 onchange 比较适用于<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>以及 <code>&lt;select&gt;</code> 元素,对于 div，span 等元素就不能使用了。</p></blockquote><p>当 $(“span”).html() 获取的是个空，或者获取的不是自己想要的。原因是当我们获取的时候，元素的内容还没有发生改变，这个时候就需要监听这个 span 内容了。</p><blockquote><p>下面举两个小例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#test-editormd-view2&quot;</span>).<span class="hljs-title function_">bind</span>(<span class="hljs-string">&quot;DOMNodeInserted&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(e.<span class="hljs-property">target</span>).<span class="hljs-title function_">html</span>());<br>&#125;);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;#test-editormd-view2&quot;</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;DOMNodeInserted&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  $(<span class="hljs-string">&quot;#content-loading&quot;</span>).<span class="hljs-title function_">remove</span>();<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="ajax-实现文件上传"><a href="#ajax-实现文件上传" class="headerlink" title="ajax 实现文件上传"></a>ajax 实现文件上传</h1><p>我在写 jQuery 接口上传文件的时候，遇到一个特头疼的问题，那就是上传图片，刚开始那我以为一个简单的 form 表单就搞定了，没想到写了两个小时都没写出来，心情那个烦躁啊，有一种想砸电脑的冲动，最后那我就用下面的方法实现了这个功能，突然发现好简单，分享给大家！废话不多说，直接上干货，代码走起。。。。</p><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><h2 id="html-代码段"><a href="#html-代码段" class="headerlink" title="html 代码段"></a>html 代码段</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;photo&quot;</span> <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;photo&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">placeholder</span>=<span class="hljs-string">&quot;免冠照片&quot;</span>&gt;<br>&lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attribute">onclick</span>=<span class="hljs-string">&quot;postData();&quot;</span> <span class="hljs-attribute">value</span>=<span class="hljs-string">&quot;下一步&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;width:100px;height:30px;&quot;</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="jQuery-代码段"><a href="#jQuery-代码段" class="headerlink" title="jQuery 代码段"></a>jQuery 代码段</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">postData</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> formData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>();<br>    formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;photo&quot;</span>,$(<span class="hljs-string">&quot;#photo&quot;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]);<br>    formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;service&quot;</span>,<span class="hljs-string">&#x27;App.Passion.UploadFile&#x27;</span>);<br>    formData.<span class="hljs-title function_">append</span>(<span class="hljs-string">&quot;token&quot;</span>,token);<br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>        <span class="hljs-attr">url</span>:<span class="hljs-string">&#x27;http://www.baidu.com/&#x27;</span>, <span class="hljs-comment">/*接口域名地址*/</span><br>        <span class="hljs-attr">type</span>:<span class="hljs-string">&#x27;post&#x27;</span>,<br>        <span class="hljs-attr">data</span>: formData,<br>        <span class="hljs-attr">contentType</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">processData</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">success</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>)&#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res.<span class="hljs-property">data</span>);<br>            <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;code&quot;</span>]==<span class="hljs-string">&quot;succ&quot;</span>)&#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;成功&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(res.<span class="hljs-property">data</span>[<span class="hljs-string">&quot;code&quot;</span>]==<span class="hljs-string">&quot;err&quot;</span>)&#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;失败&#x27;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res);<br>            &#125;<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>  $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)<br>  &#123;$(<span class="hljs-string">&quot;.but&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FormData</span>($(<span class="hljs-string">&quot;#form1&quot;</span>)[<span class="hljs-number">0</span>]);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data);<br>    <span class="hljs-comment">// $.post(&#x27;up.php&#x27;,&#123;p:2&#125;,function(data)&#123;</span><br>    <span class="hljs-comment">//    alert(data);</span><br>    <span class="hljs-comment">//  &#125;)</span><br>    $.<span class="hljs-title function_">ajax</span>(&#123;<br>      <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;up.php&quot;</span>,<br>      <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;POST&quot;</span>,<br>      <span class="hljs-attr">data</span>: data,<br>      <span class="hljs-attr">dataType</span>: <span class="hljs-string">&quot;JSON&quot;</span>,<br>      <span class="hljs-attr">cache</span>: <span class="hljs-literal">false</span>,<br>      <span class="hljs-attr">processData</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//不处理发送的数据，因为data值是FormData对象，不需要对数据做处理</span><br>      <span class="hljs-attr">contentType</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">//不设置Content-type请求头</span><br>    &#125;).<span class="hljs-title function_">done</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">ret</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(ret);<br>    &#125;);<br>  &#125;)&#125;<br>  )<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h1 id="jquery-判断点击事件是否在目标区域"><a href="#jquery-判断点击事件是否在目标区域" class="headerlink" title="jquery 判断点击事件是否在目标区域"></a>jquery 判断点击事件是否在目标区域</h1><p>很多时候需要在鼠标点击非目标区域 div 将目标 div 隐藏的效果，这是需要判断点击事件是否在目标区域内</p><p>jquery 的实现方法是：(最近更新,未测)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>        e = <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span> || e; <span class="hljs-comment">// 兼容IE7</span><br>        obj = $(e.<span class="hljs-property">srcElement</span> || e.<span class="hljs-property">target</span>);<br>          <span class="hljs-keyword">if</span> ($(obj).<span class="hljs-title function_">is</span>(<span class="hljs-string">&quot;#elem,#elem *&quot;</span>)) &#123;<br>           <span class="hljs-comment">// alert(&#x27;内部区域&#x27;);</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你的点击不在目标区域&#x27;</span>);<br>        &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>这样就可以进行其他效果的操作了,另外一种类似思路:jquery判断点击区域 隐藏&#x2F;显示其他区域</p><p>原始写法:(不兼容ff)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">click</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">if</span> ($(event.<span class="hljs-property">srcElement</span>).<span class="hljs-title function_">is</span>(<span class="hljs-string">&quot;#elem,#elem \*&quot;</span>)) &#123;<br>        <span class="hljs-comment">// alert(&#x27;内部区域&#x27;);</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;    <br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;你的点击不在目标区域&#x27;</span>);<br>    &#125;    <br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="jQuery选择器获取第一个子元素以及带空格的class"><a href="#jQuery选择器获取第一个子元素以及带空格的class" class="headerlink" title="jQuery选择器获取第一个子元素以及带空格的class"></a>jQuery选择器获取第一个子元素以及带空格的class</h1><p>jQuery选择器选取第一个子元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;p:first&quot;</span>)<br><span class="hljs-string">``</span><span class="hljs-string">``</span><br><br>jQuery选择器选取<span class="hljs-variable constant_">HTML</span> 中 <span class="hljs-keyword">class</span>=<span class="hljs-string">&quot;hov_bg hov2&quot;</span> <span class="hljs-keyword">class</span>中带有空格的这类元素<br><span class="hljs-string">``</span><span class="hljs-string">`javascript</span><br><span class="hljs-string">$(&quot;.hov_bg.hov2&quot;);</span><br></code></pre></td></tr></table></figure><p>该选择器可以筛选出同时拥有class&#x3D;”hov_bg hov2”样式的HTML元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;.hov2&quot;</span>);<br></code></pre></td></tr></table></figure><p>该选择器可以筛选出class&#x3D;”hov2”和class&#x3D;”hov_bg hov2”的元素</p><p>例子:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span>simple<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;layer container&quot;</span>&gt;</span>complex<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-title function_">alert</span>($(<span class="hljs-string">&quot;.container.layer&quot;</span>).<span class="hljs-title function_">html</span>());</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>````<br><br>class 中带空格不是指一个 class，而是指两种 class 中的任意一种。<br>下面是详解：<br><br>CSS 多类选择器<br>在上一节中，我们处理了 class 值中包含一个词的情况。在 HTML 中，一个 class 值中可能包含一个词列表，各个词之间用空格分隔。例如，如果希望将一个特定的元素同时标记为重要（important）和警告（warning），就可以写作：<br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;important warning&quot;</span>&gt;</span> This paragraph is a very important warning. <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>这两个词的顺序无关紧要，写成 warning important 也可以。<br>我们假设 class 为 important 的所有元素都是粗体，而 class 为 warning 的所有元素为斜体，class 中同时包含 important 和 warning 的所有元素还有一个银色的背景 。就可以写作：<br><br>```CSS<br>.important &#123;[font-weight](https://www.baidu.com/s?wd=font-weight&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao):bold;&#125;<br>.warning &#123;[font-weight](https://www.baidu.com/s?wd=font-weight&amp;tn=SE_PcZhidaonwhc_ngpagmjz&amp;rsv_dl=gh_pc_zhidao):italic;&#125;<br>.important.warning &#123;background:silver;&#125;<br></code></pre></td></tr></table></figure><h1 id="监听滚动事件"><a href="#监听滚动事件" class="headerlink" title="监听滚动事件"></a>监听滚动事件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scroll</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> scroH = $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">scrollTop</span>(); <span class="hljs-comment">//滚动高度</span><br>  <span class="hljs-keyword">var</span> viewH = $(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">height</span>(); <span class="hljs-comment">//可见高度</span><br>  <span class="hljs-keyword">var</span> contentH = $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">height</span>(); <span class="hljs-comment">//内容高度</span><br>  <span class="hljs-keyword">if</span> (scroH &gt; <span class="hljs-number">100</span>) &#123;<br>    <span class="hljs-comment">//距离顶部大于100px时</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> (contentH - (scroH + viewH) &lt;= <span class="hljs-number">100</span>) &#123;<br>    <span class="hljs-comment">//距离底部高度小于100px</span><br>  &#125;<br>  <span class="hljs-keyword">if</span> ((contentH = scroH + viewH)) &#123;<br>    <span class="hljs-comment">//滚动条滑到底部啦</span><br>  &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="jquery-获取所有选中的-checkbox"><a href="#jquery-获取所有选中的-checkbox" class="headerlink" title="jquery 获取所有选中的 checkbox"></a>jquery 获取所有选中的 checkbox</h1><p>获取所有 name 为 spCodeId 的 checkbox</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> spCodesTemp = <span class="hljs-string">&quot;&quot;</span>;<br>$(<span class="hljs-string">&quot;input:checkbox[name=spCodeId]:checked&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">i</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-number">0</span> == i) &#123;<br>    spCodesTemp = $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>();<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    spCodesTemp += <span class="hljs-string">&quot;,&quot;</span> + $(<span class="hljs-variable language_">this</span>).<span class="hljs-title function_">val</span>();<br>  &#125;<br>&#125;);<br>$(<span class="hljs-string">&quot;#txt_spCodes&quot;</span>).<span class="hljs-title function_">val</span>(spCodesTemp);<br></code></pre></td></tr></table></figure><p>以类型查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input[type=&#x27;checkbox&#x27;][checked]&quot;</span>)<br></code></pre></td></tr></table></figure><p>以名称查找</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;input:checkbox[name=&#x27;the checkbox name&#x27;]:checked&quot;</span>)<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;如果是在某一些标签下查找的话，为了防止查找到 table #tbTemplate 元素以外的 checkbox：checked，我们可以这样来限制：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&quot;table#tbTemplate input:checkbox[name=&#x27;the checkbox name&#x27;]:checked&quot;</span>)<br><span class="hljs-string">``</span><span class="hljs-string">`  </span><br><span class="hljs-string"></span><br><span class="hljs-string">原生态的用法</span><br><span class="hljs-string"></span><br><span class="hljs-string">`</span><span class="hljs-string">``</span><span class="hljs-title class_">JavaScript</span><br>$($(<span class="hljs-string">&quot;table#tbTemplate input[type=&#x27;checkbox&#x27;]&quot;</span>),<span class="hljs-keyword">function</span>(<span class="hljs-params">i,checkbox</span>)&#123;<br>     <span class="hljs-keyword">if</span>(checkbox.<span class="hljs-property">checked</span>)&#123;<br>          <span class="hljs-comment">// keep the state. or log this checked......</span><br>     &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>判断多选框是否有选中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (!$(<span class="hljs-string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>).<span class="hljs-title function_">is</span>(<span class="hljs-string">&#x27;:checked&#x27;</span>)) &#123; <br>    $(<span class="hljs-string">&#x27;#sitetable&#x27;</span>).<span class="hljs-title function_">hide</span>(); <br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span></span><br><span class="hljs-tag">      <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span></span><br><span class="hljs-tag">      <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;use&quot;</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;usr&quot;</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">&quot;3&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;use&quot;</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">&quot;5&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ser&quot;</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">&quot;7&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;uer&quot;</span> <span class="hljs-attr">data-id</span>=<span class="hljs-string">&quot;9&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;选择&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/static/admin/js/core/jquery.3.2.1.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">      $(() =&gt; &#123;</span><br><span class="language-javascript">        $(<span class="hljs-string">&quot;input:button&quot;</span>).<span class="hljs-title function_">click</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">          $(<span class="hljs-string">&quot;input:checkbox:checked&quot;</span>).<span class="hljs-title function_">each</span>(<span class="hljs-function">(<span class="hljs-params">e, w</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>($(w).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&quot;data-id&quot;</span>));</span><br><span class="language-javascript">          &#125;);</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux 里的 2&gt;&amp;1 究竟是什么</title>
    <link href="/2020/11/19/Linux%20%E9%87%8C%E7%9A%84%202&amp;gt;&amp;amp;1%20%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <url>/2020/11/19/Linux%20%E9%87%8C%E7%9A%84%202&amp;gt;&amp;amp;1%20%E7%A9%B6%E7%AB%9F%E6%98%AF%E4%BB%80%E4%B9%88/</url>
    
    <content type="html"><![CDATA[<p>我们在Linux下经常会碰到<code>nohup command&gt;/dev/null 2&gt;&amp;1 &amp;</code>这样形式的命令。首先我们把这条命令大概分解下：</p><ul><li>首先就是一个<code>nohup</code>：表示当前用户和系统的会话下的进程忽略响应HUP消息。</li><li>&amp;是把该命令以后台的job的形式运行。</li><li>command&gt;&#x2F;dev&#x2F;null较好理解，&#x2F;dev&#x2F;null表示一个空设备，就是说把 command 的执行结果重定向到空设备中，说白了就是不显示任何信息。</li></ul><blockquote><p>可以把&#x2F;dev&#x2F;null 可以看作”黑洞”。它等价于一个只写文件。所有写入它的内容都会永远丢失，而尝试从它那儿读取内容则什么也读不到。</p></blockquote><p>那么2&gt;&amp;1又是什么含义?</p><hr><p><strong>几个基本符号及其含义：</strong></p><ul><li>&#x2F;dev&#x2F;null 表示空设备文件；</li><li>0 表示stdin标准输入；</li><li>1 表示stdout标准输出；</li><li>2 表示stderr标准错误。</li></ul><hr><p><strong>从<code>command&gt;/dev/null</code>说起</strong></p><p>其实这条命令是一个缩写版，对于一个重定向命令，肯定是<code>a &gt; b</code>这种形式，那么<code>command &gt; /dev/null</code>难道是command 充当 a 的角色，<code>/dev/null</code> 充当 b 的角色。这样看起来比较合理，其实一条命令肯定是充当不了 a，肯定是 command 执行产生的输出来充当 a，其实就是标准输出 stdout。所以<code>command &gt; /dev/null</code>相当于执行了<code>command 1 &gt; /dev/null</code>。执行 command 产生了标准输出 stdout（用1表示），重定向到<code>/dev/null</code>的设备文件中。</p><hr><p><strong>说说 <code>2&gt;&amp;1</code></strong></p><p>通过上面<code>command &gt; /dev/null</code>等价于<code>command 1 &gt; /dev/null</code>，那么对于<code>2&gt;&amp;1</code>也就好理解了，2就是标准错误，1是标准输出，那么这条命令不就是相当于把标准错误重定向到标准输出么。</p><hr><p><strong><code>2&gt;1</code>和<code>2&gt;&amp;1</code>的写法有什么区别：</strong></p><ul><li><code>2&gt;1</code>的作用是把标准错误的输出重定向到1，但这个1不是标准输出，而是一个文件!!!,文件名就是1；</li><li><code>2&gt;&amp;1</code>的作用是把标准错误的输出重定向到标准输出1，&amp;指示不要把1当作普通文件，而是fd&#x3D;1即标准输出来处理。</li></ul><hr><p><strong><code>command&gt;a 2&gt;a</code> 与 <code>command&gt;a 2&gt;&amp;1</code>的区别</strong></p><p>通过上面的分析，对于<code>command&gt;a 2&gt;&amp;1</code>这条命令，等价于<code>command 1&gt;a 2&gt;&amp;1</code>可以理解为执行 command 产生的标准输入重定向到文件 a 中，标准错误也重定向到文件 a 中。那么是否就说<code>command 1&gt;a 2&gt;&amp;1</code>等价于<code>command 1&gt;a 2&gt;a</code>呢。其实不是，<code>command 1&gt;a 2&gt;&amp;1</code>与<code>command 1&gt;a 2&gt;a</code>还是有区别的，区别就在于前者只打开一次文件a，后者会打开文件两次，并导致 stdout 被 stderr 覆盖。<code>&amp;1</code>的含义就可以理解为用标准输出的引用，引用的就是重定向标准输出产生打开的 a。从IO效率上来讲，<code>command 1&gt;a 2&gt;&amp;1</code>比<code>command 1&gt;a 2&gt;a</code>的效率更高。</p><hr><p><strong>为何2&gt;&amp;1要写在后面？</strong></p><p>index.php task testOne &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1</p><p>我们可以理解为，左边是标准输出，好，现在标准输出直接输入到<code>/dev/null</code>中，而<code>2&gt;&amp;1</code>是将标准错误重定向到标准输出，所以当程序产生错误的时候，相当于错误流向左边，而左边依旧是输入到<code>/dev/null</code>中。</p><p>可以理解为，如果写在中间，那会把隔断标准输出指定输出的文件</p><p>你可以用：</p><ul><li>ls 2&gt;1测试一下，不会报没有2文件的错误，但会输出一个空的文件1；</li><li>ls xxx 2&gt;1测试，没有xxx这个文件的错误输出到了1中；</li><li>ls xxx 2&gt;&amp;1测试，不会生成1这个文件了，不过错误跑到标准输出了；</li><li>ls xxx &gt;out.txt 2&gt;&amp;1，实际上可换成 ls xxx 1&gt;out.txt 2&gt;&amp;1；重定向符号&gt;默认是1，错误和输出都传到out.txt了。</li></ul><hr><p><strong>举个栗子</strong></p><p>来个shell</p><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs d"><span class="hljs-comment">//test.sh</span><br><span class="hljs-meta">#!/bin/sh</span><br>t<br>date1234<br></code></pre></td></tr></table></figure><p><code>chmod +x test.sh</code>为test.sh增加执行权限。这里我们弄了两条命令，其中t指令并不存在，执行会报错，会输出到stderr。date能正常执行，执行会输出当前时间，会输出到stdout。</p><p>执行<code>./test.sh &gt; res1.log</code>结果为：</p><p>我们发现stderr并没有被重定向到res1.log中，stderr被打印到了屏幕上。这也进一步证明了上面说的<code>./test.sh &gt; res1.log</code>等价于<code>./test.sh 1&gt;res1.log</code></p><p>执行<code>./test.sh&gt;res2.log 2&gt;&amp;1</code>结果为：</p><p>这次我们发现stdout和stderr都被重定向到了res2.log中了。上面我们未对stderr也就是2说明如何输出，stderr就输出到了屏 幕上，这里我们不仅对stdout进行说明，重定向到res2.log中，对标准错误也进行了说明，让其重定向到res2.log的引用即 res2.log的文件描述符中。</p><hr><p><strong>再思考一下</strong></p><p>为何<code>2&gt;&amp;1</code>要写在 command&gt;1 的后面，直接用2可以么。比如<code>ls 2&gt;a</code>。其实这种用法也是可以的，ls 命令列出当前的目录，用stdout（1）表示，由于这个时候没有stderr（2），这个时候执行<code>ls 2&gt;a</code>也会正常产生一个 a 的文件，但是 a 的文件中是空的，因为这时候执行ls并没有产生stderr（2）。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Apache伪静态Rewrite详解</title>
    <link href="/2020/11/18/Apache%E4%BC%AA%E9%9D%99%E6%80%81Rewrite%E8%AF%A6%E8%A7%A3/"/>
    <url>/2020/11/18/Apache%E4%BC%AA%E9%9D%99%E6%80%81Rewrite%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Rewrite规则简介："><a href="#一、Rewrite规则简介：" class="headerlink" title="一、Rewrite规则简介："></a>一、Rewrite规则简介：</h1><blockquote><p>Rewirte主要的功能就是实现URL的跳转，它的正则表达式是基于 Perl语言。可基于服务器级的(httpd.conf)和目录级的 (.htaccess)两种方式。如果要想用到rewrite模块，必须先安装或加载rewrite模块。方法有两种一种是编译apache的时候就直接 安装rewrite模块，别一种是编译apache时以DSO模式安装apache,然后再利用源码和apxs来安装rewrite模块。</p></blockquote><h1 id="二、在Apache配置中启用Rewrite"><a href="#二、在Apache配置中启用Rewrite" class="headerlink" title="二、在Apache配置中启用Rewrite"></a>二、在Apache配置中启用Rewrite</h1><p>打开配置文件httpd.conf：</p><p>复制代码 代码如下:</p><p>1.启用rewrite<br># LoadModule rewrite_module modules&#x2F;mod_rewrite.so 去除前面的 #<br>2.启用.htaccess<br>在虚拟机配置项中<br>AllowOverride None    修改为： AllowOverride All</p><h1 id="三、Rewrite基本写法"><a href="#三、Rewrite基本写法" class="headerlink" title="三、Rewrite基本写法"></a>三、Rewrite基本写法</h1><p>服务器有配置文件不可能由我们来改，所以大多情况下要在网站的根目录下建一个.htaccess文件。</p><p>复制代码 代码如下:</p><p>RewriteEngine on    &#x2F;&#x2F;启动rewrite引擎<br>RewriteRule ^&#x2F;index([0-9]<em>).html$ &#x2F;index.php?id&#x3D;$1   &#x2F;&#x2F;“([0-9]</em>)” 代表范围 用(.<em>)代表所有，下同。<br>RewriteRule ^&#x2F;index([0-9]</em>)&#x2F;$ &#x2F;index.php?id&#x3D;$1 [R]   &#x2F;&#x2F;虚拟目录</p><h1 id="四、Apache-mod-rewrite规则重写的标志一览"><a href="#四、Apache-mod-rewrite规则重写的标志一览" class="headerlink" title="四、Apache mod_rewrite规则重写的标志一览"></a>四、Apache mod_rewrite规则重写的标志一览</h1><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-number">1</span>) R<span class="hljs-literal">[=<span class="hljs-identifier">code</span>]</span>(force redirect) 强制外部重定向<br>强制在替代字符串加上http:<span class="hljs-comment">//thishost[:thisport]/前缀重定向到外部的URL.如果code不指定，将用缺省的302 HTTP状态码。</span><br><span class="hljs-number">2</span>) <span class="hljs-constructor">F(<span class="hljs-params">force</span> URL <span class="hljs-params">to</span> <span class="hljs-params">be</span> <span class="hljs-params">forbidden</span>)</span>禁用URL,返回<span class="hljs-number">403</span>HTTP状态码。<br><span class="hljs-number">3</span>) <span class="hljs-constructor">G(<span class="hljs-params">force</span> URL <span class="hljs-params">to</span> <span class="hljs-params">be</span> <span class="hljs-params">gone</span>)</span> 强制URL为GONE，返回<span class="hljs-number">410</span>HTTP状态码。<br><span class="hljs-number">4</span>) <span class="hljs-constructor">P(<span class="hljs-params">force</span> <span class="hljs-params">proxy</span>)</span> 强制使用代理转发。<br><span class="hljs-number">5</span>) <span class="hljs-constructor">L(<span class="hljs-params">last</span> <span class="hljs-params">rule</span>)</span> 表明当前规则是最后一条规则，停止分析以后规则的重写。<br><span class="hljs-number">6</span>) <span class="hljs-constructor">N(<span class="hljs-params">next</span> <span class="hljs-params">round</span>)</span> 重新从第一条规则开始运行重写过程。<br><span class="hljs-number">7</span>) <span class="hljs-constructor">C(<span class="hljs-params">chained</span> <span class="hljs-params">with</span> <span class="hljs-params">next</span> <span class="hljs-params">rule</span>)</span> 与下一条规则关联<br>如果规则匹配则正常处理，该标志无效，如果不匹配，那么下面所有关联的规则都跳过。<br><span class="hljs-number">8</span>) T=MIME-<span class="hljs-keyword">type</span>(force MIME <span class="hljs-keyword">type</span>) 强制MIME类型<br><span class="hljs-number">9</span>) NS (used only <span class="hljs-keyword">if</span> no internal sub-request) 只用于不是内部子请求<br><span class="hljs-number">10</span>) <span class="hljs-constructor">NC(<span class="hljs-params">no</span> <span class="hljs-params">case</span>)</span> 不区分大小写<br><span class="hljs-number">11</span>) <span class="hljs-constructor">QSA(<span class="hljs-params">query</span> <span class="hljs-params">string</span> <span class="hljs-params">append</span>)</span> 追加请求字符串<br><span class="hljs-number">12</span>) <span class="hljs-constructor">NE(<span class="hljs-params">no</span> URI <span class="hljs-params">escaping</span> <span class="hljs-params">of</span> <span class="hljs-params">output</span>)</span> 不在输出转义特殊字符<br>例如：RewriteRule /foo/(.*) /bar?arg=P1%<span class="hljs-number">3</span>d$<span class="hljs-number">1</span> <span class="hljs-literal">[R,NE]</span> 将能正确的将/foo/zoo转换成/bar?arg=P1=zoo<br><span class="hljs-number">13</span>) <span class="hljs-constructor">PT(<span class="hljs-params">pass</span> <span class="hljs-params">through</span> <span class="hljs-params">to</span> <span class="hljs-params">next</span> <span class="hljs-params">handler</span>)</span> 传递给下一个处理<br>例如:<br>RewriteRule ^/abc(.*) /def$<span class="hljs-number">1</span> <span class="hljs-literal">[PT]</span> # 将会交给/def规则处理<br>Alias /def /ghi<br><br><span class="hljs-number">14</span>) S=num(skip next rule(s)) 跳过num条规则<br><span class="hljs-number">15</span>) E=VAR:<span class="hljs-constructor">VAL(<span class="hljs-params">set</span> <span class="hljs-params">environment</span> <span class="hljs-params">variable</span>)</span> 设置环境变量<br></code></pre></td></tr></table></figure><h1 id="五、Apache-rewrite例子"><a href="#五、Apache-rewrite例子" class="headerlink" title="五、Apache rewrite例子"></a>五、Apache rewrite例子</h1><h2 id="例子一"><a href="#例子一" class="headerlink" title="例子一:"></a>例子一:</h2><p>同时达到下面两个要求：<br>1.用<a href="http://www.jb51.net/xxx.php">http://www.jb51.net/xxx.php</a> 来访问 <a href="http://www.jb51.net/xxx/">http://www.jb51.net/xxx/</a><br>2.用<a href="http://yyy.jb51.net/">http://yyy.jb51.net</a> 来访问 <a href="http://www.jb51.net/user.php?username=yyy">http://www.jb51.net/user.php?username=yyy</a> 的功能</p><p>代码如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">RewriteEngine On<br>RewriteCond %&#123;HTTP_HOST&#125; ^www.jb51.net<br>RewriteCond %&#123;REQUEST_URI&#125; !^user.php$<br>RewriteCond %&#123;QUERY_STRING&#125; &quot;!^page&quot;<br>RewriteCond %&#123;REQUEST_URI&#125; .php$<br>RewriteRule (.*).php$ http://www.jb51.net/$1/ [R]<br>RewriteCond %&#123;HTTP_HOST&#125; !^www.jb51.net<br>RewriteRule ^(.+) %&#123;HTTP_HOST&#125; [C]<br>RewriteRule ^([^.]+).jb51.net http://www.jb51.net/user.php?username=$1<br>RewriteCond %&#123;REQUEST_FILENAME&#125; !-d<br>RewriteCond %&#123;REQUEST_FILENAME&#125; !-f<br></code></pre></td></tr></table></figure><h2 id="例子二："><a href="#例子二：" class="headerlink" title="例子二："></a>例子二：</h2><p>代码如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">/type.php?typeid=* –&gt; /type*.html<br>/type.php?typeid=*&amp;page=* –&gt; /type*page*.html<br>RewriteRule ^/type([0-9]+).html$ /type.php?typeid=$1 [PT]<br>RewriteRule ^/type([0-9]+)page([0-9]+).html$ /type.php?typeid=$1&amp;page=$2 [PT]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>ob系列函数总结</title>
    <link href="/2020/11/18/ob%E7%B3%BB%E5%88%97%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/"/>
    <url>/2020/11/18/ob%E7%B3%BB%E5%88%97%E5%87%BD%E6%95%B0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>ob系列函数中常用函数</p><p>ob_start();            &#x2F;&#x2F;打开一个输出缓冲区，所有的输出信息不再直接发送到浏览器，而是保存在输出缓冲区里面。<br>ob_clean();            &#x2F;&#x2F;删除内部缓冲区的内容，不关闭缓冲区(不输出)。<br>ob_end_clean();        &#x2F;&#x2F;删除内部缓冲区的内容，关闭缓冲区(不输出)。<br>ob_get_clean();        &#x2F;&#x2F;返回内部缓冲区的内容，关闭缓冲区。相当于执行 ob_get_contents() and ob_end_clean()<br>ob_flush();            &#x2F;&#x2F;发送内部缓冲区的内容到浏览器，删除缓冲区的内容，不关闭缓冲区。<br>ob_end_flush();        &#x2F;&#x2F;发送内部缓冲区的内容到浏览器，删除缓冲区的内容，关闭缓冲区。<br>ob_get_flush();        &#x2F;&#x2F;返回内部缓冲区的内容，并关闭缓冲区，再释放缓冲区的内容。相当于ob_end_flush()并返回缓冲区内容。<br>flush();               &#x2F;&#x2F;将ob_flush释放出来的内容，以及不在PHP缓冲区中的内容，全部输出至浏览器；刷新内部缓冲区的内容，并输出。</p><p>ob_get_contents();     &#x2F;&#x2F;返回缓冲区的内容，不输出。<br>ob_get_length();       &#x2F;&#x2F;返回内部缓冲区的长度，如果缓冲区未被激活，该函数返回FALSE。<br>ob_get_level();        &#x2F;&#x2F;Return the nesting level of the output buffering mechanism.<br>ob_get_status();       &#x2F;&#x2F;Get status of output buffers.</p><p>ob_implicit_flush();   &#x2F;&#x2F;打开或关闭绝对刷新，默认为关闭，打开后ob_implicit_flush(true)，所谓绝对刷新，即当有输出语句(e.g: echo)被执行时，便把输出直接发送到浏览器，而不再需要调用flush()或等到脚本结束时才输出。</p><p>ob_gzhandler               &#x2F;&#x2F;ob_start回调函数，用gzip压缩缓冲区的内容。<br>ob_list_handlers           &#x2F;&#x2F;List all output handlers in use<br>output_add_rewrite_var     &#x2F;&#x2F;Add URL rewriter values<br>output_reset_rewrite_vars  &#x2F;&#x2F;Reset URL rewriter values</p><p>这些函数的行为受php_ini设置的影响：<br>output_buffering       &#x2F;&#x2F;该值为ON时，将在所有脚本中使用输出控制；若该值为一个数字，则代表缓冲区的最大字节限制，当缓存内容达到该上限时将会自动向浏览器输出当前的缓冲区里的内容。<br>output_handler         &#x2F;&#x2F;该选项可将脚本所有的输出，重定向到一个函数。例如，将 output_handler 设置为 mb_output_handler() 时，字符的编码将被修改为指定的编码。设置的任何处理函数，将自动的处理输出缓冲。<br>implicit_flush         &#x2F;&#x2F;作用同ob_implicit_flush，默认为Off。</p><p>用PHP的ob_start();<br>控制您的浏览器cache</p><p>Output Control 函数可以让你自由控制脚本中数据的输出。它非常地有用，特别是对于：当你想在数据已经输出后，再输出文件头的情况。输出控制函数不对使用 header() 或 setcookie(), 发送的文件头信息产生影响,只对那些类似于 echo() 和 PHP 代码的数据块有作用。<br>我们先举一个简单的例子，让大家对Output Control有一个大致的印象：<br>Example 1.</p><p>程序代码 程序代码<br>&lt;?php<br>ob_start(); &#x2F;&#x2F;打开缓冲区<br>echo &amp;quot;Hellon&amp;quot;; &#x2F;&#x2F;输出<br>header(&quot;location:index.php&quot;); &#x2F;&#x2F;把浏览器重定向到index.php<br>ob_end_flush();&#x2F;&#x2F;输出全部内容到浏览器<br>?&gt;</p><p>所有对header()函数有了解的人都知道，这个函数会发送一段文件头给浏览器，但是如果在使用这个函数之前已经有了任何输出（包括空输出，比如空格，回车和换行）就会提示出错。如果我们去掉第一行的ob_start()，再执行此程序，我们会发现得到了一条错误提示：&quot;Header had all ready send by&quot;！但是加上ob_start，就不会提示出错，原因是当打开了缓冲区，echo后面的字符不会输出到浏览器，而是保留在服务器，直到你使用 flush或者ob_end_flush才会输出，所以并不会有任何文件头输出的错误！</p><p>一、 相关函数简介：<br>1、Flush：刷新缓冲区的内容，输出。<br>函数格式：flush()<br>说明：这个函数经常使用，效率很高。<br>2、ob_start ：打开输出缓冲区<br>函数格式：void ob_start(void)<br>说明：当缓冲区激活时，所有来自PHP程序的非文件头信息均不会发送，而是保存在内部缓冲区。为了输出缓冲区的内容，可以使用ob_end_flush()或flush()输出缓冲区的内容。<br>3 、ob_get_contents ：返回内部缓冲区的内容。<br>使用方法：string ob_get_contents(void)<br>说明：这个函数会返回当前缓冲区中的内容，如果输出缓冲区没有激活，则返回 FALSE 。<br>4、ob_get_length：返回内部缓冲区的长度。<br>使用方法：int ob_get_length(void)<br>说明：这个函数会返回当前缓冲区中的长度；和ob_get_contents一样，如果输出缓冲区没有激活。则返回 FALSE。<br>5、ob_end_flush ：发送内部缓冲区的内容到浏览器，并且关闭输出缓冲区。<br>使用方法：void ob_end_flush(void)<br>说明：这个函数发送输出缓冲区的内容（如果有的话）。<br>6、ob_end_clean：删除内部缓冲区的内容，并且关闭内部缓冲区<br>使用方法：void ob_end_clean(void)<br>说明：这个函数不会输出内部缓冲区的内容而是把它删除！<br>7、ob_implicit_flush：打开或关闭绝对刷新<br>使用方法：void ob_implicit_flush ([int flag])<br>说明：使用过Perl的人都知道$|&#x3D;x的意义，这个字符串可以打开&#x2F;关闭缓冲区，而ob_implicit_flush函数也和那个一样，默认为关闭缓冲区，打开绝对输出后，每个脚本输出都直接发送到浏览器，不再需要调用 flush()</p><p>二、深入了解：</p><ol><li>关于Flush函数：<br>这个函数在PHP3中就出现了，是一个效率很高的函数，他有一个非常有用的功能就是刷新browser的cache.我们举一个运行效果非常明显的例子来说明flush.<br>Example 2.</li></ol><p>程序代码 程序代码<br>&lt;?php<br>for($i &#x3D; 1; $i &lt;&#x3D; 300; $i++ ) print(&quot; &quot;);<br>&#x2F;&#x2F; 这一句话非常关键，cache的结构使得它的内容只有达到一定的大小才能从浏览器里输出<br>&#x2F;&#x2F; 换言之，如果cache的内容不达到一定的大小，它是不会在程序执行完毕前输出的。经<br>&#x2F;&#x2F; 过测试，我发现这个大小的底限是256个字符长。这意味着cache以后接收的内容都会<br>&#x2F;&#x2F; 源源不断的被发送出去。<br>For($j &#x3D; 1; $j &lt;&#x3D; 20; $j++) {<br>echo $j.&quot;<br>&quot;;<br>flush(); &#x2F;&#x2F;这一部会使cache新增的内容被挤出去，显示到浏览器上<br>sleep(1); &#x2F;&#x2F;让程序&quot;睡&quot;一秒钟，会让你把效果看得更清楚<br>}<br>?&gt;</p><p>注：如果在程序的首部加入ob_implicit_flush()打开绝对刷新,就可以在程序中不再使用flush(),这样做的好处是：提高效率！</p><ol start="2"><li>关于ob系列函数：<br>我想先引用我的好朋友y10k的一个例子：<br>Example 3.</li></ol><p>比如你用得到服务器和客户端的设置信息，但是这个信息会因为客户端的不同而不同，如果想要保存phpinfo()函数的输出怎么办呢？在没有缓冲区控制之前，可以说一点办法也没有，但是有了缓冲区的控制，我们可以轻松的解决：<br>程序代码 程序代码<br>&lt;?php<br>ob_start(); &#x2F;&#x2F;打开缓冲区<br>phpinfo(); &#x2F;&#x2F;使用phpinfo函数<br>$info&#x3D;ob_get_contents(); &#x2F;&#x2F;得到缓冲区的内容并且赋值给$info<br>$file&#x3D;fopen(&#39;info.txt&#39;,&#39;w&#39;); &#x2F;&#x2F;打开文件info.txt<br>fwrite($file,$info); &#x2F;&#x2F;写入信息到info.txt<br>fclose($file); &#x2F;&#x2F;关闭文件info.txt<br>?&gt;</p><p>用以上的方法，就可以把不同用户的phpinfo信息保存下来，这在以前恐怕没有办法办到！其实上面就是将一些&quot;过程&quot;转化为&quot;函数&quot;的方法！<br>或许有人会问：&quot;难道就这个样子吗？还有没有其他用途？&quot;当然有了，比如笔者论坛的PHP 语法加亮显示就和这个有关（PHP默认的语法加亮显示函数会直接输出，不能保存结果，如果在每次调用都显示恐怕会很浪费CPU，笔者的论坛就把语法加亮函数显示的结果用控制缓冲区的方法保留了），大家如果感兴趣的话可以来看看</p><p>可能现在大家对ob_start()的功能有了一定的了解，上面的一个例子看似简单，但实际上已经掌握了使用ob_start()的要点。<br>&lt;1&gt;.使用ob_start打开browser的cache，这样可以保证cache的内容在你调用flush(),ob_end_flush()（或程序执行完毕）之前不会被输出。<br>&lt;2&gt;.现在的你应该知道你所拥有的优势：可以在任何输出内容后面使用header,setcookie以及session，这是 ob_start一个很大的特点；也可以使用ob_start的参数，在cache被写入后，然后自动运行命令，比如ob_start(\ &quot;ob_gzhandler&amp;quot;)；而我们最常用的做法是用ob_get_contents()得到cache中的内容，然后再进行处理……<br>&lt;3&gt;.当处理完毕后，我们可以使用各种方法输出，flush(),ob_end_flush(),以及等到程序执行完毕后的自动输出。当然，如果你用的是ob_get_contents()，那么就要你自己控制输出方式了。</p><p>来，让我们看看能用ob系列函数做些什么……</p><p>一、 静态模版技术</p><p>简介：所谓静态模版技术就是通过某种方式，使得用户在client端得到的是由PHP产生的html页面。如果这个html页面不会再被更新，那么当另外的用户再次浏览此页面时，程序将不会再调用PHP以及相关的数据库，对于某些信息量比较大的网站，例如sina,163,sohu。类似这种的技术带来的好处是非常巨大的。</p><p>我所知道的实现静态输出的有两种办法：<br>&lt;1&gt;.通过y10k修改的phplib的一个叫template.inc.php类实现。<br>&lt;2&gt;.使用ob系列函数实现。<br>对于第一种方法，因为不是这篇文章所要研究的问题，所以不再赘述。<br>我们现在来看一看第二种方法的具体实现：<br>Example 4.</p><p>程序代码 程序代码<br>&lt;?php<br>ob_start();&#x2F;&#x2F;打开缓冲区<br>?&gt;<br>php页面的全部输出<br>&lt;?<br>$content &#x3D; ob_get_contents();&#x2F;&#x2F;取得php页面输出的全部内容<br>$fp &#x3D; fopen(&quot;output00001.html&quot;, &quot;w&quot;); &#x2F;&#x2F;创建一个文件，并打开，准备写入<br>fwrite($fp, $content); &#x2F;&#x2F;把php页面的内容全部写入output00001.html，然后……<br>fclose($fp);<br>?&gt;</p><p>这样，所谓的静态模版就很容易的被实现了……</p><p>二、 捕捉输出</p><p>以上的Example 4.是一种最简单的情况，你还可以在写入前对$content进行操作……<br>你可以设法捕捉一些关键字，然后去对它进行再处理，比如Example 3.所述的PHP语法高亮显示。个人认为，这个功能是此函数最大的精华所在，它可以解决各种各样的问题，但需要你有足够的想象力……</p><p>Example 5.</p><p>程序代码 程序代码<br>&lt;?php<br>Function run_code($code) {<br>    If($code) {<br>        ob_start();<br>        eval($code);<br>       $contents &#x3D; ob_get_contents();<br>       ob_end_clean();<br>    }else {<br>       echo &quot;错误！没有输出&quot;;<br>       exit();<br>}<br>return $contents;<br>?&gt;<br>}</p><p>以上这个例子的用途不是很大，不过很典型$code的本身就是一个含有变量的输出页面，而这个例子用eval把$code中的变量替换，然后对输出结果再进行输出捕捉，再一次的进行处理……</p><p>二、 输出缓存句柄ob_gzhandler</p><p>PHP4.0.4有一个新的输出缓存句柄ob_gzhandler，它与前面的类相似，但用法不同。使用ob_gzhandler时要在php.ini中加入的内容如下：   </p><p>output_handler &#x3D; ob_gzhandler;</p><p>这行代码使得PHP激活输出缓存，并压缩它发送出去的所有内容。<br>如果由于某种原因你不想在php.ini中加上这行代码，你还可以通过PHP源文件所在目录的.htaccess文件改变默认的服务器行为（不压缩），语法如下：    </p><p>php_value output_handler ob_gzhandler</p><p>或者是从PHP代码调用，如下所示：</p><p>ob_start(&quot;ob_gzhandler&quot;);</p><p>采用输出缓存句柄的方法确实非常有效，而且不会给服务器带来什么特殊的负荷。但必须注意的是，Netscape Communicator对压缩图形的支持不佳，因此除非你能够保证所有用户都使用IE浏览器，否则你应该禁止压缩JPEG和GIF图形。一般地，对于所有其他文件，这种压缩都有效，但建议你针对各种浏览器都分别进行测试，特别是当你使用了特殊的插件或者数据查看器时这一点尤其重要。<br>注意事项：<br>1、一些Web服务器的output_buffering默认是4069字符或者更大，即输出内容必须达到4069字符服务器才会flush刷新输出缓冲，为了确保flush有效，最好在ob_flush()函数前有以下语句：<br>代码如下:<br>print str_repeat(&quot;&quot;, 4096);  &#x2F;&#x2F;以确保到达output_buffering值</p><p>2、ob_* 系列函数是操作PHP本身的输出缓冲区，所以ob_flush只刷新PHP自身的缓冲区，而flush是刷新apache的缓冲区。所以，正确使用俩者的顺序是：先ob_flush，然后flush。ob_flush是把数据从PHP的缓冲中释放出来，flush是把缓冲内&#x2F;外的数据全部发送到浏览器。<br>3、不要误认为用了ob_start()后，脚本的echo&#x2F;print等输出就永远不会显示在浏览器上了。因为PHP脚本运行结束后，会自动刷新缓冲区并输出内容。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于linux中日语的编码问题</title>
    <link href="/2020/11/12/%E5%85%B3%E4%BA%8Elinux%E4%B8%AD%E6%97%A5%E8%AF%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <url>/2020/11/12/%E5%85%B3%E4%BA%8Elinux%E4%B8%AD%E6%97%A5%E8%AF%AD%E7%9A%84%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>对于日语的编码</p><p>windows ： Shift-JIS</p><p>Linux ： 2.4内核使用EUC编码，2.6内核中使用UTF8编码</p><p>检查文件编码  nkf -g filename</p><p>通常处理字符编码都使用iconv这个命令，但是iconv命令只能用来处理文件名，但对于文本内容的编码就无法处理了，</p><p>要想对文本内容的字符编码进行转换，就要用到nkf了</p><p>-j           : 转换为 JIS 编码(ISO-2022-JP)，默认<br>-e           : 转换为 EUC 编码<br>-s           : 转换为 Shift-JIS 编码<br>-w           : 转换为 UTF-8 编码（无BOM）<br>-Lu          : 转换为 unix 换行格式(LF)<br>-Lw          : 转换为 windows 换行格式(CRLF)<br>-Lm          : 转换为 macintosh 换行格式(CR)<br>-g(–guess)  : 自动判断编码并显示<br>–version    : 显示版本<br>–help       : 显示帮助<br>linux中转换成window     ：   nkf -sxLw    nkf -swLw<br>window转换成linux         ：   nkf -wxLu</p><p>在vim中输入:e ++enc&#x3D;utf8可以快速解决vim乱码问题，即使语言配置不正确，也可以快速解决乱码问题。</p><p>这种方式的原理是:  当vim无法识别文档的编码的时候，会使用latin-1去读取，导致文档显示上出现乱码，上述命令，就会让vim用utf-8编码的方式重新加载一遍，当然如果你的文档是用gbk编码的，可以使用: e ++&#x3D;enc&#x3D;gbk的方式来转换。</p><p>设置编码还可以用set encoding &#x2F; set fileencoding</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP限速下载</title>
    <link href="/2020/10/29/PHP%E9%99%90%E9%80%9F%E4%B8%8B%E8%BD%BD/"/>
    <url>/2020/10/29/PHP%E9%99%90%E9%80%9F%E4%B8%8B%E8%BD%BD/</url>
    
    <content type="html"><![CDATA[<figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$arr</span> = [<br>    <span class="hljs-string">&quot;b798abe6e1b1318ee36b0dcb3fb9e4d3&quot;</span> =&amp;gt; [<span class="hljs-string">&quot;./img/img.jpg&quot;</span>, <span class="hljs-string">&quot;img.jpg&quot;</span>],<br>    <span class="hljs-string">&quot;4cf350692a4a3bb54d13daacfe8c683b&quot;</span> =&amp;gt; [<span class="hljs-string">&quot;./img/小明.chw&quot;</span>, <span class="hljs-string">&quot;小明.chw&quot;</span>]<br>];<br><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-type:application/octet-stream&quot;</span>);<br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Content-disposition:attachment;filename=&quot;</span> . <span class="hljs-variable">$arr</span>[<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]][<span class="hljs-number">1</span>]);<br><span class="hljs-comment">//    readfile($arr[$_GET[&quot;file&quot;]][0]);</span><br><span class="hljs-variable">$handler</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$arr</span>[<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;file&quot;</span>]][<span class="hljs-number">0</span>], <span class="hljs-string">&quot;rb&quot;</span>);<br><span class="hljs-keyword">while</span> (!<span class="hljs-title function_ invoke__">feof</span>(<span class="hljs-variable">$handler</span>)) &#123;<br>    <span class="hljs-variable">$files</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$handler</span>, <span class="hljs-number">100</span>); <span class="hljs-comment">//限速下载</span><br><span class="hljs-comment">//        flush();</span><br>    <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$files</span>);<br>    <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">20</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$handler</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>译-在多个标签页之间共享sessionStorage</title>
    <link href="/2020/10/25/%E8%AF%91-%E5%9C%A8%E5%A4%9A%E4%B8%AA%E6%A0%87%E7%AD%BE%E9%A1%B5%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%ABsessionStorage/"/>
    <url>/2020/10/25/%E8%AF%91-%E5%9C%A8%E5%A4%9A%E4%B8%AA%E6%A0%87%E7%AD%BE%E9%A1%B5%E4%B9%8B%E9%97%B4%E5%85%B1%E4%BA%ABsessionStorage/</url>
    
    <content type="html"><![CDATA[<p>昨天，就在昨天，前端一同事提了一个问题：<strong>我们的系统，用户重新开一个标签页，就要重新登录</strong>。我当时觉得这怎么可能？结果现场一测，还真是，好尴尬！</p><p>今天抽了点时间网上查了查，才发现原来一直以为很简单的sessionStorage，还真埋了这么一颗雷。不过国外前辈也提出了一个解决方案，不仅如此，文章还把浏览器端保存数据的场景分析的很透彻，所以斗胆翻译了一下。</p><h2 id="原文翻译"><a href="#原文翻译" class="headerlink" title="原文翻译"></a>原文翻译</h2><p>我实现了一种机制可以利用浏览器提供的sessionStorage或memoryStorageStorage的固有的安全性来实现用户身份认证，并且可以保证用户不需要每次新开一个标签页都重新登录。</p><h4 id="现有的浏览器存储机制"><a href="#现有的浏览器存储机制" class="headerlink" title="现有的浏览器存储机制"></a>现有的浏览器存储机制</h4><ul><li><strong>localStorage</strong>：~5MB，数据永久保存直到用户手动删除</li><li><strong>sessionStorage</strong>：~5MB，数据只在当前标签页有效</li><li><strong>cookie</strong>：~4KB，可以设置成永久有效</li><li><strong>session cookie</strong>：~4KB，当用户关闭浏览器时删除（并非总能立即删除）</li></ul><h4 id="安全的认证token保存"><a href="#安全的认证token保存" class="headerlink" title="安全的认证token保存"></a>安全的认证token保存</h4><p>一些重要的系统会要求当用户关闭标签页时会话立刻到期。</p><p>为了达到这个目的，不仅绝对不应该使用cookies来保存任何敏感信息（例如认证token）。甚至session-cookies也无法满足要求，它在标签页关闭（甚至浏览器完全关闭）后还会持续存活一定时间。</p><p>（任何时刻我们都不应该只使用cookies，它还有其他很多问题需要讨论，例如CSRF）</p><p>这些问题就使得我们在保存认证token时应使用内存或sessionStorage。sessionStorage的好处是它允许跨多个页面保存数据，并且也支持浏览器刷新操作。这样用户就可以在多个页面之间跳转或刷新页面而保持登录状态。</p><p>Good。我们将token保存在sessionStorage，并在每次请求服务器时将token放在请求头中来完成用户的身份认证。当用户关闭标签页，token会立即过期。</p><h4 id="但多标签页怎么办？"><a href="#但多标签页怎么办？" class="headerlink" title="但多标签页怎么办？"></a>但多标签页怎么办？</h4><p>即便是在单页面应用中也有一个很常见的情况，用户经常希望打开多个标签页。而此场景下将token保存在sessionStorage中将会带来很差的用户体验，每次开启一个标签页都会要求用户重新登录。没错，sessionStorage不支持跨标签页共享数据。</p><h4 id="利用localStorage事件来跨标签页共享sessionStorage"><a href="#利用localStorage事件来跨标签页共享sessionStorage" class="headerlink" title="利用localStorage事件来跨标签页共享sessionStorage"></a>利用localStorage事件来跨标签页共享sessionStorage</h4><p>我利用localStorage事件提出了一种解决方案。</p><p>当用户新开一个标签页时，我们先来询问其它已经打开的标签页是不是有需要给我们共享的sessionStorage数据。如果有，现有的标签页会通过localStorage事件来传递数据到新打开的标签页中，我们只需要复制一份到本地sessionStorage即可。</p><p>传递过来的sessionStorage绝对不会保存在localStorage，从localStorage事件将数据中复制并保存到sessionStorage，这个流程是在同一个调用中完成，没有中间状态。而且数据是对应事件携带的，并不在localStorage中。（译者注：作者意图解释这个方案的安全性）</p><p><a href="https://blog.guya.net/security/browser_session/sessionStorage.html">在线例子</a></p><p>点击“Set the sessionStorage”，然后打开多个标签页，你会发现sessionStorage共享了。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">// 为了简单明了删除了对IE的支持[好像支持ie11]</span><br>(<span class="hljs-keyword">function</span><span class="hljs-literal">()</span> &#123;<br><br><span class="hljs-comment">//这段代码只在当前页面加入，需要跳转到的页面不需要</span><br><span class="hljs-comment">//sessionStorage.setItem(&amp;#039;user&amp;#039;,&amp;#039;chengyao&amp;#039;)</span><br><br><br><span class="hljs-keyword">if</span> (!sessionStorage.length) &#123;<br><span class="hljs-comment">// 这个调用能触发目标事件，从而达到共享数据的目的</span><br>localStorage.set<span class="hljs-constructor">Item(&amp;#039;<span class="hljs-params">getSessionStorage</span>&amp;#039;, Date.<span class="hljs-params">now</span>()</span>);<br>&#125;;<br><br><span class="hljs-comment">// 该事件是核心</span><br>window.add<span class="hljs-constructor">EventListener(&amp;#039;<span class="hljs-params">storage</span>&amp;#039;, <span class="hljs-params">function</span>(<span class="hljs-params">event</span>)</span> &#123;<br><span class="hljs-keyword">if</span> (event.key<span class="hljs-operator"> === </span>&amp;#<span class="hljs-number">039</span>;getSessionStorage&amp;#<span class="hljs-number">039</span>;) &#123;<br><span class="hljs-comment">// 已存在的标签页会收到这个事件</span><br>localStorage.set<span class="hljs-constructor">Item(&amp;#039;<span class="hljs-params">sessionStorage</span>&amp;#039;, JSON.<span class="hljs-params">stringify</span>(<span class="hljs-params">sessionStorage</span>)</span>);<br>localStorage.remove<span class="hljs-constructor">Item(&amp;#039;<span class="hljs-params">sessionStorage</span>&amp;#039;)</span>;<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.key<span class="hljs-operator"> === </span>&amp;#<span class="hljs-number">039</span>;sessionStorage&amp;#<span class="hljs-number">039</span>; &amp;amp;&amp;amp; !sessionStorage.length) &#123;<br><span class="hljs-comment">// 新开启的标签页会收到这个事件</span><br>var data = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse(event.newValue)<br><span class="hljs-comment">//,value;</span><br><br><span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> data) &#123;<br>sessionStorage.set<span class="hljs-constructor">Item(<span class="hljs-params">key</span>, <span class="hljs-params">data</span>[<span class="hljs-params">key</span>])</span>;<br>&#125;<br>&#125;<br>&#125;);<br>&#125;)<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><p>（译者注：上面的代码是我从在线demo中截取的，原文中并无提到）</p><h4 id="接近完美"><a href="#接近完美" class="headerlink" title="接近完美"></a>接近完美</h4><p>我们现在拥有了一个几乎非常安全的方案来保存会话token在浏览器里，并支持良好的多标签页用户体验。现在当用户关闭标签页后能确保会话立即过期。难道不是么？</p><p>chrome和firefox都支持当用户进行“重新打开关闭的标签页”或“撤销关闭标签页”时恢复sessionStorage。F**k！（译者注：作者原文用的是“Damn it!”，注意到那个叹号了吗？）</p><p>safari在这个问题上处理是正确的，它并不会恢复sessionStorag（只测试了上述这三个浏览器）。</p><p>对用户而言，能够确定sessionStorag已经过期的方法是直接重新打开网站，而不是选择“重新打开关闭的标签页”。</p><p>除非chrome和firefox能够解决这个bug。（但我预感开发组会称其为“特性”）</p><p>即便存在这样的bug，使用sessionStorag依然要比session-cookies方案或其他方案要安全。如果我们希望得到一个更加完美的方案，我们就需要自己来实现一个内存的方案来代替sessionStorag。(onbeforeunload也能做到，但不是太可靠且每次刷新页面也会被清空。window.name也不错，但它太老了且也不支持跨域保护)</p><h4 id="跨标签页共享memoryStorage"><a href="#跨标签页共享memoryStorage" class="headerlink" title="跨标签页共享memoryStorage"></a>跨标签页共享memoryStorage</h4><p>这应该是唯一一个真正安全的实现浏览器端保存认证token的方法了，并且要保证用户打开多个标签页不需要重新登录。</p><p>关闭标签页，会话立即过期–这次是真真儿的。</p><p>这个方案的缺点是，<strong>当只有一个标签页时</strong>，浏览器刷新会导致用户重新登录。安全总是要付出点代价的，很明显这个缺点可能是致命的。</p><p><a href="https://blog.guya.net/security/browser_session/memoryStorage.html">在线例子</a></p><p>设置一个memoryStorage，然后打开多个标签页，你会发现数据共享了。关闭所有标签页token会立即永久过期（memoryStorage其实就是一个javascript对象而已）。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">(<span class="hljs-keyword">function</span><span class="hljs-literal">()</span> &#123;<br><br>window.memoryStorage = &#123;&#125;;<br><br><span class="hljs-keyword">function</span> is<span class="hljs-constructor">Empty(<span class="hljs-params">o</span>)</span> &#123;<br><span class="hljs-keyword">for</span> (var i <span class="hljs-keyword">in</span> o) &#123;<br>  return <span class="hljs-literal">false</span>;<br> &#125;<br> return <span class="hljs-literal">true</span>;<br>&#125;;<br><br><span class="hljs-keyword">if</span> (is<span class="hljs-constructor">Empty(<span class="hljs-params">memoryStorage</span>)</span>) &#123;<br>localStorage.set<span class="hljs-constructor">Item(&amp;#039;<span class="hljs-params">getSessionStorage</span>&amp;#039;, Date.<span class="hljs-params">now</span>()</span>);<br>&#125;;<br><br>window.add<span class="hljs-constructor">EventListener(&amp;#039;<span class="hljs-params">storage</span>&amp;#039;, <span class="hljs-params">function</span>(<span class="hljs-params">event</span>)</span> &#123;<br><span class="hljs-keyword">if</span> (event.key<span class="hljs-operator"> == </span>&amp;#<span class="hljs-number">039</span>;getSessionStorage&amp;#<span class="hljs-number">039</span>;) &#123;<br>localStorage.set<span class="hljs-constructor">Item(&amp;#039;<span class="hljs-params">sessionStorage</span>&amp;#039;, JSON.<span class="hljs-params">stringify</span>(<span class="hljs-params">memoryStorage</span>)</span>);<br>localStorage.remove<span class="hljs-constructor">Item(&amp;#039;<span class="hljs-params">sessionStorage</span>&amp;#039;)</span>;<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.key<span class="hljs-operator"> == </span>&amp;#<span class="hljs-number">039</span>;sessionStorage&amp;#<span class="hljs-number">039</span>; &amp;amp;&amp;amp; is<span class="hljs-constructor">Empty(<span class="hljs-params">memoryStorage</span>)</span>) &#123;<br>var data = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">JSON</span>.</span></span>parse(event.newValue),<br>value;<br><br><span class="hljs-keyword">for</span> (key <span class="hljs-keyword">in</span> data) &#123;<br>memoryStorage<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span> = data<span class="hljs-literal">[<span class="hljs-identifier">key</span>]</span>;<br>&#125;<br>&#125;<br>&#125;);<br>&#125;)<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><p>原文：<a href="https://blog.guya.net/2015/06/12/sharing-sessionstorage-between-tabs-for-secure-multi-tab-authentication/">Sharing sessionStorage between tabs for secure multi-tab authentication</a></p><h2 id="译者得er瑟"><a href="#译者得er瑟" class="headerlink" title="译者得er瑟"></a>译者得er瑟</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式</title>
    <link href="/2020/10/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <url>/2020/10/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<p>&gt; PHP官方文档：<a href="https://www.php.net/manual/zh/book.pcre.php">https://www.php.net/manual/zh/book.pcre.php</a></p><p>写个可以匹配一下各种特殊字符的正则表达式</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">((?<span class="hljs-operator">=</span>[\<span class="hljs-keyword">x</span><span class="hljs-number">21</span>-\<span class="hljs-keyword">x</span><span class="hljs-number">7</span>e]+)[^A-Za-z<span class="hljs-number">0</span><span class="hljs-number">-9</span>])<br><span class="hljs-keyword">x</span><span class="hljs-number">21</span>-\<span class="hljs-keyword">x</span><span class="hljs-number">7</span>e]+)[^A-Za-z<span class="hljs-number">0</span><span class="hljs-number">-9</span>])<br></code></pre></td></tr></table></figure><p>这个匹配所有键盘上可见的非字母和数字的符号</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">var patrn = /[`~!@#$%^<span class="hljs-symbol">&amp;amp;</span>*()_\-+=<span class="hljs-symbol">&amp;lt;</span><span class="hljs-symbol">&amp;gt;</span>?:<span class="hljs-symbol">&amp;quot;</span></span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">|,.\/;<span class="hljs-symbol">&amp;#039;</span>\\[\]·~！@#￥%……<span class="hljs-symbol">&amp;amp;</span>*（）——\-+=</span><span class="hljs-template-variable">&#123;&#125;</span><span class="language-xml">|《》？：“”【】、；‘<span class="hljs-symbol">&amp;#039;</span>，。、]/im; </span><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">if</span> (!patrn.test(str)) <br>&#123;<br><span class="hljs-comment">// 如果包含特殊字符返回false</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br></code></pre></td></tr></table></figure><p>废话少说，代码如下</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">[^<span class="hljs-symbol">\\</span>S<span class="hljs-symbol">\\</span>r<span class="hljs-symbol">\\</span>n]<br></code></pre></td></tr></table></figure><p>\ s用于查找空白字符。</p><p>空白字符可以是：空格字符,制表符,回车符,换行符,垂直制表符,换页字符,\S是\s的取反。</p><p>解读：判断这个字符，首先 不是 非空白字符（也就是空白字符），然后不是回车符和换行符。</p><p>[]结构^开头，那么三个转义字符都是 非 判断。</p><p>PHP正则中的后向引用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_replace</span>(&amp;#<span class="hljs-number">039</span>;/(test)(date)/&amp;<span class="hljs-comment">#039;, &amp;#039;$&#123;1&#125;&amp;#039;, &amp;#039;testdate&amp;#039;);</span><br></code></pre></td></tr></table></figure><p>输出<code>testtest</code></p><p>其中的<code>$&#123;1&#125;</code> 也可以写作<code>\1</code>或者<code>\\1</code>,表示第一个元组。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>datatables 使用</title>
    <link href="/2020/10/06/datatables%20%E4%BD%BF%E7%94%A8/"/>
    <url>/2020/10/06/datatables%20%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>来源：<a href="https://www.cnblogs.com/showcase/p/11130463.html">https://www.cnblogs.com/showcase/p/11130463.html</a></p><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><blockquote><p>官网：<a href="https://datatables.net/">https://datatables.net/</a><br>中文官网：<a href="http://datatables.club/">http://datatables.club/</a></p></blockquote><p>Datatables是一款<code>jquery</code>表格插件。它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能。</p><ul><li>分页，即时搜索和排序</li><li>几乎支持任何数据源：DOM， javascript， Ajax 和 服务器处理</li><li>支持不同主题 DataTables, jQuery UI, Bootstrap, Foundation</li><li>各式各样的扩展: Editor, TableTools, FixedColumns ……</li><li>丰富多样的option和强大的API</li><li>支持国际化</li><li>超过2900+个单元测试</li><li>免费开源</li></ul><h2 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h2><h3 id="1、引入相关js和css文件"><a href="#1、引入相关js和css文件" class="headerlink" title="1、引入相关js和css文件"></a>1、引入相关js和css文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- DataTables CSS --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://cdn.datatables.net/1.10.15/css/jquery.dataTables.css&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- jQuery --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf8&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://code.jquery.com/jquery-1.10.2.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-comment">&lt;!-- DataTables --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf8&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://cdn.datatables.net/1.10.15/js/jquery.dataTables.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="2、添加HTML代码"><a href="#2、添加HTML代码" class="headerlink" title="2、添加HTML代码"></a>2、添加HTML代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;table_id_example&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;display&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">thead</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Column 1<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>Column 2<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">thead</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tbody</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 1 Data 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 1 Data 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 2 Data 1<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>Row 2 Data 2<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tbody</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="3、初始化Datatables"><a href="#3、初始化Datatables" class="headerlink" title="3、初始化Datatables"></a>3、初始化Datatables</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>( <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    $(<span class="hljs-string">&#x27;#table_id_example&#x27;</span>).<span class="hljs-title class_">DataTable</span>();<br>&#125; );<br></code></pre></td></tr></table></figure><h3 id="4、效果"><a href="#4、效果" class="headerlink" title="4、效果"></a>4、效果</h3><h2 id="三、常用选项"><a href="#三、常用选项" class="headerlink" title="三、常用选项"></a>三、常用选项</h2><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><blockquote><p>应用于表的初始顺序（排序） </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"># 参数<span class="hljs-number">1</span> 列索引按顺序排列 从<span class="hljs-number">0</span>开始 <br># 参数<span class="hljs-number">2</span> 排序的规则<br><span class="hljs-string">&quot;order&quot;</span>: [[ <span class="hljs-number">1</span>, <span class="hljs-string">&quot;asc/desc&quot;</span> ],...]<br></code></pre></td></tr></table></figure><h3 id="stateSave"><a href="#stateSave" class="headerlink" title="stateSave"></a>stateSave</h3><blockquote><p>状态保存 - 页面重新加载时恢复表状态<br>启用或禁用状态保存。启用后，DataTables将存储状态信息，例如分页位置，显示长度，过滤和排序。当最终用户重新加载页面时，表的状态将被更改以匹配他们之前设置的状态。 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"># 默认值 <span class="hljs-literal">false</span><br><span class="hljs-attr">stateSave</span>: <span class="hljs-literal">true</span>/<span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure><h3 id="columnDefs"><a href="#columnDefs" class="headerlink" title="columnDefs"></a>columnDefs</h3><blockquote><p>设置列定义初始化属性<br>此参数允许您为表中的列指定特定选项，但在这种情况下，定义的列选项可应用于一个或多个列 </p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-attr">columnDefs</span>:[<br>    # 索引<span class="hljs-number">0</span>列和第<span class="hljs-number">8</span>列，不进行排序<br>    &#123;<span class="hljs-attr">targets</span>:[<span class="hljs-number">0</span>,<span class="hljs-number">8</span>],<span class="hljs-attr">orderable</span>:<span class="hljs-literal">false</span>&#125;<br>]<br></code></pre></td></tr></table></figure><h3 id="lengthMenu"><a href="#lengthMenu" class="headerlink" title="lengthMenu"></a>lengthMenu</h3><blockquote><p>定义在每页显示记录数的select中显示的选项</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;#example&#x27;</span>).<span class="hljs-title class_">DataTable</span>(&#123;<br>  <span class="hljs-string">&quot;lengthMenu&quot;</span>: [ <span class="hljs-number">10</span>, <span class="hljs-number">25</span>, <span class="hljs-number">50</span>, <span class="hljs-number">75</span>, <span class="hljs-number">100</span> ]<br>&#125;);<br># 或<br>$(<span class="hljs-string">&#x27;#example&#x27;</span>).<span class="hljs-title class_">DataTable</span>(&#123;<br>  <span class="hljs-string">&quot;lengthMenu&quot;</span>: [ [<span class="hljs-number">10</span>, <span class="hljs-number">25</span>, <span class="hljs-number">50</span>, -<span class="hljs-number">1</span>], [<span class="hljs-number">10</span>, <span class="hljs-number">25</span>, <span class="hljs-number">50</span>, <span class="hljs-string">&quot;所有&quot;</span>] ]<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="paging"><a href="#paging" class="headerlink" title="paging"></a>paging</h3><blockquote><p>是否允许表格分页  true&#x2F;false</p><p>默认：true</p></blockquote><h3 id="info"><a href="#info" class="headerlink" title="info"></a>info</h3><blockquote><p>控制是否显示表格的信息   true&#x2F;false</p><p>默认：true</p></blockquote><h3 id="searching"><a href="#searching" class="headerlink" title="searching"></a>searching</h3><blockquote><p>是否允许Datatables开启本地搜索 true&#x2F;false</p><p>默认：true</p></blockquote><h3 id="ordering"><a href="#ordering" class="headerlink" title="ordering"></a>ordering</h3><blockquote><p>是否允许Datatables开启排序 true&#x2F;false</p><p>默认：true</p></blockquote><h3 id="processing"><a href="#processing" class="headerlink" title="processing"></a>processing</h3><blockquote><p>是否显示正在处理的状态 true&#x2F;false</p><p>默认：false</p></blockquote><h2 id="四、Ajax使用远程数据"><a href="#四、Ajax使用远程数据" class="headerlink" title="四、Ajax使用远程数据"></a>四、Ajax使用远程数据</h2><blockquote><p>有时从DOM读取数据太慢或太笨重，特别是在处理数千或数百万个数据行时。为了解决这个问题，DataTables的服务器端处理功能提供了一种方法，可以让服务器端的数据库引擎完成所有“繁重的工作” 。</p><p>当使用服务器端处理时，DataTables将在页面上每次绘制信息时向服务器发出Ajax请求（即，在分页，排序，搜索等时）。DataTables将向服务器发送许多变量，以允许它执行所需的处理，然后以DataTables所需的格式返回数据。 </p></blockquote><h3 id="1、客户端"><a href="#1、客户端" class="headerlink" title="1、客户端"></a>1、客户端</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs js">$(<span class="hljs-string">&#x27;#example&#x27;</span>).<span class="hljs-title class_">DataTable</span>( &#123;<br>    <span class="hljs-comment">// 开启服务器模式</span><br>    <span class="hljs-attr">serverSide</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-comment">// ajax发起请求</span><br>    <span class="hljs-attr">ajax</span>: &#123;<br>            <span class="hljs-comment">// 请求地址</span><br>            <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/data-source&#x27;</span>,<br>            <span class="hljs-comment">// 请求方式 get/post</span><br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>            <span class="hljs-comment">// 头信信息 laravel post请求时 csrf</span><br>            <span class="hljs-attr">headers</span>: &#123; <span class="hljs-string">&#x27;X-CSRF-TOKEN&#x27;</span> : <span class="hljs-string">&#x27;&#123;&#123; csrf_token() &#125;&#125;&#x27;</span> &#125;,<br>            <span class="hljs-comment">// 请求的参数</span><br>            <span class="hljs-attr">data</span>: &#123;<br>                <span class="hljs-string">&quot;user_id&quot;</span>: <span class="hljs-number">451</span><br>            &#125;,<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            // 两者写法效果一致  但是它用于搜索</span><br><span class="hljs-comment">            data: function ( d ) &#123;</span><br><span class="hljs-comment">                d.user_id = $(&#x27;#user_id&#x27;).val();</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            */</span><br>        &#125;,<br>        <span class="hljs-comment">// columns要对tr中的td单元格中的内容进行数据填充</span><br>        <span class="hljs-comment">// 注意：如果data接收类似a或b的信息，实际服务器没有返回该信息，那么一定要同时设置defaultContent属性，否则报错</span><br>        <span class="hljs-attr">columns</span>: [<br>            <span class="hljs-comment">// 总的数量与表格的列的数量一致，不多也不少</span><br>            <span class="hljs-comment">// 字段名称与sql查询出来的字段时要保持一致，就是服务器返回数据对应的字段名称</span><br>            <span class="hljs-comment">// defaultContent 和 className 可选参数</span><br>            &#123;<span class="hljs-string">&#x27;data&#x27;</span>:<span class="hljs-string">&#x27;字段名称1&#x27;</span>,<span class="hljs-string">&quot;defaultContent&quot;</span>: <span class="hljs-string">&quot;默认值&quot;</span>,<span class="hljs-string">&#x27;className&#x27;</span>:<span class="hljs-string">&#x27;类名&#x27;</span>&#125;,<br>            &#123;<span class="hljs-string">&#x27;data&#x27;</span>:<span class="hljs-string">&#x27;字段名称n&#x27;</span>,<span class="hljs-string">&quot;defaultContent&quot;</span>: <span class="hljs-string">&quot;默认值&quot;</span>,<span class="hljs-string">&#x27;className&#x27;</span>:<span class="hljs-string">&#x27;类名&#x27;</span>&#125;<br>        ],<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        创建tr/td时的回调函数，可以继续修改、优化tr/td的显示，里边有遍历效果，会依次扫描生成的每个tr</span><br><span class="hljs-comment">        row:创建好的tr的dom对象</span><br><span class="hljs-comment">        data:数据源，代表服务器端返回的每条记录的实体信息</span><br><span class="hljs-comment">        dataIndex:数据源的索引号码</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-attr">createdRow</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">row,data,dataIndex</span>)&#123;&#125;<br>    <br>&#125; );<br></code></pre></td></tr></table></figure><h3 id="2、服务端"><a href="#2、服务端" class="headerlink" title="2、服务端"></a>2、服务端</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/*</span><br><span class="hljs-comment">draw: 客户端调用服务器端次数标识</span><br><span class="hljs-comment">recordsTotal: 获取数据记录总条数</span><br><span class="hljs-comment">recordsFiltered: 数据过滤后的总数量</span><br><span class="hljs-comment">data: 获得的具体数据</span><br><span class="hljs-comment">注意：recordsTotal和recordsFiltered都设置为记录的总条数</span><br><span class="hljs-comment">*/</span><br><span class="hljs-variable">$result</span> = [<br>   <span class="hljs-string">&#x27;draw&#x27;</span>   =&gt; <span class="hljs-variable">$request</span>-&gt;<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&#x27;draw&#x27;</span>),<br>   <span class="hljs-string">&#x27;recordsTotal&#x27;</span>  =&gt; <span class="hljs-variable">$count</span>,<br>   <span class="hljs-string">&#x27;recordsFiltered&#x27;</span> =&gt; <span class="hljs-variable">$count</span>,<br>   <span class="hljs-string">&#x27;data&#x27;</span>=&gt; <span class="hljs-variable">$data</span><br>];<br><span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$result</span>);<br></code></pre></td></tr></table></figure><h3 id="3、搜索"><a href="#3、搜索" class="headerlink" title="3、搜索"></a>3、搜索</h3><blockquote><p>datatable对象.api().ajax.reload()</p><p>重新加载数据 </p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">var</span> table = $(<span class="hljs-string">&#x27;#example&#x27;</span>).<span class="hljs-title function_ invoke__">DataTable</span>( &#123;<br>    <span class="hljs-attr">ajax</span>: <span class="hljs-string">&quot;data.json&quot;</span><br>&#125; );<br> <br>$(<span class="hljs-string">&#x27;#search&#x27;</span>).<span class="hljs-title function_ invoke__">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>,function()&#123;<br>    table.ajax.<span class="hljs-title function_ invoke__">reload</span>();<br>&#125;);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>postgresql</title>
    <link href="/2020/09/28/postgresql/"/>
    <url>/2020/09/28/postgresql/</url>
    
    <content type="html"><![CDATA[<p>sudo -i -u postgres 登录<br>\l列出所有数据库<br>\c 数据库名 选择数据库<br>\d 列出数据表<br>\d 表名 列出数据表的结构<br>create database chengyao; 创建数据库<br>drop database chengyao;删除数据库<br>psql -h localhost -p 5432 -U cheng postgres登录<br>select pg_roles.rolname from pg_roles; 查看角色<br>grant role_name to username; 赋予角色<br>修改一个字段为非null ： alter table users alter username set not null;</p><p>\x切换到竖排显示<br>select * from ps_proc;查询存储过程</p><h2 id="一、建立数据库连接"><a href="#一、建立数据库连接" class="headerlink" title="一、建立数据库连接"></a>一、建立数据库连接</h2><p>接入PostgreSQL数据库: psql -h IP地址 -p 端口 -U 数据库名</p><p>之后会要求输入数据库密码</p><p>二、访问数据库</p><p>1、列举数据库：\l<br>2、选择数据库：\c 数据库名<br>3、查看该某个库中的所有表：\dt<br>4、切换数据库：\c interface<br>5、查看某个库中的某个表结构：\d 表名<br>6、查看某个库中某个表的记录：select * from apps limit 1;<br>7、显示字符集：\encoding<br>8、退出psgl：\q</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>列出当前数据库所有表<br>\dt</p><p>列出表名<br>SELECT tablename FROM pg_tables;<br>WHERE tablename NOT LIKE ‘pg%’<br>AND tablename NOT LIKE ‘sql_%’<br>ORDER BY tablename;</p><p>列出数据库名<br>\l<br>或<br>SELECT datname FROM pg_database;</p><p>切换数据库<br>\c 数据库名</p><p>1、通过命令行查询<br>\d 数据库 —— 得到所有表的名字<br>\d 表名 —— 得到表结构<br>2、通过SQL语句查询<br>&quot;select * from pg_tables&quot; —— 得到当前db中所有表的信息（这里pg_tables是系统视图）<br>&quot;select tablename from pg_tables where schemaname&#x3D;’public’&quot; —— 得到所有用户自定义表的名字（这里&quot;tablename&quot;字段是表的名字，&quot;schemaname&quot;是schema的名字。用户自定义的表，如果未经特殊处理，默认都是放在名为public的schema下）</p><p> View Code</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>postgresql数据管理系统使用命令方式有两种:</p><ol><li>内部命令,以反斜线开始 \ ,如: \l 显示所有数据库</li><li>标准SQL命令,以分号 ; 或 \g 结束,可以使用多行</li></ol><p>数据库的关键操作:</p><ol><li>启动服务  2. 登录  3. 建立数据库  4. 建立表  5. 插入记录到表中 </li><li>更新&#x2F;删除&#x2F;查询&#x2F;修改操作           7. 退出    8. 停止服务</li></ol><p>在windows7中安装的postgresql默认使用GBK字符集,经常不能使用显示中文的数据表,解决办法:<br>注意:在windows 7下的postgresql中写操作时要使用GBK,读操作时要用UTF8;</p><p>设置字符集为 utf-8 就可以了.<br>postgres&#x3D;# \encoding utf-8       &#x2F;&#x2F; 设置客户端的字元集<br>postgres&#x3D;# \encoding                  &#x2F;&#x2F; 显示客户端的字元集<br>postgres&#x3D;# show client_encoding;      &#x2F;&#x2F; 显示客户端的字元集<br>postgres&#x3D;# show server_encoding;      &#x2F;&#x2F; 显示服务器的字元集</p><p>启动服务:<br>net start postgresql-9.5<br>停止服务:<br>net stop postgresql-9.5</p><p>获取命令帮助:<br>c:&amp;gt; psql –help</p><p>登录( 注意: postgres 是默认用户即管理员 ):<br>路径 psql -h 服务器 -U 用户名  -d 数据库 -p 端口地址  &#x2F;&#x2F; -U 是大写<br>C:&amp;gt; psql -h localhost -U postgres -p 5432            &#x2F;&#x2F; 默认打开postgres数据库<br>C:&amp;gt; psql -h 127.0.0.1 -U postgres -d fengdos -p 5432 &#x2F;&#x2F; 打开fengdos数据库<br>C:&amp;gt; psql -U postgres                                 &#x2F;&#x2F; 快速登录(全部使用默认设置)<br>&#x2F;&#x2F; 使用某些有密码的用户的情况下, 会提示输入密码.<br>用户 postgres 的口令: ILoveYou         &#x2F;&#x2F; 输入时不会显示任何字符<br>&#x2F;&#x2F; 成功后显示:<br>psql (9.5.3)<br>输入 &quot;help&quot; 来获取帮助信息.<br>&#x2F;&#x2F; 进入postgresql数据库系统提示符状态, ******&#x3D;# 中&#x3D;#前面为当前使用的数据库<br>postgres&#x3D;# help          &#x2F;&#x2F; 获取系统帮助,显示如下:</p><hr><p>您正在使用psql, 这是一种用于访问PostgreSQL的命令行界面<br>键入：\copyright 显示发行条款<br>      \h 显示 SQL 命令的说明<br>      ? 显示 pgsql 命令的说明 (pgsql内部命令)<br>      \g 或者以分号(;)结尾以执行查询<br>      \q 退出注: 数据库名称区分大小写的。</p><hr><p>postgres&#x3D;# \help         &#x2F;&#x2F; 获取SQL命令的帮助,同 \h<br>postgres&#x3D;# \quit         &#x2F;&#x2F; 退出,同 \q<br>postgres&#x3D;# \password dlf &#x2F;&#x2F; 重新设置用户dlf的密码,然后需要 \q退出后才生效<br>c:&amp;gt;psql exampledb &lt; user.sql  &#x2F;&#x2F; 将user.sql文件导入到exampled数据库中<br>postgres&#x3D;# \h select   &#x2F;&#x2F; 精细显示SQL命令中的select命令的使用方法<br>postgres&#x3D;# \l          &#x2F;&#x2F; 显示所有数据库<br>postgres&#x3D;# \dt         &#x2F;&#x2F; 显示当前数据库中的所有表<br>postgres&#x3D;# \d [table_name]  &#x2F;&#x2F; 显示当前数据库的指定表的表结构<br>postgres&#x3D;# \c [database_name]  &#x2F;&#x2F; 切换到指定数据库,相当于use<br>postgres&#x3D;# \du                 &#x2F;&#x2F; 显示所有用户<br>postgres&#x3D;# \conninfo           &#x2F;&#x2F; 显示当前数据库和连接信息<br>postgres&#x3D;# \e   &#x2F;&#x2F; 进入记事本sql脚本编辑状态(输入批命令后关闭将自动在命令行中执行)<br>postgres&#x3D;# \di  &#x2F;&#x2F; 查看索引(要建立关联)<br>postgres&#x3D;# \prompt [文本] 名称    &#x2F;&#x2F; 提示用户设定内部变数<br>postgres&#x3D;# \encoding [字元编码名称]  &#x2F;&#x2F; 显示或设定用户端字元编码<br>*可以将存储过程写在文本文件中aaa.sql,然后在psql状态下:<br>postgres&#x3D;# \i aaa.sql    &#x2F;&#x2F; 将aaa.sql导入(到当前数据库)<br>postgres&#x3D;# \df           &#x2F;&#x2F; 查看所有存储过程（函数）<br>postgres&#x3D;# \df+ name     &#x2F;&#x2F; 查看某一存储过程<br>postgres&#x3D;# select version();            &#x2F;&#x2F; 获取版本信息<br>postgres&#x3D;# select usename from pg_user; &#x2F;&#x2F; 获取系统用户信息<br>postgres&#x3D;# drop User 用户名             &#x2F;&#x2F; 删除用户</p><p>其它SQL命令通用如(标准化SQL语句):<br>*创建数据库：<br>create database [数据库名];</p><p>*删除数据库：<br>drop database [数据库名]; </p><p>*创建表：<br>create table ([字段名1] [类型1] ;,[字段名2] [类型2],……&lt;,primary key (字段名m,字段名n,…)&gt;;);</p><p>*在表中插入数据：<br>insert into 表名 ([字段名m],[字段名n],……) values ([列m的值],[列n的值],……);</p><p>*显示表内容:<br>select * from student;</p><p>*重命名一个表：<br>alter table [表名A] rename to [表名B];</p><p>*删除一个表：<br>drop table [表名]; </p><p>*在已有的表里添加字段：<br>alter table [表名] add column [字段名] [类型];</p><p>*删除表中的字段：<br>alter table [表名] drop column [字段名];</p><p>*重命名一个字段：<br>alter table [表名] rename column [字段名A] to [字段名B];</p><p>*给一个字段设置缺省值：<br>alter table [表名] alter column [字段名] set default [新的默认值];</p><p>*去除缺省值：<br>alter table [表名] alter column [字段名] drop default;</p><p>*修改表中的某行某列的数据：<br>update [表名] set [目标字段名]&#x3D;[目标值] where [该行特征];</p><p>*删除表中某行数据：<br>delete from [表名] where [该行特征];<br>delete from [表名];    &#x2F;&#x2F; 删空整个表</p><p>*可以使用pg_dump和pg_dumpall来完成。比如备份sales数据库：<br>pg_dump drupal&gt;&#x2F;opt&#x2F;Postgresql&#x2F;backup&#x2F;1.bak</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>1.列出所有表名的查询语句<br>SELECT tablename FROM pg_tables<br>WHERE tablename NOT LIKE ‘pg%’<br>AND tablename NOT LIKE ‘sql_%’<br>ORDER BY tablename;</p><p>2.列出表中所有的数据</p><p>SELECT * FROM someTable;</p><p>3.执行外部脚本<br>#&#x2F;opt&#x2F;PostgreSQL&#x2F;8. 3&#x2F;bin&#x2F;psql - Upostgres ;登陆到数据库的控制台界面<br>postgres&#x3D; # \i &#x2F;root&#x2F;db. sql<br>     \i 命令用于执行一个外部的sql脚本文件。</p><p>4.导出数据库为外部的脚本<br>#&#x2F;opt&#x2F;PostgreSQL&#x2F;8. 3&#x2F;bin&#x2F; pg_dump - Upostgres - C - fdb. sql database</p><p>-C create    -f 是导出后的文件名</p><p>5.postgresql 插入16进制数<br>INSERT INTO tableAAA VALUES( x’0001f’ : : integer, ‘鉴权’ , ‘Authority’ )</p><p>6.使用 TG_RELNAME 报错ERROR:  syntax error at or near &quot;$1&quot; at character</p><p>[引]<a href="http://www.dbmonster.com/Uwe/Forum.aspx/postgresql/2051/TG-RELNAME-problem">http://www.dbmonster.com/Uwe/Forum.aspx/postgresql/2051/TG-RELNAME-problem</a></p><p>Perhaps you will get some idea if you read the document:<br>37. 6. 4. Executing Dynamic Commands</p><p>改：执行动态语句</p><p> EXECUTE ‘INSERT INTO TG_RELNAME VALUES (NEW.start_time , NEW.id , NEW.end_time)’;</p><ol start="7"><li>psql 常用命令<br>a. \c tesdb1 - - 将当前连接的testdb数据库改变成 testdb1 。<br>b . \q - - 断开与Postgres服务器的连接<br>c . \l 列出所有数据库的名字<br> \l+ 列出所有数据库的名字以及字符集编码<br>d. \d [ 名字] 描述表, 索引, 序列, 或者视图<br>          列出表&#x2F;索引&#x2F;序列&#x2F;视图&#x2F;系统表<br>\d{t| i| s| v| S} [ 模式] ( 加 &quot;+&quot; 获取更多信息)<br>          - - 列出表&#x2F;索引&#x2F;序列&#x2F;视图&#x2F;系统表<br>\d tablename - - 查看表的结构<br>\dt - - 列出数据库中所有表</li></ol><p>8.在PostgreSQL中如何删除重复记录</p><p>【转】http: &#x2F; &#x2F; hi. baidu. com&#x2F;cicon&#x2F;blog&#x2F;item&#x2F;e14f217f4eeee20429388a0c. html</p><p>在PostgreSQL中删除重复记录其实很简单，不论有多少行重复，只要在要删除重复记录的表中table加一列rownum字段( id为table表中的主键) ，类型设置为serial类型即可，然后执行sql<br>delete from deltest where rownum not in(<br>select max(rownum) from deltest<br>);<br>最后删除列rownum即可</p><p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p><p>正文：</p><p>连接数据库操作：</p><p>psql是postgresql数据库提供的连接数据库shell命令，格式 psql 【option】 dbname</p><p>在终端输入psql 会使用默认的方式连接本地数据库，使用的用户名是登陆linux系统使用的用户名，</p><p>psql -U username -W pass 以及psql -U username -W pass databasenaem都可以实现连接数据库的功能，第一种方式是使用用户名username密码pass连接默认数据库（具体链接那个数据库还没搞清 楚），第二种方式使用用户名username密码pass连接username数据库。如果登录成功之后将显示类似信息</p><p>Welcome to psql 8.0.6, the PostgreSQL interactive terminal.</p><p>Type:  \copyright for distribution terms<br>       \h for help with SQL commands<br>       ? for help with psql commands<br>       \g or terminate with semicolon to execute query<br>       \q to quit</p><p>连接成功之后所有的命令都是使用”\“+ 字符或者word完成相应的功能。现将常用的几个列车</p><p>\l      列出所有数据库</p><p>\dt   列出连接数据库中所有表</p><p>\di   列出连接数据库中所有index</p><p>\dv  列出连接数据库中所有view</p><p>\h    sql命令帮助</p><p>?    \ 所有命令帮助</p><p>\q   退出连接</p><p>\d tablename  列出指定tablename的表结构</p><p>可以尝试执行下面两句sql</p><p>SELECT current_date</p><p>SELECT version()</p><p>是不是nothing happened，这是因为postgresql数据库要求必须使用；结尾否则不予执行，加上；之后就能看到结果了。</p><p>如果我们想创建数据库怎么办呢？</p><p>我们知道createdb和dropdb可以创建和删除数据库，但是如果我们这个时候执行出现什么问题呢？可以试一试，提示是个错误。</p><p>为什么呢？</p><p>createdb和dropdb是shell脚本，所以现在又两种方式执行</p><p>（1）.退出连接进入终端，输入createdb test —U user -W pass 稍等提示创建数据库成功</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">dropdb test —U <span class="hljs-keyword">user</span> <span class="hljs-title">-W</span> pass    提示drop成功<br></code></pre></td></tr></table></figure><p>（2）.在未退出连接中使用 ! createdb test —U user -W pass 稍等提示创建数据库成功</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">\! dropdb test —U <span class="hljs-keyword">user</span> <span class="hljs-title">-W</span> pass  提示drop成功<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js学习笔记</title>
    <link href="/2020/09/26/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/09/26/js%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h1><h2 id="in-array"><a href="#in-array" class="headerlink" title="in_array"></a>in_array</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">in_array</span>(<span class="hljs-params">stringToSearch, arrayToSearch</span>) &#123;<br><span class="hljs-keyword">for</span> (s = <span class="hljs-number">0</span>; s &lt; arrayToSearch.<span class="hljs-property">length</span>; s++) &#123;<br>thisEntry = arrayToSearch[s].<span class="hljs-title function_">toString</span>();<br><span class="hljs-keyword">if</span> (thisEntry == stringToSearch) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>##判断文件后缀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> location=$(<span class="hljs-string">&quot;input[name=&#x27;file&#x27;]&quot;</span>).<span class="hljs-title function_">val</span>();  <br>     <span class="hljs-keyword">var</span> point = location.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>);  <br>      <br>     <span class="hljs-keyword">var</span> type = location.<span class="hljs-title function_">substr</span>(point);  <br>     <span class="hljs-keyword">if</span>(type==<span class="hljs-string">&quot;.jpg&quot;</span>||type==<span class="hljs-string">&quot;.gif&quot;</span>||type==<span class="hljs-string">&quot;.JPG&quot;</span>||type==<span class="hljs-string">&quot;.GIF&quot;</span>)&#123;  <br>               <br>     &#125; <br></code></pre></td></tr></table></figure><blockquote><p>其他方法</p></blockquote><ol><li>jquery:validate &#x2F;datatable  </li><li>document.forms[formName][inputName]</li><li>datatable.api.ajax.reload()</li><li>window.location.reload()</li><li>$(‘.row’).find(‘td:eq(1)’).html()</li><li>trim函数可以去掉空格</li><li>事件委托：$(‘父节点’).on(‘触发方法’,’子节点’,function(){})  对应off去掉拥有的事件</li><li>evt.preventDefault() &#x2F;return false; 取消默认事件</li><li>JQ对象.bind(‘事件[多个可以使用空格分割]’).triggle(‘select’) 触发选中事件</li><li>获取checkbox的选中项：$(‘input:checkbox[name&#x3D;”box”]:checked’)</li><li>var arr &#x3D; $(‘’).split(‘\n’) 将字符串使用\n分割为数组<br>12.stop方法，停止当前运行的动画<br>13.is方法</li></ol><h1 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;refresh&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;3&quot;</span> ; <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;index.html&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;index.html&quot;</span><br>$(<span class="hljs-string">&#x27;location&#x27;</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;href&#x27;</span>,<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">referrer</span>  <span class="hljs-comment">//获取referer</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-string">&quot;javascrpt:location.href=&#x27;index.html&#x27;&quot;</span>,<span class="hljs-number">5000</span>) <span class="hljs-comment">//定时跳转</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">search</span>  <span class="hljs-comment">//可以获取地址栏的query_string</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">history</span>.<span class="hljs-title function_">go</span>(-<span class="hljs-number">1</span>) / <span class="hljs-title function_">back</span>(-<span class="hljs-number">1</span>)  <span class="hljs-comment">//返回上一页</span><br>&lt;a onclick=<span class="hljs-string">&quot;javascript:history.go(-1)&quot;</span>&gt;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">navigate</span>(<span class="hljs-string">&#x27;http://www.1kmb.com&#x27;</span>) <span class="hljs-comment">//使用navigate方式跳转</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;http://www.1kmb.com&#x27;</span>) <span class="hljs-comment">//打开新网页</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span>=<span class="hljs-string">&quot;http://www.1kmb.com/index.php?ref=&quot;</span>+<span class="hljs-variable language_">window</span>.<span class="hljs-property">location</span>.<span class="hljs-property">href</span><br>location.<span class="hljs-title function_">reload</span>([bForceGet]) <span class="hljs-comment">//bForceGet可选，默认FALSE，用HTTP头If-Modified-Since来检测服务器上的文档是否已经改变，如果改变会重新下载文档，否则从客户端缓存里取当前页,TRUE则以get方式从服务器获取最新页面，相当于F5刷新</span><br>location.<span class="hljs-title function_">replace</span>(<span class="hljs-variable constant_">URL</span>)<br>location.<span class="hljs-title function_">assign</span>(<span class="hljs-variable constant_">LOCATION</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">execCommand</span>(<span class="hljs-string">&#x27;Refresh&#x27;</span>)<br><span class="hljs-variable language_">document</span>.<span class="hljs-property">URL</span>=location.<span class="hljs-property">href</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">attr</span>(<span class="hljs-string">&#x27;location&#x27;</span>,<span class="hljs-variable language_">document</span>.<span class="hljs-property">referer</span>)<br></code></pre></td></tr></table></figure><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><p><code>dblclick()</code> jquery双击事件</p><p>.bind()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//绑定多个选择器</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;click&#x27;</span>,<span class="hljs-string">&#x27;#header a,#sidebar a&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>&#125;)<br><span class="hljs-comment">//绑定多个事件</span><br>$(<span class="hljs-string">&#x27;table tr&#x27;</span>).<span class="hljs-title function_">on</span>(&#123;<br>    <span class="hljs-attr">mouseenter</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <br>    &#125;,<br>    <span class="hljs-attr">mouseleave</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <br>    &#125;,<br>    <span class="hljs-attr">click</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <br>    &#125;<br>&#125;,<span class="hljs-string">&#x27;td&#x27;</span>)<br><span class="hljs-comment">//同时绑定多个选择器和多个事件</span><br>$(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">on</span>(&#123;<br>     <span class="hljs-attr">mouseenter</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <br>    &#125;,<br>    <span class="hljs-attr">mouseleave</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <br>    &#125;,<br>    <span class="hljs-attr">click</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <br>    &#125;,<br>&#125;,<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<br>$( <span class="hljs-variable language_">document</span> ) .<span class="hljs-property">ready</span> ( <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>$( <span class="hljs-string">&#x27;.comments .active &#x27;</span> ).<span class="hljs-title function_">css</span>( <span class="hljs-string">&quot;point</span><br><span class="hljs-string">er-events &quot;</span> , <span class="hljs-string">&quot; none&quot;</span> )<br>&#125;）;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>layer.js</p><p>#js-监听页面滚动</p><p>##一、原生js通过window.onscroll监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">window</span>.<span class="hljs-property">onscroll</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//为了保证兼容性，这里取两个值，哪个有值取哪一个</span><br>  <span class="hljs-comment">//scrollTop就是触发滚轮事件时滚轮的高度</span><br>  <span class="hljs-keyword">var</span> scrollTop = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;滚动距离&quot;</span> + scrollTop);<br>&#125;<br></code></pre></td></tr></table></figure><p>##二、Jquery通过$(window).scroll()监听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-variable language_">window</span>).<span class="hljs-title function_">scroll</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//为了保证兼容性，这里取两个值，哪个有值取哪一个</span><br>  <span class="hljs-comment">//scrollTop就是触发滚轮事件时滚轮的高度</span><br>  <span class="hljs-keyword">var</span> scrollTop = <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span>.<span class="hljs-property">scrollTop</span> || <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-property">scrollTop</span>;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;滚动距离&quot;</span> + scrollTop);<br>&#125;)<br></code></pre></td></tr></table></figure><p>##Javascript获取一个盒子的宽和高；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> width = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;box2&quot;</span>).<span class="hljs-property">offsetWidth</span>;<span class="hljs-comment">//宽度</span><br><span class="hljs-keyword">var</span> height = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;box2&quot;</span>).<span class="hljs-property">offsetHeight</span>;<span class="hljs-comment">//</span><br></code></pre></td></tr></table></figure><p>##jq判断元素是否存在于数组中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$.<span class="hljs-title function_">inArray</span>(element,array);<br></code></pre></td></tr></table></figure><p>存在返回元素下标，否则返回-1，可以使用<code>arr.splice($.inArray(&#39;test&#39;,arr),1);</code> 删除某一个元素，删除前需要判断元素是否存在否则当数组中只有一个值的时候会删除该值【未测试】。</p><h2 id="jq点击复制"><a href="#jq点击复制" class="headerlink" title="jq点击复制"></a>jq点击复制</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://libs.baidu.com/jquery/1.9.0/jquery.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.jsdelivr.net/clipboard.js/1.5.12/clipboard.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br>微信号：<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;target&quot;</span>&gt;</span>xyz2018<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;btn&quot;</span> <span class="hljs-attr">data-clipboard-action</span>=<span class="hljs-string">&quot;copy&quot;</span> <span class="hljs-attr">data-clipboard-target</span>=<span class="hljs-string">&quot;#target&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;copy_btn&quot;</span>&gt;</span>    <br>    点击复制    <br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span>   <br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">    </span><br><span class="language-javascript">    $(<span class="hljs-variable language_">document</span>).<span class="hljs-title function_">ready</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;      </span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> clipboard = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Clipboard</span>(<span class="hljs-string">&#x27;#copy_btn&#x27;</span>);    </span><br><span class="language-javascript">        clipboard.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;success&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;    </span><br><span class="language-javascript">            <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;微信号复制成功&quot;</span>,<span class="hljs-number">1500</span>);</span><br><span class="language-javascript">            e.<span class="hljs-title function_">clearSelection</span>();    </span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">clearSelection</span>);    </span><br><span class="language-javascript">        &#125;);    </span><br><span class="language-javascript">    &#125;);    </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="void-0-相关"><a href="#void-0-相关" class="headerlink" title="void 0 相关"></a>void 0 相关</h2><p>void其实是javascript中的一个函数，接受一个参数，返回值永远是undefined。可以说，使用void目的就是为了得到javascript中的undefined</p><p>为什么不直接使用undefined呢？ 使用void 0比使用undefined能够减少3个字节。虽然这是个优势，个人但感觉意义不大，牺牲了可读性和简单性，undefined并不是javascript中的保留字，我们可以使用undefined作为变量名字，然后给它赋值,, 但在chrome 中打印出来的是 undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-literal">undefined</span> === <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>笔记：es6基础</title>
    <link href="/2020/08/15/%E7%AC%94%E8%AE%B0%EF%BC%9Aes6%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/08/15/%E7%AC%94%E8%AE%B0%EF%BC%9Aes6%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="ECMAScript-与-javascript"><a href="#ECMAScript-与-javascript" class="headerlink" title="ECMAScript 与 javascript"></a>ECMAScript 与 javascript</h1><p>&gt;ECMAScript 可以说是 javascript 的国际标准。</p><h2 id="let"><a href="#let" class="headerlink" title="let"></a>let</h2><p>let 用来声明变量，用法类似 var 但由 let 声明的变量，只能在 let 命令所在的代码块内有效。</p><p>var 声明的变量在全局范围内都有效</p><p>var 命令会发生“变量提升”现象，即变量会在声明前可使用，而 let 做了语法处理，限制了这种情况</p><p>暂时性死区<br>若区块中存在let 和 const 命令，这个区块对这些命令声明的变量从一开始就有了封闭作用域。凡是声明前使用这些变量，就会报错。在语法上，称为“暂时性死区”。</p><p>不允许重复声明<br>let 不允许在同作用域内，重复声明同一个变量。</p><p>const命令<br>const 声明一个只读常亮，一旦声明，不可再修改，即为声明变量需要立即初始化</p><p>作用域与 let 相同</p><h1 id="ES6声明变量"><a href="#ES6声明变量" class="headerlink" title="ES6声明变量"></a>ES6声明变量</h1><p>共六种：var function let const import class</p><p>变量的解构赋值<br>数组解构<br>类似 let [a,b,c,] &#x3D; [1,2,3];</p><p>若解构失败，变量的值就等于 undefined</p><p>解构赋值允许指定默认值</p><p>对象解构赋值<br>元素按次序排列，变量的取值由位置决定，而对象的属性无次序，变量必须与属性同名，才能取得正确的值</p><p>函数扩充<br>ES6中函数参数可带有默认值</p><p>参数变量是默认声明的，所以不能用 let 或 const 再次声明</p><p>使用参数默认值时，函数不能有同名参数</p><p>定义了默认值的参数，应该是函数的尾参数</p><p>rest参数<br>ES6引入 rest 参数（形式为 . . .变量名 ），用于获取函数的多余参数。</p><p>rest 参数搭配的变量是一个数组，该变量将多余的参数放入数组中。</p><p>rest 参数后不能再有参数</p><p>函数的 length 参数，不包括 rest 参数</p><p>name属性<br>返回函数的函数名</p><p>若将匿名函数赋值给一个变量，将返回变量名</p><p>Function 构造函数返回的函数实例，name 属性的值为 anonymous</p><p>bind返回的函数，name 属性值会加上 bound 前缀</p><p>箭头函数<br>ES6允许使用“箭头” (&#x3D;&gt;)定义函数</p><p>var f &#x3D; v &#x3D;&gt; v;<br>等同于<br>var f &#x3D; function (v) {<br>    return v;<br>}<br>如果箭头函数不需要参数或者需要多个参数，可以使用一个圆括号代表参数</p><p>var f &#x3D; () &#x3D;&gt; 5;<br>等同于<br>var f &#x3D; function ( ) { return 5; }<br>var sum &#x3D; ( num1, num2) &#x3D;&gt; num1 + num2;<br>等同于<br>var sum &#x3D; function ( num1, num2) {<br>    return num1 + num2;<br>}<br>如果箭头函数代码块部分多余一条语句，就要使用大括号将他们括起来，并使用 return 语句返回。</p><p>var sum &#x3D; ( num1, num2) &#x3D;&gt; { return num1 + num2; }<br>由于大括号被解释为代码块，所以如果箭头函数直接返回一个对象，必须在对象外面加上大括号。</p><p>let getTempItem &#x3D; id &#x3D;&gt; ( { id : id ,name : &quot; Temp&quot;} ) ;<br>箭头函数使得表达式更为简洁</p><p>const isEven &#x3D; n &#x3D;&gt; n % 2 &#x3D;&#x3D; 0 ;<br>const square &#x3D; n &#x3D;&gt; n * n ;<br>箭头函数可以简化回调函数</p><p>[ 1, 2, 3] .map( function (x) ){<br>    return x * x ;<br>}<br>箭头函数<br>[1, 2, 3].map( x &#x3D;&gt; x * x ) ;<br>箭头函数与 rest 参数结合</p><p>const numbres &#x3D; ( …nums) &#x3D;&gt; nums ;<br>numbers (1, 2, 3, 4, 5)<br>&#x2F;&#x2F; [ 1, 2, 3, 4, 5]<br>const headAndTail &#x3D; ( head , …tail ) &#x3D;&gt; [head, tail] ;<br>handAndTail (1, 2, 3, 4, 5)<br>&#x2F;&#x2F; [1, [2, 3, 4, 5] ]<br>箭头函数使用注意<br>函数内的 this 对象，就是定义时所在的对象，而不是使用时所在的对象</p><p>不可以当作构造函数，也就是说，不可使用 new 命令</p><p>不可使用 arguments 对象，该对象在函数体内不存在。若要用，可使用 rest 参数代替</p><p>不可以使用 yield 命令</p><p>嵌套的箭头函数<br>箭头函数的内部，还可以使用箭头函数</p><p> const plus1 &#x3D; a &#x3D;&gt; a+1;<br> const mult2 &#x3D; a &#x3D;&gt; a * 2;<br> mult2 ( plus1(5) )<br>双冒号运算符<br>函数绑定运算符，取代 call，apply，bind；</p><p>双冒号左边是一个对象，右边是一个函数。自动将左边的对象，作为上下文环境（即this对象）绑定到右边函数上。</p><p>foo :: bar<br>等同于<br>bar.bind( foo ) ;<br>foo :: bar( ..arguments ) ;<br>等同于<br>bar.apply( foo, arguments ) ;<br>如果双冒号左边为空，右边是一个对象的方法，等于将该方法绑定在该对象上</p><p>var method &#x3D; obj :: obj.foo ;<br>var method &#x3D; :: obj.foo ;<br>let log &#x3D; :: console.log ;<br>var log &#x3D; console.log.bind(console) ;<br>如果双冒号运算符的晕眩结果，还是一个对象，可以使用链式写法</p><p>import { map , takeWhile, foreach } from &quot;iterlib&quot; ;<br>getPlayers()<br>:: map( x &#x3D;&gt; x.character ( ) )<br>:: takeWhile ( x &#x3D;&gt; x.strength &gt; 100)<br>:: foreach ( x &#x3D;&gt; console.log( x ) );<br>尾调用优化<br>尾调用（tail call）是函数式编程的一个概念，指某个函数的最后一步是调用另一个函数</p><p>function f ( x ) {<br>    return g ( x ) ;<br>}<br>尾调用之所以与其他调用不同，就在于它的特殊的调用位置。我们知道，函数调用会在内存形成一个“调用记录”，又称“调用帧”（call frame），保存调用位置和内部变量等信息。如果在函数A的内部调用函数B，那么在A的调用帧上方，还会形成一个B的调用帧。等到B运行结束，将结果返回到A，B的调用帧才会消失。如果函数B内部还调用函数C，那就还有一个C的调用帧，以此类推。所有的调用帧，就形成一个“调用栈”（call stack）。</p><p>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span> ( ) &#123;<br>    <span class="hljs-keyword">let</span> m = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">let</span> n =<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">g</span>( m + n ) ;<br>&#125;<br><span class="hljs-title function_">f</span>( );<br></code></pre></td></tr></table></figure><p>等同于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params"> </span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">g</span>( <span class="hljs-number">3</span> ); <br>&#125;<br><span class="hljs-title function_">f</span>( );<br></code></pre></td></tr></table></figure><p>等同于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">g</span>( <span class="hljs-number">3</span> );<br></code></pre></td></tr></table></figure><p>尾调用优化就是只保留内层函数的调用帧。</p><p>递归非常耗费内存，很容易发生“栈溢出”。对于尾递归来说，只存在一个调用帧，所以不会发生“栈溢出”</p><p>递归函数的改写<br>函数式编程有个概念，叫柯里化，意思是将多参数转换成但参数形式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//采用es6</span><br><span class="hljs-keyword">function</span>  <span class="hljs-title function_">factorial</span>(<span class="hljs-params"> n, total = <span class="hljs-number">1</span> </span>) &#123;<br>    <span class="hljs-keyword">if</span>( n == <span class="hljs-number">1</span> ) <span class="hljs-keyword">return</span> total;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">factorial</span>( n-<span class="hljs-number">1</span>, n * total ) ;<br>&#125;<br><span class="hljs-title function_">factorial</span>( <span class="hljs-number">5</span> ); <span class="hljs-comment">//120</span><br></code></pre></td></tr></table></figure><p>原文地址 : [es6基础](<a href="http://yuque.com/oswind/es6">http://yuque.com/oswind/es6</a> &quot;跳转&quot;)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>redis基础</title>
    <link href="/2020/08/15/redis%E5%9F%BA%E7%A1%80/"/>
    <url>/2020/08/15/redis%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="Redis的优势和特点"><a href="#Redis的优势和特点" class="headerlink" title="Redis的优势和特点"></a>Redis的优势和特点</h1><h2 id="Redis的特点："><a href="#Redis的特点：" class="headerlink" title="Redis的特点："></a>Redis的特点：</h2><ul><li>内存数据库，速度快，也支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li><li>支持事务</li></ul><h2 id="Redis的优势："><a href="#Redis的优势：" class="headerlink" title="Redis的优势："></a>Redis的优势：</h2><ul><li>性能极高 – Redis能读的速度是110000次&#x2F;s,写的速度是81000次&#x2F;s 。</li><li>丰富的数据类型 – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li>原子 – Redis的所有操作都是原子性的，同时Redis还支持对几个操作合并后的原子性执行。（事务）</li><li>丰富的特性 – Redis还支持 publish&#x2F;subscribe, 通知, key 过期等等特性。</li></ul><h2 id="Redis与其他key-value存储有什么不同？"><a href="#Redis与其他key-value存储有什么不同？" class="headerlink" title="Redis与其他key-value存储有什么不同？"></a>Redis与其他key-value存储有什么不同？</h2><ul><li>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</li><li>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</li></ul><h1 id="Redis的过期策略和内存淘汰机制"><a href="#Redis的过期策略和内存淘汰机制" class="headerlink" title="Redis的过期策略和内存淘汰机制"></a>Redis的过期策略和内存淘汰机制</h1><h2 id="Redis-的-key-有两种过期淘汰的方式：被动方式、主动方式。"><a href="#Redis-的-key-有两种过期淘汰的方式：被动方式、主动方式。" class="headerlink" title="Redis 的 key 有两种过期淘汰的方式：被动方式、主动方式。"></a>Redis 的 key 有两种过期淘汰的方式：被动方式、主动方式。</h2><p>被动过期：用户访问某个 key 的时候，key 被发现过期。</p><p>当然，被动方式过期对于那些永远也不会再次被访问的 key 并没有效果。不管怎么，这些 key 都应被过期淘汰，所以 Redis 周期性主动随机检查一部分被设置生存时间的 key，那些已经过期的 key 会被从 key 空间中删除。</p><p>Redis每秒执行10次下面的操作：</p><p>从带有生存时间的 key 的集合中随机选 20 进行检查。<br>删除所有过期的key。<br>如20里面有超过25%的key过期，立刻继续执行步骤1。<br>这是一个狭义概率算法，我们假设我们选出来的样本 key 代表整个 key 空间，我们继续过期检查直到过期 key 的比例降到 25% 以下。</p><p>这意味着在任意时刻已经过期但还占用内存的 key 的数量，最多等于每秒最多写操作的四分之一。</p><h2 id="过期策略"><a href="#过期策略" class="headerlink" title="过期策略"></a>过期策略</h2><p>我们set key的时候，都可以给一个expire time，就是过期时间，指定这个key比如说只能存活1个小时，我们自己可以指定缓存到期就失效。</p><p>如果假设你设置一个一批key只能存活1个小时，那么接下来1小时后，redis是怎么对这批key进行删除的？</p><p>答案是：定期删除+惰性删除</p><p>所谓定期删除，指的是redis默认是每隔100ms就随机抽取一些设置了过期时间的key，检查其是否过期，如果过期就删除。</p><p>注意，这里可不是每隔100ms就遍历所有的设置过期时间的key，那样就是一场性能上的灾难。</p><p>实际上redis是每隔100ms随机抽取一些key来检查和删除的。</p><p>但是，定期删除可能会导致很多过期key到了时间并没有被删除掉，所以就得靠惰性删除了。</p><p>这就是说，在你获取某个key的时候，redis会检查一下 ，这个key如果设置了过期时间那么是否过期了？如果过期了此时就会删除，不会给你返回任何东西。</p><p>并不是key到时间就被删除掉，而是你查询这个key的时候，redis再懒惰的检查一下</p><p>通过上述两种手段结合起来，保证过期的key一定会被干掉。</p><p>但是实际上这还是有问题的，如果定期删除漏掉了很多过期key，然后你也没及时去查，也就没走惰性删除，此时会怎么样？</p><p>如果大量过期key堆积在内存里，导致redis内存块耗尽了，怎么办？</p><p>答案是：走内存淘汰机制。</p><h2 id="内存淘汰机制"><a href="#内存淘汰机制" class="headerlink" title="内存淘汰机制"></a>内存淘汰机制</h2><p>如果redis的内存占用过多的时候，此时会进行内存淘汰，有如下一些策略：</p><p>noeviction：当内存不足以容纳新写入数据时，新写入操作会报错，这个一般没人用吧</p><p>allkeys-lru：当内存不足以容纳新写入数据时，在键空间中，移除最近最少使用的key（这个是最常用的）</p><p>allkeys-random：当内存不足以容纳新写入数据时，在键空间中，随机移除某个key，这个一般没人用吧</p><p>volatile-lru：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，移除最近最少使用的key（这个一般不太合适）</p><p>volatile-random：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，随机移除某个key</p><p>volatile-ttl：当内存不足以容纳新写入数据时，在设置了过期时间的键空间中，有更早过期时间的key优先移除</p><h1 id="Redis配置文件全解"><a href="#Redis配置文件全解" class="headerlink" title="Redis配置文件全解"></a>Redis配置文件全解</h1><p>&#x3D;&#x3D;基本配置<br>daemonize no 是否以后台进程启动<br>databases 16 创建database的数量(默认选中的是database 0)</p><p>save 900 1    #刷新快照到硬盘中，必须满足两者要求才会触发，即900秒之后至少1个关键字发生变化。<br>save 300 10  #必须是300秒之后至少10个关键字发生变化。<br>save 60 10000 #必须是60秒之后至少10000个关键字发生变化。<br>stop-writes-on-bgsave-error yes    #后台存储错误停止写。<br>rdbcompression yes    #使用LZF压缩rdb文件。<br>rdbchecksum yes    #存储和加载rdb文件时校验。<br>dbfilename dump.rdb    #设置rdb文件名。<br>dir .&#x2F;    #设置工作目录，rdb文件会写入该目录。</p><p>&#x3D;&#x3D;主从配置<br>slaveof <masterip> <masterport> 设为某台机器的从服务器<br>masterauth <master-password>   连接主服务器的密码<br>slave-serve-stale-data yes  # 当主从断开或正在复制中,从服务器是否应答<br>slave-read-only yes #从服务器只读<br>repl-ping-slave-period 10 #从ping主的时间间隔,秒为单位<br>repl-timeout 60 #主从超时时间(超时认为断线了),要比period大<br>slave-priority 100    #如果master不能再正常工作，那么会在多个slave中，选择优先值最小的一个slave提升为master，优先值为0表示不能提升为master。</p><p>repl-disable-tcp-nodelay no #主端是否合并数据,大块发送给slave<br>slave-priority 100 从服务器的优先级,当主服挂了,会自动挑slave priority最小的为主服</p><p>&#x3D;&#x3D;&#x3D;安全<br>requirepass foobared # 需要密码<br>rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52 #如果公共环境,可以重命名部分敏感命令 如config</p><p>&#x3D;&#x3D;&#x3D;限制<br>maxclients 10000 #最大连接数<br>maxmemory <bytes> #最大使用内存</p><p>maxmemory-policy volatile-lru #内存到极限后的处理<br>volatile-lru -&gt; LRU算法删除过期key<br>allkeys-lru -&gt; LRU算法删除key(不区分过不过期)<br>volatile-random -&gt; 随机删除过期key<br>allkeys-random -&gt; 随机删除key(不区分过不过期)<br>volatile-ttl -&gt; 删除快过期的key<br>noeviction -&gt; 不删除,返回错误信息</p><p>#解释 LRU ttl都是近似算法,可以选N个,再比较最适宜T踢出的数据<br>maxmemory-samples 3</p><p>&#x3D;&#x3D;&#x3D;&#x3D;日志模式<br>appendonly no #是否仅要日志<br>appendfsync no # 系统缓冲,统一写,速度快<br>appendfsync always # 系统不缓冲,直接写,慢,丢失数据少<br>appendfsync everysec #折衷,每秒写1次</p><p>no-appendfsync-on-rewrite no #为yes,则其他线程的数据放内存里,合并写入(速度快,容易丢失的多)<br>auto-AOF-rewrite-percentage 100 当前aof文件是上次重写是大N%时重写<br>auto-AOF-rewrite-min-size 64mb aof重写至少要达到的大小</p><p>&#x3D;&#x3D;&#x3D;&#x3D;慢查询<br>slowlog-log-slower-than 10000 #记录响应时间大于10000微秒的慢查询<br>slowlog-max-len 128   # 最多记录128条</p><p>&#x3D;&#x3D;&#x3D;&#x3D;服务端命令<br>time  返回时间戳+微秒<br>dbsize 返回key的数量<br>bgrewriteaof 重写aof<br>bgsave 后台开启子进程dump数据<br>save 阻塞进程dump数据<br>lastsave </p><p>slaveof host port 做host port的从服务器(数据清空,复制新主内容)<br>slaveof no one 变成主服务器(原数据不丢失,一般用于主服失败后)</p><p>flushdb  清空当前数据库的所有数据<br>flushall 清空所有数据库的所有数据(误用了怎么办?)</p><p>shutdown [save&#x2F;nosave] 关闭服务器,保存数据,修改AOF(如果设置)</p><p>slowlog get 获取慢查询日志<br>slowlog len 获取慢查询日志条数<br>slowlog reset 清空慢查询</p><p>info []</p><p>config get 选项(支持*通配)<br>config set 选项 值<br>config rewrite 把值写到配置文件<br>config restart 更新info命令的信息</p><p>debug object key #调试选项,看一个key的情况<br>debug segfault #模拟段错误,让服务器崩溃<br>object key (refcount|encoding|idletime)<br>monitor #打开控制台,观察命令(调试用)<br>client list #列出所有连接<br>client kill #杀死某个连接  CLIENT KILL 127.0.0.1:43501<br>client getname #获取连接的名称 默认nil<br>client setname “名称” #设置连接名称,便于调试</p><p>&#x3D;&#x3D;&#x3D;&#x3D;连接命令&#x3D;&#x3D;&#x3D;<br>auth 密码 #密码登陆(如果有密码)<br>ping #测试服务器是否可用<br>echo “some content” #测试服务器是否正常交互<br>select 0&#x2F;1&#x2F;2… #选择数据库<br>quit #退出连接</p><h1 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h1><p>启动redis时直接 redis-server就可以启动服务端了，也可以指定加载的配置文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">redis-server .<span class="hljs-comment">/***/</span>redis.conf<br></code></pre></td></tr></table></figure><p>默认情况下 redis-server会以非守护进程（简单理解就是后台运行）的形式启动，指定配置文件后就可以实现以守护进程运行。</p><h1 id="redis数据类型"><a href="#redis数据类型" class="headerlink" title="redis数据类型"></a>redis数据类型</h1><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> key<br></code></pre></td></tr></table></figure><p>使用<code>object encoding key</code>可以判断数据类型，字符串长度大于39,底层数据结构蜕变为<code>raw</code><br>redis是一种高级的key:redis存储系统，redis的value共支持五种数据类型</p><p>字符串(strings)，列表(lists)，哈希散列(hashes)，集合(sets)，有序集合(sorted sets)</p><h2 id="strings"><a href="#strings" class="headerlink" title="strings"></a>strings</h2><p>字符串累行是二进制安全（可以存储用二进制表示的文件）。</p><p>再遇到数值操作时，redis会将字符串类型转换成数值。</p><p>由于INCR等指令本省就具有原子操作的特性，所以我们可以利用redis的INCR、INCRBY、DECR、DECRBY等指令来实现原子计数的效果。</p><h2 id="lists"><a href="#lists" class="headerlink" title="lists"></a>lists</h2><p>redis的lists在底层实现上并不是数组，而是链表，也就是说，lists具有链表所具有的优势，也具有链表所具有的劣势。</p><p>lists的常用操作包括 LPUSH、RPUSH、LRANGE等。</p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs tcl"><span class="hljs-keyword">lrange</span> key start end <br>lrem key count element<br>lpush key element [element...]<br>lpop key [count]<br></code></pre></td></tr></table></figure><h2 id="sets"><a href="#sets" class="headerlink" title="sets"></a>sets</h2><p>集合，是一种无序集合，元素没有先后顺序，但元素唯一</p><p>集合操作，诸如添加新元素、删除已有元素、交集、并集、差集等</p><h2 id="sorted-sets"><a href="#sorted-sets" class="headerlink" title="sorted sets"></a>sorted sets</h2><p>有序集合每个元素都关联一个序号（score）,是排序的依据</p><p>有时，也将redis的有序集合成为 zsets，因为在redis中，有序集合的操作都是z开头的，如 zrange、zadd、zrevrange、zrangebyscore等</p><h2 id="hashes"><a href="#hashes" class="headerlink" title="hashes"></a>hashes</h2><p>hashes存储的是字符串和字符串值之间的映射。比如存储一个用户的姓名、年龄、联系方式等。</p><h1 id="redis持久化"><a href="#redis持久化" class="headerlink" title="redis持久化"></a>redis持久化</h1><p>redis长时间挂载在内存上，但有时我们需要其将内容及时拷贝，这时，我们就需要redis的持久化功能</p><p>redis提供两种持久化方式，分别是RDB(redis database)和AOF(append only file)</p><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>就是在不同的时间点，将redis存储的数据生成快照并存储到磁盘等介质上</p><p>这是一种类似快照的持久化方法<br>redis在进行数据持久化的过程中，会将数据先写入到一个临时文件中，等到持久化过程都结束了，才会用该临时文件替换上次持久化的文件。</p><p>对于RDB方式，redis会单独创建（fork）一个子进程来进行持久化任务，而此时主进程是不会进行任何IO操作的，保证服务的正常高性能进行</p><p>如果需要进行大规模数据的恢复，切对于数据恢复的完整性不是非常敏感，那RDB方式比AOF方式更加高效</p><p>当数据完整性要求较好高时，redis发生故障，会有一段时间的数据没来得及进行快照，进而导致丢失</p><h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>将redis执行过的所有指令记录下来，在下次启动时，只要将指令读入再执行一遍，数据就恢复了</p><p>默认的AOF持久化策略是没秒 fsync（fsync指把缓存中的写指令记录到磁盘中）,因为在这种情况下，redis仍可以保持很好的性能，即使redis故障，也只丢失了最近1秒的数据</p><p>AOF方式的一个好处就是可以进行“情景再现”,若我们不小心清空了redis，当AOF文件还没被重写时，我们就可以修改AOF文件，重启redis在恢复数据</p><p>在同样数据规模的情况下，AOF文件比RDB文件大得多，且AOF恢复速度要慢于RDB方式</p><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>在重写即将开始前，redis会创建（fork）一个重写子进程，该子进程会先读取现有的AOF文件，并将其包含的指令进行分析压缩并写入到一个临时文件中。</p><p>与此同时，主进程会将新接收到的写指令一边积累到内存缓冲区中，一边继续写入到原有的AOF文件中。这样做保证原有的AOF文件的可用性，避免在重写过程中出现意外。</p><p>当重写子进程完成重写任务后，他会给主进程发一个信号，主进程收到信号后就会将内存中缓存的写指令追加到新AOF文件中。</p><p>当追加结束后，redis就会用心AOF文件来代替旧AOF文件，之后再有新的写指令，就会都追加到新的AOF文件中。</p><h1 id="主从用法"><a href="#主从用法" class="headerlink" title="主从用法"></a>主从用法</h1><p>像mysql一样，redis是支持主从同步的，也支持一主多从及多从结构</p><p>主从结构，一是为了纯粹的冗余备份，二是为了提升读性能，如很消耗性能的操作可由从服务器承担</p><p>redis的主从同步是异步进行的，意味着主从同步不会影响主逻辑，也不会降低redis的处理性能</p><p>主从架构中，可以考虑关闭主服务器的数据持久化功能，只让从服务器进行持久化，可以进一步提高主服务器的处理性能</p><p>主从架构中，从服务器通常被设置为只读模式，可以避免从服务器的数据被误改。但从服务器还是可以接受到config等指令，所以还是应该避免将从服务器直接暴露到不安全的网络环境中。</p><h2 id="主从同步原理"><a href="#主从同步原理" class="headerlink" title="主从同步原理"></a>主从同步原理</h2><p>从服务器会向主服务器发出sync（异步）指令，当主服务器接收到此指令后，就会调用BGSAVE指令来创建一个子进程专门进行数据持久化工作，也就是将主服务器的数据写入RDB文件中。在数据持久化期间，主服务器将执行的写指令都缓存在内存中</p><p>在BGSAVE指令执行完成后，主服务器会将持久化好的RDB文件发送给从服务器，从服务器接收到此文件后会将其存储到磁盘上，然后再将棋读取到内存中。这个动作完成后，主服务器会将这段时间缓存的写指令再以redis协议的格式发送给从服务器</p><p>即使有多个从服务器同时发来sync指令，主服务器也只会执行一次BGSAVE，然后把持久化好的RDB文件发给多个下游。</p><p>主服务器会在内存中维护一个缓冲区，缓冲区中存储着将要发给从服务器的内容。从服务器在与主服务器出线网络瞬断之后，从服务器会尝试再次与主服务器连接，一点连接成功，从服务器就会把“希望同步的主服务器ID”和“希望请求的数据偏移位置”发送出去。主服务器接收到这样的同步请求后，首先会验证主服务器ID是否和自己的ID匹配，其次会检查“请求的偏移位置”是否存在于自己的缓冲区中，如果两者都满足的haul，主服务器就会向从服务器发送增量内容</p><h1 id="redis的事务处理"><a href="#redis的事务处理" class="headerlink" title="redis的事务处理"></a>redis的事务处理</h1><p>事务是指“一个完整的动作，要么全部执行，要么全部不执行”<br>redis事务处理：</p><p>MULTI 用来组装一个事务<br>EXEC 用来执行一个事务<br>DISCARD 用来取消一个事务<br>WATCH 用来监视一些key，一旦这些key在事务执行之前被改变，则取消事务的执行<br>在用 MULTI 组装驶入时，每一个命令都会进入到内存队列中缓存起来，如果出现 QUEUED 则表示我们这个命令成功插入到缓存队列，在将来执行 EXEC 时，这些被 QUEUED 的命令会被组装成一个事务来执行</p><p>有关事务，常见的两类错误：</p><p>调用EXEC之前错误<br>调用EXEC之后错误<br>“调用EXEC之前错误”，有可能是由于语法有错误导致，也可能由于内存不足导致。只要出现某个命令无法成功写入缓冲队列的情况，redis都会进行记录，在客户端调用EXEC时，redis会拒绝执行这一事务。</p><p>“调用EXEC之后错误”，redsi采取了不同的策略，即redis不会理睬这些错误，而是继续向下执行事务中的其他命令。因为，对于应用层的错误，并不是redis自身需要考虑处理的问题，故，一个事务中某一条命令执行失败，并不影响接下来的其他命令的执行。</p><h2 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h2><p>作用是“监视key是否被改动过”，且支持同时监视多个key，只要还没真正触发事务，WATCH 都会尽职尽责的监视，一旦发现某个key被修改了，在执行EXEC时就会返回 nil ，表示事务无法触发。</p><h2 id="redis配置文件"><a href="#redis配置文件" class="headerlink" title="redis配置文件"></a>redis配置文件</h2><p>redis配置文件分为几大区域：</p><ul><li>通用（general）</li><li>快照（snapshotting）</li><li>复制（replication）</li><li>安全（security）</li><li>限制（limit）</li><li>追加模式（append only mode）</li><li>LUA脚本（lua scripting）</li><li>慢日志（slow log）</li><li>事件通知（event notification）</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php杂记</title>
    <link href="/2020/08/15/php%E6%9D%82%E8%AE%B0/"/>
    <url>/2020/08/15/php%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h4 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">netstat -tunlp | grep 端口号`<br>`lsof -i:端口号<br></code></pre></td></tr></table></figure><h4 id="重启nginx"><a href="#重启nginx" class="headerlink" title="重启nginx"></a>重启nginx</h4><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">nginx -s reload`<br>`service nginx restart<br></code></pre></td></tr></table></figure><h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -name filename<br></code></pre></td></tr></table></figure><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">tar zxvf filename</span><br></code></pre></td></tr></table></figure><h4 id="过滤查找"><a href="#过滤查找" class="headerlink" title="过滤查找"></a>过滤查找</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">cmd <span class="hljs-string">|grep findname</span><br></code></pre></td></tr></table></figure><h4 id="重命名文件夹"><a href="#重命名文件夹" class="headerlink" title="重命名文件夹"></a>重命名文件夹</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mv</span> old_filename new_filename<br></code></pre></td></tr></table></figure><h4 id="查找程序"><a href="#查找程序" class="headerlink" title="查找程序"></a>查找程序</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ps</span> -aux | <span class="hljs-keyword">grep</span> name<br></code></pre></td></tr></table></figure><h4 id="重启服务"><a href="#重启服务" class="headerlink" title="重启服务"></a>重启服务</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">service servicename restart</span><br></code></pre></td></tr></table></figure><h4 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">777</span> filename<br></code></pre></td></tr></table></figure><h4 id="添加新用户"><a href="#添加新用户" class="headerlink" title="添加新用户"></a>添加新用户</h4><p><code>adduser username</code><br><code>-d path</code>绑定当前用户的访问目录<br><code>passwd username</code>给用户更新或添加密码</p><h4 id="vsftpd新增用户"><a href="#vsftpd新增用户" class="headerlink" title="vsftpd新增用户"></a>vsftpd新增用户</h4><p>先同上新增一个访问受限用户，再去vsftpd安装目录下修改数个配置文件，有用户文件，有访问权限文件，以及一个用户配置文件，还需要在指定目录处建立一个同名目录。</p><h4 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h4><p>初始化仓库：<br>先添加用户 <code>adduser git</code><br>创建证书登录 <code>/home/git/.ssh/authorized_keys</code><br>创建仓库 <code>git init --bare name.git</code></p><h3 id="杂项"><a href="#杂项" class="headerlink" title="杂项"></a>杂项</h3><p>swoole提供网络服务时需要单独占用一个端口来提供服务</p><h3 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h3><p><code>doker pull imagename</code>下载一个镜像<br><code>docker run imagename</code>运行容器<br><code>-p 主机端口：容器端口</code> 运行参数之绑定端口<br><code>-i</code>交互式运行 <code>-t</code>终端式运行 <code>-d</code>后台式运行<br><code>-name</code>给容器命名，方便后续使用<br><code>docker ps</code>查看运行中的容器<br><code>docker kill containername</code>停掉运行中的容器</p><h3 id="php添加新扩展"><a href="#php添加新扩展" class="headerlink" title="php添加新扩展"></a>php添加新扩展</h3><p>先使用wget下载文件<br>使用phpize生成配置文件<br>使用.&#x2F;configure生成编译文件<br>make &amp;&amp; make install<br>之后在php.ini中添加扩展，再在conf.d中加入指向so文件的地址</p><h3 id="一次thinkphp源码修改"><a href="#一次thinkphp源码修改" class="headerlink" title="一次thinkphp源码修改"></a>一次thinkphp源码修改</h3><p>原因 php7.3后 strpos 返回值做了修改<br>原：<br><code>if (strpos($url , $bind)===0)</code> Url.php下<br>修改后：<br><code>if ($bind &amp;&amp; strpos($url , $bind ) ===0 )</code></p><h4 id="php7-4"><a href="#php7-4" class="headerlink" title="php7.4"></a>php7.4</h4><p>implode 参数修改为分隔符在前，数组在后</p><h3 id="原生js的关联数据"><a href="#原生js的关联数据" class="headerlink" title="原生js的关联数据"></a>原生js的关联数据</h3><p>使用 hash 传递关联数据，使用<code>JSON.stringify( )</code>将 hash 对象转为 json 字符串</p><p>后端 php 拿到数据后 使用 <code>json_decode()</code>进行 json 解码，但得到的仍为对象</p><h4 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h4><p>ps 用于查看当前运行的进程。</p><p>ps aux 和 ps -ef</p><p>两者的输出结果差别不大，但展示风格不同。aux是BSD风格，-ef是System V风格。</p><p>主要区别是，aux会截断command列，而-ef不会，当结合grep时这种区别会影响到结果</p><h4 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h4><p>用于打印网络连接、路由表、连接的数据统计、伪装连接以及广播域成员</p><p>常见用法 netstat -tulp</p><h4 id="top"><a href="#top" class="headerlink" title="top"></a>top</h4><p>用于实时查看服务器进程等信息</p><h4 id="char与varchar"><a href="#char与varchar" class="headerlink" title="char与varchar"></a>char与varchar</h4><p>char : 定长，效率高，一般用于固定商都的表单提交数据存储<br>varchar : 不定长，效率偏低<br>使用 Innodb 引擎的话，使用varchar代替char</p><h4 id="sort-uniq命令排序-去重"><a href="#sort-uniq命令排序-去重" class="headerlink" title="sort uniq命令排序 去重"></a>sort uniq命令排序 去重</h4><p>uniq 命令可以显示文件中行重复的次数，或只显示出现一次的行，或仅仅显示重复出现的行；但uniq 的去重针对的只是连续的两行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> filename | <span class="hljs-built_in">uniq</span> -c<br></code></pre></td></tr></table></figure><p>-c 用来在每一行最前面加上该行出现的次数</p><p>-u 只显示出现一次的行</p><p>-d 只显示重复出现的行</p><h4 id="error-reporting"><a href="#error-reporting" class="headerlink" title="error_reporting"></a>error_reporting</h4><p>设置应该报告何种PHP错误</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">error_reporting ( [ <span class="hljs-built_in">int</span> $level ] ) : <span class="hljs-built_in">int</span><br></code></pre></td></tr></table></figure><h4 id="类中调用同一类中的其他静态资源，可使用static-name来代替classname-name"><a href="#类中调用同一类中的其他静态资源，可使用static-name来代替classname-name" class="headerlink" title="类中调用同一类中的其他静态资源，可使用static::name来代替classname::name"></a>类中调用同一类中的其他静态资源，可使用<code>static::name</code>来代替<code>classname::name</code></h4><h4 id="self-static"><a href="#self-static" class="headerlink" title="self static"></a>self static</h4><p>self调用静态方法或属性，可能会升级为父类中的数据</p><p>static调用只会涉及当前之类中数据，不会发生升级现象</p><h4 id="self、this、parent"><a href="#self、this、parent" class="headerlink" title="self、this、parent"></a>self、this、parent</h4><p>this指向当前对象的指针</p><p>self指向当前类的指针</p><p>parent指向父类的指针</p><h4 id="php的初始化方法只有构造方法，其他的都为包装过的构造方法"><a href="#php的初始化方法只有构造方法，其他的都为包装过的构造方法" class="headerlink" title="php的初始化方法只有构造方法，其他的都为包装过的构造方法"></a>php的初始化方法只有构造方法，其他的都为包装过的构造方法</h4><hr><h4 id="数组相关"><a href="#数组相关" class="headerlink" title="数组相关"></a>数组相关</h4><p><code>array_merge</code> 合并数组，返回值为合并后数组<br><code>array_diff</code> 求数组差集，只比较键值，返回值为差集数组<br><code>array_intersect</code> 求数组并集，只比较键值，返回值为并集数组<br><a href="http://blog.kaiot.xyz/read/56.html">http://blog.kaiot.xyz/read/56.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php笔试、面试题收录（持续更新）</title>
    <link href="/2020/08/15/php%E7%AC%94%E8%AF%95%E3%80%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E5%BD%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <url>/2020/08/15/php%E7%AC%94%E8%AF%95%E3%80%81%E9%9D%A2%E8%AF%95%E9%A2%98%E6%94%B6%E5%BD%95%EF%BC%88%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<ol><li>php中isset,empty,is_null,?:,??<br>is_null<br>bool is_null ( mixed $var )</li></ol><p>当参数满足下面三种情况时，is_null()将返回TRUE，其它的情况就是FALSE<br>1、它被赋值为NULL<br>2、它还没有赋值<br>3、它未定义，相当于unset()处理过的变量<br>isset<br>bool isset ( mixed $var [, mixed $… ] )，参数是一个变量</p><p>检测参数已设定，并且不是NULL。如果没有设置变量，变量未赋值，或变量被设为NULL，isset()函数就返回NULL。<br>正好和is_null()函数相反，is_null()为TRUE的情况在isset()中就为FALSE。<br>如果传递多个参数，将取交集。即所有参数全部符合 isset() 时才返回 TRUE。<br>empty<br>bool empty ( mixed $var )</p><p>判读变量是否为空。<br>empty()为TRUE的情况，若变量不存在，或者变量存在且其值为&quot;&quot;、0、&quot;0&quot;、NULL、FALSE、array()、var $var; 以及没有任何属性的对象，则返回 TURE。<br>?:<br>$b &#x3D; $a?:1等于 $b &#x3D; !empty($a)?$a:1 ,若$a为空，则赋值为1，否则取$a的值</p><p>??<br>$b &#x3D; $a??$c等于$b &#x3D; isset($a)?$a:$c,若$a未设定，返回$c,否则返回$a</p><ol start="2"><li>date类问题<br>strtotime()函数的作用是将日期时间描述解析为 Unix 时间戳</li></ol><p>int strtotime ( string time [, int now] )</p><p>示例：</p><p>echo &quot;今天:&quot;.date(&quot;Y-m-d&quot;);<br>echo &quot;昨天:&quot;.date(&quot;Y-m-d&quot;,strtotime(&quot;-1 day&quot;));<br>echo &quot;明天:&quot;.date(&quot;Y-m-d&quot;,strtotime(&quot;+1 day&quot;));<br>echo &quot;一周后:&quot;.date(&quot;Y-m-d&quot;,strtotime(&quot;+1 week&quot;));<br>echo &quot;一周零两天四小时两秒后:&quot;.date(&quot;Y-m-d G:H:s&quot;,strtotime(&quot;+1 week 2 days 4 hours 2 seconds&quot;));<br>echo &quot;下个星期四:&quot;.date(&quot;Y-m-d&quot;,strtotime(&quot;next Thursday&quot;));<br>echo &quot;上个周一:&quot;.date(&quot;Y-m-d&quot;,strtotime(&quot;last Monday&quot;));<br>echo &quot;一个月前:&quot;.date(&quot;Y-m-d&quot;,strtotime(&quot;last month&quot;));<br>echo &quot;一个月后:&quot;.date(&quot;Y-m-d&quot;,strtotime(&quot;+1 month&quot;));<br>echo &quot;十年后:&quot;.date(&quot;Y-m-d&quot;,strtotime(&quot;+10 year&quot;));<br>主要考虑date()函数和strtotime()函数</p><ol start="3"><li><p>require 和 include<br> require是无条件包含也就是如果一个流程里加入require,无论条件成立与否都会先执行require<br> include有返回值，而require没有(可能因为如此require的速度比include快)<br> 包含文件不存在或者语法错误的时候require是致命的错误终止执行,include不是<br>原文地址：<a href="https://learnku.com/articles/28758">https://learnku.com/articles/28758</a></p></li><li><p>数据库主从复制、读写分离<br>什么是主从复制<br>主从复制，是用来建立一个和主数据库完全一样的数据库环境，称为从数据库；<br>主从复制的原理：<br>1.数据库有个bin-log二进制文件，记录了所有的sql语句。<br>2.只需要把主数据库的bin-log文件中的sql语句复制。<br>3.让其从数据的relay-log重做日志文件中在执行一次这些sql语句即可。<br>主从复制的作用<br>1.做数据的热备份，作为后备数据库，主数据库服务器故障后，可切换到从数据库继续工作，避免数据丢失。<br>2.架构的扩展。业务量越来越大，I&#x2F;O访问频率过高，单机无法满足，此时做多库的存储，降低磁盘I&#x2F;O访问频率，提高单机的I&#x2F;O性能<br>3.主从复制是读写分离的基础，使数据库能制成更大 的并发。例如子报表中，由于部署报表的sql语句十分慢，导致锁表，影响前台的服务。如果前台服务使用master，报表使用slave，那么报表sql将不会造成前台所，保证了前台的访问速度。<br>主从复制的几种方式：<br>1.同步复制：所谓的同步复制，意思是master的变化，必须等待slave-1,slave-2,…,slave-n完成后才能返回。<br>2.异步复制：如同AJAX请求一样。master只需要完成自己的数据库操作即可。至于slaves是否收到二进制日志，是否完成操作，不用关心。MYSQL的默认设置。<br>3.半同步复制：master只保证slaves中的一个操作成功，就返回，其他slave不管。<br>这个功能，是由google为MYSQL引入的。<br>关于读写分离<br>在完成主从复制时，由于slave是需要同步master的。所以对于insert&#x2F;delete&#x2F;update这些更新数据库的操作，应该在master中完成。而select的查询操作，则落下到slave中。<br>原文地址：<a href="https://learnku.com/articles/28758">https://learnku.com/articles/28758</a></p></li><li><p>数据库索引<br><strong>什么是索引</strong><br>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。（摘自百度百科）<br><strong>索引类型</strong><br>1.FULLTEXT 全文索引<br> 全文索引，仅MyISAM引擎支持。其可以在CREATE TABLE ，ALTER TABLE ，CREATE INDEX 使用，不过目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。<br>2.HASH 哈希索引<br> HASH索引的唯一性及类似键值对的形式十分适合作为索引，HASH索引可以一次定位，不需要像树形索引那样逐层参照，因此具有极高的效率。但是这种高效是有条件的。即只在“&#x3D;”和“in”条件下高效，对于范围查询，排序及组合索引仍然效率不高。<br>3.BTREE 树形索引<br> BTREE所以是一种将索引按一定算法，存入一个树形的数据结构中（二叉树），每次查询都是从树的入口root开始，一次遍历node，获取leaf。这是MySQL中默认也是最常用的索引类型。<br>4.RTREE<br> RTREE在MySQL中很少使用，仅支持geometry数据类型，支持该存储引擎只有MyISAM、BDb、InnoDb、NDb、Archive几种。相对于BTREE，RTREE的优势在于范围查找。<br><strong>索引种类</strong><br>普通索引：仅加速查询<br>唯一索引：加速查询+列值唯一（可以有null）<br>主键索引：加速查询+列值唯一（不可以有null）+表中只有一个<br>组合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并<br>全文索引：对文本内容进行分词，进行搜索<br>外键索引：与主键索引形成联系，保证数据的完整性。<br><strong>索引使用的注意事项</strong><br>1.符合索引遵循前缀原则<br>2.like查询%不能再前，否则索引失效。如有需要，使用全文索引<br>3.column is null可以使用索引<br>4.如果MySQL估计使用索引比全表扫描慢，则放弃使用索引<br>5.如果or前的条件中列有索引，后面的没有，索引不会生效。<br>6.列类型是字符串，查询时，一定要给值加引号，否则索引失效。<br>7.确定order by 和 group by 中只有一个表的列，这样才能使用索引<br>原文地址：<a href="https://learnku.com/articles/28758">https://learnku.com/articles/28758</a></p></li><li><p>高并发的解决方案<br>web服务器优化 ：负载均衡<br>流量优化：防盗链处理 将恶意请求屏蔽，<br>前端优化：减少http请求、添加异步请求、启用浏览器缓存和文件压缩、cdn加速、建立独立的图片服务器、<br>服务端优化：  页面静态化、并发处理、队列处理、<br>数据库优化： 数据库缓存、分库分表、分区操作 、读写分离、负载均衡<br>原文地址：<a href="https://learnku.com/articles/28758">https://learnku.com/articles/28758</a></p></li><li><p>接口与抽象类的区别</p></li><li><p>接口<br>（1）对接口的使用是通过关键字implements<br>（2）接口不能定义成员变量（包括类静态变量），能定义常量<br>（3）子类必须实现接口定义的所有方法<br>（4）接口只能定义不能实现该方法<br>（5）接口没有构造函数<br>（6）接口中的方法和实现它的类默认都是public类型的</p></li><li><p>抽象类<br>（1）对抽象类的使用是通过关键字extends<br>（2）不能被实例化，可以定义子类必须实现的方法<br>（3）子类必须定义父类中的所有抽象方法，这些方法的访问控制必须和父类中一样（或者更为宽松）<br>（4）如一个类中有一个抽象方法，则该类必须定义为抽象类<br>（5）抽象类可以有构造函数<br>（6）抽象类中的方法可以使用private,protected,public来修饰。<br>（7）一个类可以同时实现多个接口，但一个类只能继承于一个抽象类。</p></li><li><p>Final类&#x2F;方法<br>（1）final类不能被继承<br>（2）final方法不能被重写</p></li><li><p>Static类&#x2F;方法<br>(1)可以不实例化类而直接访问<br>(2)静态属性不可以由对象通过-&gt;操作符来访问,用::方式调用<br>原文地址：<a href="https://learnku.com/articles/28758">https://learnku.com/articles/28758</a></p></li><li><p>php获取上级文件目录<br>echo <strong>FILE</strong> ; &#x2F;&#x2F; 获取当前所在文件的绝对路径及地址，结果：D:\aaa\my.php<br>echo dirname(<strong>FILE</strong>); &#x2F;&#x2F; 取得当前文件所在的绝对目录，结果：D:\aaa\<br>echo dirname(dirname(<strong>FILE</strong>)); &#x2F;&#x2F;取得当前文件的上一层目录名，结果：D:\<br>原文：<a href="https://blog.csdn.net/viqecel/article/details/80765275">https://blog.csdn.net/viqecel/article/details/80765275</a></p></li><li><p>HTTP状态码<br>1**<br>信息，服务器收到请求，需要请求者继续执行操作<br>2**<br>成功，操作被成功接收并处理<br>3**<br>重定向，需要进一步的操作以完成请求<br>4**<br>客户端错误，请求包含语法错误或无法完成请求<br>5**<br>服务器错误，服务器在处理请求的过程中发生了错误<br>详细参照：<a href="https://www.runoob.com/http/http-status-codes.html">https://www.runoob.com/http/http-status-codes.html</a></p></li><li><p>设计模式<br>简单工厂模式：根据产品接口，创建多个产品类，由一个工厂类返回多种产品对象<br>工厂模式：根据产品接口，创建多个产品类，并创建多个工厂类，由一个工厂使用类调用多个工厂对象来制造多种产品对象<br>单例模式：保证一个类有且只有一个实例，且提供一个访问它的全局控制点<br>策略模式：一个策略接口，多个具体策略类，一个策略使用类</p></li><li><p>三大范式<br>第一范式：确保每列保持原子性<br>第二范式：确保表中每列都和主键相关<br>第三范式：确保每列都和主键列直接相关，而不是间接相关</p></li><li><p>面向对象<br>面向过程是具体化的，流程化的，解决一个问题，你需要一步一步的分析，一步一步的实现。<br>面向对象是模型化的，你只需抽象出一个类，这是一个封闭的盒子，在这里你拥有数据也拥有解决问题的方法。<br>需要什么功能直接使用就可以了，不必去一步一步的实现，至于这个功能是如何实现的，管我们什么事？我们会用就可以了。<br>面向对象的底层其实还是面向过程，把面向过程抽象成类，然后封装，方便我们使用的就是面向对象了。<br>面向对象的三大特征和五大基本原则<br>面向对象的三大特征：封装、继承、多态<br>五大基本原则：<br>单一职责原则：类的功能要单一<br>开放封闭原则：模块对于拓展是开放的，修改是封闭的<br>里式替换原则：子类可以代替父类出现在父类可以出现的任何地方<br>依赖倒置原则：高层次的模块不应该依赖于低层次模块，他们都应该依赖于抽象。抽象不应该依赖于具体实现，具体实现应该依赖于抽象。就如同在国外，‘我是中国人’，而不是‘我是**村的人’<br>接口分离原则：接口的功能也具有单一性，需要尽可能的拆分</p></li></ol><p>转载 <a href="http://blog.kaiot.xyz/read/55.html">http://blog.kaiot.xyz/read/55.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于http响应和连接</title>
    <link href="/2020/08/15/%E5%85%B3%E4%BA%8Ehttp%E5%93%8D%E5%BA%94%E5%92%8C%E8%BF%9E%E6%8E%A5/"/>
    <url>/2020/08/15/%E5%85%B3%E4%BA%8Ehttp%E5%93%8D%E5%BA%94%E5%92%8C%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP-响应头信息"><a href="#HTTP-响应头信息" class="headerlink" title="HTTP 响应头信息"></a>HTTP 响应头信息</h1><p>&gt;HTTP请求头提供了关于请求，响应或者其他的发送实体的信息。</p><p>Allow<br>服务器支持哪些请求方法（如GET、POST等）。</p><p>Content-Encoding<br>文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(&quot;Accept-Encoding&quot;)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</p><p>Content-Length<br>表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入 ByteArrayOutputStream，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</p><p>Content-Type<br>表示后面的文档属于什么MIME类型。Servlet默认为text&#x2F;plain，但通常需要显式地指定为text&#x2F;html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</p><p>Date<br>当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</p><p>Expires<br>应该在什么时候认为文档已经过期，从而不再缓存它？</p><p>Last-Modified<br>文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</p><p>Location<br>表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</p><p>Refresh<br>表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(&quot;Refresh&quot;, &quot;5; URL&#x3D;<a href="http://host/path&quot;)%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82">http://host/path&quot;)让浏览器读取指定的页面。</a><br>注意这种功能通常是通过设置HTML页面HEAD区的＜META HTTP-EQUIV&#x3D;&quot;Refresh&quot; CONTENT&#x3D;&quot;5;URL&#x3D;<a href="http://host/path&quot;%EF%BC%9E">http://host/path&quot;＞</a><br>实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。</p><p>注意Refresh的意义是&quot;N秒之后刷新本页面或访问指定页面&quot;，而不是&quot;每隔N秒刷新本页面或访问指定页面&quot;。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是＜META HTTP-EQUIV&#x3D;&quot;Refresh&quot; …＞。</p><p>注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</p><p>Server<br>服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</p><p>Set-Cookie<br>设置和页面关联的Cookie。Servlet不应使用response.setHeader(&quot;Set-Cookie&quot;, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</p><p>WWW-Authenticate<br>客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(&quot;WWW-Authenticate&quot;, &quot;BASIC realm&#x3D;＼&quot;executives＼&quot;&quot;)。<br>注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</p><h1 id="HTTP持久连接"><a href="#HTTP持久连接" class="headerlink" title="HTTP持久连接"></a>HTTP持久连接</h1><p>&gt;HTTP持久连接（HTTP persistent connection，也称作HTTP keep-alive或HTTP connection reuse）是使用同一个TCP连接来发送和接收多个HTTP请求&#x2F;应答，而不是为每一个新的请求&#x2F;应答打开新的连接的方法。</p><p>在 HTTP 1.0 中, 没有官方的 keepalive 的操作。通常是在现有协议上添加一个指数。如果浏览器支持 keep-alive，它会在请求的包头中添加：<br>1<br>Connection: Keep-Alive<br>然后当服务器收到请求，作出回应的时候，它也添加一个头在响应中：<br>1<br>Connection: Keep-Alive<br>这样做，连接就不会中断，而是保持连接。当客户端发送另一个请求时，它会使用同一个连接。这一直继续到客户端或服务器端认为会话已经结束，其中一方中断连接。<br>在 HTTP 1.1 中所有的连接默认都是持续连接，除非特殊声明不支持。HTTP 持久连接不使用独立的 keepalive 信息，而是仅仅允许多个请求使用单个连接。然而， Apache 2.0 httpd 的默认连接过期时间是仅仅15秒，对于 Apache 2.2 只有5秒。短的过期时间的优点是能够快速的传输多个web页组件，而不会绑定多个服务器进程或线程太长时间。</p><ol><li>较少的CPU和内存的使用（由于同时打开的连接的减少了）</li><li>允许请求和应答的HTTP管线化</li><li>降低拥塞控制（TCP连接减少了）</li><li>减少了后续请求的延迟（无需再进行握手）</li><li>报告错误无需关闭TCP连接</li></ol><p>根据RFC 2616 （47页），用户客户端与任何服务器和代理服务器之间不应该维持超过2个链接。代理服务器应该最多使用2&amp;times;N个持久连接到其他服务器或代理服务器，其中N是同时活跃的用户数。这个指引旨在提高HTTP响应时间并避免阻塞。</p><p>对于广泛普及的宽带连接来说，Keep-Alive也许并不像以前一样有用。web服务器会保持连接若干秒(Apache中默认15秒)，这与提高的性能相比也许会影响性能。<br>对于单个文件被不断请求的服务(例如图片存放网站)，Keep-Alive可能会极大的影响性能，因为它在文件被请求之后还保持了不必要的连接很长时间。 </p><h1 id="关于HTTP的持久连接特性"><a href="#关于HTTP的持久连接特性" class="headerlink" title="关于HTTP的持久连接特性"></a>关于HTTP的持久连接特性</h1><p>HTTP协议是位于传输层之上的应用层协议，其网络层基础通常是TCP协议。TCP协议是面向连接和流的，因此连接的状态和控制对于HTTP协议而言相当重要。同时，HTTP是基于报文的，因此如何确定报文长度也是协议中比较重要的一点。<br>Persistent Connections持久连接<br>目的<br>在使用持久连接前，HTTP协议规定为获取每个URL资源都需要使用单独的一个TCP连接，这增加了HTTP服务端的负载，引起互联网拥塞。例如内嵌图片以及其他类似数据的使用要求一个客户端在很短时间内向同一个服务端发起多个请求。<br>使用持久连接的优点:<br>减少TCP连接数量<br>在一个连接上实现HTTP请求和应答的流水，即允许客户端发出多个请求，而不必在接收到前一请求的应答后才发出下一请求，极大减少时间消耗<br>后续请求延迟减少，无需再在TCP握手上耗时<br>可以更加优雅地实现HTTP协议，由于持续连接的存在无需报告错误后无需关闭连接，因此客户端可使用最新的协议特性发出请求，如果接收到表示错误的应答，则换用更旧的语义。</p><p>总体描述<br>HTTP&#x2F;1.1和之前版本的显著区别是HTTP&#x2F;1.1默认使用持久连接。即，除非服务端在应答中明确指出，客户端应当假定服务端会维持一个持久连接，即使从服务端收到的应答是报告错误。<br>持久连接对关闭TCP连接的行为提供信号量机制支持。这个信号量是在HTTP头中的Connection域设置，注意Client向Proxy发出请求时该域可能被Proxy-Connection域替换。一旦close信号被表明，客户端绝不能再通过该连接发送更多的请求。</p><p>协商(Negotiation)<br>HTTP&#x2F;1.1 服务端可以假定HTTP&#x2F;1.1客户端会维持持久连接，除非请求中Connection域的值是&quot;close&quot;.同样的，如果服务端打算在送出应答后立即关闭连接，它应当在应答中包含同样的Connection域。(TCP连接关闭是双向的,此时TCP进入半关闭状态)<br>同样的，HTTP&#x2F;1.1客户端可以期望连接是持久的，除非如前所述收到表示连接关闭的应答。当然，也可以主动发出一个包含Connection:close的请求以表明终止连接。<br>无论客户端还是服务端发出的报文包含Connection:close，则该请求均为连接上的最后一个请求(服务端发出此应答后关闭，因此不可能接收更多的请求)<br>报文传输长度<br>为保证持久性，连接上的报文都必须有一个自定义的报文传输长度(否则必须通过连接的关闭表示报文结束，因为TCP连接是面向流的)，确定的规则按优先级由高到低排列如下：<br>报文传输长度指报文中出现的报文体的长度(即，不包括头长度，因为报文头的结束可通过连续两个CRLF确定）<br>1.任何绝不能包含报文体(如1xx,204,304)的应答消息总是以头域后的第一个空行结束,无视头中所有的entity类型域的设置，包括Content-Length域。<br>2.Transfer-Encoding域出现，其值为除&quot;identify&quot;以外的其他值，则用&quot;chunked&quot;传输编码方式确定传输长度，具体方式留待下篇分析。<br>3.Content -Length域出现，且Transfer-Encoding域未出现(出现则忽略Content-Length域)。Content-Length域的值为十进制数的字节序，如Content-Length：1234，则1、2、3、4是分别作为一个octet传输的，因此需要atoi转换成数值。<br>4.如果报文使用了&quot;multipart&#x2F;byteranges&quot;的媒体类型，且没对传输长度做前面的指明，则这种自分割的媒体类型定义了传输长度。具体参见Range头域的说明。<br>5.服务端关闭连接(此方法不可用于客户端发出的请求报文，因为客户端关闭连接则使得服务端无法发送应答).<br>为保持和HTTP&#x2F;1.0的兼容性, 包含报文体的HTTP&#x2F;1.1请求必须包含合法的Content-Length头域,除非明确知道服务端是HTTP&#x2F;1.1兼容的.如果请求包含消息体, 而没有Content-Length域,那么如果服务端无法确定消息长度时,它会返回400(无效请求),或者坚持获取合法Content-Length 而返回411(要求包含长度).</p><p>所有接收实体的HTTP&#x2F;1.1应用程序必须接受&quot;chunked&quot;传输编码, 这样允许当报文长度无法预先确定时可以运用此机制获取报文长度.<br>报文不能同时包含Content-Length头域和非&quot;identity&quot; Transfer-Encoding.如果出现了, Content-Length域必须被忽略.<br>当Content-Length域在允许报文体的报文中存在时, 其域值必须严格等于消息体中的8比特字节.HTTP&#x2F;1.1 user agent 必须在接收并检测到一个错误的长度时提醒用户.<br>以上方法中，最常见的还是使用Content-Length域表示报文体长度，Transfer-Encoding需要按格式解码才能还原出发送编码前的报文。</p><p>流水<br>支持持久连接的客户端可以流水发送请求，服务端必须按发送的顺序发送应答。<br>假定持久连接和连接后即可流水的客户端应当做好在第一次流水失败后重新尝试此连接。在这样的尝试中，在确定连接是持久的之前，客户端不能再流水。<br>客户端同样必须准备好在服务端送回所有相关应答前就关闭连接时重发请求。<br>不应流水non-idempotent方法</p><p>Proxy Servers<br>对于代理服务端而言，正确实现Connection头域指定的属性尤为重要。<br>代理服务端必须分立通告它的客户端和连接的原始服务端持久连接的属性，每个持久连接设置仅针对一个传输连接。</p><p>实践考量<br>超时值，服务端通常会为每个连接维护一个定时器，一旦某个连接不活跃超过一定时间值，服务端会关闭此连接。考虑到一个客户端可能通过代理服务端发出更多连接，代理服务端通常会将超时值设置得更高。<br>还有一些关于从异步关闭中恢复的讨论。</p><p>报文传输要求<br>使用TCP流控制来解决服务端临时负载过高问题，而不是简单的依赖客户端重连而关闭连接。<br>监视连接情况以获取错误状态消息<br>关于使用100(继续)状态码<br>100状态码用于客户端发送请求体之前测试是否可以发送该请求，对于Proxy，有以下要求：<br>1.如果代理服务端接收到包含Expect头域值为&quot;100-continue&quot;的请求, 而不明确知道下一跳服务不支持HTTP&#x2F;1.1以上版本, 则它必须转发这个请求, 包括Expect头域.<br>2.如果代理知道下一跳服务端为HTTP&#x2F;1.0或者更低版本, 则它不能转发此请求, 且必须以407应答客户端.<br>3.如果明确知道发出请求的客户端版本为HTTP&#x2F;1.0或者更低，则代理服务端绝不能转发100应答,这条规则凌驾于转发1xx应答的一般准则.</p><p>Connection头域说明<br>BNF文法：<br>Connection &#x3D; &quot;Connection&quot; &quot;:&quot; 1#(connection-token)<br>connection-token &#x3D; token<br>Connection头域中的token用于指定对于特定连接有意义的选项，因此proxy在转发前要扫描此域，从头中去除和token同名的域。例如Connection:Range,则要去掉Range域。<br>HTTP&#x2F;1.1定义了close这个token，发送者用此token表示在完成这个报文所属请求&#x2F;应答的收发后连接将关闭。</p><h2 id="HTTP的持久连接对Web服务性能的影响"><a href="#HTTP的持久连接对Web服务性能的影响" class="headerlink" title="HTTP的持久连接对Web服务性能的影响"></a>HTTP的持久连接对Web服务性能的影响</h2><p>我们的 Web 页面通常有很多对像(Object)组成。如：jss 样式表、图片、scripts、文档等。所以用户浏览一个网页文件时候，要向 Web 服务器发送多次请求(要从服务器上获取一个Object就要向服务器发送一个请求)，浏览器根据 jss 样式表把从服务器获取的这些html页面对象合成一个完整的html页面展示给用户。<br>        最早我们的浏览器是单线程的，意味着一次只能向浏览器发送一个Object请求，等到该Object传输完成了，再向服务发送第二个Object的请求。我们把它称为串行事务处理。串行事务处理，使得我们的连接时延会叠加，用户的体验效果差。如，页面有多幅图片，页面正在加载一幅图片时，页面上其它地方都没有动静，也会让人门觉得很慢。后来出现了多线程的浏览器，当用户点击打开一个页面时，会同时向服务器同时发起多个用户请求(也就是并行处理方式)，减少了连接时延叠加，同时加速了一个web页面对象的加载速度，让用户有更好的体验效果。<br>        虽然采用多线程的浏览器加速了页面的加载速度，但是如果我们只对连接进行简单的管理(如不使用 keep alive)，浏览器每获得一个Web对像都要使用一个新的TCP连接。<br>意思是说我们加载的html页面有多少个页面对象，浏览器与服务器要建立多少条TCP连接。大家都知道使用TCP传输数据之前，要先经过三次握手，三次握手成功以后，双方才能够进行数据的传输。<br>所以说，我们使用TCP&#x2F;IP进行数据网络传输必定会造成延迟的。双方完成数据的传输以后还要经过TCP的四次断开的过程。一个TCP的连接要经过：建立连接 、传输数据、拆除连接。</p><pre><code class="hljs">    TCP的建立连接和拆除连接是很费时的，有时候甚至比数据传输的时间还长。所以，虽然浏览器采用了并发处理方式，加速了页面的加载速度。但是请求一个页面对像就需要与服务器建立一条TCP连接。如果用户浏览的页面文件有1000个object的话，从服务器请求数据到展示给用户，    最基本延迟时间 = 1000*(平均每个TCP连接建立时间 + 平均每个TCP连接拆除时间)。</code></pre><p>随着我们的页面对像的增加，这个延迟时间是不断增长的。客户端每请求一个object，就要与服务器建立一条TCP连接，服务器每维护一条TCP连接是要消耗一定的资源(如内存)。所以，也加速了服务器的负担。对服务器的并发用户数也造成很大影响。所以后来 HTTP&#x2F;1.1 使用了重用TCP连接功能来消除连接及关闭时延。允许HTTP设备在事务处理结束之后将TCP连接保持在打开状态，<br>以便为后续的HTTP请求重用现存的TCP连接。在事务处理结束之后仍然保持在打开状态的TCP连接被称为持久连接。也称为 TCP 重用。</p><pre><code class="hljs">  是如何重用TCP连接的呢？  假如，浏览的网页文件有400个object.我们的浏览器是4线程的，浏览器会并行向 Web 服务器发送4个 TCP连接请求。当这4个TCP请求与服务器建立连接完成数据传输以后，并不是</code></pre><p>把它拆除掉。浏览器与web服务器协定使用 keep-alive 功能时。HTTP设备就会在事务处理结束之后将该4条TCP连接保持在打开状态。浏览器就使用这4条TCP连接完成后续的396个object的数据转输。<br>        持久连接降低了时延和连接建立的开销，将连接保持在已调谐状态，而且减少了打开连接的潜在数量。但是，管理 持久连接时要特别小心，不然就会累积出大量的空闲连接，耗费客户端和服务器上的资源。下面是 Apache web 服务器管理持久连接的一些配置：</p><p>[root@node2 ~]# vim &#x2F;etc&#x2F;httpd&#x2F;extra&#x2F;httpd-default.conf<br>…<br>#KeepAlive On<br>KeepAlive On<br>#</p><h1 id="MaxKeepAliveRequests-The-maximum-number-of-requests-to-allow"><a href="#MaxKeepAliveRequests-The-maximum-number-of-requests-to-allow" class="headerlink" title="MaxKeepAliveRequests: The maximum number of requests to allow"></a>MaxKeepAliveRequests: The maximum number of requests to allow</h1><h1 id="during-a-persistent-connection-Set-to-0-to-allow-an-unlimited-amount"><a href="#during-a-persistent-connection-Set-to-0-to-allow-an-unlimited-amount" class="headerlink" title="during a persistent connection. Set to 0 to allow an unlimited amount."></a>during a persistent connection. Set to 0 to allow an unlimited amount.</h1><h1 id="We-recommend-you-leave-this-number-high-for-maximum-performance"><a href="#We-recommend-you-leave-this-number-high-for-maximum-performance" class="headerlink" title="We recommend you leave this number high, for maximum performance."></a>We recommend you leave this number high, for maximum performance.</h1><h1 id="保持连接允许传输的最大请求数"><a href="#保持连接允许传输的最大请求数" class="headerlink" title="保持连接允许传输的最大请求数"></a>保持连接允许传输的最大请求数</h1><p>MaxKeepAliveRequests 100</p><h1 id="KeepAliveTimeout-Number-of-seconds-to-wait-for-the-next-request-from-the"><a href="#KeepAliveTimeout-Number-of-seconds-to-wait-for-the-next-request-from-the" class="headerlink" title="KeepAliveTimeout: Number of seconds to wait for the next request from the"></a>KeepAliveTimeout: Number of seconds to wait for the next request from the</h1><h1 id="same-client-on-the-same-connection"><a href="#same-client-on-the-same-connection" class="headerlink" title="same client on the same connection."></a>same client on the same connection.</h1><h1 id="在同一个客户端的连接，等待下一个请求的超时时间"><a href="#在同一个客户端的连接，等待下一个请求的超时时间" class="headerlink" title="在同一个客户端的连接，等待下一个请求的超时时间"></a>在同一个客户端的连接，等待下一个请求的超时时间</h1><p>KeepAliveTimeout 5<br>…<br>说明：</p><p>这些就是 Keep-Alive选项。<br>注意，Keep-Alive 首部只是请求将连接保持在活跃状态。发出 keep-alive 请求之后，客户端和服务器并不一定会同意进行 keep-alive 会话。<br>它们可以在任意时刻关半空闲的 keep-alive 连接，并可随意限制 keep-alive 连接所处理事务的数量。</p><p>下面来看看，客户端与服务器怎样商量它们是否使用HTTP协议的持久连接功能的呢？<br>实现 HTTP&#x2F;1.0 keep-alive 连接的客户端可以通过包含 Connection: Keep-Alive 首部请求将一条连接保持在打开状态。</p><p>通过 Google Chrome 浏览器的开发者工具来查看，访问 <a href="http://192.168.203.99/index.html">http://192.168.203.99/index.html</a> 的请求头信息。</p><p>Request Header<br>Accept:text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,p_w_picpath&#x2F;webp,<em>&#x2F;</em>;q&#x3D;0.8<br>Accept-Encoding:gzip,deflate,sdch<br>Accept-Language:zh-CN,zh;q&#x3D;0.8<br>Cache-Control:no-cache<br>Connection:keep-alive     —–&gt; 请求将一条连接保持在打开状态。<br>Cookie:2c407_ol_offset&#x3D;97; 2c407_ipstate&#x3D;1402781651; 2c407_jobpop&#x3D;0; 2c407_winduser&#x3D;BD4OUFQKBQkLVgReBgsAAFsDVlMKB1MGUQ4LAwcFUlgBBms; 2c407_ck_info&#x3D;%2F%09; 2c407_lastpos&#x3D;index; 2c407_lastvisit&#x3D;49%091402713397%09%2Findex.php<br>Host:192.168.203.99<br>Pragma:no-cache<br>User-Agent:Mozilla&#x2F;5.0 (Windows NT 6.2; WOW64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;34.0.1847.137 Safari&#x2F;537.36<br>通过工具 crul 获得的响应头信息。</p><p>[root@node2 ~]# curl -I <a href="http://192.168.203.99/index.html">http://192.168.203.99/index.html</a><br>HTTP&#x2F;1.1 200 OK<br>Server: nginx&#x2F;1.0.11<br>Date: Sat, 14 Jun 2014 09:17:15 GMT<br>Content-Type: text&#x2F;html<br>Content-Length: 151<br>Last-Modified: Thu, 01 May 2014 04:21:03 GMT<br>Connection: keep-alive<br>Accept-Ranges: bytes<br>说明：<br>    如果服务器愿意为下一条请求将连接保持在打开状态(意思是说下一次请求数据时，可以通过该TCP连接传输数据，不需要建立新的TCP连接了)，<br>    就在响应中包含相同的首部 Connection: keep-alive。<br>    如果响应中没有 Connection: keep-alive 首部，客户端就认为服务器不支持 keep-alive,会在发回响应报文之后关闭连接@。<br>    从上在请求首部和响应首部分析，我们使用了HTTP 持久连接的功能。</p><p>总结：<br>   Keep-Alive 连接的限制和规则：<br>   1、在 HTTP&#x2F;1.0 中，keep-alive 并不是默认使用的，客户端必须发送一个 Connection: Keep-Alive</p><pre><code class="hljs">     请求首部来激活 keep-alive 连接。</code></pre><p>   2、Connection: Keep-Alive 首部必须随所有希望保持持久连接的报文一起发送。如果客户端没有发</p><pre><code class="hljs">     送 Connection: Keep-Alive 首部，服务器就会在那条请求之后关闭连接。</code></pre><p>   3、客户端探明响应中没有 Connection: Keep-Alive 响应首部，就可以知道服务器发出响应之后是否</p><pre><code class="hljs">      会关闭连接了。</code></pre><p>   4、为了避免出现大量的空闲的TCP连接，要定义持久连接的超时时间 timeout.  限制操持连接的TCP</p><pre><code class="hljs">     连接最多能完成多少个事务 MaxKeepAliveRequests</code></pre><p>转载于:<a href="https://blog.51cto.com/9528du/1426695">https://blog.51cto.com/9528du/1426695</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>关于apt-get remove 与 apt-get purge</title>
    <link href="/2020/08/14/%E5%85%B3%E4%BA%8Eapt-get%20remove%20%E4%B8%8E%20apt-get%20purge/"/>
    <url>/2020/08/14/%E5%85%B3%E4%BA%8Eapt-get%20remove%20%E4%B8%8E%20apt-get%20purge/</url>
    
    <content type="html"><![CDATA[<p>今天在Ubuntu服务器上安装supervisor，部署没成功想卸载重来，sudo apt-get remove supervisor 后发现配置文件还在，便手动删除了配置文件。再次安装，提示配置文件不存在，WTF！配置文件不该你软件给我创建吗？我想。</p><p>查阅资料才知，还有 apt-get purge 这一选项，purge 清除。</p><p>划重点：<br>apt-get remove 会删除软件包而保留软件的配置文件<br>apt-get purge 会同时清除软件包和软件的配置文件</p><p>但是为什么重新安装会失败呢？<br>系统中存在dpkg这么一个工具，会记录软件包的状态，不只是安装和未安装两种状态，会记录以下这些状态：</p><p>not-installed - The package is not installed on this system<br>config-files - Only the configuration files are deployed to this system<br>half-installed - The installation of the package has been started, but not completed<br>unpacked - The package is unpacked, but not configured<br>half-configured - The package is unpacked and configuration has started but not completed<br>triggers-awaited - The package awaits trigger processing by another package<br>triggers-pending - The package has been triggered<br>installed - The packaged is unpacked and configured OK</p><p>当执行apt-get install时，apt软件包管理工具会先检查要安装的软件的状态，向我这种情况下，手动删除了软件配置后，并不会引起dpkg中记录的状态的改变，即仍为 config-files 状态，所以安装过程会直接跳过创建配置文件这一过程。于是当软件想要启动进程的时候，才发现找不到文件。</p><p>所以当你想彻底地删除软件包的时候，用 apt-get purge 吧</p><p>原文：<a href="http://bencane.com/2014/08/18/removing-packages-and-configurations-with-apt-get/">http://bencane.com/2014/08/18/removing-packages-and-configurations-with-apt-get/</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql（mariadb）常用命令</title>
    <link href="/2020/08/14/mysql%EF%BC%88mariadb%EF%BC%89%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2020/08/14/mysql%EF%BC%88mariadb%EF%BC%89%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<blockquote><p>首先了解一下<code>SQL</code>的注释</p></blockquote><p>单行语句进行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> USERS; <span class="hljs-comment">--查询所有用户信息</span><br></code></pre></td></tr></table></figure><p>多行注释</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*</span><br><span class="hljs-comment">切换到USER数据库</span><br><span class="hljs-comment">查询所有表信息</span><br><span class="hljs-comment">*/</span><br>USE <span class="hljs-keyword">USER</span>;<br><span class="hljs-keyword">SHOW</span> TABLES;<br></code></pre></td></tr></table></figure><p>注释快捷键</p><blockquote><p>选中需要注释的语句<br>先Ctrl+k，再Ctrl+c<br>注释成功<br>取消注释<br>先Crtrl+k，在Ctrl+u</p></blockquote><h2 id="查看支持的表引擎"><a href="#查看支持的表引擎" class="headerlink" title="查看支持的表引擎"></a>查看支持的表引擎</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> ENGINES;<br><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> &quot;%STORAGE_ENGINE%&quot;;<br></code></pre></td></tr></table></figure><h2 id="查看创建表语句"><a href="#查看创建表语句" class="headerlink" title="查看创建表语句"></a>查看创建表语句</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `TBALE`<br></code></pre></td></tr></table></figure><h2 id="查看表status"><a href="#查看表status" class="headerlink" title="查看表status"></a>查看表status</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLE</span> STATUS <span class="hljs-keyword">FROM</span> `DATABASE` <span class="hljs-keyword">WHERE</span> NAME<span class="hljs-operator">=</span>`<span class="hljs-keyword">TABLE</span>` \G<br></code></pre></td></tr></table></figure><h2 id="修改表引擎"><a href="#修改表引擎" class="headerlink" title="修改表引擎"></a>修改表引擎</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> `TBALE` ENGINE<span class="hljs-operator">=</span>MEMORY<br></code></pre></td></tr></table></figure><h2 id="查看mysql的数据文件存放位置"><a href="#查看mysql的数据文件存放位置" class="headerlink" title="查看mysql的数据文件存放位置"></a>查看mysql的数据文件存放位置</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> VARIABLES <span class="hljs-keyword">LIKE</span> &quot;%DIR%&quot;;<br></code></pre></td></tr></table></figure><p>数据库文件默认在：<code>cd /usr/share/mysql</code><br>配置文件默认在：<code>/etc/my.cnf</code></p><p>———————————–</p><p>数据库目录：<code>/var/lib/mysql/</code><br>配置文件：<code>/usr/share/mysql</code>(mysql.server命令及配置文件)<br>相关命令：&#x2F;usr&#x2F;bin(mysqladmin、mysqldump等命令)(*mysql的一种安全启动方式：&#x2F;usr&#x2F;bin&#x2F;mysqld_safe –user&#x3D;root &amp;)<br>启动脚本：&#x2F;etc&#x2F;rc.d&#x2F;init.d&#x2F;</p><p>首先你可以使用以下的命令来寻找MySQL</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">[root@stuhome <span class="hljs-regexp">/]# find /</span> -name “mysql” -<span class="hljs-built_in">print</span><br></code></pre></td></tr></table></figure><p>一般来说mysql是放在&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;下的。<br>然后在其bin目录下有个mysql_config文件，vi之，你会看见这么一句：<br>ldata&#x3D;’&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;var’<br>rpm安装默认目录：<br>数据文件：&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;<br>配置文件模板：&#x2F;usr&#x2F;share&#x2F;mysql<br>mysql客户端工具目录：&#x2F;usr&#x2F;bin<br>日志目录：&#x2F;var&#x2F;log&#x2F;<br>pid，sock文件目录：&#x2F;tmp&#x2F;</p><h2 id="设置组合主键索引"><a href="#设置组合主键索引" class="headerlink" title="设置组合主键索引"></a>设置组合主键索引</h2><p>使用baiprimary key(字段1, 字段2, …)的语句进行设置。<br>一个表中最du多只能有一个主键，zhi也可以没有。一个主键既可dao以是单一的字段构成，也可以是多个字段联合构成，如果是单一字段，只需在该字段后面标记primary key即可，如果是多个字段联合构成，则需要采用最开始介绍的那种方式设置。<br>在部分数据库的图形化工具中（如Access、SQL Server等），在表设计的界面上，可以按住Ctrl键，然后选择要设置为联合主键的字段，都选好之后再按右键选择“设置为主键”。<br>alter table Table_1 add constraint pk_name primary key (id,name)设置Table_1表的id,name为主键</p><h2 id="更改表名"><a href="#更改表名" class="headerlink" title="更改表名"></a>更改表名</h2><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-built_in">table_name</span> <span class="hljs-keyword">RENAME</span> [<span class="hljs-keyword">TO</span>] new_name;<br></code></pre></td></tr></table></figure><p>##创建索引</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">create index `id_name` on categories (`id`, `name`)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="更改字段信息"><a href="#更改字段信息" class="headerlink" title="更改字段信息"></a>更改字段信息</h2><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> categories <span class="hljs-keyword">modify</span> column id mediumint auto_increment <span class="hljs-keyword">primary</span> <span class="hljs-keyword">key</span> ;<br></code></pre></td></tr></table></figure><h2 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> id_name <span class="hljs-keyword">on</span> categories;<br></code></pre></td></tr></table></figure><p>#其他</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">SHOW</span> DATABASES                                <span class="hljs-operator">/</span><span class="hljs-operator">/</span>列出 MySQL Server 数据库。<br><br><span class="hljs-keyword">SHOW</span> TABLES [<span class="hljs-keyword">FROM</span> db_name]                    <span class="hljs-operator">/</span><span class="hljs-operator">/</span>列出数据库数据表。<br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">TABLE</span> STATUS [<span class="hljs-keyword">FROM</span> db_name]              <span class="hljs-operator">/</span><span class="hljs-operator">/</span>列出数据表及表状态信息。<br><br><span class="hljs-keyword">SHOW</span> COLUMNS <span class="hljs-keyword">FROM</span> tbl_name [<span class="hljs-keyword">FROM</span> db_name]     <span class="hljs-operator">/</span><span class="hljs-operator">/</span>列出资料表字段<br><br><span class="hljs-keyword">SHOW</span> FIELDS <span class="hljs-keyword">FROM</span> tbl_name [<span class="hljs-keyword">FROM</span> db_name]，<span class="hljs-keyword">DESCRIBE</span> tbl_name [col_name]。<br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">FULL</span> COLUMNS <span class="hljs-keyword">FROM</span> tbl_name [<span class="hljs-keyword">FROM</span> db_name]<span class="hljs-operator">/</span><span class="hljs-operator">/</span>列出字段及详情<br><br><span class="hljs-keyword">SHOW</span> <span class="hljs-keyword">FULL</span> FIELDS <span class="hljs-keyword">FROM</span> tbl_name [<span class="hljs-keyword">FROM</span> db_name] <span class="hljs-operator">/</span><span class="hljs-operator">/</span>列出字段完整属性<br><br><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> tbl_name [<span class="hljs-keyword">FROM</span> db_name]       <span class="hljs-operator">/</span><span class="hljs-operator">/</span>列出表索引。<br><br><span class="hljs-keyword">SHOW</span> STATUS                                  <span class="hljs-operator">/</span><span class="hljs-operator">/</span>列出 DB Server 状态。<br><br><span class="hljs-keyword">SHOW</span> VARIABLES                               <span class="hljs-operator">/</span><span class="hljs-operator">/</span>列出 MySQL 系统环境变量。<br><br><span class="hljs-keyword">SHOW</span> PROCESSLIST                             <span class="hljs-operator">/</span><span class="hljs-operator">/</span>列出执行命令。<br><br><span class="hljs-keyword">SHOW</span> GRANTS <span class="hljs-keyword">FOR</span> <span class="hljs-keyword">user</span>                         <span class="hljs-operator">/</span><span class="hljs-operator">/</span>列出某用户权限<br></code></pre></td></tr></table></figure><p>#建表语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> files(<br> username <span class="hljs-type">varchar</span>(<span class="hljs-number">50</span>),<br> file <span class="hljs-type">varchar</span>(<span class="hljs-number">200</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>,<br> create_time <span class="hljs-type">timestamp</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-built_in">CURRENT_TIMESTAMP</span>,<br> filename <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">default</span> <span class="hljs-keyword">null</span>,<br> md5 <span class="hljs-type">char</span>(<span class="hljs-number">32</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;&#x27;</span>,<br> id <span class="hljs-type">int</span>(<span class="hljs-number">11</span>) <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span> auto_increment <span class="hljs-keyword">primary</span> key) engine<span class="hljs-operator">=</span>myisam <span class="hljs-keyword">default</span> charset<span class="hljs-operator">=</span>utf8mb4 <span class="hljs-keyword">collate</span><span class="hljs-operator">=</span>utf8mb4_unicode_ci;<br></code></pre></td></tr></table></figure><p>#MySQL(Unix时间戳、日期)转换函数</p><blockquote><p>unix_timestamp()</p></blockquote><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ada">mysql&gt; <span class="hljs-keyword">select</span> unix_timestamp();<br>+``<span class="hljs-comment">------------------+</span><br>| unix_timestamp()   |<br>+``<span class="hljs-comment">------------------+</span><br>|    <span class="hljs-number">1464590043</span>      |<br>+``<span class="hljs-comment">------------------+</span><br></code></pre></td></tr></table></figure><blockquote><p>unix_timestamp(date)</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">mysql&gt; select unix_timestamp(&#x27;2016-05-30&#x27;);</span><br><span class="hljs-section">+------------------------------+</span><br><span class="hljs-section">| unix_timestamp(&#x27;2016-05-30&#x27;) |</span><br><span class="hljs-section">+------------------------------+</span><br><span class="hljs-section">|                   1464537600 |</span><br><span class="hljs-section">+------------------------------+</span><br><span class="hljs-code"> </span><br><span class="hljs-section">mysql&gt; select unix_timestamp(&#x27;2016-05-30 14:35:21&#x27;);</span><br><span class="hljs-section">+---------------------------------------+</span><br><span class="hljs-section">| unix_timestamp(&#x27;2016-05-30 14:35:21&#x27;) |</span><br><span class="hljs-section">+---------------------------------------+</span><br><span class="hljs-section">|                            1464590121 |</span><br><span class="hljs-section">+---------------------------------------+</span><br></code></pre></td></tr></table></figure><blockquote><p>from_unixtime(unix_timestamp)</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">mysql&gt; select from_unixtime(1464590043);</span><br><span class="hljs-section">+---------------------------+</span><br><span class="hljs-section">| from_unixtime(1464590043) |</span><br><span class="hljs-section">+---------------------------+</span><br><span class="hljs-section">| 2016-05-30 14:34:03       |</span><br><span class="hljs-section">+---------------------------+</span><br></code></pre></td></tr></table></figure><blockquote><p>from_unixtime(unix_timestamp,format)</p></blockquote><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">mysql&gt; select from_unixtime(1464590043, &#x27;%Y %D %M %h:%i:%s %x&#x27;);</span><br><span class="hljs-section">+---------------------------------------------------+</span><br><span class="hljs-section">| from_unixtime(1464590043, &#x27;%Y %D %M %h:%i:%s %x&#x27;) |</span><br><span class="hljs-section">+---------------------------------------------------+</span><br><span class="hljs-section">| 2016 30th May 02:34:03 2016                       |</span><br><span class="hljs-section">+---------------------------------------------------+</span><br></code></pre></td></tr></table></figure><p>修改密码ALTER USER ‘root‘@’localhost’ IDENTIFIED WITH mysql_native_password BY ‘123456’;</p><h1 id="如何删除mysql-主键索引"><a href="#如何删除mysql-主键索引" class="headerlink" title="如何删除mysql 主键索引"></a>如何删除mysql 主键索引</h1><p>如果一个主键是自增长的，不能直接删除该列的主键索引，<br>应当先取消自增长，再删除主键特性</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary key</span>; <span class="hljs-comment">--【如果这个主键是自增的，先取消自增长.】</span><br></code></pre></td></tr></table></figure><p>具体方法如下:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> articles modify id <span class="hljs-type">int</span> ; <span class="hljs-comment">--【重新定义列类型】</span><br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> articles <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary key</span>;<br></code></pre></td></tr></table></figure><h1 id="添加主键索引"><a href="#添加主键索引" class="headerlink" title="添加主键索引"></a>添加主键索引</h1><p>innodb逐渐使聚簇索引，myisam不是[待考究]</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> users <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (id);<br></code></pre></td></tr></table></figure><p>删除</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> users <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">primary key</span>; <span class="hljs-comment">--删除前要将auto_increment去掉</span><br></code></pre></td></tr></table></figure><h1 id="添加其他索引"><a href="#添加其他索引" class="headerlink" title="添加其他索引"></a>添加其他索引</h1><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">INDEX</span> index_name <span class="hljs-keyword">ON</span> users(username);<br></code></pre></td></tr></table></figure><h1 id="MySQL-查看执行计划"><a href="#MySQL-查看执行计划" class="headerlink" title="MySQL 查看执行计划"></a>MySQL 查看执行计划</h1><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id &gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>Mysql8.0新增<code>EXPLAIN ANALYZE</code></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">EXPLAIN</span> <span class="hljs-keyword">ANALYZE</span> <span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> id &gt; <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h1 id="执行计划中extra的描述"><a href="#执行计划中extra的描述" class="headerlink" title="执行计划中extra的描述"></a>执行计划中<code>extra</code>的描述</h1><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span>：表示优化器需要通过索引回表查询数据；<br><span class="hljs-keyword">Using</span> <span class="hljs-keyword">index</span>：表示直接访问索引就足够获取到所需要的数据，不需要通过索引回表；<br><span class="hljs-keyword">Using</span> <span class="hljs-keyword">index</span> condition：在<span class="hljs-number">5.6</span>版本后加入的新特性（<span class="hljs-keyword">Index</span> Condition Pushdown）<span class="hljs-punctuation">;</span><br><span class="hljs-keyword">Using</span> <span class="hljs-keyword">index</span> condition 会先条件过滤索引，过滤完索引后找到所有符合索引条件的数据行，随后用 <span class="hljs-keyword">WHERE</span> 子句中的其他条件去过滤这些数据行；<br><span class="hljs-keyword">Using</span> <span class="hljs-keyword">where</span> &amp;&amp; <span class="hljs-keyword">Using</span> <span class="hljs-keyword">index</span><br></code></pre></td></tr></table></figure><h1 id="更改表的引擎"><a href="#更改表的引擎" class="headerlink" title="更改表的引擎"></a>更改表的引擎</h1><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">ALTER TABLE users ENGINE <span class="hljs-operator">=</span> myisam<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h1 id="Innodb的count效率在mysql8测试已经不再低于myisam了"><a href="#Innodb的count效率在mysql8测试已经不再低于myisam了" class="headerlink" title="Innodb的count效率在mysql8测试已经不再低于myisam了"></a>Innodb的count效率在mysql8测试已经不再低于myisam了</h1><h1 id="蠕虫复制"><a href="#蠕虫复制" class="headerlink" title="蠕虫复制"></a>蠕虫复制</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users <span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> users_1;<br></code></pre></td></tr></table></figure><p>下面的SQL可以指定列，用于解决唯一约束的问题</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> users(username,password) <span class="hljs-keyword">SELECT</span> username,password <span class="hljs-keyword">FROM</span> users_d;<br></code></pre></td></tr></table></figure><h1 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> status<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">table</span> status<br></code></pre></td></tr></table></figure><blockquote><p>可以通过<code>Comment</code>字段查看表是不是视图</p></blockquote><h1 id="查看触发器"><a href="#查看触发器" class="headerlink" title="查看触发器"></a>查看触发器</h1><p><code>show triggers</code></p><h1 id="权限相关"><a href="#权限相关" class="headerlink" title="权限相关"></a>权限相关</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> `username`<br><span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> `username`@`<span class="hljs-operator">%</span>`<br><span class="hljs-keyword">revoke</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> `username`@`<span class="hljs-operator">%</span>`<br>flush privileges<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>php的三种CLI常量：STDIN,STDOUT,STDERR</title>
    <link href="/2020/08/13/php%E7%9A%84%E4%B8%89%E7%A7%8DCLI%E5%B8%B8%E9%87%8F%EF%BC%9ASTDIN,STDOUT,STDERR/"/>
    <url>/2020/08/13/php%E7%9A%84%E4%B8%89%E7%A7%8DCLI%E5%B8%B8%E9%87%8F%EF%BC%9ASTDIN,STDOUT,STDERR/</url>
    
    <content type="html"><![CDATA[<p>&gt;PHP CLI(command line interface)中，有三个系统常量，分别是STDIN、STDOUT、STDERR，代表文件句柄。</p><h1 id="应用一："><a href="#应用一：" class="headerlink" title="应用一："></a>应用一：</h1><p><img src="https://images0.cnblogs.com/blog/404636/201302/27144220-4ae4ee4bdc7b45868576ee4389b62077.jpg"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">&amp;lt;?php<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$line</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;php://stdin&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">fgets</span>(<span class="hljs-variable">$line</span>);<br>&#125;<br>?&amp;gt;<br></code></pre></td></tr></table></figure><p>应用二：<br><img src="https://images0.cnblogs.com/blog/404636/201302/27145101-d44ee469f6f949dc97fd15e6cb88a860.jpg"><br>&lt;?php<br>    echo STDIN;<br>?&gt;<br>在dos命令行下直接返回STDIN文件指针(文件句柄)。如图：</p><p>应用三：<br><img src="https://images0.cnblogs.com/blog/404636/201302/27145239-89e8294a9ca741fd8bb6800602d36ad2.jpg"><br>&lt;?php<br>    echo fgets(STDIN);<br>?&gt;<br>STDIN可以拿到在dos下输入的内容，fgets读取这个STDIN文件句柄，即可打印出刚才输入的内容。如图：<br><a href="https://www.cnblogs.com/thinksasa/archive/2013/02/27/2935158.html">https://www.cnblogs.com/thinksasa/archive/2013/02/27/2935158.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>css笔记</title>
    <link href="/2020/08/13/css%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/08/13/css%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p>#文本换行<br><strong>word-wrap:</strong></p><p>css的 word-wrap 属性用来标明是否允许浏览器在单词内进行断句，这是为了防止当一个字符串太长而找不到它的自然断句点时产生溢出现象。</p><p><strong>word-break:</strong></p><p>css的 word-break 属性用来标明怎么样进行单词内的断句。</p><p>white-space:bread-spaces;</p><h1 id="文本格式"><a href="#文本格式" class="headerlink" title="文本格式"></a>文本格式</h1><p>&gt;text-decoration : none || underline || blink || overline || line-through </p><ul><li>text-decoration:none 无装饰，通常对html下划线标签去掉下划线样式</li><li>text-decoration:underline 下划线样式</li><li>text-decoration:line-through 删除线样式-贯穿线样式</li><li>text-decoration:overline 上划线样式</li></ul><h3 id="css的font-style-属性"><a href="#css的font-style-属性" class="headerlink" title="css的font-style  属性"></a>css的font-style  属性</h3><ul><li><code>normal </code>: 正常的字体(默认字体样式，可用于去掉html i斜体标签默认斜体样式)</li><li><code>italic</code> : 斜体。对于没有斜体变量的特殊字体，将应用oblique</li><li><code>oblique</code> : 倾斜的字体</li></ul><h2 id="initial"><a href="#initial" class="headerlink" title="initial"></a>initial</h2><p>initial 关键字用于设置 CSS 属性为它的默认值。可用于任何 HTML 元素上的任何 CSS 属性。设置 <code>&amp;lt;div&amp;gt;</code> 元素内的文本颜色为红色，但是为 <code>&amp;lt;h1&amp;gt;</code> 元素保持最初的颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span> &#123;<span class="hljs-attribute">color</span>: red; &#125;<br><span class="hljs-selector-tag">h1</span> &#123;<span class="hljs-attribute">color</span>: initial; &#125;<br></code></pre></td></tr></table></figure><h2 id="文本删除线和颜色线体"><a href="#文本删除线和颜色线体" class="headerlink" title="文本删除线和颜色线体"></a>文本删除线和颜色线体</h2><p>text-decoration:line-through red solid;</p><h1 id="块级元素使用float属性"><a href="#块级元素使用float属性" class="headerlink" title="块级元素使用float属性"></a>块级元素使用float属性</h1><p>块级元素使用float属性后，将其属性变成inline-block，不能改变其块级元素的性质，只是能有块级元素的特性，不独占一行，宽度不会占满父元素，和行内元素排列成一行</p><p>行内元素使用float属性后，也是将其属性变成inline-block，可以设置宽高，padding，margin属性</p><h1 id="模糊"><a href="#模糊" class="headerlink" title="模糊"></a>模糊</h1><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/backdrop-filter">https://developer.mozilla.org/zh-CN/docs/Web/CSS/backdrop-filter</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">backdrop-<span class="hljs-attribute">filter</span>: <span class="hljs-built_in">saturate</span>(<span class="hljs-number">180%</span>) <span class="hljs-built_in">blur</span>(<span class="hljs-number">20px</span>);  <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CSS中zoom属性的作用</title>
    <link href="/2020/08/12/CSS%E4%B8%ADzoom%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
    <url>/2020/08/12/CSS%E4%B8%ADzoom%E5%B1%9E%E6%80%A7%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>这里介绍一下CSS中的Zoom属性，这个属性一般不为人知，甚至有些CSS手册中都查询不到。但经常会在一些css样式中看到它出现。</p><p>Zoom属性是IE浏览器的专有属性，Firefox等浏览器不支持。它可以设置或检索对象的缩放比例。除此之外，它还有其他一些小作用，比如触发ie的hasLayout属性，清除浮动、清除margin的重叠等。</p><p>zoom版本：IE5.5+专有属性　继承性：无</p><p>语法：</p><p>zoom : normal | number </p><p>参数：</p><p>normal : 　使用对象的实际尺寸<br>number : 　百分数|无符号浮点实数。浮点实数值为1.0或百分数为100%时相当于此属性的normal值</p><p>说明：</p><p>CSS中zoom:1的作用<br>兼容IE6、IE7、IE8浏览器，经常会遇到一些问题，可以使用zoom:1来解决，有如下作用：<br>触发IE浏览器的haslayout<br>解决ie下的浮动，margin重叠等一些问题。<br>比如，使用DIV做一行两列显示，</p><p>HTML代码：</p><pre><code class="hljs">&amp;lt;div class=&amp;quot;h_mainbox&amp;quot;&amp;gt; &amp;lt;h2&amp;gt;推荐文章&amp;lt;/h2&amp;gt; &amp;lt;ul class=&amp;quot;mainlist&amp;quot;&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot; style=&amp;quot;color:#0000FF&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;测试一&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot; style=&amp;quot;color:#0000FF&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;测试二&amp;lt; /a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt;</code></pre><p>CSS代码：</p><pre><code class="hljs">.h_mainbox &#123;    border:1px solid #dadada;     padding:4px 15px;     background:url(../mainbox_bg.gif) 0 1px repeat-x;    margin-bottom:6px; overflow:hidden&#125;.h_mainbox h2 &#123;     font-size:12px;     height:30px;     line-height:30px;     border-bottom:1px solid #ccc;     color:#555;&#125; .h_mainbox h2 span &#123;     float:right;     font-weight:normal;&#125; .h_mainbox ul &#123;     padding:6px 0px;     background:#fff;    &#125; .mainlist &#123;     overflow:auto; zoom:1;&#125; .h_mainbox li &#123;     width:268px;     float:left;     height:24px;     overflow:hidden;     background:url(../icon3.gif) 0 6px no-repeat;     padding:0px 5px 0px 18px;     line-height:200%;&#125;</code></pre><p>.mainlist样式名字那里就可以在IE6、IE7、IE8正常显示效果了。</p><p>css中的zoom的作用</p><p>1、检查页面的标签是否闭合<br>不要小看这条，也许折腾了你两天都没有解决的 CSS BUG 问题，却仅仅源于这里。毕竟页面的模板一般都是由开发来嵌套的，而他们很容易犯此类问题。<br>快捷提示：可以用 Dreamweaver 打开文件检查，一般没有闭合的标签，会黄色背景高亮。</p><p>2、样式排除法<br>有些复杂的页面也许加载了 N 个外链 CSS 文件，那么逐个删除 CSS 文件，找到 BUG 触发的具体 CSS 文件，缩小锁定的范围。对于刚才锁定的问题 CSS 样式文件，逐行删除具体的样式定义，定位到具体的触发样式定义，甚至是具体的触发样式属性。</p><p>3、模块确认法<br>有时候我们也可以从页面的 HTML 元素出发。删除页面中不同的 HTML 模块，寻找到触发问题的 HTML 模块。</p><p>4、检查是否清除浮动<br>其实有不少的 CSS BUG 问题是因为没有清除浮动造成的。养成良好的清除浮动的习惯是必要的，推荐使用 无额外 HTML 标签的清除浮动的方法（尽量避免使用 overflow:hidden;zoom:1 的类似方法来清除浮动，会有太多的限制性）。</p><p>5、检查 IE 下是否触发 haslayout<br>很多的 IE 下复杂 CSS BUG 都与 IE 特有的 haslayout 息息相关。熟悉和理解 haslayout 对于处理复杂的 CSS BUG 会事半功倍。推荐阅读 old9 翻译的 《On having layout》（如果无法翻越穿越伟大的 GFW，可阅读 蓝色上的转帖 ）<br>快捷提示：如果触发了 haslayout，IE 的调试工具 IE Developer Toolbar 中的属性中将会显示 haslayout 值为 -1。</p><p>6、边框背景调试法<br>故名思议就是给元素设置显眼的边框或者背景（一般黑色或红色），进行调试。此方法是最常用的调试 CSS BUG 的方法之一，对于复杂 BUG 依旧适用。经济实惠还环保^^。最后想强调一点的是，养成良好的书写习惯，减少额外标签，尽量语义，符合标准，其实可以为我们减少很多额外的复杂 CSS BUG，更多的时候其实是我们自己给自己制造了麻烦。希望你远离 BUG ，生活越来越美好。</p><p><a href="https://www.cnblogs.com/besthcp/p/4062950.html">https://www.cnblogs.com/besthcp/p/4062950.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js监听input输入框值的实时变化实例</title>
    <link href="/2020/08/12/js%E7%9B%91%E5%90%ACinput%E8%BE%93%E5%85%A5%E6%A1%86%E5%80%BC%E7%9A%84%E5%AE%9E%E6%97%B6%E5%8F%98%E5%8C%96%E5%AE%9E%E4%BE%8B/"/>
    <url>/2020/08/12/js%E7%9B%91%E5%90%ACinput%E8%BE%93%E5%85%A5%E6%A1%86%E5%80%BC%E7%9A%84%E5%AE%9E%E6%97%B6%E5%8F%98%E5%8C%96%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<p>情景：监听input输入框值的实时变化实例</p><p>解决方法：1.在元素上同时绑定oninput和onporpertychanger事件</p><p>实例：</p><pre><code class="hljs">&lt;script type=&quot;text/JavaScript&quot;&gt;　　function watch()&#123;　　consolo.log(&quot;in&quot;)&#125; &lt;/script&gt;&lt;input type=&quot;text&quot;  oninput=&quot;watch(event)&quot; onporpertychange=&quot;watch(event)&quot; /&gt;</code></pre><p>2.原生js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br> $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>　　　<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;\v&quot;</span>==<span class="hljs-string">&quot;v&quot;</span>)&#123;<span class="hljs-comment">//true为IE浏览器，感兴趣的同学可以去搜下，据说是现有最流行的判断浏览器的方法　document.getElementById(&quot;a&quot;).attachEvent(&quot;onporpertychange&quot;,function(e)&#123;</span><br>　　　　<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;inputting!!&quot;</span>);<br>　　　　&#125;<br>　　&#125;<span class="hljs-keyword">else</span>&#123;　<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;a&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;onporpertychange&quot;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)&#123;<br>　　　　<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;inputting!!&quot;</span>);<br>　　　　&#125;<br>　　&#125;<br>&#125;);<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure><p>3.使用jQuery绑定事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br> $(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>　　$(<span class="hljs-string">&quot;#a&quot;</span>).<span class="hljs-title function_">bind</span>(<span class="hljs-string">&#x27;input porpertychange&#x27;</span>,<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>　　　　<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;e&quot;</span>);<br>　　　　&#125;);<br>　　&#125;);<br>&lt;/script&gt;<br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;a&quot;</span>/&gt;</span></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>js怎么存取cookie</title>
    <link href="/2020/08/12/js%E6%80%8E%E4%B9%88%E5%AD%98%E5%8F%96cookie/"/>
    <url>/2020/08/12/js%E6%80%8E%E4%B9%88%E5%AD%98%E5%8F%96cookie/</url>
    
    <content type="html"><![CDATA[<h3 id="js存入cookie"><a href="#js存入cookie" class="headerlink" title="js存入cookie"></a>js存入cookie</h3><pre><code class="hljs">function Setcookie (name, value)&#123;     //设置名称为name,值为value的Cookie    var expdate = new Date();   //初始化时间    expdate.setTime(expdate.getTime() + 30 * 60 * 1000);   //时间单位毫秒    document.cookie = name+&amp;amp;quot;=&amp;amp;quot;+value+&amp;amp;quot;;expires=&amp;amp;quot;+expdate.toGMTString()+&amp;amp;quot;;path=/&amp;amp;quot;;</code></pre><p>   &#x2F;&#x2F;即document.cookie&#x3D; name+&amp;quot;&#x3D;&amp;quot;+value+&amp;quot;;path&#x3D;&#x2F;&amp;quot;;  时间默认为当前会话可以不要，但路径要填写，因为JS的默认路径是当前页，如果不填，此cookie只在当前页面生效！<br>}</p><h3 id="js取出cookie"><a href="#js取出cookie" class="headerlink" title="js取出cookie"></a>js取出cookie</h3><pre><code class="hljs">function getCookie(c_name)&#123;//判断document.cookie对象里面是否存有cookieif (document.cookie.length&amp;amp;gt;0)&#123;  c_start=document.cookie.indexOf(c_name + &amp;amp;quot;=&amp;amp;quot;)    //如果document.cookie对象里面有cookie则查找是否有指定的cookie，如果有则返回指定的cookie值，如果没有则返回空字符串  if (c_start!=-1)&#123;     c_start=c_start + c_name.length+1     c_end=document.cookie.indexOf(&amp;amp;quot;;&amp;amp;quot;,c_start)    if (c_end==-1) c_end=document.cookie.length    return unescape(document.cookie.substring(c_start,c_end))    &#125;   &#125;return &amp;amp;quot;&amp;amp;quot;&#125;</code></pre><p><a href="https://blog.csdn.net/minolk/article/details/80540750">https://blog.csdn.net/minolk/article/details/80540750</a></p><h3 id="jq存取cookie"><a href="#jq存取cookie" class="headerlink" title="jq存取cookie"></a>jq存取cookie</h3><p>首先引入下面的文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*! jquery.cookie v1.4.1 | MIT */</span><br>!<span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)&#123;&amp;amp;quot;<span class="hljs-keyword">function</span>&amp;amp;quot;==<span class="hljs-keyword">typeof</span> define&amp;amp;amp;&amp;amp;amp;define.<span class="hljs-property">amd</span>?<span class="hljs-title function_">define</span>([&amp;amp;quot;jquery&amp;amp;quot;],a):&amp;amp;quot;object&amp;amp;quot;==<span class="hljs-keyword">typeof</span> <span class="hljs-built_in">exports</span>?<span class="hljs-title function_">a</span>(<span class="hljs-built_in">require</span>(&amp;amp;quot;jquery&amp;amp;quot;)):<span class="hljs-title function_">a</span>(jQuery)&#125;(<span class="hljs-keyword">function</span>(<span class="hljs-params">a</span>)&#123;<span class="hljs-keyword">function</span> <span class="hljs-title function_">b</span>(<span class="hljs-params">a</span>)&#123;<span class="hljs-keyword">return</span> h.<span class="hljs-property">raw</span>?<span class="hljs-attr">a</span>:<span class="hljs-built_in">encodeURIComponent</span>(a)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">c</span>(<span class="hljs-params">a</span>)&#123;<span class="hljs-keyword">return</span> h.<span class="hljs-property">raw</span>?<span class="hljs-attr">a</span>:<span class="hljs-built_in">decodeURIComponent</span>(a)&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">d</span>(<span class="hljs-params">a</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-title function_">b</span>(h.<span class="hljs-property">json</span>?<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(a):<span class="hljs-title class_">String</span>(a))&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">e</span>(<span class="hljs-params">a</span>)&#123;<span class="hljs-number">0</span>===a.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;&amp;amp;quot;&#x27;</span>)&amp;amp;amp;&amp;amp;amp;(a=a.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\\&amp;amp;quot;/g</span>,<span class="hljs-string">&#x27;&amp;amp;quot;&#x27;</span>).<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\\\\/g</span>,&amp;amp;quot;\\&amp;amp;quot;));<span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">return</span> a=<span class="hljs-built_in">decodeURIComponent</span>(a.<span class="hljs-title function_">replace</span>(g,&amp;amp;quot; &amp;amp;quot;)),h.<span class="hljs-property">json</span>?<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(a):a&#125;<span class="hljs-keyword">catch</span>(b)&#123;&#125;&#125;<span class="hljs-keyword">function</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">b,c</span>)&#123;<span class="hljs-keyword">var</span> d=h.<span class="hljs-property">raw</span>?<span class="hljs-attr">b</span>:<span class="hljs-title function_">e</span>(b);<span class="hljs-keyword">return</span> a.<span class="hljs-title function_">isFunction</span>(c)?<span class="hljs-title function_">c</span>(d):d&#125;<span class="hljs-keyword">var</span> g=<span class="hljs-regexp">/\+/g</span>,h=a.<span class="hljs-property">cookie</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">e,g,i</span>)&#123;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">void</span> <span class="hljs-number">0</span>!==g&amp;amp;amp;&amp;amp;amp;!a.<span class="hljs-title function_">isFunction</span>(g))&#123;<span class="hljs-keyword">if</span>(i=a.<span class="hljs-title function_">extend</span>(&#123;&#125;,h.<span class="hljs-property">defaults</span>,i),&amp;amp;quot;number&amp;amp;quot;==<span class="hljs-keyword">typeof</span> i.<span class="hljs-property">expires</span>)&#123;<span class="hljs-keyword">var</span> j=i.<span class="hljs-property">expires</span>,k=i.<span class="hljs-property">expires</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>;k.<span class="hljs-title function_">setTime</span>(+k+<span class="hljs-number">864e5</span>*j)&#125;<span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>=[<span class="hljs-title function_">b</span>(e),&amp;amp;quot;=&amp;amp;quot;,<span class="hljs-title function_">d</span>(g),i.<span class="hljs-property">expires</span>?&amp;amp;quot;; expires=&amp;amp;quot;+i.<span class="hljs-property">expires</span>.<span class="hljs-title function_">toUTCString</span>():&amp;amp;quot;&amp;amp;quot;,i.<span class="hljs-property">path</span>?&amp;amp;quot;; path=&amp;amp;quot;+i.<span class="hljs-property">path</span>:&amp;amp;quot;&amp;amp;quot;,i.<span class="hljs-property">domain</span>?&amp;amp;quot;; domain=&amp;amp;quot;+i.<span class="hljs-property">domain</span>:&amp;amp;quot;&amp;amp;quot;,i.<span class="hljs-property">secure</span>?&amp;amp;quot;; secure&amp;amp;quot;:&amp;amp;quot;&amp;amp;quot;].<span class="hljs-title function_">join</span>(&amp;amp;quot;&amp;amp;quot;)&#125;<span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> l=e?<span class="hljs-keyword">void</span> <span class="hljs-number">0</span>:&#123;&#125;,m=<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>?<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">split</span>(&amp;amp;quot;; &amp;amp;quot;):[],n=<span class="hljs-number">0</span>,o=m.<span class="hljs-property">length</span>;o&amp;amp;gt;n;n++)&#123;<span class="hljs-keyword">var</span> p=m[n].<span class="hljs-title function_">split</span>(&amp;amp;quot;=&amp;amp;quot;),q=<span class="hljs-title function_">c</span>(p.<span class="hljs-title function_">shift</span>()),r=p.<span class="hljs-title function_">join</span>(&amp;amp;quot;=&amp;amp;quot;);<span class="hljs-keyword">if</span>(e&amp;amp;amp;&amp;amp;amp;e===q)&#123;l=<span class="hljs-title function_">f</span>(r,g);<span class="hljs-keyword">break</span>&#125;e||<span class="hljs-keyword">void</span> <span class="hljs-number">0</span>===(r=<span class="hljs-title function_">f</span>(r))||(l[q]=r)&#125;<span class="hljs-keyword">return</span> l&#125;;h.<span class="hljs-property">defaults</span>=&#123;&#125;,a.<span class="hljs-property">removeCookie</span>=<span class="hljs-keyword">function</span>(<span class="hljs-params">b,c</span>)&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">void</span> <span class="hljs-number">0</span>===a.<span class="hljs-title function_">cookie</span>(b)?!<span class="hljs-number">1</span>:(a.<span class="hljs-title function_">cookie</span>(b,&amp;amp;quot;&amp;amp;quot;,a.<span class="hljs-title function_">extend</span>(&#123;&#125;,c,&#123;<span class="hljs-attr">expires</span>:-<span class="hljs-number">1</span>&#125;)),!a.<span class="hljs-title function_">cookie</span>(b))&#125;&#125;);<br></code></pre></td></tr></table></figure><h4 id="a-设置新的cookie"><a href="#a-设置新的cookie" class="headerlink" title="a)设置新的cookie:"></a>a)设置新的cookie:</h4><p>$.cookie(‘name’，’dumplings’);  &#x2F;&#x2F;设置一个值为’dumplings’的cookie<br>设置cookie的生命周期<br> $.cookie(‘key’, ‘value’, { expires: 7 }); &#x2F;&#x2F;设置为7天，默认值：浏览器关闭</p><h4 id="设置cookie的域名："><a href="#设置cookie的域名：" class="headerlink" title="设置cookie的域名："></a>设置cookie的域名：</h4><p>$.cookie(‘name’，’dumplings’, {domain:’qq.com’});   &#x2F;&#x2F;设置一个值为’dumplings’的在域名’qq.com’的cookie<br>设置cookie的路径：</p><p>$.cookie(‘name’，’dumplings’, {domain:’qq.com’，path:’&#x2F;‘});<br>&#x2F;&#x2F;设置一个值为’dumplings’的在域名’qq.com’的路径为’&#x2F;‘的cookie</p><h4 id="b-删除cookie"><a href="#b-删除cookie" class="headerlink" title="b)删除cookie"></a>b)删除cookie</h4><p>$.removeCookie(‘name’,{ path: ‘&#x2F;‘}); &#x2F;&#x2F;path为指定路径，直接删除该路径下的cookie<br>$.cookie(‘name’,null,{ path: ‘&#x2F;‘}); &#x2F;&#x2F;将cookie名为&amp;lsquo;openid&amp;rsquo;的值设置为空，实际已删除</p><h4 id="c-获取cookie"><a href="#c-获取cookie" class="headerlink" title="c)获取cookie"></a>c)获取cookie</h4><p>$.cookie(‘name’)   &#x2F;&#x2F;dumplings</p><p>踩过的坑：<br>cookie的域名和路径都很重要，如果没有设置成一致，则会有不同域名下或者不同路径下的同名cookie，为了避免这种情况，建议在设置cookie和删除cookie的时候，配置路径和域名。</p><p><a href="https://www.cnblogs.com/hellofangfang/p/9626797.html">https://www.cnblogs.com/hellofangfang/p/9626797.html</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Call Stack（调用栈）是什么？</title>
    <link href="/2020/07/05/Call%20Stack%EF%BC%88%E8%B0%83%E7%94%A8%E6%A0%88%EF%BC%89%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/"/>
    <url>/2020/07/05/Call%20Stack%EF%BC%88%E8%B0%83%E7%94%A8%E6%A0%88%EF%BC%89%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<p>今天我们来讲一下 call stack 是什么。相信有了上一篇文章对 virtual memory 的介绍之后，同学们理解起 call stack 来会相对容易一些。</p><p>回顾：Virtual Memory（虚拟内存）是什么？</p><p>Call Stack 是什么？<br>Call stack（通常译作&amp;ldquo;调用栈&amp;rdquo;）也是计算机系统中的一个重要概念。在介绍 call stack 之前，我们首先来回顾一下 procedure 是什么。</p><p>在计算机程序当中，一个 procedure（通常译作&amp;ldquo;过程&amp;rdquo;）吃进来一些参数，干一些事情，再吐出去一个返回值（或者什么也不吐）。我们熟悉的 function、method、handler 等等其实都是 procedure。当一个 procedure A 调用另一个 procedure B 的时候，计算机其实需要干好几件事。</p><p>一. 是转移控制&amp;mdash;&amp;mdash;计算机要暂停 A 并开始执行 B，并让 B 在执行完之后还能回到 A 继续执行。</p><p>二. 是转移数据&amp;mdash;&amp;mdash;A 要能够传递参数给 B，并且 B 也能返回值给 A。</p><p>三. 分配和释放内存&amp;mdash;&amp;mdash;在 B 开始执行时为它的局部变量分配内存，并在 B 返回时释放这部分内存。</p><p>同学们想一下，假设 A 调用 B，B 再调用 C，C 执行完返回给 B，B 再执行完返回给 A，哪种数据结构最适合管理它们所使用的内存？没错，是 stack，因为过程调用具有 last-in first-out 的特点。当 A 调用 B 的时候，A 只要将它需要传递给 B 的参数 push 进这个 stack，再把将来 B 返回之后 A 应当继续执行的指令的地址（学名叫 return address）也 push 进这个 stack，就万事大吉了。之后 B 可以继续在这个 stack 上面保存一些寄存器的值，分配局部变量，进而继续构造调用 C 时需要传递的参数等等。</p><p>这个 stack 其实就是我们所说的 call stack。（这里的描述有些简化，实际当中计算机会做一些优化，如果参数和局部变量不太多的话就懒得放在 call stack 里，而是直接使用寄存器了。）</p><p>Call stack 在 virtual memory 里其实就是一段连续的地址空间，靠一个叫做 SP 的寄存器（32-bit 叫 ESP，64-bit 叫 RSP）来指向栈顶。既然是连续的，于是它在使用上比我们理论课上讲的抽象的 stack 要更灵活一些，更接近 array 而不是 linked list，可以访问任意元素，而不仅仅是栈顶元素。（当然进栈出栈还是只能在栈顶进行。）这也就是为什么尽管它叫做 call stack，我们依然可以同时有不止一个参数和不止一个局部变量的原因。</p><p>Example<br>举个例子吧。假设我们有这样一段求阶乘的代码：</p><pre><code class="hljs">00  int fact(int n) &#123;01    int result;02    if (n &amp;amp;lt;= 1)03      result = 1;04    else05      result = n * fact(n - 1);06    return result;07  &#125;</code></pre><p>当 main() 调用了 fact(n)，fact(n) 又调用了 fact(n-1)，fact(n-1) 即将调用 fact(n-2) 的时候，它的 call stack 差不多是这样：（具体情况大同小异，和编译器优化有关。）</p><p>其中每个 procedure 分配的内存区域叫做它的 stack frame（通常译作&amp;ldquo;栈帧&amp;rdquo;，类似于电影《盗梦空间》中的&amp;ldquo;梦境&amp;rdquo;）。这也就解释了为什么当我们分析递归函数调用的空间复杂度时，既需要考虑 recursion tree 的深度，也需要考虑每层所分配的局部变量的大小。</p><p>对于上述 fact() 函数，它的 recursion tree 的深度是 n，这就意味着总共有 n 个 stack frame。每个 stack frame 里面除了保存 return address 和一些寄存器的值之外，还需要保存参数 n 和局部变量 result，它们都是 O(1) 的。所以 fact() 总的空间复杂度是 O(n) 的。</p><p>希望同学们能够通过了解 call stack 进一步理解空间复杂度的计算，在面试的时候一通百通。</p><p>我们下篇文章再见。</p><p>（本文在写作过程中参考了 Randal E. Bryant 和 David R. O&amp;#039;&amp;#039;Hallaron 所著的 Computer Systems: A Programmer&amp;#039;&amp;#039;s Perspective 第二版和第三版。）</p><p>文章来源：<a href="https://zhuanlan.zhihu.com/p/71168084">https://zhuanlan.zhihu.com/p/71168084</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Html学习笔记</title>
    <link href="/2020/07/05/Html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/07/05/Html%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="li标签居中"><a href="#li标签居中" class="headerlink" title="li标签居中"></a>li标签居中</h2><p>把要居中的li设置成 display: inline-block;<br>然后在li加上 text-align: center; 让li居中。</p><h2 id="img标签属性"><a href="#img标签属性" class="headerlink" title="img标签属性"></a>img标签属性</h2><p>alt属性是当图片无法正常加载时显示的提示文字，而在ie中会被作为鼠标指向的文字提示。更好兼容的的鼠标指向文字提示应该使用title属性。</p><h2 id="块级元素或者行内元素在设置float属性之后是否改变元素的性质？"><a href="#块级元素或者行内元素在设置float属性之后是否改变元素的性质？" class="headerlink" title="块级元素或者行内元素在设置float属性之后是否改变元素的性质？"></a>块级元素或者行内元素在设置float属性之后是否改变元素的性质？</h2><p>块级元素使用float属性后，将其属性变成inline-block，不能改变其块级元素的性质，只是能有块级元素的特性，不独占一行，宽度不会占满父元素，和行内元素排列成一行<br>行内元素使用float属性后，也是将其属性变成inline-block，可以设置宽高，padding，margin属性</p><h2 id="行内元素可不可以包含块元素，即行内元素是父元素。？？"><a href="#行内元素可不可以包含块元素，即行内元素是父元素。？？" class="headerlink" title="行内元素可不可以包含块元素，即行内元素是父元素。？？"></a>行内元素可不可以包含块元素，即行内元素是父元素。？？</h2><p>块级元素会独占一行,默认情况下,其宽度自动填满其父元素宽度. </p><p>行内元素不会独占一行,相邻的行内元素会排列在同一行里,直到一行排不下,才会换行,其宽度随元素的内容而变化.  　</p><p>块级元素可以设置width,height属性.  　　</p><p>行内元素设置width,height属性无效.  　　</p><p>块级元素即使设置了宽度,仍然是独占一行.  　　  　　</p><p>块级元素可以设置margin和padding属性.  　　</p><p>行内元素的margin和padding属性,水平方向的padding-left,padding-right,margin-left,margin-right都产生边距</p><p>效果,但竖直方向的padding-top,padding-bottom,margin-top,margin-bottom却不会产生边距效果.  　　  　　</p><p>块级元素对应于display:block.  　　</p><p>行内元素对应于display:inline. 　　</p><h3 id="display-none与visible-hidden的区别"><a href="#display-none与visible-hidden的区别" class="headerlink" title="display:none与visible:hidden的区别"></a>display:none与visible:hidden的区别</h3><p>display:none和visible:hidden都能把网页上某个元素隐藏起来，但两者有区别:</p><p>display:none —不为被隐藏的对象保留其物理空间，即该对象在页面上彻底消失，通俗来说就是看不见也摸不到。</p><p>visible:hidden— 使对象在网页上不可见，但该对象在网页上所占的空间没有改变，通俗来说就是看不见但摸得到。</p><blockquote><p>设置一个div居中，使用padding:0 auto;width:1000px;<br>但是结果是不能使得元素居中<br>使用margin：0 auto；的话，居中的两边背景色会用空白。</p></blockquote><p>解决办法：</p><p>把要居中的div 设置成 display: inline-block;，然后在父div加上 text-align: center; 让div居中。</p><h2 id="关于行内元素和块元素"><a href="#关于行内元素和块元素" class="headerlink" title="关于行内元素和块元素"></a>关于行内元素和块元素</h2><p>1、html中行内元素bai(a)中能不能放块元素（div）<br>回答du：不能。<br>XHTML标准是这样zhi定义的：<br>*inline<br>*a<br>*inline excluding an enclosed a element<br>解释就是 a标签属于daoinline， a标签只能嵌套inline元素，并也不能再嵌套a标签。<br>2、那span里面能不能放div呢？？<br>回答：不能<br>1、html中行内元素(a)中能不能放块元素（div）<br>回答：不能。<br>XHTML标准是这样定义的：<br>*inline<br>*span<br>*inline<br>解释就是 span是属于inline，并且span也只能嵌套inline<br>另外，XHTML标准还有一些我们容易疏漏的，比如所有标签都要小写，例如<html>等<br>我个人理解就是标准毕竟只是标准，就好像大家都走路靠右边走，但是你如果非要靠左边走，也没人拦你。所以写的时候有可能会通过浏览器的认证，但是如果在某些严格符合xhtml规范的编译器或浏览器，他们就不认账了。<br>所以按照xhtml规范可以培养自己良好的开发习惯。<br>顺便提一下，html元素分3中，顶级元素、块级元素、内联元素。<br>行内实际上就是内敛元素…</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">html <span class="hljs-keyword">access</span>-charset<br></code></pre></td></tr></table></figure><h1 id="img-的alt属性"><a href="#img-的alt属性" class="headerlink" title="img 的alt属性"></a>img 的alt属性</h1><p>alt属性是当图片无法正常加载时显示的提示文字，而在ie中会被作为鼠标指向的文字提示。更好兼容的的鼠标指向文字提示应该使用title属性。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>PHP7内核zval</title>
    <link href="/2020/07/05/PHP7%E5%86%85%E6%A0%B8zval/"/>
    <url>/2020/07/05/PHP7%E5%86%85%E6%A0%B8zval/</url>
    
    <content type="html"><![CDATA[<h1 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h1><p>zval可以表示一切PHP中的数据类型, 所以它包含了一个type字段, 表示这个zval存储的是什么类型的值, 常见的可能选项是IS_NULL, IS_LONG, IS_STRING, IS_ARRAY, IS_OBJECT等等。<br>根据type字段的值不同, 我们就要用不同的方式解读value的值, 这个value是个联合体, 比如对于type是IS_STRING, 那么我们应该用value.str来解读zval.value字段, 而如果type是IS_LONG, 那么我们就要用value.lval来解读。<br>另外, PHP是用引用计数来做基本的垃圾回收的, 所以zval中有一个refcount__gc字段, 表示这个zval的引用数目, 但这里有一个要说明的, 在5.3以前, 这个字段的名字还叫做refcount, 5.3以后, 在引入新的垃圾回收算法来对付循环引用计数的时候, 作者加入了大量的宏来操作refcount, 为了能让错误更快的显现, 所以改名为refcount__gc, 迫使大家都使用宏来操作refcount。<br>类似的, 还有is_ref, 这个值表示了PHP中的一个类型是否是引用, 这里我们可以看到是不是引用是一个标志位。这就是PHP5时代的zval。<br>PHP7中的zval和PHP7中的zval从底层上做了很大调整，主要体现在类型和value字段。</p><h1 id="二、PHP5中的zval"><a href="#二、PHP5中的zval" class="headerlink" title="二、PHP5中的zval"></a>二、PHP5中的zval</h1><h2 id="1、zval结构"><a href="#1、zval结构" class="headerlink" title="1、zval结构"></a>1、zval结构</h2><p>Zend使用zval结构来存储PHP变量的值，该结构如下所示：</p><p>Zend根据type值来决定访问value的哪个成员，可用值如下：<br>IS_NULLN&#x2F;A<br>IS_LONG对应value.lval<br>IS_DOUBLE对应value.dval<br>IS_STRING对应value.str<br>IS_ARRAY对应value.ht<br>IS_OBJECT对应value.obj<br>IS_BOOL对应value.lval.<br>IS_RESOURCE对应value.lval<br>根据这个表格可以发现两个有意思的地方：首先是PHP的数组其实就是一个HashTable，这就解释了为什么PHP能够支持关联数组了；其次，Resource就是一个long值，它里面存放的通常是个指针、一个内部数组的index或者其它什么只有创建者自己才知道的东西，可以将其视作一个handle。</p><h2 id="2、引用计数"><a href="#2、引用计数" class="headerlink" title="2、引用计数"></a>2、引用计数</h2><p>引用计数在垃圾收集、内存池以及字符串等地方应用广泛，Zend就实现了典型的引用计数。多个PHP变量可以通过引用计数机制来共享同一份zval，zval中剩余的两个成员is_ref和refcount就用来支持这种共享。<br>很明显，refcount用于计数，当增减引用时，这个值也相应的递增和递减，一旦减到零，Zend就会回收该zval。<br>那么is_ref呢？</p><h2 id="3、zval状态"><a href="#3、zval状态" class="headerlink" title="3、zval状态"></a>3、zval状态</h2><p>在PHP中，变量有两种——引用和非引用的，它们在Zend中都是采用引用计数的方式存储的。对于非引用型变量，要求变量间互不相干，修改一个变量时，不能影响到其他变量，采用Copy-On-Write机制即可解决这种冲突——当试图写入一个变量时，Zend若发现该变量指向的zval被多个变量共享，则为其复制一份refcount为1的zval，并递减原zval的refcount，这个过程称为“zval分离”。然而，对于引用型变量，其要求和非引用型相反，引用赋值的变量间必须是捆绑的，修改一个变量就修改了所有捆绑变量。<br>可见，有必要指出当前zval的状态，以分别应对这两种情况，is_ref就是这个目的，它指出了当前所有指向该zval的变量是否是采用引用赋值的——要么全是引用，要么全不是。此时再修改一个变量，只有当发现其zval的is_ref为0，即非引用时，Zend才会执行Copy-On-Write。</p><h2 id="4、zval状态切换"><a href="#4、zval状态切换" class="headerlink" title="4、zval状态切换"></a>4、zval状态切换</h2><p>当在一个zval上进行的所有赋值操作都是引用或者都是非引用时，一个is_ref就足够应付了。然而，世界总不会那么美好，PHP无法对用户进行这种限制，当我们混合使用引用和非引用赋值时，就必须要进行特别处理了。<br>情况I、看如下PHP代码：<br>代码如下:</p><p>这段代码首先进行了一次初始化，这将创建一个新的zval，is_ref&#x3D;0, refcount&#x3D;1，并将a指向这个zval；之后是两次非引用赋值，正如前面所说，只要把b和c都指向a的zval即可；最后一行是个引用赋值，需要is_ref为1，但是Zend发现c指向的zval并不是引用型的，于是为c创建单独的zval，并同时将d指向该zval。<br>从本质上来说，这也可以看作是一种Copy-On-Write，不仅仅是value，is_ref也是受保护的对象。<br>整个过程图示如下： </p><p>情况2，看如下PHP代码：<br>代码如下:</p><p>这段代码的前三句将把a、b和c指向一个zval，其is_ref&#x3D;1, refcount&#x3D;3；第四句是个非引用赋值，通常情况下只需要增加引用计数即可，然而目标zval属于引用变量，单纯的增加引用计数显然是错误的， Zend的解决办法是为d单独生成一份zval副本。<br>全过程如下所示：</p><h2 id="5、-参数传递"><a href="#5、-参数传递" class="headerlink" title="5、 参数传递"></a>5、 参数传递</h2><p>PHP函数参数的传递和变量赋值是一样的，非引用传递相当于非引用赋值，引用传递相当于引用赋值，并且也有可能会导致执行zval状态切换。<br>三、PHP7中的zval<br>PHP7中的zval的类型做了比较大的调整, 总体来说有如下17种类型:</p><p>其中PHP5的时候的IS_BOOL类型, 现在拆分成了IS_FALSE和IS_TRUE俩种类型. 而原来的引用是一个标志位, 现在的引用是一种新的类型。<br>对于IS_INDIRECT和IS_PTR来说, 这俩个类型是用在内部的保留类型, 用户不会感知到。<br>从PHP7开始, 对于在zval的value字段中能保存下的值, 就不再对他们进行引用计数了, 而是在拷贝的时候直接赋值, 这样就省掉了大量的引用计数相关的操作, 这部分类型有:<br>1.IS_LONG<br>2.IS_DOUBLE<br>当然对于那种根本没有值, 只有类型的类型, 也不需要引用计数了:<br>1.IS_NULL<br>2.IS_FALSE<br>3.IS_TRUE<br>而对于复杂类型, 一个size_t保存不下的, 那么我们就用value来保存一个指针, 这个指针指向这个具体的值, 引用计数也随之作用于这个值上, 而不在是作用于zval上了。</p><p>&gt; 另外，关于PHP7中的zval还有标志位和zval预先分配的知识。可以看下下面的参考。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>开发时缓存很烦人，修改不能实时生效的解决方法</title>
    <link href="/2020/07/05/%E5%BC%80%E5%8F%91%E6%97%B6%E7%BC%93%E5%AD%98%E5%BE%88%E7%83%A6%E4%BA%BA%EF%BC%8C%E4%BF%AE%E6%94%B9%E4%B8%8D%E8%83%BD%E5%AE%9E%E6%97%B6%E7%94%9F%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <url>/2020/07/05/%E5%BC%80%E5%8F%91%E6%97%B6%E7%BC%93%E5%AD%98%E5%BE%88%E7%83%A6%E4%BA%BA%EF%BC%8C%E4%BF%AE%E6%94%B9%E4%B8%8D%E8%83%BD%E5%AE%9E%E6%97%B6%E7%94%9F%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<p><strong>Opcache</strong></p><p>简介 ¶<br>OPcache 通过将 PHP 脚本预编译的字节码存储到共享内存中来提升 PHP 的性能， 存储预编译字节码的好处就是 省去了每次加载和解析 PHP 脚本的开销。</p><p>PHP 5.5.0 及后续版本中已经绑定了 OPcache 扩展。 对于 PHP 5.2，5.3 和 5.4 版本可以使用 » PECL 扩展中的 OPcache 库。</p><p>&gt; 原文地址： <a href="https://www.php.net/manual/zh/intro.opcache.php">https://www.php.net/manual/zh/intro.opcache.php</a> </p><p>今天在使用thinkphp开发的过程中，发现修改路由后要等好久才能生效，而且删除tp缓存，浏览器缓存都不起作用。</p><p>原来是php开启了opcahce 。</p><p>下面是禁用 opcache 的方式:</p><p>找到php配置文件的路径，因为我是在命令行下启的服务，所以可以通过以下方式</p><ul><li>php –ini</li><li>php -i | grep -i configure</li></ul><p>也可以通过phpinfo来查看php.ini文件的路径。在phpinfo页面中通过查看 Loaded Configuration File来获取php.ini文件的路径。</p><p>在php.ini文件中禁用。找到 opcache.enable 将其设置为0</p><p>重启apache服务器或者重载fpm</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>键盘KeyCode对照表</title>
    <link href="/2020/07/05/%E9%94%AE%E7%9B%98KeyCode%E5%AF%B9%E7%85%A7%E8%A1%A8/"/>
    <url>/2020/07/05/%E9%94%AE%E7%9B%98KeyCode%E5%AF%B9%E7%85%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>keycode   0 &#x3D; &lt;br &#x2F;&gt;<br>keycode   1 &#x3D; &lt;br &#x2F;&gt;<br>keycode   2 &#x3D; &lt;br &#x2F;&gt;<br>keycode   3 &#x3D; &lt;br &#x2F;&gt;<br>keycode   4 &#x3D; &lt;br &#x2F;&gt;<br>keycode   5 &#x3D; &lt;br &#x2F;&gt;<br>keycode   6 &#x3D; &lt;br &#x2F;&gt;<br>keycode   7 &#x3D; &lt;br &#x2F;&gt;<br>keycode   8 &#x3D; BackSpace BackSpace &lt;br &#x2F;&gt;<br>keycode   9 &#x3D; Tab Tab &lt;br &#x2F;&gt;<br>keycode 10 &#x3D; &lt;br &#x2F;&gt;<br>keycode 11 &#x3D; &lt;br &#x2F;&gt;<br>keycode 12 &#x3D; Clear &lt;br &#x2F;&gt;<br>keycode 13 &#x3D; Enter &lt;br &#x2F;&gt;<br>keycode 14 &#x3D; &lt;br &#x2F;&gt;<br>keycode 15 &#x3D; &lt;br &#x2F;&gt;<br>keycode 16 &#x3D; Shift_L &lt;br &#x2F;&gt;<br>keycode 17 &#x3D; Control_L &lt;br &#x2F;&gt;<br>keycode 18 &#x3D; Alt_L &lt;br &#x2F;&gt;<br>keycode 19 &#x3D; Pause &lt;br &#x2F;&gt;<br>keycode 20 &#x3D; Caps_Lock &lt;br &#x2F;&gt;<br>keycode 21 &#x3D; &lt;br &#x2F;&gt;<br>keycode 22 &#x3D; &lt;br &#x2F;&gt;<br>keycode 23 &#x3D; &lt;br &#x2F;&gt;<br>keycode 24 &#x3D; &lt;br &#x2F;&gt;<br>keycode 25 &#x3D; &lt;br &#x2F;&gt;<br>keycode 26 &#x3D; &lt;br &#x2F;&gt;<br>keycode 27 &#x3D; Escape Escape &lt;br &#x2F;&gt;<br>keycode 28 &#x3D; &lt;br &#x2F;&gt;<br>keycode 29 &#x3D; &lt;br &#x2F;&gt;<br>keycode 30 &#x3D; &lt;br &#x2F;&gt;<br>keycode 31 &#x3D; &lt;br &#x2F;&gt;<br>keycode 32 &#x3D; space space &lt;br &#x2F;&gt;<br>keycode 33 &#x3D; Prior &lt;br &#x2F;&gt;<br>keycode 34 &#x3D; Next &lt;br &#x2F;&gt;<br>keycode 35 &#x3D; End &lt;br &#x2F;&gt;<br>keycode 36 &#x3D; Home &lt;br &#x2F;&gt;<br>keycode 37 &#x3D; Left &lt;br &#x2F;&gt;<br>keycode 38 &#x3D; Up &lt;br &#x2F;&gt;<br>keycode 39 &#x3D; Right &lt;br &#x2F;&gt;<br>keycode 40 &#x3D; Down &lt;br &#x2F;&gt;<br>keycode 41 &#x3D; Select &lt;br &#x2F;&gt;<br>keycode 42 &#x3D; Print &lt;br &#x2F;&gt;<br>keycode 43 &#x3D; Execute &lt;br &#x2F;&gt;<br>keycode 44 &#x3D; &lt;br &#x2F;&gt;<br>keycode 45 &#x3D; Insert &lt;br &#x2F;&gt;<br>keycode 46 &#x3D; Delete &lt;br &#x2F;&gt;<br>keycode 47 &#x3D; Help &lt;br &#x2F;&gt;<br>keycode 48 &#x3D; 0 equal braceright &lt;br &#x2F;&gt;<br>keycode 49 &#x3D; 1 exclam onesuperior &lt;br &#x2F;&gt;<br>keycode 50 &#x3D; 2 quotedbl twosuperior &lt;br &#x2F;&gt;<br>keycode 51 &#x3D; 3 section threesuperior &lt;br &#x2F;&gt;<br>keycode 52 &#x3D; 4 dollar &lt;br &#x2F;&gt;<br>keycode 53 &#x3D; 5 percent &lt;br &#x2F;&gt;<br>keycode 54 &#x3D; 6 ampersand &lt;br &#x2F;&gt;<br>keycode 55 &#x3D; 7 slash braceleft &lt;br &#x2F;&gt;<br>keycode 56 &#x3D; 8 parenleft bracketleft &lt;br &#x2F;&gt;<br>keycode 57 &#x3D; 9 parenright bracketright &lt;br &#x2F;&gt;<br>keycode 58 &#x3D; &lt;br &#x2F;&gt;<br>keycode 59 &#x3D; &lt;br &#x2F;&gt;<br>keycode 60 &#x3D; &lt;br &#x2F;&gt;<br>keycode 61 &#x3D; &lt;br &#x2F;&gt;<br>keycode 62 &#x3D; &lt;br &#x2F;&gt;<br>keycode 63 &#x3D; &lt;br &#x2F;&gt;<br>keycode 64 &#x3D; &lt;br &#x2F;&gt;<br>keycode 65 &#x3D; a A &lt;br &#x2F;&gt;<br>keycode 66 &#x3D; b B &lt;br &#x2F;&gt;<br>keycode 67 &#x3D; c C &lt;br &#x2F;&gt;<br>keycode 68 &#x3D; d D &lt;br &#x2F;&gt;<br>keycode 69 &#x3D; e E EuroSign &lt;br &#x2F;&gt;<br>keycode 70 &#x3D; f F &lt;br &#x2F;&gt;<br>keycode 71 &#x3D; g G &lt;br &#x2F;&gt;<br>keycode 72 &#x3D; h H &lt;br &#x2F;&gt;<br>keycode 73 &#x3D; i I &lt;br &#x2F;&gt;<br>keycode 74 &#x3D; j J &lt;br &#x2F;&gt;<br>keycode 75 &#x3D; k K &lt;br &#x2F;&gt;<br>keycode 76 &#x3D; l L &lt;br &#x2F;&gt;<br>keycode 77 &#x3D; m M mu &lt;br &#x2F;&gt;<br>keycode 78 &#x3D; n N &lt;br &#x2F;&gt;<br>keycode 79 &#x3D; o O &lt;br &#x2F;&gt;<br>keycode 80 &#x3D; p P &lt;br &#x2F;&gt;<br>keycode 81 &#x3D; q Q at &lt;br &#x2F;&gt;<br>keycode 82 &#x3D; r R &lt;br &#x2F;&gt;<br>keycode 83 &#x3D; s S &lt;br &#x2F;&gt;<br>keycode 84 &#x3D; t T &lt;br &#x2F;&gt;<br>keycode 85 &#x3D; u U &lt;br &#x2F;&gt;<br>keycode 86 &#x3D; v V &lt;br &#x2F;&gt;<br>keycode 87 &#x3D; w W &lt;br &#x2F;&gt;<br>keycode 88 &#x3D; x X &lt;br &#x2F;&gt;<br>keycode 89 &#x3D; y Y &lt;br &#x2F;&gt;<br>keycode 90 &#x3D; z Z &lt;br &#x2F;&gt;<br>keycode 91 &#x3D; &lt;br &#x2F;&gt;<br>keycode 92 &#x3D; &lt;br &#x2F;&gt;<br>keycode 93 &#x3D; &lt;br &#x2F;&gt;<br>keycode 94 &#x3D; &lt;br &#x2F;&gt;<br>keycode 95 &#x3D; &lt;br &#x2F;&gt;<br>keycode 96 &#x3D; KP_0 KP_0 &lt;br &#x2F;&gt;<br>keycode 97 &#x3D; KP_1 KP_1 &lt;br &#x2F;&gt;<br>keycode 98 &#x3D; KP_2 KP_2 &lt;br &#x2F;&gt;<br>keycode 99 &#x3D; KP_3 KP_3 &lt;br &#x2F;&gt;<br>keycode 100 &#x3D; KP_4 KP_4 &lt;br &#x2F;&gt;<br>keycode 101 &#x3D; KP_5 KP_5 &lt;br &#x2F;&gt;<br>keycode 102 &#x3D; KP_6 KP_6 &lt;br &#x2F;&gt;<br>keycode 103 &#x3D; KP_7 KP_7 &lt;br &#x2F;&gt;<br>keycode 104 &#x3D; KP_8 KP_8 &lt;br &#x2F;&gt;<br>keycode 105 &#x3D; KP_9 KP_9 &lt;br &#x2F;&gt;<br>keycode 106 &#x3D; KP_Multiply KP_Multiply &lt;br &#x2F;&gt;<br>keycode 107 &#x3D; KP_Add KP_Add &lt;br &#x2F;&gt;<br>keycode 108 &#x3D; KP_Separator KP_Separator &lt;br &#x2F;&gt;<br>keycode 109 &#x3D; KP_Subtract KP_Subtract &lt;br &#x2F;&gt;<br>keycode 110 &#x3D; KP_Decimal KP_Decimal &lt;br &#x2F;&gt;<br>keycode 111 &#x3D; KP_Divide KP_Divide &lt;br &#x2F;&gt;<br>keycode 112 &#x3D; F1 &lt;br &#x2F;&gt;<br>keycode 113 &#x3D; F2 &lt;br &#x2F;&gt;<br>keycode 114 &#x3D; F3 &lt;br &#x2F;&gt;<br>keycode 115 &#x3D; F4 &lt;br &#x2F;&gt;<br>keycode 116 &#x3D; F5 &lt;br &#x2F;&gt;<br>keycode 117 &#x3D; F6 &lt;br &#x2F;&gt;<br>keycode 118 &#x3D; F7 &lt;br &#x2F;&gt;<br>keycode 119 &#x3D; F8 &lt;br &#x2F;&gt;<br>keycode 120 &#x3D; F9 &lt;br &#x2F;&gt;<br>keycode 121 &#x3D; F10 &lt;br &#x2F;&gt;<br>keycode 122 &#x3D; F11 &lt;br &#x2F;&gt;<br>keycode 123 &#x3D; F12 &lt;br &#x2F;&gt;<br>keycode 124 &#x3D; F13 &lt;br &#x2F;&gt;<br>keycode 125 &#x3D; F14 &lt;br &#x2F;&gt;<br>keycode 126 &#x3D; F15 &lt;br &#x2F;&gt;<br>keycode 127 &#x3D; F16 &lt;br &#x2F;&gt;<br>keycode 128 &#x3D; F17 &lt;br &#x2F;&gt;<br>keycode 129 &#x3D; F18 &lt;br &#x2F;&gt;<br>keycode 130 &#x3D; F19 &lt;br &#x2F;&gt;<br>keycode 131 &#x3D; F20 &lt;br &#x2F;&gt;<br>keycode 132 &#x3D; F21 &lt;br &#x2F;&gt;<br>keycode 133 &#x3D; F22 &lt;br &#x2F;&gt;<br>keycode 134 &#x3D; F23 &lt;br &#x2F;&gt;<br>keycode 135 &#x3D; F24 &lt;br &#x2F;&gt;<br>keycode 136 &#x3D; Num_Lock &lt;br &#x2F;&gt;<br>keycode 137 &#x3D; Scroll_Lock &lt;br &#x2F;&gt;<br>keycode 138 &#x3D; &lt;br &#x2F;&gt;<br>keycode 139 &#x3D; &lt;br &#x2F;&gt;<br>keycode 140 &#x3D; &lt;br &#x2F;&gt;<br>keycode 141 &#x3D; &lt;br &#x2F;&gt;<br>keycode 142 &#x3D; &lt;br &#x2F;&gt;<br>keycode 143 &#x3D; &lt;br &#x2F;&gt;<br>keycode 144 &#x3D; &lt;br &#x2F;&gt;<br>keycode 145 &#x3D; &lt;br &#x2F;&gt;<br>keycode 146 &#x3D; &lt;br &#x2F;&gt;<br>keycode 147 &#x3D; &lt;br &#x2F;&gt;<br>keycode 148 &#x3D; &lt;br &#x2F;&gt;<br>keycode 149 &#x3D; &lt;br &#x2F;&gt;<br>keycode 150 &#x3D; &lt;br &#x2F;&gt;<br>keycode 151 &#x3D; &lt;br &#x2F;&gt;<br>keycode 152 &#x3D; &lt;br &#x2F;&gt;<br>keycode 153 &#x3D; &lt;br &#x2F;&gt;<br>keycode 154 &#x3D; &lt;br &#x2F;&gt;<br>keycode 155 &#x3D; &lt;br &#x2F;&gt;<br>keycode 156 &#x3D; &lt;br &#x2F;&gt;<br>keycode 157 &#x3D; &lt;br &#x2F;&gt;<br>keycode 158 &#x3D; &lt;br &#x2F;&gt;<br>keycode 159 &#x3D; &lt;br &#x2F;&gt;<br>keycode 160 &#x3D; &lt;br &#x2F;&gt;<br>keycode 161 &#x3D; &lt;br &#x2F;&gt;<br>keycode 162 &#x3D; &lt;br &#x2F;&gt;<br>keycode 163 &#x3D; &lt;br &#x2F;&gt;<br>keycode 164 &#x3D; &lt;br &#x2F;&gt;<br>keycode 165 &#x3D; &lt;br &#x2F;&gt;<br>keycode 166 &#x3D; &lt;br &#x2F;&gt;<br>keycode 167 &#x3D; &lt;br &#x2F;&gt;<br>keycode 168 &#x3D; &lt;br &#x2F;&gt;<br>keycode 169 &#x3D; &lt;br &#x2F;&gt;<br>keycode 170 &#x3D; &lt;br &#x2F;&gt;<br>keycode 171 &#x3D; &lt;br &#x2F;&gt;<br>keycode 172 &#x3D; &lt;br &#x2F;&gt;<br>keycode 173 &#x3D; &lt;br &#x2F;&gt;<br>keycode 174 &#x3D; &lt;br &#x2F;&gt;<br>keycode 175 &#x3D; &lt;br &#x2F;&gt;<br>keycode 176 &#x3D; &lt;br &#x2F;&gt;<br>keycode 177 &#x3D; &lt;br &#x2F;&gt;<br>keycode 178 &#x3D; &lt;br &#x2F;&gt;<br>keycode 179 &#x3D; &lt;br &#x2F;&gt;<br>keycode 180 &#x3D; &lt;br &#x2F;&gt;<br>keycode 181 &#x3D; &lt;br &#x2F;&gt;<br>keycode 182 &#x3D; &lt;br &#x2F;&gt;<br>keycode 183 &#x3D; &lt;br &#x2F;&gt;<br>keycode 184 &#x3D; &lt;br &#x2F;&gt;<br>keycode 185 &#x3D; &lt;br &#x2F;&gt;<br>keycode 186 &#x3D; &lt;br &#x2F;&gt;<br>keycode 187 &#x3D; acute grave &lt;br &#x2F;&gt;<br>keycode 188 &#x3D; comma semicolon &lt;br &#x2F;&gt;<br>keycode 189 &#x3D; minus underscore &lt;br &#x2F;&gt;<br>keycode 190 &#x3D; period colon &lt;br &#x2F;&gt;<br>keycode 191 &#x3D; &lt;br &#x2F;&gt;<br>keycode 192 &#x3D; numbersign apostrophe &lt;br &#x2F;&gt;<br>keycode 193 &#x3D; &lt;br &#x2F;&gt;<br>keycode 194 &#x3D; &lt;br &#x2F;&gt;<br>keycode 195 &#x3D; &lt;br &#x2F;&gt;<br>keycode 196 &#x3D; &lt;br &#x2F;&gt;<br>keycode 197 &#x3D; &lt;br &#x2F;&gt;<br>keycode 198 &#x3D; &lt;br &#x2F;&gt;<br>keycode 199 &#x3D; &lt;br &#x2F;&gt;<br>keycode 200 &#x3D; &lt;br &#x2F;&gt;<br>keycode 201 &#x3D; &lt;br &#x2F;&gt;<br>keycode 202 &#x3D; &lt;br &#x2F;&gt;<br>keycode 203 &#x3D; &lt;br &#x2F;&gt;<br>keycode 204 &#x3D; &lt;br &#x2F;&gt;<br>keycode 205 &#x3D; &lt;br &#x2F;&gt;<br>keycode 206 &#x3D; &lt;br &#x2F;&gt;<br>keycode 207 &#x3D; &lt;br &#x2F;&gt;<br>keycode 208 &#x3D; &lt;br &#x2F;&gt;<br>keycode 209 &#x3D; &lt;br &#x2F;&gt;<br>keycode 210 &#x3D; plusminus hyphen macron &lt;br &#x2F;&gt;<br>keycode 211 &#x3D; &lt;br &#x2F;&gt;<br>keycode 212 &#x3D; copyright registered &lt;br &#x2F;&gt;<br>keycode 213 &#x3D; guillemotleft guillemotright &lt;br &#x2F;&gt;<br>keycode 214 &#x3D; masculine ordfeminine &lt;br &#x2F;&gt;<br>keycode 215 &#x3D; ae AE &lt;br &#x2F;&gt;<br>keycode 216 &#x3D; cent yen &lt;br &#x2F;&gt;<br>keycode 217 &#x3D; questiondown exclamdown &lt;br &#x2F;&gt;<br>keycode 218 &#x3D; onequarter onehalf threequarters &lt;br &#x2F;&gt;<br>keycode 219 &#x3D; &lt;br &#x2F;&gt;<br>keycode 220 &#x3D; less greater bar &lt;br &#x2F;&gt;<br>keycode 221 &#x3D; plus asterisk asciitilde &lt;br &#x2F;&gt;<br>keycode 222 &#x3D; &lt;br &#x2F;&gt;<br>keycode 223 &#x3D; &lt;br &#x2F;&gt;<br>keycode 224 &#x3D; &lt;br &#x2F;&gt;<br>keycode 225 &#x3D; &lt;br &#x2F;&gt;<br>keycode 226 &#x3D; &lt;br &#x2F;&gt;<br>keycode 227 &#x3D; multiply division &lt;br &#x2F;&gt;<br>keycode 228 &#x3D; acircumflex Acircumflex &lt;br &#x2F;&gt;<br>keycode 229 &#x3D; ecircumflex Ecircumflex &lt;br &#x2F;&gt;<br>keycode 230 &#x3D; icircumflex Icircumflex &lt;br &#x2F;&gt;<br>keycode 231 &#x3D; ocircumflex Ocircumflex &lt;br &#x2F;&gt;<br>keycode 232 &#x3D; ucircumflex Ucircumflex &lt;br &#x2F;&gt;<br>keycode 233 &#x3D; ntilde Ntilde &lt;br &#x2F;&gt;<br>keycode 234 &#x3D; yacute Yacute &lt;br &#x2F;&gt;<br>keycode 235 &#x3D; oslash Ooblique &lt;br &#x2F;&gt;<br>keycode 236 &#x3D; aring Aring &lt;br &#x2F;&gt;<br>keycode 237 &#x3D; ccedilla Ccedilla &lt;br &#x2F;&gt;<br>keycode 238 &#x3D; thorn THORN &lt;br &#x2F;&gt;<br>keycode 239 &#x3D; eth ETH &lt;br &#x2F;&gt;<br>keycode 240 &#x3D; diaeresis cedilla currency &lt;br &#x2F;&gt;<br>keycode 241 &#x3D; agrave Agrave atilde Atilde &lt;br &#x2F;&gt;<br>keycode 242 &#x3D; egrave Egrave &lt;br &#x2F;&gt;<br>keycode 243 &#x3D; igrave Igrave &lt;br &#x2F;&gt;<br>keycode 244 &#x3D; ograve Ograve otilde Otilde &lt;br &#x2F;&gt;<br>keycode 245 &#x3D; ugrave Ugrave &lt;br &#x2F;&gt;<br>keycode 246 &#x3D; adiaeresis Adiaeresis &lt;br &#x2F;&gt;<br>keycode 247 &#x3D; ediaeresis Ediaeresis &lt;br &#x2F;&gt;<br>keycode 248 &#x3D; idiaeresis Idiaeresis &lt;br &#x2F;&gt;<br>keycode 249 &#x3D; odiaeresis Odiaeresis &lt;br &#x2F;&gt;<br>keycode 250 &#x3D; udiaeresis Udiaeresis &lt;br &#x2F;&gt;<br>keycode 251 &#x3D; ssharp question backslash &lt;br &#x2F;&gt;<br>keycode 252 &#x3D; asciicircum degree &lt;br &#x2F;&gt;<br>keycode 253 &#x3D; 3 sterling &lt;br &#x2F;&gt;<br>keycode 254 &#x3D; Mode_switch&lt;br &#x2F;&gt;</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
